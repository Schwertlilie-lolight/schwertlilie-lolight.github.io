<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wafer&#39;s Note</title>
  
  <subtitle>Kancolle is life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wafer.li/"/>
  <updated>2018-01-22T13:55:23.000Z</updated>
  <id>https://wafer.li/</id>
  
  <author>
    <name>Wafer Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPG + Yubikey 4 折腾手记</title>
    <link href="https://wafer.li//GPG/GPG%20+%20Yubikey%204%20%E6%8A%98%E8%85%BE%E6%89%8B%E8%AE%B0/"/>
    <id>https://wafer.li//GPG/GPG + Yubikey 4 折腾手记/</id>
    <published>2018-01-21T16:30:00.000Z</published>
    <updated>2018-01-22T13:55:23.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;GPG 相信很多人都折腾过，Yubikey 也有很多人买过；&lt;/p&gt;&lt;p&gt;但是好像只有老外折腾过 Yubikey + GPG 的；&lt;/p&gt;&lt;p&gt;最近刚折腾完毕，因为自己不慎还把一个老钥匙搞丢了，现在只能随它去了；&lt;/p&gt;&lt;p&gt;这里就写写我折腾过程中遇到的坑，前车之鉴，后事之师。&lt;/p&gt;
    
    </summary>
    
      <category term="GPG" scheme="https://wafer.li/categories/GPG/"/>
    
    
      <category term="GPG" scheme="https://wafer.li/tags/GPG/"/>
    
      <category term="Yubikey" scheme="https://wafer.li/tags/Yubikey/"/>
    
  </entry>
  
  <entry>
    <title>解决脚注中数学公式不能渲染的问题</title>
    <link href="https://wafer.li//%E8%A7%A3%E5%86%B3%E8%84%9A%E6%B3%A8%E4%B8%AD%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%83%BD%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://wafer.li//解决脚注中数学公式不能渲染的问题/</id>
    <published>2018-01-16T08:39:00.000Z</published>
    <updated>2018-01-16T15:53:20.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近，鉴于性能考量，我从 MathJax 迁移到了 Katex，但是随之而来出现了一个问题，就是脚注里面的数学公式没办法渲染出来。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Katex" scheme="https://wafer.li/tags/Katex/"/>
    
  </entry>
  
  <entry>
    <title>解决 Travis CI 总是更新旧博客的问题</title>
    <link href="https://wafer.li//Hexo/%E8%A7%A3%E5%86%B3%20Travis%20CI%20%E6%80%BB%E6%98%AF%E6%9B%B4%E6%96%B0%E6%97%A7%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://wafer.li//Hexo/解决 Travis CI 总是更新旧博客的问题/</id>
    <published>2018-01-12T07:45:00.000Z</published>
    <updated>2018-01-13T04:02:33.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文着重介绍一下如何解决 Travis CI 在进行自动集成的时候，总是会更新旧博客的问题。&lt;/p&gt;&lt;p&gt;之前有想过要把这篇文章合并到上一篇里面，不过这个问题比较隐蔽，而且较难解决，最后还是新开一篇文章来详细讲一下该怎么做，防止以后有人再被这个问题困扰。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Trivas CI" scheme="https://wafer.li/tags/Trivas-CI/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 集成 Travis CI 自动部署博文</title>
    <link href="https://wafer.li//Hexo/Hexo%20%E9%9B%86%E6%88%90%20Travis%20CI%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E6%96%87/"/>
    <id>https://wafer.li//Hexo/Hexo 集成 Travis CI 自动部署博文/</id>
    <published>2018-01-11T12:37:00.000Z</published>
    <updated>2018-01-12T19:05:33.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这个想法是我在折腾 Hexo Next 6.0 的时候发现的，有位仁兄在 Next 的新 repo 问如何处理 CI 问题，受到他的启发，我就开始折腾使用 Travis CI 进行博客的自动部署了。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Trivas CI" scheme="https://wafer.li/tags/Trivas-CI/"/>
    
  </entry>
  
  <entry>
    <title>Solidity 基础知识和概述</title>
    <link href="https://wafer.li//Solidity/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E6%A6%82%E8%BF%B0/"/>
    <id>https://wafer.li//Solidity/基础知识和概述/</id>
    <published>2018-01-09T06:09:00.000Z</published>
    <updated>2018-01-10T05:41:08.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Solidity 是运行于以太坊(Ethereum) 区块链上的智能合约语言，它是图灵完备的，意味着可以用它写一些任意复杂度的程序并运行于区块链中。&lt;/p&gt;
    
    </summary>
    
      <category term="Solidity" scheme="https://wafer.li/categories/Solidity/"/>
    
    
      <category term="Solidity" scheme="https://wafer.li/tags/Solidity/"/>
    
      <category term="Ethereum" scheme="https://wafer.li/tags/Ethereum/"/>
    
  </entry>
  
  <entry>
    <title>近月少女的礼仪 2.1 感想</title>
    <link href="https://wafer.li//Talk/%E8%BF%91%E6%9C%88%E5%B0%91%E5%A5%B3%E7%9A%84%E7%A4%BC%E4%BB%AA%202.1%20%E6%84%9F%E6%83%B3/"/>
    <id>https://wafer.li//Talk/近月少女的礼仪 2.1 感想/</id>
    <published>2017-06-03T17:22:00.000Z</published>
    <updated>2017-06-03T18:30:11.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近这部 FD 发售之后就忍不住玩了一下；&lt;/p&gt;&lt;p&gt;会结合本篇《近月少女的礼仪 2》(月に寄りそう乙女の作法２)　来谈一谈感想；&lt;/p&gt;&lt;p&gt;内有剧透，慎点&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://wafer.li/categories/Talk/"/>
    
    
      <category term="杂谈" scheme="https://wafer.li/tags/Talk/"/>
    
      <category term="Galgame" scheme="https://wafer.li/tags/Galgame/"/>
    
      <category term="月に寄りそう乙女の作法" scheme="https://wafer.li/tags/%E6%9C%88%E3%81%AB%E5%AF%84%E3%82%8A%E3%81%9D%E3%81%86%E4%B9%99%E5%A5%B3%E3%81%AE%E4%BD%9C%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>再谈单例模式</title>
    <link href="https://wafer.li//DesignPattern/%E5%86%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wafer.li//DesignPattern/再谈单例模式/</id>
    <published>2017-05-25T02:58:00.000Z</published>
    <updated>2017-05-26T17:55:32.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前提到枚举实现是单例的最佳实现，这毋庸置疑；&lt;/p&gt;&lt;p&gt;不过，对比枚举和静态内部类，好像它们的区别就在于防止了反射攻击；&lt;/p&gt;&lt;p&gt;那么，都『攻击』了，为啥偏偏没事去改你的单例呢？直接获取更有意思的信息不是更好吗？&lt;/p&gt;
    
    </summary>
    
      <category term="DesignPattern" scheme="https://wafer.li/categories/DesignPattern/"/>
    
    
      <category term="DesignPattern" scheme="https://wafer.li/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2 + Rxjava2</title>
    <link href="https://wafer.li//Android/Retrofit/Retrofit2%20+%20Rxjava2/"/>
    <id>https://wafer.li//Android/Retrofit/Retrofit2 + Rxjava2/</id>
    <published>2017-05-01T20:49:00.000Z</published>
    <updated>2017-05-01T23:25:44.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Retrofit 和 Rxjava 结合应该算得上是 Rxjava 在 Android 应用得最广泛的一个方面了。&lt;/p&gt;&lt;p&gt;这里就来讲讲关于这两个库具体组合的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://wafer.li/categories/Android/"/>
    
      <category term="Retrofit" scheme="https://wafer.li/categories/Android/Retrofit/"/>
    
    
      <category term="Android" scheme="https://wafer.li/tags/Android/"/>
    
      <category term="Rxjava2" scheme="https://wafer.li/tags/Rxjava2/"/>
    
      <category term="Retrofit" scheme="https://wafer.li/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 坑点详解</title>
    <link href="https://wafer.li//Rxjava/Rxjava2%20%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wafer.li//Rxjava/Rxjava2 坑点详解/</id>
    <published>2017-05-01T19:03:00.000Z</published>
    <updated>2017-05-01T23:30:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Rxjava，是一个响应式的(Reactive)，基于观察者模式的异步框架。&lt;/p&gt;&lt;p&gt;除此之外，还有其他的 RxScala 和 RxSwift 等。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;说起来现在已经 2017 年了，应该没有什么 Java 工程师不知道什么是 Rxjava 了吧&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Rxjava" scheme="https://wafer.li/categories/Rxjava/"/>
    
    
      <category term="Rxjava2" scheme="https://wafer.li/tags/Rxjava2/"/>
    
      <category term="Rxjava" scheme="https://wafer.li/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Scoping 函数</title>
    <link href="https://wafer.li//Kotlin/Kotlin%20Scoping%20%E5%87%BD%E6%95%B0/"/>
    <id>https://wafer.li//Kotlin/Kotlin Scoping 函数/</id>
    <published>2017-04-22T12:02:00.000Z</published>
    <updated>2017-04-22T16:41:32.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 Kotlin 的 &lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Standard.kt&lt;/a&gt; 中提供了一些特殊的高阶函数；&lt;/p&gt;&lt;p&gt;它们被称作 &lt;strong&gt;Scoping 函数&lt;/strong&gt;，此类函数通过使用一个函数 &lt;code&gt;block&lt;/code&gt;，将你需要对某对象进行的一系列操作限制在 lambda 作用域内；&lt;/p&gt;&lt;p&gt;这样，对于该对象操作的代码就不会泄露到外层作用域，使得代码更为干净整洁。&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DbConnection.getConnection().let &amp;#123; connection -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// connection is no longer visible here&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到，对于 &lt;code&gt;connection&lt;/code&gt; 的操作就仅局限于 &lt;code&gt;let&lt;/code&gt; 的 lambda 区域，而在 lambda 区域外是不可见的；&lt;/p&gt;&lt;p&gt;这就可以保证对 &lt;code&gt;connection&lt;/code&gt; 的操作，不会影响到接下来的作用域。&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="https://wafer.li/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://wafer.li/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Scala for-comprehension</title>
    <link href="https://wafer.li//Scala/Scala%20for-comprehension/"/>
    <id>https://wafer.li//Scala/Scala for-comprehension/</id>
    <published>2017-04-22T05:21:00.000Z</published>
    <updated>2017-04-22T08:08:51.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Scala 作为函数式语言，提供了很多用于高阶函数来解决一类范式问题；&lt;/p&gt;&lt;p&gt;但是，使用过多的高阶函数就会让代码的可读性变差；&lt;/p&gt;&lt;p&gt;所以，对此 Scala 提供了一种类 Python 的简便的语法糖，用来解决代码的可读性问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala List 高阶函数</title>
    <link href="https://wafer.li//Scala/Scala%20List%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://wafer.li//Scala/Scala List 高阶函数/</id>
    <published>2017-04-20T18:20:00.000Z</published>
    <updated>2017-04-22T18:21:13.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;高阶函数是函数式编程的一个很大的特性；&lt;/p&gt;&lt;p&gt;同时，其中集合类的高阶函数在日常的开发和使用中，占了一个很重要的位置；&lt;/p&gt;&lt;p&gt;但是，这些函数有可能会在刚接触的时候搞不懂它们的具体作用；&lt;/p&gt;&lt;p&gt;那么今天就以 &lt;code&gt;List&lt;/code&gt; 来说一说常用的高阶函数具体的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>ofo 使用体验</title>
    <link href="https://wafer.li//Talk/ofo%20%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>https://wafer.li//Talk/ofo 使用体验/</id>
    <published>2017-04-18T13:10:00.000Z</published>
    <updated>2017-04-18T13:34:15.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近因为和舍友出去看电影，终于第一次体验了一下著名的小黄车 ofo；&lt;/p&gt;&lt;p&gt;ofo 的确是很方便，同时也解决了所谓「最后一公里」的这个需求痛点；&lt;/p&gt;&lt;p&gt;但是，我不得不说，ofo 的运营团队还很年轻，一些很基本的流程问题都没搞清楚就胡乱上线功能。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://wafer.li/categories/Talk/"/>
    
    
      <category term="ofo" scheme="https://wafer.li/tags/ofo/"/>
    
      <category term="杂谈" scheme="https://wafer.li/tags/Talk/"/>
    
  </entry>
  
  <entry>
    <title>Coursera 作业之函数集合</title>
    <link href="https://wafer.li//Coursera/Scala/Coursera%20%E4%BD%9C%E4%B8%9A%E4%B9%8B%E5%87%BD%E6%95%B0%E9%9B%86%E5%90%88/"/>
    <id>https://wafer.li//Coursera/Scala/Coursera 作业之函数集合/</id>
    <published>2017-04-16T17:41:00.000Z</published>
    <updated>2017-04-18T16:32:07.000Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文源码：&lt;br&gt;&lt;a href=&quot;https://github.com/wafer-li/scala-coursera/tree/master/funsets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wafer-li/scala-coursera/tree/master/funsets&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;1-背景知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-背景知识&quot;&gt;&lt;/a&gt; 1. 背景知识&lt;/h2&gt;&lt;p&gt;该作业是实现一个函数集合的相关内容。&lt;/p&gt;&lt;p&gt;何为函数集合？&lt;/p&gt;&lt;p&gt;一般来说，编程语言中的集合(Collection)都是有限集合；&lt;/p&gt;&lt;p&gt;但是，在数学上，还有很多的集合是无限集合，比如说 &lt;strong&gt;负数集&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt;我们有没有一种办法去表示这个集合呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Coursera" scheme="https://wafer.li/categories/Coursera/"/>
    
      <category term="Scala" scheme="https://wafer.li/categories/Coursera/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
      <category term="Coursera" scheme="https://wafer.li/tags/Coursera/"/>
    
  </entry>
  
  <entry>
    <title>Scala 模式匹配</title>
    <link href="https://wafer.li//Scala/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>https://wafer.li//Scala/Scala 模式匹配/</id>
    <published>2017-04-15T18:07:00.000Z</published>
    <updated>2017-04-18T16:32:07.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;模式匹配，是 Scala 相比 Java 在类型上的一个很好地改进；&lt;/p&gt;&lt;p&gt;通过引入模式匹配，消除了 Java 中常见的类型检测和强制转换(cast)；&lt;/p&gt;&lt;p&gt;拥有更高的安全性&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>打字训练网站</title>
    <link href="https://wafer.li//Talk/%E6%89%93%E5%AD%97%E8%AE%AD%E7%BB%83%E7%BD%91%E7%AB%99/"/>
    <id>https://wafer.li//Talk/打字训练网站/</id>
    <published>2017-04-15T04:37:00.000Z</published>
    <updated>2017-04-15T14:32:18.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;买了新键盘之后就想试一试它的威力，所以就找了一个打字训练网站来打字；&lt;/p&gt;&lt;p&gt;在知乎上找了一圈，结果就找到了 &lt;a href=&quot;http://www.keybr.com/practice&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="杂谈" scheme="https://wafer.li/categories/Talk/"/>
    
    
      <category term="杂谈" scheme="https://wafer.li/tags/Talk/"/>
    
      <category term="打字" scheme="https://wafer.li/tags/Typing/"/>
    
      <category term="Typing training" scheme="https://wafer.li/tags/Typing-training/"/>
    
  </entry>
  
  <entry>
    <title>Realforce 87u</title>
    <link href="https://wafer.li//Buying/Realforce%2087u/"/>
    <id>https://wafer.li//Buying/Realforce 87u/</id>
    <published>2017-04-11T04:28:00.000Z</published>
    <updated>2018-01-08T05:35:57.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近终于下定决心来买这个键盘了。&lt;/p&gt;&lt;p&gt;主要说说使用感受吧&lt;/p&gt;&lt;p&gt;2018/1/8 更新部分内容&lt;/p&gt;
    
    </summary>
    
      <category term="买买买" scheme="https://wafer.li/categories/Buying/"/>
    
    
      <category term="买买买" scheme="https://wafer.li/tags/Buying/"/>
    
      <category term="键盘" scheme="https://wafer.li/tags/Keyboard/"/>
    
      <category term="Realforce" scheme="https://wafer.li/tags/Realforce/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Experience</title>
    <link href="https://wafer.li//Hexo/Hexo%20Experience/"/>
    <id>https://wafer.li//Hexo/Hexo Experience/</id>
    <published>2017-04-08T16:56:00.000Z</published>
    <updated>2017-04-09T05:57:11.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h2&gt;&lt;p&gt;这是我折腾 Hexo 博客框架的经验；&lt;/p&gt;&lt;p&gt;希望能给后来者以启迪。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://wafer.li/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Scala 泛型和变形</title>
    <link href="https://wafer.li//Scala/Scala%20%E6%B3%9B%E5%9E%8B%E5%92%8C%E5%8F%98%E5%BD%A2/"/>
    <id>https://wafer.li//Scala/Scala 泛型和变形/</id>
    <published>2017-04-07T15:00:00.000Z</published>
    <updated>2017-04-18T16:32:07.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;泛型是多态的一个重要组成部分，通过运行时确定的类型来加载对应的类代码；&lt;/p&gt;&lt;p&gt;作为一个面向对象语言，Scala 同样具有泛型功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架</title>
    <link href="https://wafer.li//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://wafer.li//Java/Java 集合框架/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-介绍&quot;&gt;&lt;/a&gt; 1. 介绍&lt;/h2&gt;&lt;p&gt;任何语言都会提供一套基础的数据结构的库；&lt;/p&gt;&lt;p&gt;Java 也不例外，而且提供了一个庞大的数据结构库，有时对于它们之间的选择让人很困惑。&lt;/p&gt;&lt;p&gt;这里就来简单说明一下 Java 的 Collection 和基本的 Collection 数据结构&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://wafer.li/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wafer.li/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Scala 类和对象基础</title>
    <link href="https://wafer.li//Scala/Scala%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <id>https://wafer.li//Scala/Scala 类和对象基础/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h2&gt;&lt;p&gt;Scala 除了是一门函数式语言外，还同时具有面向对象的特征；&lt;/p&gt;&lt;p&gt;在 Scala 中，一样具有类和对象以及多态的支持。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala Hello World</title>
    <link href="https://wafer.li//Scala/Scala%20Hello%20World/"/>
    <id>https://wafer.li//Scala/Scala Hello World/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-08T13:58:25.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h2&gt;&lt;p&gt;Scala 既可以使用交互式命令行来编程，也可以将其写成一个独立的程序；&lt;/p&gt;&lt;p&gt;其中，关于构建独立程序的写法一共有两种。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架 Collection</title>
    <link href="https://wafer.li//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%20Collection/"/>
    <id>https://wafer.li//Java/Java 集合框架 Collection/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt; 接口是 Java 集合框架最基本的接口；&lt;/p&gt;&lt;p&gt;它提供了基本的元素操作方法和遍历使用的迭代器；&lt;/p&gt;&lt;p&gt;同时，它还提供了关于 &lt;code&gt;Collection&lt;/code&gt; 的批量操作方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://wafer.li/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wafer.li/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Scala 简介</title>
    <link href="https://wafer.li//Scala/Scala%20%E7%AE%80%E4%BB%8B/"/>
    <id>https://wafer.li//Scala/Scala 简介/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;Scala 是高层级的，函数式，基于 JVM，完美调用 Java 的编程语言。&lt;br&gt;其主要特点就是它是一门函数式语言。&lt;/p&gt;&lt;p&gt;语法上，Kotlin 借鉴了其大部分的语法，所以体现出和 Kotlin 非常相似的特征。&lt;/p&gt;&lt;p&gt;同时，由于基于 JVM，所以类型系统和 Java 没有多大区别。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala 函数式特征</title>
    <link href="https://wafer.li//Scala/Scala%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%89%B9%E5%BE%81/"/>
    <id>https://wafer.li//Scala/Scala 函数式特征/</id>
    <published>2017-03-31T15:00:00.000Z</published>
    <updated>2017-04-18T16:32:07.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-函数类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-函数类型&quot;&gt;&lt;/a&gt; 1. 函数类型&lt;/h2&gt;&lt;p&gt;函数类型是函数式语言的特征之一；&lt;/p&gt;&lt;p&gt;其原因在于，函数是语言中的一等公民，可以作为变量，而变量是具有类型的。&lt;/p&gt;&lt;p&gt;Scala 的函数类型定义如下：&lt;/p&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;f: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用箭头将参数类型和返回值类型相间隔；&lt;/p&gt;&lt;p&gt;上面的例子表示函数 &lt;code&gt;f&lt;/code&gt; 接受两个 &lt;code&gt;Int&lt;/code&gt; 参数，返回值类型为 &lt;code&gt;Int&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>设计阶段</title>
    <link href="https://wafer.li//Reviews/TSPi/%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5/"/>
    <id>https://wafer.li//Reviews/TSPi/设计阶段/</id>
    <published>2017-03-26T15:00:00.000Z</published>
    <updated>2017-04-17T08:26:54.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-hld作业&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-hld作业&quot;&gt;&lt;/a&gt; 1. HLD(作业)&lt;/h2&gt;&lt;p&gt;设计阶段要完成高层设计，出 SDS，软件设计规格说明（体系结构文档）&lt;/p&gt;&lt;p&gt;包含：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;软件层次架构设计&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;功能模块设计&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;要根据需求分析书来&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据库设计&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;就是数据库设计，包括 E-R 图和数据库表设计&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;接口和界面设计&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="复习" scheme="https://wafer.li/categories/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="SPI" scheme="https://wafer.li/categories/%E5%A4%8D%E4%B9%A0/SPI/"/>
    
    
      <category term="复习" scheme="https://wafer.li/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="SPI" scheme="https://wafer.li/tags/SPI/"/>
    
      <category term="TSPI" scheme="https://wafer.li/tags/TSPI/"/>
    
  </entry>
  
  <entry>
    <title>实现阶段</title>
    <link href="https://wafer.li//Reviews/TSPi/%E5%AE%9E%E7%8E%B0%E9%98%B6%E6%AE%B5/"/>
    <id>https://wafer.li//Reviews/TSPi/实现阶段/</id>
    <published>2017-03-26T15:00:00.000Z</published>
    <updated>2017-04-17T08:26:54.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-实现标准&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-实现标准&quot;&gt;&lt;/a&gt; 1. 实现标准&lt;/h2&gt;&lt;p&gt;扩展了设计标准&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Standards Review&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;审查了世界标准&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Naming, interfae and message standards&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Coding Standards&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;blockquote&gt;&lt;p&gt;编码规范&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Size Standards&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="复习" scheme="https://wafer.li/categories/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="SPI" scheme="https://wafer.li/categories/%E5%A4%8D%E4%B9%A0/SPI/"/>
    
    
      <category term="复习" scheme="https://wafer.li/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="SPI" scheme="https://wafer.li/tags/SPI/"/>
    
      <category term="TSPI" scheme="https://wafer.li/tags/TSPI/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="https://wafer.li//DesignPattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wafer.li//DesignPattern/命令模式/</id>
    <published>2017-03-24T15:00:00.000Z</published>
    <updated>2017-04-09T04:39:49.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;命令模式将『请求』封装成对象，以便使用不同的请求，队列或者日志系统。&lt;/p&gt;&lt;p&gt;命令模式也可以支持可撤销和回滚操作。&lt;/p&gt;&lt;p&gt;命令模式通过将请求进行封装，成功地将客户和具体的低层组件进行解耦；&lt;/p&gt;&lt;p&gt;客户只需要知道要加载命令，而不需要知道如何进行命令的具体执行操作。&lt;/p&gt;
    
    </summary>
    
      <category term="DesignPattern" scheme="https://wafer.li/categories/DesignPattern/"/>
    
    
      <category term="DesignPattern" scheme="https://wafer.li/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Scala 函数解析</title>
    <link href="https://wafer.li//Scala/Scala%20%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <id>https://wafer.li//Scala/Scala 函数解析/</id>
    <published>2017-03-21T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-代换模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-代换模型&quot;&gt;&lt;/a&gt; 1. 代换模型&lt;/h2&gt;&lt;p&gt;Scala 使用代换模型对函数和表达式进行解析工作；&lt;/p&gt;&lt;p&gt;所谓的代换模型就是类似平常算术的过程；&lt;/p&gt;&lt;p&gt;从左到右地将函数和表达式一步一步转换，最终转换成值。&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 使用 Gradle</title>
    <link href="https://wafer.li//Kotlin/Kotlin%20%E4%BD%BF%E7%94%A8%20Gradle/"/>
    <id>https://wafer.li//Kotlin/Kotlin 使用 Gradle/</id>
    <published>2017-03-19T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;一般来说，IntilliJ 会自动的给我们配置 Kotlin 的 Gradle 设置；&lt;/p&gt;&lt;p&gt;但是，有时候我们也想自己进行一些自定义的 Gradle 配置；&lt;/p&gt;&lt;p&gt;下面就来总结几个常用的配置方法&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="https://wafer.li/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://wafer.li/tags/Kotlin/"/>
    
  </entry>
  
</feed>
