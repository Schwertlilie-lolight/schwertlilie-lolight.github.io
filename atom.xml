<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wafer&#39;s Note</title>
  
  <subtitle>Shenzhen is great!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wafer.li/"/>
  <updated>2019-07-11T11:43:29.000Z</updated>
  <id>https://wafer.li/</id>
  
  <author>
    <name>Wafer Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HashMap 的 loadFactor 为什么是 0.75</title>
    <link href="https://wafer.li//Interview/hashmap-%E7%9A%84-loadfactor-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-0-75/"/>
    <id>https://wafer.li//Interview/hashmap-的-loadfactor-为什么是-0-75/</id>
    <published>2019-07-11T07:46:00.000Z</published>
    <updated>2019-07-11T11:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前看各大面经的时候搜索到了这个问题，切实感觉到如果刨根问底的问，自己还真不能抵挡住这种攻势，现在闲暇时间又心血来潮地想起来这个问题，就打算好好弄懂弄透，也希望能在将来面试的时候做好准备。</p><p>本文基于<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMxNDAxODM2" title="https://stackoverflow.com/a/31401836">这个 StackOverflow 回答<i class="fa fa-external-link"></i></span>进一步推导，并给出详细解答步骤</p><a id="more"></a><h2 id="1-loadfactor-是什么"><a class="markdownIt-Anchor" href="#1-loadfactor-是什么"></a> 1. loadFactor 是什么</h2><p>loadFactor 翻译为 <strong>负载因子</strong>，是 HashMap 负载程度的一个度量，所谓负载程度即 HashMap 持有的元素数量和 HashMap 大小的比值</p><p>当 HashMap 中的元素数量大于 <code>capacity * loadFactor</code> 时，HashMap 就要扩容，并进行重新 hash</p><p>那么，我们可以得出一个重要结论，<code>loadFactor</code> 是为了让 HashMap 尽可能 <strong>不满</strong> 而存在的</p><p>众所周知，HashMap 越空越好，这样插入和查找都能尽可能接近常数级别</p><p>那么接下来的一个重要问题就是：HashMap 什么时候是空的？通过这个问题，我们就可以一步一步推导出 <code>loadFactor</code> 的值</p><h2 id="2-hashmap-什么时候不是很满"><a class="markdownIt-Anchor" href="#2-hashmap-什么时候不是很满"></a> 2. HashMap 什么时候不是很满</h2><p>我们调整 loadFactor 的根本目标在于，要让元素的插入时间缩短到最少，也就是说，<strong>元素最好不要发生碰撞</strong></p><p><strong>只要元素在插入时不发生碰撞，那么我们的 HashMap 就不算特别的满</strong></p><p>这是一个很重要的结论，通过它，我们成功地把 HashMap 满不满的问题，转换到了插入元素是否碰撞的问题</p><h2 id="3-插入元素的碰撞几率"><a class="markdownIt-Anchor" href="#3-插入元素的碰撞几率"></a> 3. 插入元素的碰撞几率</h2><p>插入元素是否碰撞，这是一个概率事件，有可能碰撞，也可能不碰撞</p><p>对于一个未知的元素，它有可能插入到 HashMap 的任何一个位置，因此，对于未知的元素插入，碰撞是<strong>等可能的</strong>，而一个元素是否碰撞和它之后的元素是否碰撞并无关系，因此是 <strong>独立的</strong></p><blockquote><p>为什么是独立的？因为 HashMap 采用拉链法解决碰撞，碰撞的元素不占用数组空间，因此一个元素是否碰撞和它前一个元素是否碰撞没有关系</p></blockquote><p>在这里，我们要引入一个假设，上面我们提到的 HashMap 不是很满，但是 loadFactor 也不应该让一个 HashMap 过于空，太空的 HashMap 会造成空间的浪费；<br>假如一个元素的插入正好导致它碰撞，那么说明这个 HashMap 肯定不是特别空旷，而且当元素插入就碰撞时，恰好说明我们需要扩大 HashMap，而不是修改元素的 <code>hash()</code> 方法</p><p>因此，我们有单个元素插入碰撞的概率为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>=</mo><mfrac><mn>1</mn><mi>s</mi></mfrac></mrow><annotation encoding="application/x-tex">p = \frac{1}{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="4-hashmap-在插入过程中不发生碰撞的概率"><a class="markdownIt-Anchor" href="#4-hashmap-在插入过程中不发生碰撞的概率"></a> 4. HashMap 在插入过程中不发生碰撞的概率</h2><p>得到单个元素插入发生碰撞的概率之后，我们来考虑整个 HashMap 在插入过程中不发生碰撞的概率</p><p>对于一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span></span></span></span> 大小的 Hashmap，我们插入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 个元素，这个操作属于等可能独立事件的<strong>重复操作</strong>，满足 <strong>二项分布</strong>，因此我们可以得出，在这个重复插入操作中，没有碰撞的概率为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><mo>×</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mn>0</mn></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mn>0</mn></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(0) &amp; = C_n^0 \times (\frac{1}{s})^0 \times (1 - \frac{1}{s})^{n - 0} \\ &amp; = (1 - \frac{1}{s})^n \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.61488em;vertical-align:-2.05744em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.55744em"><span style="top:-4.55744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.05744em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.55744em"><span style="top:-4.55744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.864108em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.05744em"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="5-什么叫hashmap-很可能不满"><a class="markdownIt-Anchor" href="#5-什么叫hashmap-很可能不满"></a> 5. 什么叫“HashMap 很可能不满”</h2><p>假如一个 HashMap，它在插入元素的过程中，如果它一次碰撞都没有发生，说明它没有满；</p><p>上面我们得到了这个事件的概率，如果这个事件发生的概率很大，那么就说明 HashMap <strong>很可能不满</strong></p><p>所以，若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">P(0) \le 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>，则说明 HashMap 很可能没有满</p><p>则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>≥</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} (1 - \frac{1}{s})^n \ge \frac{1}{2} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-.90372em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4037200000000003em"><span style="top:-3.4037200000000003em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.90372em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 代表 HashMap 中元素的个数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span></span></span></span> 代表 HashMap 的数组大小</p><h2 id="6-loadfactor-的计算过程"><a class="markdownIt-Anchor" href="#6-loadfactor-的计算过程"></a> 6. loadFactor 的计算过程</h2><p>HashMap 中 <code>loadFactor</code> 即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">n/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span></span>，首先求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span>，对于上面的式子取对数，则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>n</mi><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≥</mo><mo>−</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mfrac><mrow><mo>−</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><mo stretchy="false">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mfrac><mrow><mo>−</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow><mi>s</mi></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} n\ln(1 - \frac{1}{s}) &amp; \ge -\ln2 \\ n &amp; \le \frac{-\ln2}{\ln(1 - \frac{1}{s})} \\ n &amp; \le \frac{-\ln2}{\ln\frac{s-1}{s}} \\ n &amp; \le \frac{\ln2}{\ln\frac{s}{s-1}} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.571307000000001em;vertical-align:-5.0356535em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.5356535000000004em"><span style="top:-7.5856535em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-5.228213499999999em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-2.4766655em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:.2748824999999997em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.0356535em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.5356535000000004em"><span style="top:-7.5856535em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">−</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span><span style="top:-5.228213499999999em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4766655em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.2748824999999997em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.0356535em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mn>2</mn><mi>s</mi></mrow><mrow><mn>2</mn><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">n \le \frac{\ln2}{\ln\frac{2s}{2s-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.7719400000000001em;vertical-align:-.13597em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.5635929999999998em;vertical-align:-.6834849999999999em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8801079999999999em"><span style="top:-2.59898em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">ln</span><span class="mspace mtight" style="margin-right:.19516666666666668em"></span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8443142857142858em"><span style="top:-2.656em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2255em"><span class="pstrut" style="height:3em"></span><span class="frac-line mtight" style="border-bottom-width:.049em"></span></span><span style="top:-3.384em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.40352142857142853em"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">ln</span><span class="mspace mtight" style="margin-right:.19516666666666668em"></span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.6834849999999999em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 时，HashMap <strong>很可能</strong>不满，所以</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mi>s</mi></mfrac><mo>≤</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{s} \le \frac{\ln2}{s\ln\frac{s}{s-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.4607710000000003em;vertical-align:-1.089331em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>当 $s \rightarrow \infty $ 时，有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>F</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} loadFactor &amp; = \lim_{s \to \infty}\frac{\ln2}{s\ln\frac{s}{s-1}} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.760771em;vertical-align:-1.1303855em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6303855em"><span style="top:-3.6303855em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1303855em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6303855em"><span style="top:-3.6303855em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1303855em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>对于分母的式子有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \lim_{s \to \infty}s\ln\frac{s}{s-1} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.17689em;vertical-align:-.8384450000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.338445em"><span style="top:-3.338445em"><span class="pstrut" style="height:3.1075600000000003em"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.8384450000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>从形式上来看，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">s \to \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord">∞</span></span></span></span> 时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mi>s</mi></mrow><mrow><mn>2</mn><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{2s}{2s-1} \to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-.403331em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，则上式为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi><mo>⋅</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\infty \cdot 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.44445em;vertical-align:0"></span><span class="mord">∞</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 型，应转换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>0</mn><mi mathvariant="normal">∞</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{0}{\infty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi mathvariant="normal">∞</mi><mn>0</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\infty}{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 计算，对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span></span></span></span> 取倒数，有：<br>令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>=</mo><mfrac><mn>1</mn><mi>t</mi></mfrac></mrow><annotation encoding="application/x-tex">s = \frac{1}{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mi>t</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mfrac><mn>1</mn><mi>t</mi></mfrac><mrow><mfrac><mn>1</mn><mi>t</mi></mfrac><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mi>t</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mfrac><mn>1</mn><mi>t</mi></mfrac><mfrac><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow><mi>t</mi></mfrac></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mi>t</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow><mi>t</mi></mfrac><mo>⋯</mo><mo stretchy="false">(</mo><mo>⋆</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \lim_{t \to 0} \frac{1}{t} \ln\frac{\frac{1}{t}}{\frac{1}{t} - 1} \\ &amp; = \lim_{t \to 0}\frac{1}{t} \ln\frac{\frac{1}{t}}{\frac{1-t}{t}} \\ &amp; = \lim_{t \to 0} \frac{1}{t}\ln\frac{1}{1-t} \\ &amp; = \lim_{t \to 0} \frac{\ln\frac{1}{1-t}}{t} \cdots (\star) \\ \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.966749em;vertical-align:-5.2333745em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.7333745em"><span style="top:-7.7917055em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span><span style="top:-4.8314895em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span><span style="top:-2.1299415em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span><span style="top:.5778275000000002em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.2333745em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.7333745em"><span style="top:-7.7917055em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.580108em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7350000000000003em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-4.8314895em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.580108em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7350000000000003em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.1299415em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.5778275000000002em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.638439em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7933310000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord">⋆</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.2333745em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>遇见 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x \to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，就要想 <strong>等价无穷小</strong>，对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\ln</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mop">ln</span></span></span></span> 可以构造 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\ln(1 + x) \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">x</span></span></span></span>，则有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>t</mi><mo>+</mo><mi>t</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>ln</mi><mo>⁡</mo><mn>1</mn><mo>+</mo><mfrac><mi>t</mi><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \ln\frac{1}{1-t} \\ &amp; = \ln\frac{1-t+t}{1-t} \\ &amp; = \ln 1 + \frac{t}{1-t} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.14295em;vertical-align:-3.3214750000000004em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8214749999999995em"><span style="top:-5.8214749999999995em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-3.4307049999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-1.0692949999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3214750000000004em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8214749999999995em"><span style="top:-5.8214749999999995em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.4307049999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0692949999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.29208em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3214750000000004em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>⋆</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\star)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">⋆</span><span class="mclose">)</span></span></span></span>式则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mfrac><mi>t</mi><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac><mi>t</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>F</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mn>1</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∼</mo><mn>0.693</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \lim_{t \to 0} \frac{\frac{t}{1-t}}{t} \\ &amp; = \lim_{t \to 0} \frac{1}{1-t} \\ &amp; = 1 \\ \\ \therefore loadFactor &amp; = \lim_{s \to \infty}\frac{\ln2}{s\ln\frac{s}{s-1}} \\ &amp; = \lim_{s \to \infty} \frac{\ln2}{1} \\ &amp; = \ln2 \\ &amp; \sim 0.693 \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:16.157975999999998em;vertical-align:-7.828988000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.328987999999999em"><span style="top:-10.328987999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-7.990439999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-6.081109999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-4.581109999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-2.549669999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span></span></span><span style="top:.21110100000000065em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:2.0511010000000005em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:3.551101000000001em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.828988000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.328987999999999em"><span style="top:-10.328987999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.617887em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7933310000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.824556em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-7.990439999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-6.081109999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span></span></span><span style="top:-2.549669999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.21110100000000065em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:2.0511010000000005em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span><span style="top:3.551101000000001em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mord">9</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.828988000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="7-为什么是-075"><a class="markdownIt-Anchor" href="#7-为什么是-075"></a> 7. 为什么是 0.75</h2><p>从上面的计算来看，<code>loadFactor</code> 取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\ln2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span> 时，能够让 HashMap 尽可能不满</p><p>但是在实际中，HashMap 碰撞与否，其实是与 <code>hashCode()</code> 的设计有很大关系，因此 JDK 设计者在平衡空间利用和性能方面给了一个更高的经验数字。</p><h2 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8. 总结</h2><p>当然，这只是一家之言，你也可以从其他方面解释 0.75 这个值如何如何；</p><p>其实这种刨根问底的问题，终究希望考察你的 <strong>能力</strong> 而不是 <strong>记忆</strong>，只要你能给出自己的解释，而不是被问住，呆若木鸡，就能通过面试。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前看各大面经的时候搜索到了这个问题，切实感觉到如果刨根问底的问，自己还真不能抵挡住这种攻势，现在闲暇时间又心血来潮地想起来这个问题，就打算好好弄懂弄透，也希望能在将来面试的时候做好准备。&lt;/p&gt;&lt;p&gt;本文基于&lt;a href=&quot;https://stackoverflow.com/a/31401836&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个 StackOverflow 回答&lt;/a&gt;进一步推导，并给出详细解答步骤&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AndroidX 测试坑点详解（二）—— VectorDrawable 和 tint 问题解析</title>
    <link href="https://wafer.li//Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
    <id>https://wafer.li//Android/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/</id>
    <published>2019-06-10T09:56:00.000Z</published>
    <updated>2019-06-14T05:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/">上篇文章</a>我们说到如果你的 VectorDrawable 如果采用一个带 <code>&lt;selector&gt;</code> 的颜色进行着色，那么就需要在测试代码中对 Drawable 进行重新着色，而不是直接比较。</p><p>本篇文章就来着重说说其中的原理。</p><a id="more"></a><h2 id="1-测试-drawable-的主要流程"><a class="markdownIt-Anchor" href="#1-测试-drawable-的主要流程"></a> 1. 测试 Drawable 的主要流程</h2><p>首先，我们来看看整个测试程序经历的流程，自顶向下才能更好的把握是什么地方什么阶段出现了问题。</p><p>运行 Drawable 的测试的过程大体如下：</p><ol><li><code>ImageView</code> 将 Drawable 在界面中展示</li><li><code>TestRunner</code> 从 Context 中获取期望值</li><li>将两者进行比较</li></ol><p>接下来，我们就分步来看具体流程，最后来定位到底是什么地方出现了问题。</p><h2 id="2-imageview-展示-drawable-的流程"><a class="markdownIt-Anchor" href="#2-imageview-展示-drawable-的流程"></a> 2. ImageView 展示 Drawable 的流程</h2><p>在测试中，我们采用 <code>imageView.setImageResource()</code> 的方法来展示 Drawable，由于代码比较长，就不贴出全部代码了，仅仅对流程和某些关键语句和行进行介绍。</p><p>首先，<code>ImageView</code> 会将原先的 Drawable 置为空，然后在 <code>resolveUri()</code> 方法中，会对我们传入的资源 ID 进行解析，然后通过 <code>Context</code> 获取这个 Drawable：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Drawable d = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (mResource != <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    d = mContext.getDrawable(mResource);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>获取到 Drawable 之后，<code>ImageView</code> 就会调用 <code>updateDrawable()</code> 更新自身的 Drawable：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void updateDrawable(Drawable d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (d != mRecycleableBitmapDrawable &amp;&amp; mRecycleableBitmapDrawable != <span class="literal">null</span>) &#123;</span><br><span class="line">        mRecycleableBitmapDrawable.setBitmap(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean sameDrawable = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mDrawable != <span class="literal">null</span>) &#123;</span><br><span class="line">       sameDrawable = mDrawable == d;</span><br><span class="line">       mDrawable.setCallback(<span class="literal">null</span>);</span><br><span class="line">       unscheduleDrawable(mDrawable);</span><br><span class="line">       <span class="keyword">if</span> (!sCompatDrawableVisibilityDispatch &amp;&amp; !sameDrawable &amp;&amp; isAttachedToWindow()) &#123;</span><br><span class="line">         mDrawable.setVisible(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     mDrawable = d;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (d != <span class="literal">null</span>) &#123;</span><br><span class="line">       d.setCallback(<span class="keyword">this</span>);</span><br><span class="line">       d.setLayoutDirection(getLayoutDirection());</span><br><span class="line">       <span class="keyword">if</span> (d.isStateful()) &#123;</span><br><span class="line">         d.setState(getDrawableState());</span><br><span class="line">       &#125;</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><p>其中，比较重要的是 <code>d.setState()</code>，正是它根据当前 <code>ImageView</code> 所处的状态（State）来对其 Drawable 进行着色的。</p><p>那么，我们看到，实际上 <code>ImageView</code> 在展示 Drawable 的时候，实际上大体上分成了两个步骤：</p><ol><li>通过 <code>Context</code> 获取 Drawable 实例</li><li>根据 <code>ImageView</code> 所处状态和相应属性对获取得到的 Drawable 做出相应改变</li><li>展示</li></ol><p>所以问题是不是出现在 <code>Context</code> 获取 Drawable 的时候呢？我们来继续看看 Context 获取 Drawable 的过程。</p><h2 id="3-context-获取-drawable-的过程"><a class="markdownIt-Anchor" href="#3-context-获取-drawable-的过程"></a> 3. Context 获取 Drawable 的过程</h2><p>所有的测试，实际上都是拿期望值和实际结果进行比较，而对于 Drawable 来说，期望值实际上就是我们本地存储的 Drawable，而获取这个期望值实际上还是通过 Context 来获取得到的。</p><p>要想深入了解这个问题的成因，我们就要首先看看 Context 获取 Drawable 的过程。</p><p>首先，<code>Context</code> 调用 <code>getDrawable()</code> 最终会调用到 <code>ResourceImpl</code> 的 <code>loadDrawable()</code> 方法，这个方法的流程大致如下：</p><ol><li>查找 Drawable 缓存</li><li>若缓存命中，则直接返回缓存值</li><li>若未命中，则创建 Drawable</li><li>使用传入的 <code>theme</code> 对新创建的 Drawable 进行相关调整（如着色等）</li><li>将 Drawable 写入缓存</li><li>返回</li></ol><p>这个流程本身没什么问题，但是在经过 <code>applyTheme()</code> 方法之后，我们发现此时的 Drawable 出现了变化：</p><p>在 <code>applyTheme()</code> 之前，Drawable 的 <code>mTintFilter</code> 和 <code>mVectorState</code> 中的 <code>mTint</code> 都是空的：</p><p><img src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/applytheme-%E4%B9%8B%E5%89%8D.png" alt="applyTheme 之前"></p><p>而在经过 <code>applyTheme()</code> 之后，Drawable 的 <code>mTintFilter</code> 和 <code>mVectorState</code> 中的 <code>mTint</code> 都被赋上了值：</p><p><img src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/applytheme-%E4%B9%8B%E5%90%8E.png" alt="applyTheme 之后"></p><p>其中更重要的一点就是这个 <code>mColor</code> 值和我们后面从 <code>ImageView</code> 的 Drawable 中得到的 <code>mColor</code> 并不一样：</p><p><img src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/imageview-drawable-%E4%B8%AD%E7%9A%84-mcolor.png" alt="ImageView Drawable 中的 mColor"></p><p>进一步的分析可以看到，在 <code>mVectorState</code> 中的 <code>mTint</code> 实际上保留了两个 <code>mColor</code> 值，其中一个是 <code>Context</code> 获取的 Drawable 的 <code>mColor</code>，另一个则是在 <code>ImageView</code> 中获取到的 <code>mColor</code>。</p><p>所以说，极有可能是在 <code>applyTheme()</code> 方法中出现了什么问题，导致其赋予 Drawable 一个错误的 <code>mTint</code> 从而导致 BUG 的出现。</p><h2 id="4-深入-applytheme-方法"><a class="markdownIt-Anchor" href="#4-深入-applytheme-方法"></a> 4. 深入 applyTheme 方法</h2><p>在上面的分析中，我们知道，在 <code>applyTheme()</code> 方法中，系统会赋予 Drawable 一个着色，但是这个着色是有问题的，那么我们只要找到哪条代码会导致着色变化即可。</p><p>经过不断的步进，我终于找到了对着色进行更改的方法——<code>updateLocalState()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateLocalState</span><span class="params">(Resources res)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> density = Drawable.resolveDensity(res, mVectorState.mDensity);</span><br><span class="line">  <span class="keyword">if</span> (mTargetDensity != density) &#123;</span><br><span class="line">    mTargetDensity = density;</span><br><span class="line">    mDpiScaledDirty = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mTintFilter = updateTintFilter(mTintFilter, mVectorState.mTint, mVectorState.mTintMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这个方法最后会调用 <code>updateTintFilter()</code> 使用 <code>mVectorState</code> 中的着色值对 Drawable 进行着色，而这个着色值正是我们在上面看到的那个具有两个 Int 的数组，包含了两种不同的颜色。</p><p>深入进去，我们可以发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="function">PorterDuffColorFilter <span class="title">updateTintFilter</span><span class="params">(@Nullable PorterDuffColorFilter tintFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable ColorStateList tint, @Nullable PorterDuff.Mode tintMode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tint == <span class="keyword">null</span> || tintMode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> color = tint.getColorForState(getState(), Color.TRANSPARENT);</span><br><span class="line">    <span class="keyword">if</span> (tintFilter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PorterDuffColorFilter(color, tintMode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tintFilter.setColor(color);</span><br><span class="line">    tintFilter.setMode(tintMode);</span><br><span class="line">    <span class="keyword">return</span> tintFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，这个方法是通过 Drawable 的 State 在 <code>mVectorState.mTint</code> 中获取对应的颜色，然后对 <code>mTintFilter</code> 进行赋值的。</p><p>到这里，关键点就来了，由于我们是第一次通过 <code>Context</code> 获取 Drawable，此时，Drawable 还不具备状态，那么 <code>getState()</code> 的结果实际上是一个 <strong>空数组！</strong></p><p>我们紧接着看 <code>getColorForState()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColorForState</span><span class="params">(@Nullable <span class="keyword">int</span>[] stateSet, <span class="keyword">int</span> defaultColor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> setLength = mStateSpecs.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; setLength; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] stateSpec = mStateSpecs[i];</span><br><span class="line">    <span class="keyword">if</span> (StateSet.stateSetMatches(stateSpec, stateSet)) &#123;</span><br><span class="line">      <span class="keyword">return</span> mColors[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> defaultColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过调试结果，我们可以看到：</p><p><img src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/getcolorstate-%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="getColorState 调试结果"></p><p>这里面的 <code>mColor</code> 正是 <code>mVectorState.mTint</code> 的两个值，并且，第一个就是 Context Drawable 的 <code>mTint</code> 值。</p><p>那么也就说明：<code>stateSetMatches()</code> 方法第一次就通过了。</p><p>所以，问题应该就是出在 <code>stateSetMatches()</code> 方法中。</p><h2 id="5-statesetmatches-方法流程"><a class="markdownIt-Anchor" href="#5-statesetmatches-方法流程"></a> 5. stateSetMatches 方法流程</h2><p>这里先上一个调试结果：</p><p><img src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/statesetmatches%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="stateSetMatches调试结果"></p><p>从调试中我们可以看到，<code>stateSpec</code> 有一个负数值，而 <code>stateSet</code> 是空的。</p><p>下面是这个方法的部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">stateSetMatches</span><span class="params">(<span class="keyword">int</span>[] stateSpec, <span class="keyword">int</span>[] stateSet)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (stateSet == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> (stateSpec == <span class="keyword">null</span> || isWildCard(stateSpec));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> stateSpecSize = stateSpec.length;</span><br><span class="line">     <span class="keyword">int</span> stateSetSize = stateSet.length;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stateSpecSize; i++) &#123;</span><br><span class="line">         <span class="keyword">int</span> stateSpecState = stateSpec[i];</span><br><span class="line">         <span class="keyword">if</span> (stateSpecState == <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">// We've reached the end of the cases to match against.</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">boolean</span> mustMatch;</span><br><span class="line">         <span class="keyword">if</span> (stateSpecState &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             mustMatch = <span class="keyword">true</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// We use negative values to indicate must-NOT-match states.</span></span><br><span class="line">             mustMatch = <span class="keyword">false</span>;</span><br><span class="line">             stateSpecState = -stateSpecState;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; stateSetSize; j++) &#123;</span><br><span class="line">           ...</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (mustMatch &amp;&amp; !found) &#123;</span><br><span class="line">             <span class="comment">// We've reached the end of states to match and we didn't</span></span><br><span class="line">             <span class="comment">// find a must-match state.</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从中我们可以看到，实际上这个函数就是对比状态是否相等，由于我们的 <code>stateSet</code> 是空数组，所以就隐去了其相关的 <code>for</code> 循环部分，因为这个循环实际上是会被跳过的。</p><p>从外部的 <code>for</code> 循环中来看，我们发现由于 <code>stateSpecState</code> 是一个负数，所以 <code>mustMatch</code> 为 <code>false</code>，而由于我们又没有找到相应的符合规范的状态，因此 <code>found</code> 也是 <code>false</code>。</p><p>此时，外层的第一次也是唯一一次的 <code>for</code> 循环就结束了，那么循环跳出，<strong>最后返回 true！</strong></p><p><img src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/statesetmatches-%E8%BF%94%E5%9B%9E-true.png" alt="stateSetMatches 返回 true"></p><p>也就是说，当 Drawable 没有状态时，系统会默认其 <strong>符合任何状态！</strong></p><p>于是，<code>mColors</code> 的第一个颜色值会被返回，但实际上它并不是 <code>ColorStateList</code> 的默认值：</p><p><img src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/%E7%AC%AC%E4%B8%80%E4%B8%AA-mcolor-%E5%B9%B6%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E5%80%BC.png" alt="第一个 mColor 并不是默认值"></p><p>而由于 <code>ImageView</code> 会在拿到 Drawable 之后通过其状态来更新着色，因此就会导致着色的不相同。</p><h2 id="6-案件重现"><a class="markdownIt-Anchor" href="#6-案件重现"></a> 6. 案件重现</h2><p>到这里，问题的成因就已经水落石出了，侦探推理完成后都会进行一下案件重演，那么在这里也重新回顾一下整个流程和问题的原因：</p><ol><li>ImageView 展示 Drawable 调用了 <code>Context</code></li><li><code>Context</code> 第一次创建 Drawable 并不带有状态</li><li>空状态导致系统着色判断错误</li><li><code>Context</code> 随即将错误的着色 Drawable 进行缓存</li><li><code>ImageView</code> 获取到 Drawable 之后根据其状态给予了正确的着色</li><li>测试程序再次通过 <code>Context</code> 获取 Drawable 由于缓存命中，返回了错误着色的 Drawable</li><li>由于测试程序获取的期望值和 <code>ImageView</code> 的真实值不相同，因此测试报错不通过</li></ol><p>其中，我们看到，问题的关键在于系统在 Drawable 初次创建完成时错误判断了其着色颜色，从而返回颜色列表的第一个值而忽略其真正的默认值。</p><p>由于我们再次通过 <code>Context</code> 取 Drawable 会因为缓存而拿到错误着色的 Drawable，所以我们需要对拿到的 Drawable 根据运行环境进行重新着色。</p><p>但是如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 就是默认的话，那么就没有这个问题，不需要重新着色了。</p><h2 id="7-附默认的-colorcontrolnormal-值"><a class="markdownIt-Anchor" href="#7-附默认的-colorcontrolnormal-值"></a> 7. 附：默认的 colorControlNormal 值</h2><p>在调试之余我还翻了一下默认的 <code>colorControlNormal</code> 值，结果是根据你设定的根主题的不同，可能会有下面的两个值：</p><ol><li><code>?android:attr/textColorPrimary</code></li><li><code>?android:attr/textColorSecondary</code></li></ol><p>但无一例外它们都是 <code>&lt;selector&gt;</code>，而且有状态的颜色值处在第一个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- textColorPrimary --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:alpha</span>=<span class="string">"?attr/disabledAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:alpha</span>=<span class="string">"?attr/primaryContentAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- textColorSecondary --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:alpha</span>=<span class="string">"?attr/disabledAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:alpha</span>=<span class="string">"?attr/secondaryContentAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/&quot;&gt;上篇文章&lt;/a&gt;我们说到如果你的 VectorDrawable 如果采用一个带 &lt;code&gt;&amp;lt;selector&amp;gt;&lt;/code&gt; 的颜色进行着色，那么就需要在测试代码中对 Drawable 进行重新着色，而不是直接比较。&lt;/p&gt;&lt;p&gt;本篇文章就来着重说说其中的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://wafer.li/categories/Android/"/>
    
    
      <category term="Android" scheme="https://wafer.li/tags/Android/"/>
    
      <category term="Instrument Test" scheme="https://wafer.li/tags/Instrument-Test/"/>
    
  </entry>
  
  <entry>
    <title>AndroidX 测试坑点详解（一）</title>
    <link href="https://wafer.li//Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://wafer.li//Android/android-测试坑点详解（一）/</id>
    <published>2019-05-31T07:49:00.000Z</published>
    <updated>2019-06-14T05:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在迁移到 AndroidX 之后一直折腾 TDD 的事情，也遇到了大的小的不少坑点；</p><p>鉴于 AndroidX 在测试方面还没有太多的文档，就写一篇博文来总结一下折腾的经验，也给后来人做一些参考。</p><a id="more"></a><h2 id="1-国产-rom-的坑"><a class="markdownIt-Anchor" href="#1-国产-rom-的坑"></a> 1. 国产 ROM 的坑</h2><p><code>ActivityScenario</code> 和 <code>ActivityScenarioRule</code> 是新推出的操作 Activity 生命周期的类。</p><p>当构建 <code>ActivityScenario</code> 时，它便会自动启动你指定的 Activity 并让它处于 <code>RESUMED</code> 状态。</p><p>使用示例如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(AndroidJunit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@get:Rule</span></span><br><span class="line">  <span class="keyword">val</span> mainActivityScenarioRule = ActivityScenarioRule&lt;MainActivity&gt;(MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onCreate_saveInstanceNull</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mainActivityScenarioRule.scenario</span><br><span class="line">                .onActivity &#123; activity -&gt;</span><br><span class="line">                  <span class="comment">// 在这里获取 Activity 实例</span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，当我在手机上跑这个测试的时候，却遇到了下面的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.AssertionError: Activity never becomes requested state <span class="string">"[RESUMED]"</span></span><br><span class="line">(last lifecycle transition = <span class="string">"PRE_ON_CREATE"</span>)</span><br></pre></td></tr></table></figure><p>也就是说，我这个 Activity 实际上并没有真正的 <code>onCreate</code> 而是一直处于被创建之前的状态，随后因为超时导致了报错退出。</p><blockquote><p>具体的超时时间是 45 秒</p></blockquote><p>但是到底是什么东西导致我的 Activity 启动不了却没有什么头绪，直到我用模拟器运行测试代码的时候，我发现： <strong>居然测试通过了！</strong></p><p>原来，Android 的仪器测试(Instrumented Test)都会构建一个独立的 <code>test.apk</code> 并自动安装和运行。</p><p>而国产的手机系统对于应用自启动的管理非常激进（例如华为），而我也没有对 <code>test.apk</code> 设置白名单，于是系统就一直禁止 <code>tesk.apk</code> 的启动，导致测试失败。</p><p>在华为的手机应用管家中为 <code>test.apk</code> 设置白名单，测试就可以通过了。</p><h2 id="2-fragment-testing-的坑"><a class="markdownIt-Anchor" href="#2-fragment-testing-的坑"></a> 2. Fragment Testing 的坑</h2><h3 id="21-编译依赖的坑"><a class="markdownIt-Anchor" href="#21-编译依赖的坑"></a> 2.1 编译依赖的坑</h3><p>和 <code>ActivityScenario</code> 一样，Google 也提供了一个 <code>FragmentScenario</code> 方便在测试中获取 <code>Fragment</code> 实例和对 <code>Fragment</code> 进行操作。</p><p>但是需要引入 <code>fragment-testing</code> 库，按照 Google 的文档是下面的这条语句:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debugImplementation <span class="string">'androidx.fragment:fragment-testing:1.1.0-alpha07'</span></span><br></pre></td></tr></table></figure><p>这里就是它的第一个坑，如果你只引入上面的这条语句，实际上根本不可能成功 Build。</p><p>主要有以下两点原因：</p><ol><li><p><code>fragment-testing</code> 需要依赖 <code>androidx.test.core</code>，而 debugImplementation 并没有引入 <code>androidx.text.core</code></p></li><li><p>我们需要在 Instrumented Test 中使用 <code>fragment-testing</code>，而上面并没有在 <code>androidTestImplementation</code> 引入</p></li></ol><p>于是乎，正确的引入方式是：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">debugImplementation(Libs.androidx_test_core)</span><br><span class="line">debugImplementation(Libs.fragment_testing)</span><br><span class="line">androidTestImplementation(Libs.androidx_test_core)</span><br><span class="line">androidTestImplementation(Libs.fragment_testing)</span><br></pre></td></tr></table></figure><p>那么能不能把 <code>debugImplementation</code> 换成普通的 <code>implementation</code> 呢？</p><p>很可惜，这是不行的，不过至于为什么不行，我目前并没有对此进行深入研究。</p><h3 id="22-主题的坑"><a class="markdownIt-Anchor" href="#22-主题的坑"></a> 2.2 主题的坑</h3><p>导入和依赖的坑解决之后就到了如何使用的环节了。</p><p>具体的用法为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testFragment</span><span class="params">()</span></span> &#123;</span><br><span class="line">  launchFragmentScenario&lt;LoginFragment&gt;() &#123; fragment -&gt;</span><br><span class="line">    <span class="comment">// 使用 fragment</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这么使用也是不行的。</p><p>如果你使用了 Material 的组件，例如 <code>TextInputLayout</code>，那么它会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: android.view.InflateException: Binary XML file line</span><br><span class="line">#9: Error inflating class</span><br><span class="line">**com.google.android.material.textfield.TextInputLayout**</span><br></pre></td></tr></table></figure><p>在查阅相关资料之后，发现了<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvMTE5MDU0NDMx" title="https://issuetracker.google.com/issues/119054431">一个相关的 Issue<i class="fa fa-external-link"></i></span></p><p>其中 Google 的人指出：</p><blockquote><p>You need to tell FragmentScenario <strong>what theme you want</strong> if you want something <strong>other than the default Theme.WithActionBar</strong>, that’s correct.</p></blockquote><p>也就是说，如果你使用了 Material 相关的主题，比如说常见的 <code>Theme.Appcompat</code> 等，那么就需要向 <code>FragmentScenario</code> 明确指出你使用的主题样式。</p><p>也就是说，上面的代码需要写成：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testFragment</span><span class="params">()</span></span> &#123;</span><br><span class="line">  launchFragmentScenario&lt;LoginFragment&gt;(</span><br><span class="line">    themeResId = R.style.Your_App_Theme</span><br><span class="line">    ) &#123; fragment -&gt;</span><br><span class="line">    <span class="comment">// 使用 fragment</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序才能正常运行。</p><h2 id="3-onfragmentonactivity-和-check-的坑"><a class="markdownIt-Anchor" href="#3-onfragmentonactivity-和-check-的坑"></a> 3. onFragment/onActivity 和 check 的坑</h2><p><code>ActivityScenario</code> 和 <code>FragmentScenario</code> 都提供了一个相应的高阶函数 <code>onActivity()</code> 和 <code>onFragment()</code>，可以在其中获取到对应的 <code>Activity</code> 和 <code>Fragment</code> 的实例，并用它做相应的操作。</p><blockquote><p>实际上 <code>onFragment()</code> 内部也是调用了 <code>onActivity()</code></p></blockquote><p>但是！需要注意的是，这两个 <code>on</code> 方法都是运行在主线程的，而 Espresso 的 <code>check()</code> 函数是一个耗时操作，如果你在 <code>onFragment()</code> 中调用 <code>check()</code>，那么就会 <strong>阻塞 UI 线程</strong>。</p><p>也就是说，需要将 <code>onView()</code> 相关的内容放到 <code>onFragment/onActivity</code> 的外面：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">launchFragmentInContainer&lt;LoginFragment&gt;(</span><br><span class="line">    themeResId = R.style.Theme_Shrine</span><br><span class="line">).onFragment &#123;</span><br><span class="line">    tintColorRes = typedValue.resourceId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onView(withContentDescription(R.string.shr_logo_content_description))</span><br><span class="line">    .check(matches(withDrawable(R.drawable.shr_logo, tintColorRes)))</span><br><span class="line">    .check(matches(isCompletelyDisplayed()))</span><br></pre></td></tr></table></figure><p>等等，放到外面就不会阻塞 UI 线程了吗？难道不会阻塞 <code>test.apk</code> 的 UI 线程？</p><p>经过反编译 <code>tesk.apk</code> 之后发现，实际上 <code>test.apk</code> <strong>只包含测试用例相关的内容</strong>，甚至没有一个 <code>Activity</code>，而真正的被测试的内容实际上还是在我们原来的 apk 之中，<code>test.apk</code> 实际上是通过启动被测试的 apk 的相关内容来实现仪器测试的。</p><p>也就是说，如果将 <code>onView</code> 相关的代码放到外面，实际上是在 <code>test.apk</code> 里面跑的，也就不会对被测试的 apk 进行阻塞。</p><h2 id="4-动画的坑"><a class="markdownIt-Anchor" href="#4-动画的坑"></a> 4. 动画的坑</h2><p>Android 官方的 Espresso 测试框架不能兼容动画效果，在跑测试，特别是点击、输入等 UI 测试时，需要进入开发者模式把能显示动画的都关掉：</p><p><img src="../../images/android-espresso-%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/turn-off-animation.png" alt="Turn Off Animation"></p><p>不然 Espresso 会报 <code>PerformException</code>。</p><h2 id="5-测试-imageview-的-drawable-的坑"><a class="markdownIt-Anchor" href="#5-测试-imageview-的-drawable-的坑"></a> 5. 测试 ImageView 的 Drawable 的坑</h2><h3 id="51-androidtint-的坑"><a class="markdownIt-Anchor" href="#51-androidtint-的坑"></a> 5.1 android:tint 的坑</h3><p>对于 <code>ImageView</code>，我们需要测试它是否展示出了我们传入的 Drawable，不过比较可惜的是，Espresso 自身并没有提供 <code>withDrawable()</code> 方法，幸运的是，我们可以通过 Kotlin 的扩展函数实现这个功能：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">withDrawable</span><span class="params">(<span class="meta">@DrawableRes</span> id: <span class="type">Int</span>, <span class="meta">@ColorRes</span> tint: <span class="type">Int</span>? = <span class="literal">null</span>, tintMode: <span class="type">PorterDuff</span>.<span class="type">Mode</span> = SRC_IN)</span></span> = <span class="keyword">object</span> : TypeSafeMatcher&lt;View&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeTo</span><span class="params">(description: <span class="type">Description</span>)</span></span> &#123;</span><br><span class="line">        description.appendText(<span class="string">"ImageView with drawable same as drawable with id <span class="variable">$id</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchesSafely</span><span class="params">(view: <span class="type">View</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context = view.context</span><br><span class="line">        <span class="keyword">val</span> expectedBitmap = context.getDrawable(id)?.toBitmap()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view <span class="keyword">is</span> ImageView &amp;&amp; view.drawable.toBitmap().sameAs(expectedBitmap)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，<code>ImageView</code> 支持着色 (tint) 功能，真正显示出来的 Drawable 和我们从 <code>Context</code> 里面拿到的 Drawable 很可能是不一样的，因此，我们也需要给 <code>expectedBitmap</code> 进行着色：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">toColor</span><span class="params">(context: <span class="type">Context</span>)</span></span> = ContextCompat.getColor(context, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Drawable.<span class="title">tinted</span><span class="params">(<span class="meta">@ColorInt</span> tintColor: <span class="type">Int</span>? = <span class="literal">null</span>, tintMode: <span class="type">PorterDuff</span>.<span class="type">Mode</span> = SRC_IN)</span></span> =</span><br><span class="line">        apply &#123;</span><br><span class="line">            setTintList(tintColor?.toColorStateList())</span><br><span class="line">            setTintMode(tintMode)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">toColorStateList</span><span class="params">()</span></span> = ColorStateList.valueOf(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">withDrawable</span><span class="params">(<span class="meta">@DrawableRes</span> id: <span class="type">Int</span>, <span class="meta">@ColorRes</span> tint: <span class="type">Int</span>? = <span class="literal">null</span>, tintMode: <span class="type">PorterDuff</span>.<span class="type">Mode</span> = SRC_IN)</span></span> = <span class="keyword">object</span> : TypeSafeMatcher&lt;View&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeTo</span><span class="params">(description: <span class="type">Description</span>)</span></span> &#123;</span><br><span class="line">        description.appendText(<span class="string">"ImageView with drawable same as drawable with id <span class="variable">$id</span>"</span>)</span><br><span class="line">        tint?.let &#123; description.appendText(<span class="string">", tint color id: <span class="variable">$tint</span>, mode: <span class="variable">$tintMode</span>"</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchesSafely</span><span class="params">(view: <span class="type">View</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context = view.context</span><br><span class="line">        <span class="keyword">val</span> tintColor = tint?.toColor(context)</span><br><span class="line">        <span class="keyword">val</span> expectedBitmap = context.getDrawable(id)?.tinted(tintColor, tintMode)?.toBitmap()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view <span class="keyword">is</span> ImageView &amp;&amp; view.drawable.toBitmap().sameAs(expectedBitmap)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-vectordrawable-的坑"><a class="markdownIt-Anchor" href="#52-vectordrawable-的坑"></a> 5.2 VectorDrawable 的坑</h3><p>从 5.0 之后， Android 支持矢量图，即 <code>VectorDrawable</code>，在 <code>ImageView</code> 中使用 <code>app:srcCompat</code> 进行显示。</p><p>但是，虽然在普通的 apk 中可以正常显示矢量图，但是在运行仪器测试时仅仅这样是显示不了的，还需要在代码中使用 <code>setImageResource()</code> 才能在测试中显示出矢量图。</p><p>目前来看这是 Android 测试框架的一个 Bug，如果不想改代码的话可以不进行这方面的测试，毕竟图能不能显示出来，用眼睛看看就行了。</p><h3 id="53-vectordrawable-和-tint-的坑"><a class="markdownIt-Anchor" href="#53-vectordrawable-和-tint-的坑"></a> 5.3 VectorDrawable 和 tint 的坑</h3><p>上面说到了 Drawable 需要 tint，如果我们的 <code>ImageView</code> 显示的是 <code>VectorDrawable</code>，那就要小心了，因为 <code>VectorDrawable</code> 可以在它自己的 xml 文件中进行着色：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:height</span>=<span class="string">"152dp"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:tint</span>=<span class="string">"?attr/colorControlNormal"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:viewportHeight</span>=<span class="string">"152"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:viewportWidth</span>=<span class="string">"149"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:width</span>=<span class="string">"149dp"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意上面的 <strong><code>android:tint=&quot;?attr/colorControlNormal&quot;</code></strong>，这是在 <code>vector</code> 中定义的。</p><p>如果你给这个 <code>tint</code> 设定的是一个 <code>&lt;selector&gt;</code>，那么就需要注意了：</p><p>如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 不是默认颜色，而是 <code>state_enable:false</code> 之类的有状态的颜色，那么就需要在测试代码中获取 <code>R.attr.colorControlNormal</code> 并对 Drawable 重新进行着色，否则即使你没有对这个 Drawable 进行过任何修改，测试依旧会报错失败。</p><p>如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 是默认的不带有状态限定的颜色，那么就不需要重新着色。</p><p>鉴于默认的 <code>colorControlNormal</code> 是 <code>&lt;selector&gt;</code> 颜色，我建议在测试 Drawable 的时候都统一进行重新着色。</p><p>而如何在运行时取到 <code>colorControlNormal</code> 的真正的颜色资源 ID，可以参照以下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> typedValue = TypedValue()</span><br><span class="line">it.activity?.theme?.resolveAttribute(R.attr.colorControlNormal, typedValue, <span class="literal">true</span>)</span><br><span class="line">tintColorRes = typedValue.resourceId</span><br></pre></td></tr></table></figure><p>最后拿到的 <code>tintColorRes</code> 即为颜色资源 ID。</p><p>关于其中具体原理，可以参照我的<a href="/Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/">下一篇文章</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在迁移到 AndroidX 之后一直折腾 TDD 的事情，也遇到了大的小的不少坑点；&lt;/p&gt;&lt;p&gt;鉴于 AndroidX 在测试方面还没有太多的文档，就写一篇博文来总结一下折腾的经验，也给后来人做一些参考。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://wafer.li/categories/Android/"/>
    
    
      <category term="Android" scheme="https://wafer.li/tags/Android/"/>
    
      <category term="Instrument Test" scheme="https://wafer.li/tags/Instrument-Test/"/>
    
      <category term="Espresso" scheme="https://wafer.li/tags/Espresso/"/>
    
  </entry>
  
  <entry>
    <title>ConnectedDevice: No Test Found 调试过程</title>
    <link href="https://wafer.li//Android/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/"/>
    <id>https://wafer.li//Android/connecteddevice-no-test-found-调试过程/</id>
    <published>2019-05-26T03:39:00.000Z</published>
    <updated>2019-05-27T15:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前又稍微折腾着想尝试一下 TDD，并在每次构建的时候加入测试环节，当测试不通过就不允许 build。</p><p>当一切都配置好，点下 build App 的时候，却出现了 <code>There were failing tests.</code>。</p><p>我心想，不会啊，现在我就根本没写几个测试用例，为什么会通不过？</p><p>于是，就开始了艰难的调试过程</p><a id="more"></a><h2 id="0-更新"><a class="markdownIt-Anchor" href="#0-更新"></a> 0. 更新</h2><p>2019-05-27 更新： Google 回复：Instant Run 在新版本已经不被支持了，他们开发了一个更好的功能叫 Apply Change。</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/google-response-instant-run-deprecated.png" alt="Google Response Instant Run Deprecated"></p><blockquote><p>Instant Run has been deprecated in Android Studio 3.5 and instead we’ve implemented a brand new solution called Apply Changes that is more stable and doesn’t modify your APK on build.<br>…<br>We recommend <strong>turning off Instant Run</strong> in the settings for earlier versions of Android Studio</p></blockquote><p>尝试了一下 2019-05-23 编译的 Android Studio 3.6 Canary 1 ，问题的确已经被修复了。</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/build-success-with-as-3-6-1.png" alt="Build Success with AS 3.6.1"></p><p>所以还在使用 3.4 稳定版的，直接把 Instant Run 关掉吧。</p><h2 id="1-connecteddevice-no-tests-found"><a class="markdownIt-Anchor" href="#1-connecteddevice-no-tests-found"></a> 1. ConnectedDevice No tests found</h2><p>打开测试结果，就得到了下面这张图</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/connecteddevice-no-test-found.png" alt="ConnectedDevice No test found"></p><p>再点进去一看：<br><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/connecteddevice-no-tests-found-detail.png" alt="ConnectedDevice No Test found detail"></p><p>它说我没有按照 JUnit 的方式编写测试用例，但是我的测试用例都是加了 <code>@Test</code> 的啊</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(AndroidJUnit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">useAppContext</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// Context of the app under test.</span></span><br><span class="line">        <span class="keyword">val</span> appContext = InstrumentationRegistry.getInstrumentation().targetContext</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">"aaa.bbb.ccc.ddd"</span>, appContext.packageName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是就陷入了困境，问题到这里就消失了，到底应该怎样才能定位到问题呢？</p><h2 id="2-使用-gradle-命令行进行构建尝试"><a class="markdownIt-Anchor" href="#2-使用-gradle-命令行进行构建尝试"></a> 2. 使用 gradle 命令行进行构建尝试</h2><p>Android Studio 的 Run App 实际上就是先执行 <code>assemble[Build-Variant]</code> 然后再将生成的 apk 安装到手机的过程。</p><p>而这个 <code>assemble</code> 实际上是通过 <code>gradle</code> 执行的，于是可以尝试通过 gradle 命令行进行编译，看看是不是 gradle 导致的问题。</p><p>然而，gradle 单独进行编译并没有这个问题：</p><p><img src="/images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/gradle-build-successful.png" alt="gradle build successful"></p><p>所以很有可能是 Android Studio 自身的构建出现了问题，但是，目前的构建信息并不足以让我们定位到问题，所以需要获取更多的构建信息。</p><h2 id="3-instrument-process-crashed"><a class="markdownIt-Anchor" href="#3-instrument-process-crashed"></a> 3. INSTRUMENT: Process Crashed</h2><p>首先，我们在 <code>Build, Execution, Deployment -&gt; Compiler</code> 开启 <code>gradle --scan</code></p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/gradle-scan-in-android-studio.png" alt="Gradle Scan In Android Studio"></p><p>然后，点击红框里面的小图标让 Build 信息变成文字：</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/build-output-text.png" alt="Build Output Text"></p><p>之后，就看到了 build 失败的详细信息了：</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/fail-due-to-process-crash.png" alt="Fail due to Process Crashed"></p><p>原来是在测试的时候程序崩溃了，这才导致了测试的失败。</p><p>经过一番 StackOverflow 之后，<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxNjExMzcw" title="https://stackoverflow.com/a/21611370">这个答案<i class="fa fa-external-link"></i></span> 提醒了我：</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/stackoverflow-see-logcat.png" alt="StackOverflow See LogCat"></p><p>由于 Instrument Test 实际上是安装了一个 <code>test.apk</code>，所以它的报错信息会在 Log Cat 而不是 Build Output 中。</p><h2 id="4-didnt-find-class-corecomponentfactory"><a class="markdownIt-Anchor" href="#4-didnt-find-class-corecomponentfactory"></a> 4. Didn’t find class CoreComponentFactory</h2><p>打开 Log Cat，首先映入眼帘的是 <code>Unable to instantiate application</code></p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/unable-to-instantiate-application.png" alt="Unable to instantiate application"></p><p>原来在执行测试的时候，没有办法实例化 <code>Application</code> 导致 Instrument Test 无法找到 <code>Context</code>，于是程序就崩溃导致测试失败了。</p><p>再往上看，可以看到导致无法实例化 <code>Application</code> 的原因：</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/didn-t-find-class-corecomponentfactory.png" alt="Didn't find class CoreComponentFactory"></p><p>原来是构建 <code>Application</code> 的工厂找不到了，从而造成它无法实例化。</p><h2 id="5-罪魁祸首-instant-run"><a class="markdownIt-Anchor" href="#5-罪魁祸首-instant-run"></a> 5. 罪魁祸首 Instant Run</h2><p><code>Didn't find class CoreComponentFactory</code> 这个问题之前也遇到过，是因为 R8 将其混淆了，导致在 release 模式下找不到这个类，但是现在是 debug 模式，并没有启用混淆，但是依然还是找不到这个类。</p><p>在经过又一阵子的 StackOverflow 之后，我找到了<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU2MTg2ODIx" title="https://stackoverflow.com/a/56186821">这么一个答案<i class="fa fa-external-link"></i></span>：</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/answer-disable-instant-run.png" alt="Answer Disable Instant Run"></p><p>虽然它被减成了负分，但是也不妨碍我尝试一下它的可用性。</p><p>于是我将 Instant Run 取消掉，奇迹发生了，程序竟然就编译通过并成功安装在了模拟器上。</p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/build-success.png" alt="Build Success"></p><p><img src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/run-success.png" alt="Run Success"></p><h2 id="6-总结"><a class="markdownIt-Anchor" href="#6-总结"></a> 6. 总结</h2><p>到这里，整个调试过程就结束了，也给 Google 提了这个 bug。</p><p>虽然不敢肯定一定是 Instant Run 的问题，但是目前（AS 3.4.1）来看，取消 Instant Run 就可以运行成功。</p><p>这个问题本身可能有一些特异性，不过倒是从中学到了一个知识：</p><p>类似的 Instrument Test 的失败最好先去 Log Cat 寻找原因。</p><p>也希望大家能从这篇博客中能学到一些什么吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前又稍微折腾着想尝试一下 TDD，并在每次构建的时候加入测试环节，当测试不通过就不允许 build。&lt;/p&gt;&lt;p&gt;当一切都配置好，点下 build App 的时候，却出现了 &lt;code&gt;There were failing tests.&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;我心想，不会啊，现在我就根本没写几个测试用例，为什么会通不过？&lt;/p&gt;&lt;p&gt;于是，就开始了艰难的调试过程&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://wafer.li/categories/Android/"/>
    
    
      <category term="Android" scheme="https://wafer.li/tags/Android/"/>
    
      <category term="Instrument Test" scheme="https://wafer.li/tags/Instrument-Test/"/>
    
  </entry>
  
  <entry>
    <title>使用 buildSrcVersions 轻松管理 gradle 依赖</title>
    <link href="https://wafer.li//Android/%E4%BD%BF%E7%94%A8-buildsrcversions-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86-gradle-%E4%BE%9D%E8%B5%96/"/>
    <id>https://wafer.li//Android/使用-buildsrcversions-轻松管理-gradle-依赖/</id>
    <published>2019-05-25T16:04:00.000Z</published>
    <updated>2019-05-26T04:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你开发过稍微有点体量的 Android App，都会因为越来越多的 Gradle 依赖而头疼。</p><p>一个 App 的编译依赖少则十几项，多则几十项，如果再加上多 module，那么依赖的统一管理就很重要了。</p><p>但是，如何高效统一管理，则是一个难题。今天就来说说如何使用 buildSrcVersions 轻松管理 gradle 依赖。</p><a id="more"></a><h2 id="1-ext-的弊端"><a class="markdownIt-Anchor" href="#1-ext-的弊端"></a> 1. Ext 的弊端</h2><p>在介绍 buildSrcVersions 之前，我们先来看看 Google 官方推荐的统一管理方式，即使用 <code>ext</code> 进行管理，例如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    <span class="comment">// The following are only a few examples of the types of properties you can define.</span></span><br><span class="line">    compileSdkVersion = <span class="number">28</span></span><br><span class="line">    buildToolsVersion = <span class="string">"28.0.3"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can also use this to specify versions for dependencies. Having consistent</span></span><br><span class="line">    <span class="comment">// versions between modules can avoid behavior conflicts.</span></span><br><span class="line">    supportLibVersion = <span class="string">"28.0.0"</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>build.gradle</code> 中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  <span class="comment">// Use the following syntax to access properties you defined at the project level:</span></span><br><span class="line">  <span class="comment">// rootProject.ext.property_name</span></span><br><span class="line">  compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">  buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是！这种方式有很大的问题：</p><ol><li>由于多 module 工程需要共享一些变量，<code>ext</code> 定义的位置可能在其他地方</li><li>最大的问题在于，IDE 不能跳转到这些变量的定义</li></ol><p>在日常使用中，如果你对工程不是很熟悉，那么在依赖版本需要更改的时候就要翻箱倒柜找一阵，这不免令人烦躁，影响工作效率。</p><p>那么除了 <code>ext</code> 之外有没有更好的统一管理依赖的方式呢？</p><p>有的，Gradle 提供了一个 <code>buildSrc</code> 方式。</p><h2 id="2-kotlin-buildsrc-管理-gradle-依赖"><a class="markdownIt-Anchor" href="#2-kotlin-buildsrc-管理-gradle-依赖"></a> 2. Kotlin + buildSrc 管理 gradle 依赖</h2><p>时至今日，Kotlin 不仅可以作为源文件用于开发目的，而且也可以当成脚本运行，这就是 <code>.kts</code> 文件，而且 Gradle 系统也支持使用 <code>kts</code> 文件作为 build 脚本。</p><p>废话不多说，使用 Kotlin 和 buildSrc 进行依赖管理主要需要以下步骤：</p><ol><li>在根目录建立 <code>buildSrc</code> 文件夹</li><li>在 <code>buildSrc</code> 中创建 <code>build.gradle.kts</code>，并加上如下语句</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  `kotlin-dsl`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>buildSrc/src/main/java</code> 中创建 <code>Versions.kt</code> 和 <code>Libs.kt</code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Versions &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> compileSdkVersion = <span class="number">28</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> targetSdkVersion = <span class="number">28</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> retrofit = <span class="string">"2.8.6"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Libs &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> retrofit = <span class="string">"com.squareup.retrofit2:retrofit:<span class="subst">$&#123;Versions.retrofit&#125;</span>”</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>最后，在 <code>app/build.gradle</code> 中</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  compileSdkVersion(Versions.compileSdkVersion)</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  implementation(Libs.retrofit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们既能实现依赖的统一管理，也能使用到 IDE 的自动补全和定义跳转功能，迅速定位到需要改动的版本。</p><p>但是！上面我们还是要自己去编写 <code>buildSrc</code>，不免有些麻烦。</p><p>而于此同时，我们也丢失了原先 gradle 会自动提示依赖的版本升级特性。</p><p>那么有没有一种东西能够把这两个东西结合在一起实现文体两开花呢？</p><p>到这里终于进入本篇主题：使用 <code>buildSrcVersions</code> 插件</p><h2 id="3-buildsrcversions-自动生成-buildsrc-目录"><a class="markdownIt-Anchor" href="#3-buildsrcversions-自动生成-buildsrc-目录"></a> 3. buildSrcVersions 自动生成 buildSrc 目录</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ptZmF5YXJkL2J1aWxkU3JjVmVyc2lvbnM=" title="https://github.com/jmfayard/buildSrcVersions"><code>buildSrcVersions</code> 插件的项目地址<i class="fa fa-external-link"></i></span></p><p>首先，我们在根目录的 <code>build.gradle</code> 中引入插件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">plugins &#123;</span><br><span class="line">  id(<span class="string">"de.fayard.buildSrcVersions"</span>) version <span class="string">"0.3.2"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Don't put any code before the buildscripts &#123;&#125; and plugins &#123;&#125; block</span></span><br></pre></td></tr></table></figure><p>这个插件增加了 <code>buildSrcVersions</code> 这个 gradle task。</p><p>运行这个 task，它就会扫描并读取你的依赖项，并以此自动生成 <code>buildSrc</code> 目录。</p><p>运行的结果如下：<br><img src="https://pic2.superbed.cn/item/5ce99625451253d178df7b87.jpg" alt="buildSrcVersions Result"></p><p>接下来，我们就可以将 <code>build.gradle</code> 中的依赖换成使用 <code>Libs</code> 进行引用</p><p><img src="https://pic.superbed.cn/item/5ce9971a451253d178df821a.jpg" alt="build.gradle with buildSrc"></p><p>可以看到，上面这些依赖都是染了色的，也就是说它们可以直接跳转到对应的定义，而且也可以进行补全。</p><p>同时，<code>buildSrcVersions</code> 还具备检查更新的能力，如果你已经生成过 <code>buildSrc</code> 了，那么再次运行 <code>buildSrcVersions</code> task 就会对你的依赖项进行更新检查，可用的新版本会以注释的形式附在对应依赖项字符串的后面。</p><p><img src="https://pic.superbed.cn/item/5ce99890451253d178df8c1e.jpg" alt="buildSrcVersions Update"></p><p>当然，它是不会随便改你的代码的，这个更新它只是进行一下提示，到底要不要使用新版本还是根据项目情况来决定。</p><p>不过，这个好用的插件也是有缺陷的：</p><p>首先，它会生成一个空的 <code>settings.gradle.kts</code> 文件，因为工程中只能有一个 <code>settings.gradle</code>，所以当它为空时还好，但是如果你往里面填东西，就会让 gradle 摸不着头脑，导致编译不稳定</p><p>对此，我们需要让它自动将 <code>settings.gradle</code> 文件删掉，为 <code>buildSrcVersions</code> task 增加一个 <code>doLast()</code> 即可：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasks[<span class="string">"buildSrcVersions"</span>].doLast &#123; delete(<span class="string">"$&#123;rootDir.path&#125;/buildSrc/settings.gradle.kts"</span>) &#125;</span><br></pre></td></tr></table></figure><p>其次，它会导致 <code>build configuration</code> 失败，如图：</p><p><img src="https://pic.superbed.cn/item/5ce99ac2451253d178df9b03.jpg" alt></p><p>其原因在于它的进程会占用 <code>build/dependenciesUpdate</code> 导致 <code>task(&quot;clean&quot;)</code> 无法创建。</p><p>虽然不影响工程的 Sync 和构建，但是有这个黄条总归是看的不爽的。</p><p>最后，它并不能自动的帮你改你的 <code>build.gradle</code>，需要你手动修改，当第一次使用这个东西的时候需要打的字还挺多的。</p><p>不过，比起它能自动快速构建 <code>buildSrc</code> 来说，也还算得上是瑕不掩瑜。</p><h2 id="4-一些潜在的坑"><a class="markdownIt-Anchor" href="#4-一些潜在的坑"></a> 4. 一些潜在的坑</h2><p>如果你选择使用 <code>buildSrcVersions</code> 插件，那么请将 Android 构建相关的版本号单独放置在一个新文件中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AndroidVersions.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> AndroidVersions &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> compileSdkVersion = <span class="number">28</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> targetSdkVersion = <span class="number">28</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> minSdkVersiosn = <span class="number">20</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每次 <code>buildSrcVersions</code> 运行都有可能会替换掉它生成的 <code>Versions.kt</code> 和 <code>Libs.kt</code></p><p>如果你选择自己编写 <code>buildSrc</code> 目录，务必注意以下几件事情：</p><ol><li>使用正确的目录结构</li></ol><blockquote><p><code>buildSrc</code> 遵循默认的 Java/Kotlin 目录结构，即 <code>buildSrc/src/main/java/...</code></p></blockquote><ol start="2"><li>不要忘记加 <code>jcenter()</code></li></ol><blockquote><p>不要忘记在 <code>buildSrc/build.gradle.kts</code> 中增加 <code>jcenter()</code>，否则 <code>kotlin-dsl</code> 插件是加载不成功的</p></blockquote><p>最后，也希望我的这篇文章能给大家提高劳动生产率吧，毕竟谁都想偷懒不是？😆</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你开发过稍微有点体量的 Android App，都会因为越来越多的 Gradle 依赖而头疼。&lt;/p&gt;&lt;p&gt;一个 App 的编译依赖少则十几项，多则几十项，如果再加上多 module，那么依赖的统一管理就很重要了。&lt;/p&gt;&lt;p&gt;但是，如何高效统一管理，则是一个难题。今天就来说说如何使用 buildSrcVersions 轻松管理 gradle 依赖。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://wafer.li/categories/Android/"/>
    
    
      <category term="Android" scheme="https://wafer.li/tags/Android/"/>
    
      <category term="Gradle" scheme="https://wafer.li/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>递归树分析归并排序算法复杂度</title>
    <link href="https://wafer.li//Algorithm/%E9%80%92%E5%BD%92%E6%A0%91%E5%88%86%E6%9E%90%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://wafer.li//Algorithm/递归树分析归并算法复杂度/</id>
    <published>2018-02-18T18:36:00.000Z</published>
    <updated>2018-02-20T04:42:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前学算法分析的时候只知道通过数语句来计算算法的复杂度，而对于递归算法没有很好的方法；</p><p>由于递归算法通常采用分治思路，每递归一次，子问题在增多，但是子问题的规模在减少，所以如何去计算这种递归类算法的复杂度呢？<br>斯坦福的教授提供了一种使用 <strong>递归树</strong> 的方法。</p><a id="more"></a><h2 id="归并的复杂度"><a class="markdownIt-Anchor" href="#归并的复杂度"></a> 归并的复杂度</h2><p>这里我们采用经典的归并排序算法作为一个例子，使用递归树来分析它的复杂度。</p><p>我们知道，归并排序算法主要分为三个步骤：</p><ol><li>递归左半部分</li><li>递归右半部份</li><li>将排好序的左半边和右半边合并</li></ol><p>对于归并(merge)部分，我们可以很清楚地计算出其复杂度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for k from 0 to N-1:</span><br><span class="line">    if A[i] &lt; B[j]:</span><br><span class="line">        C[k] = A[i]</span><br><span class="line">        i++</span><br><span class="line">    else if B[j] &lt; A[i]:</span><br><span class="line">        C[k] = B[j]</span><br><span class="line">        j++</span><br></pre></td></tr></table></figure><p>首先在循环部分，循环的每一次执行了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">4</span></span></span></span> 次操作，所以一共需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">4N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次操作；</p><p>然后初始化 <code>i</code> 和 <code>j</code> 需要两次操作；</p><p>所以，归并部分一共执行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>N</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">4N + 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span></span></span></span> 次操作，由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N \ge 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8193em;vertical-align:-.13597em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>，所以：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>N</mi><mo>+</mo><mn>2</mn><mo>≤</mo><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">4N + 2 \le 6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.78041em;vertical-align:-.13597em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span></p><p>粗糙一点，我们可以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 作为归并部分的复杂度。</p><h2 id="递归树和归并排序的复杂度"><a class="markdownIt-Anchor" href="#递归树和归并排序的复杂度"></a> 递归树和归并排序的复杂度</h2><p>对于我们的递归程序，我们采用递归树来分析它的复杂度：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fomd2buxgyj30h208vglh.jpg" alt></p><p>其中，横条表示的是 <strong>输入数据的长度</strong>，根节点的输入规模为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>；</p><p>每进行一次递归，树就向下深入一层；</p><p>那么，根据二叉树结论，树的总层数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\log{N} + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>；</p><p>对于第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span> 层，拥有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>j</mi></msup></mrow><annotation encoding="application/x-tex">2^j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.824664em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.824664em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span></span></span></span> 个节点，同时每个节点的输入规模为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>j</mi></msup></mrow><annotation encoding="application/x-tex">N / {2^j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.824664em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，对于第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span> 层，其执行的操作数为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>j</mi></msup><mo>×</mo><mn>6</mn><mo stretchy="false">(</mo><mi>N</mi><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>j</mi></msup><mo stretchy="false">)</mo><mo>=</mo><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">2^j \times 6(N/2^j) = 6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.957994em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.874664em"><span style="top:-3.1130000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.124664em;vertical-align:-.25em"></span><span class="mord">6</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.874664em"><span style="top:-3.1130000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span></p><p>而二叉树一共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\log{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span> 层，所以，归并排序的总复杂度是：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mn>6</mn><mi>N</mi><mo>=</mo><mn>6</mn><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>+</mo><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">(\log{N} + 1) \times 6N = 6N\log{N} + 6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span></p><p>所以，我们就得到了归并排序的总复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N\log{N})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mclose">)</span></span></span></span></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>这里来总结一下使用递归树进行算法分析的步骤：</p><ol><li>计算递归的每一步中的复杂度</li><li>按照递归的分裂程度，画出不同的递归树</li><li>分析 <strong>每一层</strong> 的时间复杂度，重点关注<strong>节点数量</strong>和<strong>该层每节点的输入规模</strong></li><li>每一层的复杂度乘以层数，就是递归算法的总复杂度</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前学算法分析的时候只知道通过数语句来计算算法的复杂度，而对于递归算法没有很好的方法；&lt;/p&gt;&lt;p&gt;由于递归算法通常采用分治思路，每递归一次，子问题在增多，但是子问题的规模在减少，所以如何去计算这种递归类算法的复杂度呢？&lt;br&gt;斯坦福的教授提供了一种使用 &lt;strong&gt;递归树&lt;/strong&gt; 的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://wafer.li/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://wafer.li/tags/Algorithm/"/>
    
      <category term="Algorithm Analysis" scheme="https://wafer.li/tags/Algorithm-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>GPG + Yubikey 4 折腾手记</title>
    <link href="https://wafer.li//GPG/GPG%20+%20Yubikey%204%20%E6%8A%98%E8%85%BE%E6%89%8B%E8%AE%B0/"/>
    <id>https://wafer.li//GPG/GPG + Yubikey 4 折腾手记/</id>
    <published>2018-01-21T16:30:00.000Z</published>
    <updated>2018-01-22T13:55:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>GPG 相信很多人都折腾过，Yubikey 也有很多人买过；</p><p>但是好像只有老外折腾过 Yubikey + GPG 的；</p><p>最近刚折腾完毕，因为自己不慎还把一个老钥匙搞丢了，现在只能随它去了；</p><p>这里就写写我折腾过程中遇到的坑，前车之鉴，后事之师。</p><a id="more"></a><h2 id="准备-yubikey"><a class="markdownIt-Anchor" href="#准备-yubikey"></a> 准备 Yubikey</h2><p>Yubikey 买不就行了，为什么要单开一个 section 来说呢？</p><p>其实 Yubikey 目前主要有两个系列，一个是 Yubikey 4，一个是 Yubikey NEO。</p><p>这两者有什么区别呢？</p><ol><li>Yubikey 4 不支持 NFC，但是可以支持 4096 bit 的密钥</li><li>Yubikey NEO 支持 NFC，但是只能支持 2048 bit 的密钥</li></ol><p>也就是说，如果你想在手机上用，那么就只能使用 2048 bit 的密钥；</p><p>如果你想更长的密钥，就不能在手机上用。</p><p>当然，除了用于 GPG 的 Smartcard 以外，Yubikey 还可以用于两步验证等其他方面，这就要看你的需求的取舍了，这个东西在你买的时候就要考虑好。</p><h2 id="安装-gpg"><a class="markdownIt-Anchor" href="#安装-gpg"></a> 安装 GPG</h2><p>折腾 GPG 的第一步当然就是安装 GPG，我使用的是 Mac，所以直接安装 <span class="exturl" data-url="aHR0cHM6Ly9ncGd0b29scy5vcmcv" title="https://gpgtools.org/">GPGSuite<i class="fa fa-external-link"></i></span>，然后再用 <code>brew</code> 安装 <code>gnupg</code> 就行了。</p><p>不过，如果你使用 4096 bit 的密钥，那么你需要使用 <code>gpg2</code> 而不是 <code>gpg</code></p><h2 id="编辑卡的信息"><a class="markdownIt-Anchor" href="#编辑卡的信息"></a> 编辑卡的信息</h2><p>把 Yubikey 拿到手之后我们先别忙着生成密钥，首先，我们要配置一下卡的信息，其实主要就是设置卡的 PIN 和 Admin PIN，而这个在要把密钥导入卡的时候需要。</p><p>将卡插入 USB，然后执行 <code>gpg2 --card-edit</code>；</p><p>然后你就会看到卡的相关信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Reader ...........: Yubico Yubikey 4 OTP U2F CCID</span><br><span class="line">Application ID ...: D2760001240102010006046218630000</span><br><span class="line">Version ..........: 2.1</span><br><span class="line">Manufacturer .....: Yubico</span><br><span class="line">Serial number ....: 04621863</span><br><span class="line">Name of cardholder: Wafer Li</span><br><span class="line">Language prefs ...: zh</span><br><span class="line">Sex ..............: 男性</span><br><span class="line">URL of public key : hkp://keys.gnupg.net</span><br><span class="line">Login data .......: omyshokami@gmail.com</span><br><span class="line">Signature PIN ....: 必须</span><br><span class="line">Key attributes ...: rsa4096 rsa4096 rsa4096</span><br><span class="line">Max. PIN lengths .: 127 127 127</span><br><span class="line">PIN retry counter : 3 0 3</span><br><span class="line">Signature counter : 43</span><br><span class="line">Signature key ....: E219 29F0 DEC5 FAEC 434A  91D7 E22B 63C2 E449 298F</span><br><span class="line">      created ....: 2018-01-21 09:31:56</span><br><span class="line">Encryption key....: 20F2 E95E 0107 1097 A853  A5CC E6AB 1330 6FE4 E5D9</span><br><span class="line">      created ....: 2018-01-21 09:31:56</span><br><span class="line">Authentication key: C1A4 2561 3A5D E7D5 4CBF  CD4B 7440 5003 FFA1 4684</span><br><span class="line">      created ....: 2018-01-21 09:32:39</span><br><span class="line">General key info..: pub  rsa4096/E22B63C2E449298F 2018-01-21 Wafer Li (Gmail. Mainly used <span class="keyword">in</span> git) &lt;omyshokami@gmail.com&gt;</span><br><span class="line">sec&gt;  rsa4096/E22B63C2E449298F  创建于：2018-01-21  有效至：2020-01-21</span><br><span class="line">                                卡号：0006 04621863</span><br><span class="line">ssb&gt;  rsa4096/E6AB13306FE4E5D9  创建于：2018-01-21  有效至：2020-01-21</span><br><span class="line">                                卡号：0006 04621863</span><br><span class="line">ssb&gt;  rsa4096/74405003FFA14684  创建于：2018-01-21  有效至：2020-01-21</span><br><span class="line">                                卡号：0006 04621863</span><br></pre></td></tr></table></figure><p>然后输入 <code>admin</code>，再输入 <code>help</code>，就可以使用管理员命令并看到相关帮助：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gpg/card&gt; admin</span><br><span class="line">允许使用管理员命令</span><br><span class="line"></span><br><span class="line">gpg/card&gt; <span class="built_in">help</span></span><br><span class="line">quit           离开这个菜单</span><br><span class="line">admin          显示管理员命令</span><br><span class="line"><span class="built_in">help</span>           显示这份在线说明</span><br><span class="line">list           列出所有可用数据</span><br><span class="line">name           更改卡持有人的姓名</span><br><span class="line">url            更改获取密钥的 URL</span><br><span class="line">fetch          根据卡中指定的 URL 获取密钥</span><br><span class="line">login          更改登录名</span><br><span class="line">lang           更改首选语言首选</span><br><span class="line">sex            更改卡持有人的性别</span><br><span class="line">cafpr          更改一个 CA 指纹</span><br><span class="line">forcesig       设定 PIN 签名是否必须</span><br><span class="line">generate       生成新的密钥</span><br><span class="line">passwd         更改或解锁 PIN 的菜单</span><br><span class="line">verify         验证 PIN 并列出所有数据</span><br><span class="line">unblock        unblock the PIN using a Reset Code</span><br><span class="line">factory-reset  destroy all keys and data</span><br></pre></td></tr></table></figure><p>最近 <code>gpg2</code> 的中文化做的不错，相信你已经看懂大概了，要修改密码，我们输入 <code>passwd</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gpg/card&gt; passwd</span><br><span class="line">gpg: 检测到 OpenPGP 卡号 D2760001240102010006046218630000</span><br><span class="line"></span><br><span class="line">1 - change PIN</span><br><span class="line">2 - unblock PIN</span><br><span class="line">3 - change Admin PIN</span><br><span class="line">4 - <span class="built_in">set</span> the Reset Code</span><br><span class="line">Q - quit</span><br><span class="line"></span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>然后我们分别输入 <code>1</code> 和 <code>2</code> 去修改 PIN 和 Admin PIN。</p><p>接着会弹出一个框让你输入原来的 PIN，那么原来的 PIN 是什么呢？</p><p>根据 Yubikey 的文档，<strong>PIN 和 Admin PIN 的出厂设置都是 12345678</strong>。</p><p>记住这个密码，如果你接下来把东西搞炸了，你还可以把 Yubikey 恢复出厂设置，这时你就需要它了。</p><p>改完密码之后我们选择 <code>Q</code> 和 <code>quit</code> 退出卡的编辑界面，注意不要 <code>Ctrl + C</code>，可能会丢失修改，最好还是使用它的退出来退出。</p><h2 id="生成密钥"><a class="markdownIt-Anchor" href="#生成密钥"></a> 生成密钥</h2><p>现在我们终于要生成密钥了，生成密钥这个很多人都讲过了，操作也就那些，这里就不再细讲，说点要注意的地方。</p><p>首先就是密钥的长度，如果你使用 Yubikey 4 的话，使用 4096 bit 的，如果你使用 Yubikey NEO 的话，那么就只能使用默认的 2048 bit 了。</p><p>但是，如果你以后想换成 Yubikey NEO 的话，那么还是用 2048 的，不要用 4096 的。</p><p>然后在生成密钥的时候为了让它得到更多的熵，多动动鼠标就行了，不需要敲键盘，否则就敲到什么命令了。</p><p>生成完毕之后，输入 <code>gpg2 --expert --edit-key KEYID</code> 进入下一个步骤。</p><h3 id="生成子密钥"><a class="markdownIt-Anchor" href="#生成子密钥"></a> 生成子密钥</h3><p>这个可能很多人没讲过，实际上 Yubikey 可以存储 3 种密钥，签名、加密和认证；</p><p>默认生成的只有签名密钥和加密密钥，并不会生成认证密钥。</p><p>认证密钥有什么用呢？我查到主要还是用于 SSH 登录，不过这次我没有折腾出来，之后可能会写另外一篇关于这个的文章。</p><p>刚才我们进入了 <code>--edit-key</code> 的界面，在这里我们输入 <code>addkey</code> 就可以增加一个子密钥了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gpg&gt; addkey</span><br><span class="line">主钥的私钥部分存储在卡上。</span><br><span class="line">请选择您要使用的密钥种类：</span><br><span class="line">   (3) DSA (仅用于签名)</span><br><span class="line">   (4) RSA (仅用于签名)</span><br><span class="line">   (5) ElGamal (仅用于加密)</span><br><span class="line">   (6) RSA (仅用于加密)</span><br><span class="line">   (7) DSA (自定义用途)</span><br><span class="line">   (8) RSA (自定义用途)</span><br><span class="line">  (10) ECC (sign only)</span><br><span class="line">  (11) ECC (<span class="built_in">set</span> your own capabilities)</span><br><span class="line">  (12) ECC (encrypt only)</span><br><span class="line">  (13) Existing key</span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>这里之所以出现这么多选项是因为我们上面使用了 <code>--expert</code> 模式，如果你要创建认证密钥，那么就必须使用这种模式。</p><p>在这里我们选择 8，用 RSA 算法来生成认证子密钥。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RSA 密钥可能的操作：签名 加密 认证</span><br><span class="line">目前允许的操作：签名 加密</span><br><span class="line"></span><br><span class="line">   (S) 选择是否用于签名</span><br><span class="line">   (E) 选择是否用于加密</span><br><span class="line">   (A) 选择是否用于认证</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>这里给你的选项是个开关选项，像现在的状态，我如果选择 S，上面的 <em>目前允许的操作</em> 就会变成只有加密。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">您的选择？ s</span><br><span class="line"></span><br><span class="line">RSA 密钥可能的操作：签名 加密 认证</span><br><span class="line">目前允许的操作：加密</span><br><span class="line"></span><br><span class="line">   (S) 选择是否用于签名</span><br><span class="line">   (E) 选择是否用于加密</span><br><span class="line">   (A) 选择是否用于认证</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>然后我们让这个密钥只能进行认证，然后生成它就行了。</p><p>最后输入 <code>save</code> 保存并退出。</p><h2 id="备份密钥"><a class="markdownIt-Anchor" href="#备份密钥"></a> 备份密钥</h2><p>注意！</p><p><strong>这个操作必须在将密钥传入 Yubikey 之前进行！</strong></p><p>备份是很重要的，一旦你将密钥传入 Yubikey 中，那么就再也取不出来了！</p><p style="font-weight:700;font-size:x-large">而且尤其注意要备份你的主密钥！</p><p></p><p>你的主密钥不仅具有签名功能，而且还代表了你的身份，如果丢失了主密钥，就意味着你的身份就此丢失，你只能创建一个新的密钥，并把原来的吊销掉。</p><p>这里尤其要注意：</p><p style="font-weight:700;font-size:xx-large">请记住你的密钥 passphrase</p><p></p><p>因为 GPG 在导入一个私钥的时候会要求它的密码，如果你把它忘记了，那么你就丢失了你的密钥。</p><p>使用下面的命令来导出你的私钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --armor --export-secret-keys KEYID &gt;&gt; private.asc</span><br></pre></td></tr></table></figure><p>请好好保存它，并记住它的密码。</p><h2 id="转移密钥到-yubikey"><a class="markdownIt-Anchor" href="#转移密钥到-yubikey"></a> 转移密钥到 Yubikey</h2><p>当你备份并保存好你的主私钥之后，就可以将密钥传入 Yubikey 了。</p><p>当然其实也可以不将主密钥传到 Yubikey 中，不过在有了良好备份的情况下，我们就可以追求更高的安全性，毕竟把你的私钥保存在电脑里面总是不好的。</p><p>进入密钥编辑模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --edit-key KEYID</span><br></pre></td></tr></table></figure><p>输入 <code>toggle</code>，然后输入 <code>keytocard</code>，输入 <code>y</code> 确认将主密钥传入 Yubikey 中，然后选择 <code>1</code>，将主密钥作为签名密钥。</p><p>这时就会把你的主密钥传到 Yubikey 中，这时它就会问你密钥的密码，还有 Yubikey 的 Admin PIN。</p><p>输入 <code>key 1</code> 选择<strong>第二个</strong>密钥：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnppmejbx9j307b06ft8m.jpg" alt></p><p>这时候你的第二个密钥就会有个 <code>*</code>，如上图所示。</p><p>然后继续输入 <code>keytocard</code> 将密钥传入，接着选择对应的密钥类型就行了。</p><p>第二个密钥传入完成之后，我们输入 <code>key 1</code> <strong>取消选择第二个密钥</strong>。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnpppmud1vj307b061q2u.jpg" alt></p><p>接着，我们再输入 <code>key 2</code> 选择第三个密钥。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnppq8ms3xj308105lq2u.jpg" alt></p><p>接着再输入 <code>keytocard</code> 传入 Yubikey，选择对应的密钥类型就行了。</p><h2 id="关于-keytocard-的说明"><a class="markdownIt-Anchor" href="#关于-keytocard-的说明"></a> 关于 keytocard 的说明</h2><p>当你使用了 keytocard 之后会发现，好像你的密钥并没有传出去啊？</p><p>如果你使用 <code>gpg2 --export-secret-keys</code> 也能正常导出，这是怎么回事呢？</p><p>其实，<code>keytocard</code> 的确将你的密钥导出了，但是它在电脑里面留下了一个 stub，这个实际上是没有什么用的。</p><p>使用 <code>gpg2 --export-secret-keys</code> 可以将你的密钥导出，但是，并没有什么卵用，它不是真的私钥，如果你将你的 Yubikey 恢复出厂设置，删掉你的私钥并将这个新导出的导入。</p><p>然后你就会发现你<strong>并没有导入私钥</strong>，在你的钥匙链里面显示的你的密钥是<strong>公钥</strong>，并不是密钥对。</p><p>这也是为什么我一再强调必须备份私钥并记住密码的原因了；</p><p>假如你随便乱搞，没有备份私钥又将 Yubikey 恢复出厂设置，那么你的私钥就彻底丢失了。</p><h2 id="使用密钥"><a class="markdownIt-Anchor" href="#使用密钥"></a> 使用密钥</h2><p>GPG 能干嘛呢？可以给邮件加密，给 Git Commit 签名之类的。</p><p>或者你可以直接用 <code>gpg2 --clearsign</code> 签名一段信息；</p><p>如果你没用 Yubikey，那么 GPG 会直接询问你的密钥 passphrase；</p><p>但是如果你使用了 Yubikey，那么它就不会问你 passphrase，而是问你的 Yubikey PIN 作为密码。</p><p>如果你在 Yubikey 拔掉的时候进行 GPG 签名或者加密操作，那么它就会要求你插入智能卡。</p><p>如果你遇见了上面的情况，那么就说明你的配置成功了。</p><h2 id="yubikey-的支持性"><a class="markdownIt-Anchor" href="#yubikey-的支持性"></a> Yubikey 的支持性</h2><p>目前来看，PC 端(Mac)和 Android 都支持使用 Yubikey；</p><p>但是 Chrome 插件就不行了，还是只能使用 passphrase 解锁私钥。</p><p>这也是为什么要让你记住 passphrase 的原因。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>说了这么多，最后欢迎大家导入我的公钥给我发加密邮件。</p><p>我的密钥是 E449298F<br>指纹：E219 29F0 DEC5 FAEC 434A 91D7 E22B 63C2 E449 298F</p><p>你应该会至少看到 3 个标识，两个邮箱，一个 PhotoID；</p><p>其中邮箱有 Tsanie Lily(1701D0C1) 的签名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GPG 相信很多人都折腾过，Yubikey 也有很多人买过；&lt;/p&gt;&lt;p&gt;但是好像只有老外折腾过 Yubikey + GPG 的；&lt;/p&gt;&lt;p&gt;最近刚折腾完毕，因为自己不慎还把一个老钥匙搞丢了，现在只能随它去了；&lt;/p&gt;&lt;p&gt;这里就写写我折腾过程中遇到的坑，前车之鉴，后事之师。&lt;/p&gt;
    
    </summary>
    
      <category term="GPG" scheme="https://wafer.li/categories/GPG/"/>
    
    
      <category term="GPG" scheme="https://wafer.li/tags/GPG/"/>
    
      <category term="Yubikey" scheme="https://wafer.li/tags/Yubikey/"/>
    
  </entry>
  
  <entry>
    <title>解决脚注中数学公式不能渲染的问题</title>
    <link href="https://wafer.li//Hexo/%E8%A7%A3%E5%86%B3%E8%84%9A%E6%B3%A8%E4%B8%AD%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%83%BD%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://wafer.li//Hexo/解决脚注中数学公式不能渲染的问题/</id>
    <published>2018-01-16T08:39:00.000Z</published>
    <updated>2018-02-01T17:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，鉴于性能考量，我从 MathJax 迁移到了 Katex，但是随之而来出现了一个问题，就是脚注里面的数学公式没办法渲染出来。</p><a id="more"></a><p>如图：<br><img src="https://user-images.githubusercontent.com/12459199/34936577-4bafd6de-fa25-11e7-972d-6f165f2e94ab.png" alt="Math Cannot Render In Footnote"></p><p>但是，如果我仅仅使用 <code>node</code> 的 REPL 和用于 markdown 渲染的 <code>markdown-it</code> 以及它的两个插件 <code>markdown-it-katex</code> 和 <code>markdonw-it-footnote</code> 分别用于提供 Katex 和脚注功能的话；</p><p>是可以渲染出 Katex 和脚注的 HTML 结构的：</p><p><img src="https://user-images.githubusercontent.com/12459199/34937236-7d5a1652-fa27-11e7-9601-8ca331a00cde.png" alt></p><p>这是怎么回事呢？</p><p>经过辛苦的研究之后发现，我的原本的 <code>_config.yml</code> 写的就比较有毒，很多自定义的配置都插在了原来配置的中间，而且缩进格式也不规范。</p><p>后来重新将所有配置都写在原来配置的后面，规范了一下缩进问题就解决了。</p><p>所以大家遇到这种问题的时候最好检查一下自己的 <code>_config.yml</code> 文件有没有格式上的错误，特别是缩进的错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，鉴于性能考量，我从 MathJax 迁移到了 Katex，但是随之而来出现了一个问题，就是脚注里面的数学公式没办法渲染出来。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Katex" scheme="https://wafer.li/tags/Katex/"/>
    
  </entry>
  
  <entry>
    <title>解决 Travis CI 总是更新旧博客的问题</title>
    <link href="https://wafer.li//Hexo/%E8%A7%A3%E5%86%B3%20Travis%20CI%20%E6%80%BB%E6%98%AF%E6%9B%B4%E6%96%B0%E6%97%A7%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://wafer.li//Hexo/解决 Travis CI 总是更新旧博客的问题/</id>
    <published>2018-01-12T07:45:00.000Z</published>
    <updated>2018-01-13T04:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文着重介绍一下如何解决 Travis CI 在进行自动集成的时候，总是会更新旧博客的问题。</p><p>之前有想过要把这篇文章合并到上一篇里面，不过这个问题比较隐蔽，而且较难解决，最后还是新开一篇文章来详细讲一下该怎么做，防止以后有人再被这个问题困扰。</p><a id="more"></a><h2 id="1-初级症状master-的-commit-只有两个"><a class="markdownIt-Anchor" href="#1-初级症状master-的-commit-只有两个"></a> 1. 初级症状——master 的 commit 只有两个</h2><p>在经过上一篇文章的折腾之后，Travis CI 总算是能够正常执行脚本并提交到 GitHub 上进行；</p><p>不过，如果你查看 master 的 commit 情况就会发现，你原本满满当当的页面构建历史突然就只有两个了。</p><p>博客最重要的就是积累，现在一个构建你的博客就变成新博客了，简直不能忍。</p><p>这个问题的原因在于你的博客目录下没有之前 deploy 会生成的 <code>.deploy_git</code> 这个目录；</p><p>这个目录实际上也就是你的 master 分支，在没有这个目录的情况下，<code>hexo-deploy-git</code> 插件会自动生成 <code>.deploy_git</code>，并将 <code>public</code> 复制到这个目录下；</p><p>然后插件会进行 <strong>force push</strong>！这就是你的 commit 历史会丢失的原因！</p><p>解决方法也很简单，首先你需要在本地进行一次 deploy，来恢复你的 commit 历史</p><p>然后，只需要在每次构建的时候都 <code>clone</code> 一下这个目录，这样你的历史就不会丢失了。</p><p>往 <code>.travis.yml</code> 加入如下脚本即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch=master</span> <span class="string">&#123;your_blog_repo_git_url&#125;</span> <span class="string">.deploy_git</span></span><br></pre></td></tr></table></figure><h2 id="2-高级症状旧博客总是被更新"><a class="markdownIt-Anchor" href="#2-高级症状旧博客总是被更新"></a> 2. 高级症状——旧博客总是被更新</h2><p>这个症状是本文的重点，也是本文最终要解决的问题。</p><p>症状的具体表现在于，博客的更新时间总是最新的；</p><p><strong>就连你没有更新过的旧博客也一样！</strong></p><p>如图所示，图片中的更新时间全部都一样，按常理来说这是不可能的。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnedchdb50j30jn0dg0ta.jpg" alt></p><p>这到底是什么原因呢？</p><h3 id="21-症状原因"><a class="markdownIt-Anchor" href="#21-症状原因"></a> 2.1 症状原因</h3><p>经过一番查询之后，我查到了<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmphbWVzcGFuLm1lLzIwMTYvMDQvMjQvcmVzdG9yZS1maWxlcy1tb2RpZmljYXRpb24tdGltZS1pbi1naXQ=" title="https://blog.jamespan.me/2016/04/24/restore-files-modification-time-in-git">这篇博文<i class="fa fa-external-link"></i></span>；</p><p>里面提到，Hexo 并不识别文章的更新时间，而是将这个更新时间交给了系统进行；</p><p>实际上 Hexo 的文章更改时间就是 markdown 文件的 <strong>最后修改时间</strong>；</p><p>到这里，原因已经很明显了：</p><p>由于 Travis CI 在构建的时候，总是 <strong>重新 clone repo</strong>，这就造成了 <strong>所有文件的最后修改时间都是最新的 clone 时间</strong>；</p><p>实际上，这并不是 Travis CI 的问题，而是 git 的问题，git 由于分布式的原因，并不会保留文件的最后修改时间；</p><p>不过，作为一个博客系统来说，我们可以采用 git 的最后 commit 时间来替代，这样子就能恢复文件的修改时间了。</p><h3 id="22-解决办法"><a class="markdownIt-Anchor" href="#22-解决办法"></a> 2.2 解决办法</h3><p>解决方案清楚之后我就开始寻找相关的实现，不过网上现有的一步到位修改文件 last modified time 的实现都不能解决 non-ASCII 的问题；</p><blockquote><p>所谓 non-ASCII 的问题就是当你的文件名含有中文或者其他的字符的时候，脚本就会炸掉，执行不下去。</p></blockquote><p>最后面还是毛主席说得好，自己动手丰衣足食，在参照了<span class="exturl" data-url="aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vYS83NzQ1NzQ=" title="https://serverfault.com/a/774574">这个 StackOverflow 的答案<i class="fa fa-external-link"></i></span>之后，我编写了下面的脚本，终于解决了 non-ASCII 文件名的问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ != <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">raise</span> ImportError(<span class="string">"%s should not be used as a module."</span> % __name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'git ls-files -z | xargs -0 -n1 -I&#123;&#125; -- git log -1 --format="%ct &#123;&#125;" &#123;&#125; | sort'</span></span><br><span class="line">git_ls_cmd = <span class="string">'git ls-files -z'</span></span><br><span class="line">xargs_cmd = <span class="string">'xargs -0 -n1 -I&#123;&#125; -- git log -1 --format="%ct &#123;&#125;" &#123;&#125;'</span></span><br><span class="line">sort_cmd = <span class="string">'sort'</span></span><br><span class="line"></span><br><span class="line">work_dir = os.getcwd()</span><br><span class="line"></span><br><span class="line">git_ls_result = subprocess.Popen(shlex.split(git_ls_cmd), stdout=subprocess.PIPE)</span><br><span class="line">xargs_result = subprocess.Popen(shlex.split(xargs_cmd), stdin=git_ls_result.stdout, stdout=subprocess.PIPE)</span><br><span class="line">result = subprocess.check_output(<span class="string">'sort'</span>, stdin=xargs_result.stdout)</span><br><span class="line"></span><br><span class="line">timestamp_file_list = [tuple(it.split(<span class="string">' '</span>, <span class="number">1</span>)) <span class="keyword">for</span> it <span class="keyword">in</span> result.decode(<span class="string">'utf-8'</span>).split(<span class="string">'\n'</span>)][:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> timestamp, file_path <span class="keyword">in</span> timestamp_file_list:</span><br><span class="line">    os.utime(os.path.join(work_dir, file_path), (int(timestamp), int(timestamp)))</span><br></pre></td></tr></table></figure><p>你也可以在<span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vd2FmZXItbGkvYTdhNjJhNDQyM2NmMzljNDNkYzU2ZDYyOGZmNGMzNjU=" title="https://gist.github.com/wafer-li/a7a62a4423cf39c43dc56d628ff4c365">这个 gist<i class="fa fa-external-link"></i></span>里面获取其代码；</p><p>在你把 repo 克隆下来，进行了 <code>user.name</code> 和 <code>user.email</code> 的配置之后，用 <code>python3</code> 执行一下这个脚本，就能恢复文件的最后修改时间。</p><p>相关的 <code>.travis.yml</code> 配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Git Config</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"your_user_name"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"your_email"</span></span><br><span class="line"><span class="comment"># Restore last modified time</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">git_reset_mtime.py</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">python3</span> <span class="string">./git_reset_mtime.py</span></span><br></pre></td></tr></table></figure><blockquote><p>特别注意！<strong>必须使用 <code>python3</code> 执行</strong>，本脚本目前最低支持到 python 3.4</p></blockquote><blockquote><p>之所以是 3.4 是因为 Travis CI 的 python3 的最新版本就只到 3.4；<br>不能采用 3.5 之后才能使用的 <code>subprocess.run()</code></p></blockquote><h3 id="23-clone-depth-导致的问题"><a class="markdownIt-Anchor" href="#23-clone-depth-导致的问题"></a> 2.3 Clone Depth 导致的问题</h3><p>在经过上面的一番折腾之后，你会发现一个奇怪的现象：在本地测试脚本完全成功，但是把脚本放到 Travis CI 去运行却不行， <strong>最多只能恢复几天前的修改时间</strong>。</p><p>在查看了一下 Travis CI 的 log 之后，我发现：</p><p>Travis CI 默认会采用 <code>--depth=50</code> 这个参数，也就是说，它之后克隆 <strong>前 50 个 commit</strong>；</p><p>而我们的脚本需要<strong>完整的 git 历史记录</strong>才能正确的恢复文件的修改时间；</p><p>所以，我们还需要取消 Travis CI 的默认 <code>depth</code> 参数，让它克隆我们完整的 git 仓库:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">    depth:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="3-最终的-travis-ci-脚本"><a class="markdownIt-Anchor" href="#3-最终的-travis-ci-脚本"></a> 3. 最终的 Travis CI 脚本</h2><p>这里给出我最终测试成功的 Travis CI 脚本给大家参考：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dist:</span> <span class="string">trusty</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">    ssh_known_hosts:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">github.com</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">git.coding.net</span></span><br><span class="line"><span class="attr">    apt:</span></span><br><span class="line"><span class="attr">        packages:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">nasm</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">ATOM_WRITER_PATCH_URL=https://raw.githubusercontent.com/wafer-li/hexo-generator-atom-markdown-writer-meta/9f8ab23d42a60a9fa7ef8eed161f216a7716d14d/lib/generator.js</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">ATOM_WRITER_DIR=node_modules/hexo-generator-atom-markdown-writer-meta/</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">TZ=Asia/Tokyo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">source</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">    depth:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    submodules:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">    apt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    directories:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Git Config</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"wafer-li"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"omyshokami@gmail.com"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Restore last modified time</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"git ls-files -z | while read -d '' path; do touch -d \"$(git log -1 --format=\"@%ct\" \"$path\")\" \"$path\"; done"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Submodules</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--recursive</span> <span class="bullet">--remote</span> <span class="bullet">--init</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Deploy history</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch=master</span> <span class="bullet">--single-branch</span> <span class="attr">https://github.com/wafer-li/wafer-li.github.io.git</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSH Setup</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_XXXXXXXXX_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_XXXXXXXXX_iv</span> <span class="bullet">-in</span> <span class="string">blog_deploy_key.enc</span> <span class="bullet">-out</span> <span class="string">blog_deploy_key</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">eval</span> <span class="string">"$(ssh-agent -s)"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">./blog_deploy_key</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ssh-add</span> <span class="string">./blog_deploy_key</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">    <span class="comment"># Patch atom writer generator</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">curl</span> <span class="string">$ATOM_WRITER_PATCH_URL</span> <span class="string">&gt;|</span> <span class="string">$&#123;ATOM_WRITER_DIR&#125;/lib/generator.js</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## Theme Dependencies</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">themes/next-reloaded</span></span><br><span class="line">    <span class="comment"># canvas-nest</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-canvas-nest</span> <span class="string">source/lib/canvas-nest</span></span><br><span class="line">    <span class="comment"># fancybox3</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-fancybox3</span> <span class="string">source/lib/fancybox</span></span><br><span class="line">    <span class="comment"># reading_progress</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-reading-progress</span> <span class="string">source/lib/reading_progress</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">../..</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span> <span class="bullet">-d</span> <span class="bullet">--config</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure><h2 id="4-参考资料"><a class="markdownIt-Anchor" href="#4-参考资料"></a> 4. 参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmphbWVzcGFuLm1lLzIwMTYvMDQvMjQvcmVzdG9yZS1maWxlcy1tb2RpZmljYXRpb24tdGltZS1pbi1naXQ=" title="https://blog.jamespan.me/2016/04/24/restore-files-modification-time-in-git">从 Git 提交历史中「恢复」文件修改时间<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vYS83NzQ1NzQ=" title="https://serverfault.com/a/774574">How to retrieve the last modification date of all files in a git repository<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01lc3RyZUxpb24vZ2l0LXRvb2xzL2Jsb2IvbWFzdGVyL2dpdC1yZXN0b3JlLW10aW1l" title="https://github.com/MestreLion/git-tools/blob/master/git-restore-mtime">git-tools/git-restore-mtime at master · MestreLion/git-tools<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文着重介绍一下如何解决 Travis CI 在进行自动集成的时候，总是会更新旧博客的问题。&lt;/p&gt;&lt;p&gt;之前有想过要把这篇文章合并到上一篇里面，不过这个问题比较隐蔽，而且较难解决，最后还是新开一篇文章来详细讲一下该怎么做，防止以后有人再被这个问题困扰。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Trivas CI" scheme="https://wafer.li/tags/Trivas-CI/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 集成 Travis CI 自动部署博文</title>
    <link href="https://wafer.li//Hexo/Hexo%20%E9%9B%86%E6%88%90%20Travis%20CI%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E6%96%87/"/>
    <id>https://wafer.li//Hexo/Hexo 集成 Travis CI 自动部署博文/</id>
    <published>2018-01-11T12:37:00.000Z</published>
    <updated>2018-01-12T19:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个想法是我在折腾 Hexo Next 6.0 的时候发现的，有位仁兄在 Next 的新 repo 问如何处理 CI 问题，受到他的启发，我就开始折腾使用 Travis CI 进行博客的自动部署了。</p><a id="more"></a><h2 id="1-为什么要用-ci-来部署博客"><a class="markdownIt-Anchor" href="#1-为什么要用-ci-来部署博客"></a> 1. 为什么要用 CI 来部署博客</h2><p>遇到一项新技术，一个好习惯就是问一下自己 <strong>为什么要用这个新技术</strong>，它带来了什么好处，解决了什么问题？否则就会陷入为了使用新技术而使用新技术的陷阱之中。</p><p>那么为什么要用 CI 来部署呢？好处是显而易见的：</p><p>在未采用 CI 的时候，编写完博客总需要自己手动 <code>hexo g -d</code>，这种工作是重复性的、枯燥的，那么就应当尽量寻找让重复性的工作进行自动化的方法；</p><p>在使用 CI 之后，我只需要执行 <code>git push</code>，将博客的 markdown source 推到远端仓库，剩下的静态页面构建过程就由 CI 接手进行，而不需要我手动打字，而且还占用我的 CPU。</p><p>这虽然方便，但是不禁会有人担心：如果每 push 一次就会自己构建，博客会不会因为 push 上去了一些不好的东西而搞炸了？</p><p>其实这种担心是多余的，只需要在进行了大面积更改的时候先在本地查看一下，如果没有问题就再 push 就行了，这时候虽然需要本地生成，但是你不可能整天重构你的博客，所以 CI 的效率提升还是存在的。</p><h2 id="2-travis-ci-的配置流程"><a class="markdownIt-Anchor" href="#2-travis-ci-的配置流程"></a> 2. Travis CI 的配置流程</h2><p>本博客采用 Travis CI 作为持续集成工具，下面就介绍一下基本的配置流程。</p><p>由于 Travis CI 比较流行，注册和关联 repo 这种操作就不介绍了。</p><h3 id="21-获取相关权限"><a class="markdownIt-Anchor" href="#21-获取相关权限"></a> 2.1 获取相关权限</h3><p>在配置和使用 Travis CI 之前，我们首先要做的就是为 Travis CI 获取其所需要的权限。</p><p>当然，获取所需要的权限有很多种方法，这里推荐两种，分别为 Access Token和 Deploy Key</p><p>这两种各有好处，Deploy Key 的好处在于安全性比较高，Access Token 的好处是较为灵活。</p><p>下面每种都写了推荐使用的 repo，你可以根据你的 repo 的实际情况来选择。</p><h4 id="211-使用-depoly-key-进行部署"><a class="markdownIt-Anchor" href="#211-使用-depoly-key-进行部署"></a> 2.1.1 使用 Depoly Key 进行部署</h4><blockquote><p><strong>本方法适用于大多数的公有博客仓库</strong><br><strong>同时，仓库内不具备私有的子模块</strong><br><strong>建议首选</strong></p></blockquote><p>Deploy Key 是一个 SSH Key，区别于个人 SSH Key 的是，它仅对配置了它的仓库有效；</p><p>也就是说，如果应用使用了 Deploy Key，那么应用的权限就仅限于 repo 之中，准确的来说，是仅限于 repo 的 <strong>文件读写权限</strong>。</p><p>这就给 Deploy Key 带来了很高的安全度，即使 Key 泄漏了，威胁到的也只是设置了它的仓库，而不会威胁帐号本身。</p><p>使用了 SSH Key 也就意味着我们是使用 SSH 和 GitHub 进行连接，那么对 SSH 的配置是必不可少的；</p><h5 id="2111-密钥生成"><a class="markdownIt-Anchor" href="#2111-密钥生成"></a> 2.1.1.1 密钥生成</h5><p>首先我们要生成一对公钥和私钥，这个在很多地方都有操作介绍了，这里就不多讲。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"email"</span> -f key_file -N <span class="string">''</span></span><br></pre></td></tr></table></figure><p>接着，到 repo 的 Settings 里面创建一个 Deploy Key，把公钥的内容粘贴进去。</p><blockquote><p>如果是 <span class="exturl" data-url="aHR0cDovL2NvZGluZy5uZXQ=" title="http://coding.net">coding.net<i class="fa fa-external-link"></i></span> 的话，是配置在 <code>部署公钥</code> 之中。</p></blockquote><p>然后我们把公钥删掉，避免你误把它加入了 git 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f key_file.pub</span><br></pre></td></tr></table></figure><h5 id="2112-使用-travis-命令行程序进行加密"><a class="markdownIt-Anchor" href="#2112-使用-travis-命令行程序进行加密"></a> 2.1.1.2 使用 Travis 命令行程序进行加密</h5><p>密钥显然是不能给别人看的，因此，我们就要把密钥通过 <code>travis</code> 程序加密。</p><p>首先，我们要安装 <code>travis</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><blockquote><p>如果你的 <code>ruby</code> 版本太旧，可能还需要先升级一下。<br><strong>最好在你的 repo 目录下执行 <code>travis</code> 命令</strong><br>方便 <code>travis</code> 自动识别仓库。</p></blockquote><p>然后，我们通过 <code>travis</code> 来登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login</span><br></pre></td></tr></table></figure><p>这是为了让 <code>travis</code> 自动将加密好的东西上传到 Settings 的环境变量中，这样就不用我们配置 <code>.travis.yml</code> 文件了。</p><p>接着，我们对文件进行加密：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt key_file</span><br></pre></td></tr></table></figure><p>随后，我们把生成的 <code>.enc</code> 文件加入 git 中，并把私钥删掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f key_file</span><br><span class="line">git add key_file.enc</span><br></pre></td></tr></table></figure><h5 id="2113-配置-known-hosts-和-ssh"><a class="markdownIt-Anchor" href="#2113-配置-known-hosts-和-ssh"></a> 2.1.1.3 配置 Known Hosts 和 SSH</h5><p>接下来，我们就进行 SSH 的相关配置；</p><p><strong>首先需要配置的是 Known Hosts，否则 CI 就会卡在问你是否要继续那里。</strong></p><p>然后，我们使用 <code>openssl</code> 把之前加密的文件解压成私钥，最后把私钥配置上就行了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">    ssh_known_hosts:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">github.com</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">git.coding.net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># SSH Setup</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_693585a97b8c_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_693585a97b8c_iv</span> <span class="bullet">-in</span> <span class="string">blog_deploy_key.enc</span> <span class="bullet">-out</span> <span class="string">blog_deploy_key</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">eval</span> <span class="string">"$(ssh-agent -s)"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">./blog_deploy_key</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ssh-add</span> <span class="string">./blog_deploy_key</span></span><br></pre></td></tr></table></figure><h4 id="212-获取-access-token"><a class="markdownIt-Anchor" href="#212-获取-access-token"></a> 2.1.2 获取 Access Token</h4><blockquote><p><strong>本方法适用于具有私有 Submodule 的仓库的情况</strong></p></blockquote><p>GitHub 获取 Access Token 的步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Settings -&gt; Developer settings -&gt; Personal access token</span><br><span class="line">-&gt; Generate new token</span><br></pre></td></tr></table></figure><p>接着就进入创建 Access Token 的页面了，对于一个博客的 CI 来说，我们需要的权限比较少，我尝试了一下只需要 <code>public_repo</code> 的权限即可；</p><p>为了尽量保证我们 GitHub 帐号的安全，能少给权限就少给。</p><p>然后我们选择生成，此时会返回到 <code>Personal access token</code> 的页面，并显示我们刚才生成的 access token。</p><blockquote><p>需要注意的是，这个 access token <strong>只会在这一个页面显示一次</strong>，切记要复制下来，否则就只能 <strong>重新生成</strong>。</p></blockquote><p>然后我们到博客 repo 的 Travis CI 设置页面中新建一个环境变量，将这个 Access Token 粘贴到环境变量的 value 中。</p><blockquote><p>这里要注意一定要关掉 <code>Display in log</code> 的选项，否则你的 Access Token 就泄漏了。</p></blockquote><h3 id="22-只构建含有-travisyml-文件的分支"><a class="markdownIt-Anchor" href="#22-只构建含有-travisyml-文件的分支"></a> 2.2 只构建含有 <code>.travis.yml</code> 文件的分支</h3><p>对于本博客而言，我采用单 repo 双分支管理，即一个 <code>source</code> 分支保存原始的 markdown 文件，另一个 <code>master</code> 分支保存用于部署的 HTML。</p><p>对于这种情况，我们就 <strong>必须要</strong> 在 Travis CI 的 <strong>repo 设置页面</strong> 中勾选 <strong>只构建含有 <code>.travis.yml</code> 文件的分支</strong>；</p><p>由于 Travis CI 会侦听 commit 事件进行自动构建，而对于 master 上的 commit，是不含有 <code>.travis.yml</code> 文件也不需要构建的。</p><p>为了防止 Travis CI 构建 master 分支，我们就必须要勾选这个选项。</p><p>有些教程提到使用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">source</span></span><br></pre></td></tr></table></figure><p>也可以起到只构建 <code>source</code> 的功能；<br>不过在我这里这种方法行不通，最后还是使用了只构建含有 <code>.travis,yml</code> 文件的方法。</p><h3 id="23-travisyml-文件的基本配置"><a class="markdownIt-Anchor" href="#23-travisyml-文件的基本配置"></a> 2.3 <code>.travis.yml</code> 文件的基本配置</h3><p>本博客使用的 Hexo 框架是采用 Node.js 技术编写的，所以可以直接套用 Node.js 的 Travis CI 流程。</p><p>下面是一些基本的 Node.js <code>.travis.yml</code> 的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量，注意一个 item 就会构建一次</span></span><br><span class="line"><span class="comment"># 所以一次构建中需要多个环境变量的，也要写到一行里</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ENV_1=xxxxxx</span> <span class="string">ENV_2=yyyyyy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span>   <span class="comment"># 构建的编程语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">node</span>       <span class="comment"># Node.js 的版本，node 表示最新版</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存的目录</span></span><br><span class="line"><span class="comment"># Node.js 项目一般缓存 node_modules</span></span><br><span class="line"><span class="comment"># 用于加快构建速度</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"node_modules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 install 阶段之前执行的命令</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install 阶段，在这里是 npm install</span></span><br><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 script 之前执行的命令</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Script 阶段，执行 hexo 相关命令</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span> <span class="bullet">-d</span> <span class="bullet">--config</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure><p>在拥有 <code>.travis.yml</code> 文件后，每次 commit 之后 Travis CI 就会读取这个文件用来进行自动化构建工作</p><h2 id="3-相关的坑"><a class="markdownIt-Anchor" href="#3-相关的坑"></a> 3. 相关的坑</h2><p>当然，Travis CI 的配置不可能这么一帆风顺，还存在着非常多的坑。</p><p>下面就来介绍一下我所遇到的坑，希望给大家以前车之鉴。</p><h3 id="31-git-submodule-的坑"><a class="markdownIt-Anchor" href="#31-git-submodule-的坑"></a> 3.1 Git Submodule 的坑</h3><p>如果你的 GitHub 使用了两步验证，那么你平时肯定是使用 ssh 的地址进行 git 的相关操作；</p><p>但是对于 Travis CI 的虚拟机来说，它不具备你的 SSH key，当然也就不能使用 ssh 地址进行 clone 和 push。</p><p>特别是对于 git submodule，由于 Travis CI 自己可以处理 https 地址的 submodule，但是如果采用 ssh 方式，它根本就无法 clone 下来。</p><p>此时，我们就需要自己手动管理 git submodule，在 <code>.travis.yml</code> 中增加如下选项：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">    submodules:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br></pre></td></tr></table></figure><p>上面的 <code>sed</code> 命令就是将 ssh 地址替换成 https 地址的。</p><p>不过，对于后面的部署阶段，由于要 push 到自己的仓库，所以 deploy 的地址需要修改为 <code>https://&lt;username&gt;:&lt;ACCESS_TOKEN&gt;@github.com/&lt;username&gt;/repo.git</code></p><p>所以，如果使用 <code>hexo-deploy</code> 插件的话，还需要以下的命令：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sed</span> <span class="string">i</span> <span class="string">"s/git@github.com:/https:\/\/yourusername:$&#123;ACCESS_TOKEN&#125;@github.com\//"</span> <span class="string">you_config_file.yml</span></span><br></pre></td></tr></table></figure><p>把上面的 <code>yourusername</code> 和 <code>your_config_file.yml</code> 作出相应修改即可。</p><h3 id="32-安装某些额外程序包"><a class="markdownIt-Anchor" href="#32-安装某些额外程序包"></a> 3.2 安装某些额外程序包</h3><p>如果你使用 <code>hexo-all-minifier</code> 来进行 HTML 的相关文件压缩，那么你就需要额外安装一个系统程序包 <code>nasm</code>。</p><p>Travis CI 对此推出了 <code>addons</code> 选项来方便你配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">  apt:</span></span><br><span class="line"><span class="attr">    packages:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">nasm</span></span><br></pre></td></tr></table></figure><p>这个问题比较难暴露，我查看了很久的 log，最后在 <code>npm install</code> 的 log 里面发现了某个依赖没办法安装；</p><p>最后才发现是缺了一个系统的程序包。</p><h3 id="33-patch-某些-hexo-插件"><a class="markdownIt-Anchor" href="#33-patch-某些-hexo-插件"></a> 3.3 Patch 某些 Hexo 插件</h3><p>有时候你使用的 Hexo 插件有些问题，虽然有人提出了 PR，但是久久没有合并；</p><p>在本地生成的时代，你需要自己手动 patch 这个插件，然而我们现在使用 CI，当然不可能由你进去复制粘贴。</p><p>这时候，我们可以使用 <code>curl</code> 把 patch 文件下载下来，并覆写相关文件。</p><p>通过下面的命令可以进行覆写操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &#123;raw-path-file-url&#125; &gt;| &#123;problem_file&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>&gt;|</code> 符号可以使后面的文件清空，类似于文件操作的 <code>w</code> 选项。</p><h3 id="34-安装-hexo-next-主题的插件"><a class="markdownIt-Anchor" href="#34-安装-hexo-next-主题的插件"></a> 3.4 安装 Hexo Next 主题的插件</h3><p>Hexo Next 在 6.0 之后，把一些原本在 <code>source/lib</code> 中的 js 文件移到了新的 repo 中，以减少 next 本身 repo 的复杂度。</p><p>但是由于 Next 把 <code>source/lib</code> 这个路径 ignore 了，所以我们要手动将插件 clone 到 <code>source/lib</code> 里面。</p><p>在使用 CI 时，我们需要在 <code>hexo g -d</code> 之前将插件装好：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="comment">## Theme Dependencies</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">themes/next-reloaded</span></span><br><span class="line">  <span class="comment"># canvas-nest</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-canvas-nest</span> <span class="string">source/lib/canvas-nest</span></span><br><span class="line">  <span class="comment"># fancybox3</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-fancybox3</span> <span class="string">source/lib/fancybox</span></span><br><span class="line">  <span class="comment"># reading_progress</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-reading-progress</span> <span class="string">source/lib/reading_progress</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">../..</span></span><br></pre></td></tr></table></figure><p>这里需要注意一下当前工作路径的问题，记得切换回原目录。</p><h3 id="35-时区问题"><a class="markdownIt-Anchor" href="#35-时区问题"></a> 3.5 时区问题</h3><p>Travis CI 好像默认使用的是美国的时区，这样就会让你的 master commit 历史变得很乱。</p><p>所以，我们有必要让 Travis CI 和你的本机时区进行统一</p><p>这个配置比较简单，通过设置 <code>TZ</code> 环境变量即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">TZ=Asia/Tokyo</span></span><br></pre></td></tr></table></figure><blockquote><p>别吐槽我为什么用日本时区，玩游戏需要。</p></blockquote><p>这里需要多说一点的是，如果只有 <code>env</code>，如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ENV1=xxxx</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ENV2=yyyy</span></span><br></pre></td></tr></table></figure><p>此时，Travis CI 就会进行 <strong>两次</strong> 构建，分别采用 <code>ENV1</code> 和 <code>ENV2</code></p><p>而对于 <code>global</code> 的环境变量，就会采取所有的环境变量，只构建一次。</p><h2 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结"></a> 4. 总结</h2><p>经过一段时间的奋战，Travis CI 的集成终于做好了；<br>虽然花费了点时间，不过在折腾的过程中还接触了一下 Travis CI 的配置流程，想必还是有些收获的；</p><p>要不人们总说折腾博客比写博客有趣呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个想法是我在折腾 Hexo Next 6.0 的时候发现的，有位仁兄在 Next 的新 repo 问如何处理 CI 问题，受到他的启发，我就开始折腾使用 Travis CI 进行博客的自动部署了。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Trivas CI" scheme="https://wafer.li/tags/Trivas-CI/"/>
    
  </entry>
  
  <entry>
    <title>Solidity 基础知识和概述</title>
    <link href="https://wafer.li//Solidity/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E6%A6%82%E8%BF%B0/"/>
    <id>https://wafer.li//Solidity/基础知识和概述/</id>
    <published>2018-01-09T06:09:00.000Z</published>
    <updated>2019-05-25T15:26:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Solidity 是运行于以太坊(Ethereum) 区块链上的智能合约语言，它是图灵完备的，意味着可以用它写一些任意复杂度的程序并运行于区块链中。</p><a id="more"></a><h2 id="1-区块链基础知识"><a class="markdownIt-Anchor" href="#1-区块链基础知识"></a> 1. 区块链基础知识</h2><p>区块链加密货币的技术基础，本文属于 Solidity，对此不过多介绍，可能在以后会在其他文章进行介绍。</p><h3 id="11-交易"><a class="markdownIt-Anchor" href="#11-交易"></a> 1.1 交易</h3><p>区块链形象的来说就是一个全球共享的交易数据库，这意味着每个人都可以访问这个数据库并发起更改，这个更改就是 <strong>交易</strong>。</p><p>区块链对交易有单一性保证，也就是当你的交易正在提交到数据库的时候，其他的交易不能影响你的交易。</p><p>同时，区块链对交易有完成保证，意思就是一个交易，要不就 <strong>全部完成</strong>，要不就 <strong>都不完成</strong>。不会出现一方余额变动，而另一方却不变的情况。</p><p>其次，一个交易总是由发起方进行密码学方面的签名(signed)，这也就保证交易的来源方的可信赖性。只有拥有对应的密钥键值对，才能从账户中转钱。</p><h3 id="12-区块"><a class="markdownIt-Anchor" href="#12-区块"></a> 1.2 区块</h3><p>交易数据库都有一个需要处理的基本问题：如果两个交易都想清空一个账户的余额怎么办？这在比特币的术语中叫做 <strong>“doble-spend attack”</strong>，也就是交易之间出现了冲突。</p><p>区块链对此作出的回答是， <strong>你不需要担心这种问题</strong>。<br>区块链会对交易的顺序作出选择，此时，这些交易会被捆绑进一个 <strong>区块</strong> 中，当两个交易出现冲突的时候，排在后面的交易就会被抛弃而不会进入区块中。</p><p>这些区块在时间上呈现出一种线性的形状，因而我们将这些区块所构成的系统，也就是上面的交易数据库称为 <strong>区块链</strong></p><p>而区块链中所应用的交易选择机制，也就是交易的公证机制，我们称其为 <strong>挖矿</strong></p><p>之所以称其为挖矿，原因在于新的包含 <strong>你所承认的交易</strong> 的区块是通过一系列的计算得到的，这个新区块的生成很类似从一堆数据中把金子挖出来的过程。</p><p>区块计算成功后，区块链系统会给予挖矿者奖励，在比特币系统中是赠与比特币，以太币系统则是奖励以太币。</p><p>当然，一个区块也有可能会被退回(reverted)，不过是仅当这个区块位于区块链的头部的时候；当越来越多的区块被加到区块链的头部之后，你所计算出的区块被退回的可能性就会越来越低。</p><h2 id="2-以太坊虚拟机evm"><a class="markdownIt-Anchor" href="#2-以太坊虚拟机evm"></a> 2. 以太坊虚拟机(EVM)</h2><p>以太坊虚拟机(Ethereum Virtual Machine) 是以太坊合约(contract)的运行环境，也即 Solidity 的运行环境。</p><p>和普通的虚拟机不同的是，EVM 不是一个沙盒系统，而是 <strong>完全独立的</strong></p><p>运行在 EVM 中的合约不能访问互联网、文件系统或者其他的进程，只能和运行于 EVM 的其他合约进行交互。</p><p>EVM 中有如下概念：</p><h3 id="21-账户accounts"><a class="markdownIt-Anchor" href="#21-账户accounts"></a> 2.1 账户(Accounts)</h3><p>EVM 中有着两种账户：<br>一种称为外来账户(External owned Accounts)，是使用公私有的键值对控制访问的，也就是真实人类控制的帐号。</p><p>另一种称为合约账户(Contract Accounts)，是含有代码的合约控制的帐号，代码被存储在合约中。</p><p>账户通过地址来进行标识；<br>外部账户的地址通过其 public key 来确定；<br>合约账户的地址是在其被创建的时候确定的，通过它的创建者(即交易的发送者)的地址和从创建者地址发送的交易数量来确定。</p><p>EVM 对于这两种账户都是平等对待的，不管它存不存储着代码。</p><p>每个账户都有着一个持久化的 key-value <code>mapping</code>(类似 <code>HashMap</code>)。<code>key</code> 和 <code>value</code> 分别是 256bit words 和 256bit words。这个 <code>mapping</code> 被称为 <code>storage</code></p><p>同时，每个账户都具有 <strong>以太币</strong> 的余额(balance)，可以通过发送以太币的交易来修改。</p><p>两种账户的对比</p><ul><li>外部账户(External Accounts)<ul><li>具有以太币余额</li><li>可以发送交易(可以发送或者触发合约代码)</li><li>使用键值对来控制</li><li>不储存有代码</li></ul></li></ul><hr><ul><li>合约账户(Contract Accounts)<ul><li>具有以太币余额</li><li>储存有代码</li><li>其代码的执行通过交易或者其他合约发送的信息来触发</li><li>当其代码执行时，可以：<ul><li>执行任意复杂度的操作(图灵完备)</li><li>修改其自身的持久性存储(storage)</li><li>调用其他合约</li></ul></li></ul></li></ul><h3 id="22-交易transactions"><a class="markdownIt-Anchor" href="#22-交易transactions"></a> 2.2 交易(Transactions)</h3><p>交易是一个账户发给另一个帐号的消息，交易可以包含二进制的数据(称为它的负载)，和以太币</p><p>如果目标账户具有代码，那么这个代码就会被执行，并且交易会提供其负载充当代码的输入数据。</p><p>如果目标账户是 <strong>零账户(zero-account)</strong>(它的账户的地址是 0)，那么，该交易就会创建一个 <strong>新的合约</strong>。上面已经说过，合约的地址是通过发送者的地址来确定的。</p><p>此时，交易的负载就会充当合约的构建参数，此时，EVM 开始执行构造函数，进行合约的构建，其结果即合约的代码，被存入合约账户中。</p><p>也就是说，不需要传入合约本身的代码即可完成合约的构建</p><h3 id="23-汽油gas"><a class="markdownIt-Anchor" href="#23-汽油gas"></a> 2.3 汽油(Gas)</h3><p>汽油是以太坊用于衡量执行交易的工作量的单位。</p><p>由于发起交易有可能导致合约的执行，代码执行就需要 CS 领域中的时间与空间，即需要矿工的算力来作为支撑。</p><p>为了保证网络中的算力不被大规模消耗和锁死，以太坊中的每一个交易都需要消耗汽油来完成，即交易的 <strong>手续费</strong>。</p><p>之所以称之为 <strong>汽油</strong>，是因为这个“手续费”是需要事先从交易发起者的账户中扣除掉，与该交易绑定，很类似一个汽车加油的过程。</p><p>唯一不同的是，<strong>交易的发起者可以自定义汽油的价格</strong></p><p>也就是说，交易发起者通过事先从账户中扣除一定量的 <strong>以太</strong>，作为充入的汽油；<br>充入的以太费用 = 汽油量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 自定义的汽油价格，汽油量实际上是通过充入的以太费用倒推得到的。</p><p>这也就类似于一个加油的过程。</p><p>然后，矿工开始处理交易，并按照一定的规则 <strong>不断消耗汽油</strong></p><p>当计算完成时，区块被生成，并加入区块链中，矿工得到所消耗的汽油的以太费用作为交易的手续费；<br>同时， <strong>多余的汽油会被退还回交易发起者的账户</strong>。</p><p>但是，如果汽油耗尽，交易还未处理完成的话，那么矿工就会 <strong>回退所有修改</strong>，并将该交易作为 <strong>失败的交易</strong> 加入到区块链中，同时， <strong>收取所有的汽油费用，不退换给发起者。</strong></p><h3 id="24-存储-内存和栈"><a class="markdownIt-Anchor" href="#24-存储-内存和栈"></a> 2.4 存储, 内存和栈</h3><h4 id="241-存储storage"><a class="markdownIt-Anchor" href="#241-存储storage"></a> 2.4.1 存储(Storage)</h4><p>每一个帐号都会具有一个 256bit -&gt; 256 bit 的键值对，这个键值对被称作 <code>storage</code><br>在合约中进行 <code>storage</code> 的遍历和枚举是不可能的，而且在 <code>storage</code>的读写操作都是相对昂贵的。</p><blockquote><p>即通常用于存储一些持久化的数据，所以称作 <code>storage</code></p></blockquote><p>事实上 <code>storage</code> 的读写是十分昂贵的，它需要 20000 gas 进行一次初始化，需要 5000 gas 来进行数据的修改，同时还需要 200 gas 进行一个 word 的读取。</p><p>为什么需要这么贵呢？是因为存储在 <code>storage</code> 的数据是永久保存在区块链中的，需要真实的存储开销。</p><h4 id="242-内存memory"><a class="markdownIt-Anchor" href="#242-内存memory"></a> 2.4.2 内存(Memory)</h4><p>第二个存储类型是 <code>memory</code>，就像内存一样，<code>memory</code> 仅在合约运行中有效，当合约运行完成时，内存就会被清空重置。</p><p>内存是线性的并被字节编码；<br>对于读取操作来说，只能一次性读取 256bit 的数据，即一个 word;<br>而对于写入操作来说，可以写入 8bit 或者 256bit。</p><p>当你读写超过了一个 word 的时候，内存以 word(256bit) 的级别扩大；<br>当然，随着内存的扩大，就要相应收取 gas 作为费用。<br>需要注意的是，内存每扩大一个数量级，都是平方级别的，所以不要过多使用内存，否则会消耗很多 gas。</p><p>相比 <code>storage</code> 来说，<code>memory</code> 的处理开销就便宜很多。<br>它只需要 3 gas 来读写数据，如果内存扩大了那么就收取一些扩容费用的 gas。</p><p>一般来说，内存就是通常的工作用地，基本的，不需要永久存储的东西都可以放到内存中。</p><h4 id="243-栈stack"><a class="markdownIt-Anchor" href="#243-栈stack"></a> 2.4.3 栈(Stack)</h4><p>EVM 不像传统的计算机是一个以寄存器为主的机器，而是以栈为主的机器，所有的计算都在一个被称作 <code>stack</code> 的空间中进行。</p><p>这个栈具有 1024 个元素的容量，而且包含着一些 word。</p><p>对于栈的访问仅限于前 16 个元素；<br>在前 16 个元素中，你可以将任意一个复制到顶部，或者将任意一个元素和顶部的元素做交换。</p><p>其他的操作则是提取顶部元素(可以不止提取一个)进行计算并将结果压入栈中。</p><p>当然，你也可以将栈中的元素移到内存和存储中，不过对于比前 16 个更深一点的元素就不能访问到了，除非你将前 16 个元素移除。</p><p>通常，这个栈中的元素不会使用到，就像函数栈一样由编译器或者解释器来操作。</p><h3 id="25-指令集"><a class="markdownIt-Anchor" href="#25-指令集"></a> 2.5 指令集</h3><p>EVM 的指令集比较简短，所有的指令都是对基本数据类型和 256bit 的字的操作，包含了一般的算术运算、位运算、逻辑运算和比较运算等，同时还可以进行条件跳转和非条件跳转。</p><p>同时，合约还可以访问它所在区块的一些信息比如说区块的编号和区块的时间戳。</p><h3 id="26-信息调用message-calls"><a class="markdownIt-Anchor" href="#26-信息调用message-calls"></a> 2.6 信息调用(Message Calls)</h3><p>合约可以通过 <strong>信息调用</strong> 来调用其他的合约或者给一个非合约账户发送以太币。</p><p>信息调用和交易类似，都具备一个发送者，目标者，数据负载，以太币，汽油和返回的数据。</p><p>事实上，每一个交易都是由 top-level 的信息调用组成的，top-level 的信息调用可以创建其他信息调用。</p><p>合约可以决定通过信息调用所传递的 gas 数量，如果一个 out-of-gas exception 发生的话，调用栈中就会压入一个 error value 来标识异常的发生。</p><p>此时，只有通过该调用传送的 gas 会被消耗掉。同时，发起信息调用的合约会手动引起一个异常，以保证异常栈的呈现。</p><p>上面也说过，被调用的合约会收到一个新鲜的 <code>memory</code> 实例，并可以访问随调用传来的数据负载；</p><p>此时，系统会提供一个额外的空间用于存储这种数据负载，叫做 <code>calldata</code></p><p>当合约代码执行完毕后，它可以将数据返回，而返回的数据会存储在调用者的内存中。</p><p>调用的深度被限制在 <strong>1024</strong>，所以对于一些比较复杂的操作，使用循环会比使用递归要好。</p><h3 id="27-委托调用delegatecall调用代码callcode和库"><a class="markdownIt-Anchor" href="#27-委托调用delegatecall调用代码callcode和库"></a> 2.7 委托调用(Delegatecall)/调用代码(Callcode)和库</h3><p>委托调用是一种特别的信息调用，它可以将调用者的上下文暴露给被调用者。</p><p>下面举一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">contract D &#123;</span><br><span class="line">    unit public n;</span><br><span class="line">    address public sender;</span><br><span class="line"></span><br><span class="line">    function delegatecallSetN(address _e, unit _n) &#123;</span><br><span class="line">        _e.delegatecall(byte4(sha3(&quot;setN(unit256)&quot;)), _n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract E &#123;</span><br><span class="line">    unit public n;</span><br><span class="line">    address public sender;</span><br><span class="line">    funciton setN(unit _n) &#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        sender = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个合约 <code>C</code> 调用 <code>D</code> 的方法时，是 <code>D</code> 的 <code>sender</code> 被设置成了 <code>C</code> ，而不是 <code>E</code> 的方法被设置。</p><p>这就是 delegatecall 和普通调用的区别，它相当于将其他合约的函数引入到了当前合约的作用域中。</p><p>引入这种调用之后，我们就可以在合约中动态调用函数，这也为我们实现 Solidity 的函数库提供了途径。</p><p>不过需要提醒的是，这个 <code>delegatecall</code> 方法是相当低级的方法， <strong>如果不做深入开发可以不管它</strong></p><h3 id="28-日志"><a class="markdownIt-Anchor" href="#28-日志"></a> 2.8 日志</h3><p>EVM 也提供从底层直至区块层级的日志功能，用这些功能来实现 <strong>事件系统</strong></p><p>但是，合约在它被创建之后就不能访问日志数据，不过日志数据可以从区块链的外部被访问。</p><p>一些日志数据被存储在布隆过滤器(bloom filter)中，所以一些轻量级的客户端也可以访问部分的区块链日志。</p><h3 id="29-合约创建"><a class="markdownIt-Anchor" href="#29-合约创建"></a> 2.9 合约创建</h3><p>合约除了通过信息调用来创建以外，还可以通过一个特别的指令来创建。</p><p>指令创建和普通的信息调用创建的区别在于，在指令创建完毕之后，创建者可以获取到新合约的地址。</p><h3 id="210-自毁"><a class="markdownIt-Anchor" href="#210-自毁"></a> 2.10 自毁</h3><p>想要去除区块链中的代码的唯一途径就是通过合约的自毁。</p><p>当合约调用析构指令(<code>selfdestruct</code>) 时，合约账户中剩余的以太币会被发往制定的目标，然后，合约的 <code>storage</code> 和代码就会从区块链中删除。</p><blockquote><p>即使合约代码中不包含 <code>selfdestruct</code> 指令，它也可以通过调用 <code>delegatecall</code> 或者 <code>callcode</code> 指令来执行</p></blockquote><blockquote><p>以太坊客户端似乎还未实现旧合约和旧代码的删除功能。存储节点可以自行选择是否删除合约。</p></blockquote><blockquote><p>当期，外部账户是无法被删除的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Solidity 是运行于以太坊(Ethereum) 区块链上的智能合约语言，它是图灵完备的，意味着可以用它写一些任意复杂度的程序并运行于区块链中。&lt;/p&gt;
    
    </summary>
    
      <category term="Solidity" scheme="https://wafer.li/categories/Solidity/"/>
    
    
      <category term="Solidity" scheme="https://wafer.li/tags/Solidity/"/>
    
      <category term="Ethereum" scheme="https://wafer.li/tags/Ethereum/"/>
    
  </entry>
  
  <entry>
    <title>近月少女的礼仪 2.1 感想</title>
    <link href="https://wafer.li//Talk/%E8%BF%91%E6%9C%88%E5%B0%91%E5%A5%B3%E7%9A%84%E7%A4%BC%E4%BB%AA%202.1%20%E6%84%9F%E6%83%B3/"/>
    <id>https://wafer.li//Talk/近月少女的礼仪 2.1 感想/</id>
    <published>2017-06-03T17:22:00.000Z</published>
    <updated>2017-06-03T18:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近这部 FD 发售之后就忍不住玩了一下；</p><p>会结合本篇《近月少女的礼仪 2》(月に寄りそう乙女の作法２)　来谈一谈感想；</p><p>内有剧透，慎点</p><a id="more"></a><h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>此次发售的 FD 主要包含两条线路：艾斯特线和春心线，不过春心线是打酱油的，就没玩。</p><p>同时收录了前传《近月少女的礼仪0》，讲述大藏衣远学生时代的故事。</p><h2 id="2-内容和感想"><a class="markdownIt-Anchor" href="#2-内容和感想"></a> 2. 内容和感想</h2><p>艾斯特是本篇的女主角，在此 FD 中是着重描写的对象；</p><p>在取得菲丽展最优秀奖之后，两人回老家拜访父母（这基本属于固定流程了），随后回到学院展开第二年的学习生活的事。</p><p>对于本篇的评价中，多有『矛盾冲突不足』的批评；</p><p>相比前作《近月少女的礼仪 1》中暗流涌动的家族纷争，《近月 2》因为主角生长在优渥的环境中，因而在设定背景中缺失了磨炼的土壤，虽有才能，但是远远不及其父母闪耀。</p><p>在 FD 中此问题进一步暴露，由于取得了最优秀奖，班上的设计天才贾斯子开始认真对待设计的作业和考试，因而我们的主角小两口接连落败。</p><p>于是他们终于发现（实际上在本篇结尾也有体现），自己的才能只不过是人家的一个小指头；</p><p>于是一个问题就出现了， <strong>自己无论如何努力，都比不过天才</strong>；</p><p>小两口对此询问了很多的人，包括在公寓的邻居们，还直接向自己的父母求助；</p><p>不过露娜的回复真的比较令人伤心：</p><blockquote><p>「自己从来没有在才能上碰过壁，请随便努力一下吧」</p></blockquote><p>说实话，玩到这里的时候我是比较揪心的，明明自己也拥有耀眼的才能，但是，却只能这样任由其被更耀眼的光芒掩盖吗？</p><p>不过，幸好我们现在是主角小两口，经过和现任校长商量之后（顺便把校长洗白了），决定组成设计师组合『eS』一同向天才挑战！</p><p>不过，既然组成了设计师组合，那么提交设计的时候，就必须放弃一人，另外一人要尽力对设计图做出点检和修正。</p><p>于是很顺理成章的就过渡到是否要放弃自己的恋人身份，以女仆的身份来面对自己的主人兼恋人。</p><p>这个选项可以说是整个近月系列中最为重要和必有的选项</p><blockquote><p>为什么是『必有』？因为这是个伪娘游戏啊！</p></blockquote><p>但是，这个选项第一次承担了 END 分支的作用，而不只是单纯的 CG 回收。</p><p>如果选择了恋人，那么最后，就因为小两口要决出胜负，而双双输给天才贾斯子；</p><blockquote><p>不过即使输给了天才，小两口还是双双获得了二等奖，还是没有决出胜负（笑）</p></blockquote><p>如果选择了女仆，那么因为艾斯特的设计得到了完善，那么就能够战胜贾斯子。</p><p>这里是最让我惊艳的，<strong>如果你不选择被 gang，那么就达不成完美结局。</strong>（看起来官方也很懂玩家的心嘛）</p><p>也许在经过这一次的经历后，我们的才华大少爷才理解并践行了父亲一直以来对他的忠告：「能为谁派上用场是很了不起的事」</p><p>原本由于露娜的原因，我第一次选的时候仍然想让他去和自己的恋人竞争；</p><p>毕竟是樱小路露娜的儿子啊，怎么会输给他人，肯定是心性还不够成熟。</p><p>不过玩到最后，果然我们的主角还是「朝日的女儿」啊（笑）。</p><h2 id="3-亮点"><a class="markdownIt-Anchor" href="#3-亮点"></a> 3. 亮点</h2><ol><li><p>贾斯子和梅宫的百合剧</p><blockquote><p>《梅宫理论及其周边》（笑）</p></blockquote></li><li><p>才华的泳装</p><blockquote><p>我们的才华大小姐越来越漂亮了</p></blockquote></li><li><p>才华走 T 台的衣服</p><blockquote><p>真的好像他妈，差点认错了</p></blockquote></li><li><p>艾斯特的姐姐</p><blockquote><p>走 T 台和妹妹抢就算了，还要和妹妹抢男朋友……</p></blockquote></li></ol><h2 id="4-缺憾"><a class="markdownIt-Anchor" href="#4-缺憾"></a> 4. 缺憾</h2><p>最大的缺憾当然还是前作主要人物露娜和游星 <strong>没有登场</strong></p><p>估计官方还想再捞一笔，毕竟有很多人都期待这两个前作的最主要人物登场；</p><p>毕竟父亲（朝日娘）看到自己儿子女装侍奉另一个主人，想起来就十分有趣！</p><h2 id="5-和一代的比较"><a class="markdownIt-Anchor" href="#5-和一代的比较"></a> 5. 和一代的比较</h2><p>当然，整体剧情的矛盾和跌宕比不上一代是公认的；</p><p>不过，《近月 2》仍不失为一部十分优秀的作品，其中，我们的大少爷（小姐）的复杂性格和追求成功的方式可能更为现实，而不像露娜一样过于虚幻。</p><p>虽说如此，如果要做 《近月 3》的话，剧情安排上势必要起波澜（比如说大藏前家主身亡，衣远独力难支，家族重新陷入动荡和纷争），否则 3 只能是当做炒冷饭作品而已，这样只会砸烂近月的金字招牌。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近这部 FD 发售之后就忍不住玩了一下；&lt;/p&gt;&lt;p&gt;会结合本篇《近月少女的礼仪 2》(月に寄りそう乙女の作法２)　来谈一谈感想；&lt;/p&gt;&lt;p&gt;内有剧透，慎点&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://wafer.li/categories/Talk/"/>
    
    
      <category term="杂谈" scheme="https://wafer.li/tags/Talk/"/>
    
      <category term="Galgame" scheme="https://wafer.li/tags/Galgame/"/>
    
      <category term="月に寄りそう乙女の作法" scheme="https://wafer.li/tags/%E6%9C%88%E3%81%AB%E5%AF%84%E3%82%8A%E3%81%9D%E3%81%86%E4%B9%99%E5%A5%B3%E3%81%AE%E4%BD%9C%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>再谈单例模式</title>
    <link href="https://wafer.li//DesignPattern/%E5%86%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wafer.li//DesignPattern/再谈单例模式/</id>
    <published>2017-05-25T02:58:00.000Z</published>
    <updated>2017-05-26T17:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前提到枚举实现是单例的最佳实现，这毋庸置疑；</p><p>不过，对比枚举和静态内部类，好像它们的区别就在于防止了反射攻击；</p><p>那么，都『攻击』了，为啥偏偏没事去改你的单例呢？直接获取更有意思的信息不是更好吗？</p><a id="more"></a><h2 id="1-反射攻击不是攻击"><a class="markdownIt-Anchor" href="#1-反射攻击不是攻击"></a> 1. 『反射攻击』不是攻击</h2><p>这里所提到的『反射攻击』的概念，实际上并不是信息安全领域的 『攻击』 的概念；</p><p>而是， <strong>通过反射的合理利用，可以令单例失效</strong>；</p><p>那么在日常开发中，最常遇到的反射攻击就是 <strong>对象的序列化</strong>。</p><p>当单例需要实现序列化的时候，反序列化过程实际上就是使用 <strong>反射</strong> 来生成了新的实例。</p><p>那么在序列化和反序列化的过程中，单例模式就被破坏掉了。</p><p>这时，有人提出可以利用 <code>readResolve()</code> 方法来防止这种事情的发生；</p><p>而实际上， <strong>单纯利用</strong> <code>readResolve()</code> 也并不能防止单例被破坏；</p><p>《Effective Java 第二版》在 77 条提出：</p><blockquote><p><strong>如果依赖 <code>readResolve()</code> 方法来进行实例控制，带有对象引用类型的所有实例域都必须声明为 <code>transient</code> 的。</strong></p><p>否则，那种破釜沉舟式的攻击者，就有可能在 <code>readResolve()</code> 方法运行之前，保护指向反序列化对象的引用。</p></blockquote><p>此时，枚举类型就派上用场了，枚举为了防止这种事情的发生，单独实现了一套序列化和反序列化的机制；</p><p>大体就是利用 <code>valueOf()</code> 来进行反序列化，而不是使用普通的序列化机制；</p><p>同时，也禁止声明 <code>readResolve()</code> 和 <code>readObject()</code> 这类方法。</p><h2 id="2-kotlin-单例是懒加载的"><a class="markdownIt-Anchor" href="#2-kotlin-单例是懒加载的"></a> 2. Kotlin 单例是懒加载的</h2><p>下面是 Kotlin 单例的反编译 Java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Test INSTANCE;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      INSTANCE = (Test)<span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> Test();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然它和所谓的饿汉式 Java 单例很类似，但是在实际使用中，它是 <strong>懒加载</strong> 的。</p><p>为什么呢？</p><p>原因就在于 JVM 类的加载时机；</p><p>JVM Specification 中在 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U3L2h0bWwvanZtcy01Lmh0bWwjanZtcy01LjQuMg==" title="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.4.2">准备阶段<i class="fa fa-external-link"></i></span> 中提出：</p><blockquote><p>explicit initializers for static fields are executed as part of initialization (§5.5), not preparation.</p></blockquote><p>所以，上面的 <code>INSTANCE</code> 的实例化，即 <code>static</code> 块是在类加载的 <strong>初始化阶段</strong> 进行的；</p><p>而对于初始化阶段，JVM Specification 强制规定了有且仅有 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U3L2h0bWwvanZtcy01Lmh0bWwjanZtcy01LjU=" title="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.5">5 种情况<i class="fa fa-external-link"></i></span> 可以触发初始化阶段；</p><p>而这 5 种情况，都是你真正使用到类的实例的时候才会出现的；</p><p>根据这 5 种情况，再结合 Kotlin <code>object</code> 的单例语法和使用，可以得出有且仅有 2 种情况会导致 <code>object</code> 单例提前进行初始化：</p><ol><li>反射</li><li>调用类中其他的静态变量</li></ol><p>对于反射，一个很典型的应用场景就是使用 classpath scanner 进行注解扫描；</p><p>不过，JB 的工程师提出，classpath scanner 并不需要反射来实现注解扫描<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>；</p><p>于是我随便找了一个 classpath scanner: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1a2VodXRjaC9mYXN0LWNsYXNzcGF0aC1zY2FubmVy" title="https://github.com/lukehutch/fast-classpath-scanner">fast-classpath-scanner<i class="fa fa-external-link"></i></span>；</p><p>经过使用之后，发现即使打印出了单例的信息，但是 JVM 只加载了 <code>main</code> 方法的类，而并没有加载单例。</p><p>相关的结果在 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vd2FmZXItbGkvMTkzMTE3MGZkNzljMGVjMTU2N2Y1NzM3NDU0ZjYxYWI=" title="https://gist.github.com/wafer-li/1931170fd79c0ec1567f5737454f61ab">这个 gist<i class="fa fa-external-link"></i></span> 中。</p><blockquote><p>单例的名字叫 <code>Test</code>，而 <code>main()</code> 方法类的名字叫 <code>SingletonTest</code></p></blockquote><p>对于第二种情况，在 Kotlin 中是不存在的。为什么呢？</p><p>因为对于 Kotlin <code>object</code> 中，声明值的方法只有 <code>var</code> <code>val</code> 和 <code>const val</code> 三种；</p><p>对于前两种，虽然反编译出来的代码指明这样的确定义了两个静态的值；</p><p><code>var</code> 的情况：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1ffzakmwghkj30rc0uotax.jpg" alt></p><p><code>val</code> 的情况：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1ffzalhmszqj30rs0ty40u.jpg" alt></p><p>但是，当你使用的时候，却是通过 <code>INSTANCE</code> 来引用的。</p><p>这样无论如何都会导致单例的实例化。</p><p>而使用 <code>const val</code> 的确得到了一个 <code>public static</code> 的值；</p><p>但是，当你使用的时候，编译器会自动替换为 <strong>字面量</strong>，不会导致单例加载；</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1ffzamh0h4pj30tc0q276e.jpg" alt></p><p>所以，综上所述，Kotlin 中 <code>object</code> 单例是懒加载的。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9kaXNjdXNzLmtvdGxpbmxhbmcub3JnL3Qva290bGluLXNpbmdsZXRvbi1pbXBsZW1lbnRhdGlvbi8yODUzLzY/dT1vbXlzaG8=" title="https://discuss.kotlinlang.org/t/kotlin-singleton-implementation/2853/6?u=omysho">https://discuss.kotlinlang.org/t/kotlin-singleton-implementation/2853/6?u=omysho<i class="fa fa-external-link"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前提到枚举实现是单例的最佳实现，这毋庸置疑；&lt;/p&gt;&lt;p&gt;不过，对比枚举和静态内部类，好像它们的区别就在于防止了反射攻击；&lt;/p&gt;&lt;p&gt;那么，都『攻击』了，为啥偏偏没事去改你的单例呢？直接获取更有意思的信息不是更好吗？&lt;/p&gt;
    
    </summary>
    
      <category term="DesignPattern" scheme="https://wafer.li/categories/DesignPattern/"/>
    
    
      <category term="DesignPattern" scheme="https://wafer.li/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2 + Rxjava2</title>
    <link href="https://wafer.li//Android/Retrofit/Retrofit2%20+%20Rxjava2/"/>
    <id>https://wafer.li//Android/Retrofit/Retrofit2 + Rxjava2/</id>
    <published>2017-05-01T20:49:00.000Z</published>
    <updated>2017-05-01T23:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Retrofit 和 Rxjava 结合应该算得上是 Rxjava 在 Android 应用得最广泛的一个方面了。</p><p>这里就来讲讲关于这两个库具体组合的用法。</p><a id="more"></a><h2 id="1-添加依赖"><a class="markdownIt-Anchor" href="#1-添加依赖"></a> 1. 添加依赖</h2><p>具体需要添加的依赖库有： <code>Retrofit2</code>、<code>Rxjava2</code>、<code>RxAndroid2</code>、<code>Gson</code> 、<code>Rtrofit2</code> 到 <code>Rxjava2</code> 的转换器、<code>Retrofit2</code> 到 <code>Gson</code> 的转换器</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrofit</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.2.0'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'com.squareup.retrofit2'</span>, <span class="string">name:</span> <span class="string">'converter-gson'</span>, <span class="string">version:</span> <span class="string">'2.2.0'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'com.squareup.retrofit2'</span>, <span class="string">name:</span> <span class="string">'adapter-rxjava2'</span>, <span class="string">version:</span> <span class="string">'2.2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Rx*</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxjava:2.1.0'</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxkotlin:2.0.1-RC1'</span></span><br></pre></td></tr></table></figure><p>其中，<code>Gson</code> 是 JSON 解析库，也可以使用 <code>Jackson</code> 替代；</p><p>上面的 <code>rxkotlin</code> 是 <code>Rxjava</code> 的 <code>Kotlin</code> 轻量支持库；</p><p>如果不使用 Kotlin 可以无视。</p><h2 id="2-构建-api"><a class="markdownIt-Anchor" href="#2-构建-api"></a> 2. 构建 API</h2><p>使用 <code>Retrofit</code> 的第一步当然就是构建 API 接口；</p><p>不过既然我们使用的是 Rxjava2，那么，这个 API 接口当然就稍微有点不一样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TrendingApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">"&#123;language&#125;"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getTrending</span><span class="params">(<span class="meta">@Path(<span class="meta-string">"language"</span>)</span> language: <span class="type">String</span> = <span class="string">"."</span>, <span class="meta">@Query(<span class="meta-string">"since"</span>)</span> since: <span class="type">String</span>)</span></span></span><br><span class="line">            : Observable&lt;ResponseBody&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们 API 返回的是一个 <code>Observable&lt;T&gt;</code> 对象，而非通常的 <code>Call&lt;T&gt;</code> 对象。</p><p>对于这个 <code>Observable</code>，假设我们的 Body 对象为 <code>T</code>，那么 <code>Observable</code> 一共有以下的几种可能情况：</p><ul><li><code>Observable&lt;T&gt;</code></li><li><code>Observable&lt;Response&lt;T&gt;&gt;</code></li><li><code>Observable&lt;Result&lt;T&gt;&gt;</code></li></ul><p>前两个自然不用说，第三个 <code>Result</code> 是 <code>Response&lt;T&gt;</code> 和 <code>Throwable</code> 的包装对象；</p><p>也就是说，如果使用 <code>Result</code> 的话，我们可以在 <code>onNext()</code> 中同时处理正常情况和异常情况。</p><blockquote><p>所谓的异常情况指的是抛出了 Exception</p></blockquote><h2 id="3-三种-observable-的区别"><a class="markdownIt-Anchor" href="#3-三种-observable-的区别"></a> 3. 三种 <code>Observable</code> 的区别</h2><p>那么这三种 <code>Observable</code> 究竟有什么区别呢？</p><p>我们来看看具体 <code>adapter-rxjava2</code> 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;Response&lt;R&gt;&gt; responseObservable = isAsync</span><br><span class="line">      ? <span class="keyword">new</span> CallEnqueueObservable&lt;&gt;(call)</span><br><span class="line">      : <span class="keyword">new</span> CallExecuteObservable&lt;&gt;(call);</span><br><span class="line"></span><br><span class="line">  Observable&lt;?&gt; observable;</span><br><span class="line">  <span class="keyword">if</span> (isResult) &#123;</span><br><span class="line">    observable = <span class="keyword">new</span> ResultObservable&lt;&gt;(responseObservable);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBody) &#123;</span><br><span class="line">    observable = <span class="keyword">new</span> BodyObservable&lt;&gt;(responseObservable);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observable = responseObservable;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从这段代码可以看到，默认的情况就是 <code>Observable&lt;Response&lt;T&gt;&gt;</code>；</p><p>而这个默认的 <code>Observable</code> 是通过执行 <code>CallEnqueueObservable</code> 或者 <code>CallExecuteObservable</code> 得到的。</p><p>然后再通过判断 <code>Observable</code> 的包装状态，对上面得到的 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 进行转换。</p><h3 id="31-observablet"><a class="markdownIt-Anchor" href="#31-observablet"></a> 3.1 <code>Observable&lt;T&gt;</code></h3><p>首先来看我们的 <code>BodyObservable</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">  upstream.subscribe(<span class="keyword">new</span> BodyObserver&lt;T&gt;(observer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在 <code>subscribeActual()</code> 中，对我们传入的 <code>observer</code> 封装了一层外壳 <code>BodyObserver</code>；</p><p>然后将其传入上层的 <code>subscribe</code> 中，以启动网络请求。</p><p>这层外壳正是这个 <code>Adapter</code> 的关键所在，通过使用另一个对象，来处理不同的网络情况，然后再委派到我们真正传入的 <code>observer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyObserver</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Response</span>&lt;<span class="title">R</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> R&gt; observer;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> terminated;</span><br><span class="line"></span><br><span class="line">  BodyObserver(Observer&lt;? <span class="keyword">super</span> R&gt; observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observer = observer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">    observer.onSubscribe(disposable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">      observer.onNext(response.body());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      terminated = <span class="keyword">true</span>;</span><br><span class="line">      Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        observer.onError(t);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">        Exceptions.throwIfFatal(inner);</span><br><span class="line">        RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">      observer.onError(throwable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// This should never happen! onNext handles and forwards errors automatically.</span></span><br><span class="line">      Throwable broken = <span class="keyword">new</span> AssertionError(</span><br><span class="line">          <span class="string">"This should never happen! Report as a bug with the full stacktrace."</span>);</span><br><span class="line">      <span class="comment">//noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only.</span></span><br><span class="line">      broken.initCause(throwable);</span><br><span class="line">      RxJavaPlugins.onError(broken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，其实这层壳处理的并不是我们的 <code>Body</code> 对象，而是之前使用 <code>Call</code> 调用时返回的 <code>Response</code> 对象。</p><p>我们重点来看看 <code>onNext()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">    observer.onNext(response.body());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    terminated = <span class="keyword">true</span>;</span><br><span class="line">    Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      observer.onError(t);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">      Exceptions.throwIfFatal(inner);</span><br><span class="line">      RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当成功访问并响应的时候(2xx)，结果返回给了我们的 <code>onNext()</code> ；</p><p>而当成功访问但不成功响应的时候(4xx/5xx)，返回的结果通过 <code>HttpException</code> 的包装，然后返回给了我们的 <code>onError()</code> 方法。</p><p>而当这个壳子中出现 <code>onError()</code> 时，意味着可能出现了断网的情况，或者其他异常；</p><p>此时也是通过 <code>onError()</code> 返回到我们的观察者中。</p><p>结论：</p><ul><li>2xx 结果通过 <code>onNext()</code> 返回</li><li>4xx/5xx 结果通过 <code>onError()</code> 返回</li><li>断网和其他异常情况也通过 <code>onError()</code> 返回</li></ul><h3 id="32-observableresultt"><a class="markdownIt-Anchor" href="#32-observableresultt"></a> 3.2 <code>Observable&lt;Result&lt;T&gt;&gt;</code></h3><p><code>Result</code> 是 <code>adapter-rxjava2</code> 新增的包装类，包装了 <code>error</code> 和 <code>response</code> ；</p><p>关于它具体如何工作的，我们来看看它的源码：</p><p>首先是 <code>Result</code> 类，下面的是 <code>ResultObservable</code> 使用到的静态工厂方法和 <code>Result</code> 的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">error</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"error == null"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">null</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">response</span><span class="params">(Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (response == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"response == null"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(response, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Response&lt;T&gt; response;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Throwable error;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(Response&lt;T&gt; response, Throwable error)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.response = response;</span><br><span class="line">  <span class="keyword">this</span>.error = error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>error</code> 和 <code>response</code> 是不共戴天的关系，符合 <code>Retrofit</code> 的设计。</p><p>下面我们来看看具体的 <code>ResultObservable</code> 的包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultObserver</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Response</span>&lt;<span class="title">R</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> Result&lt;R&gt;&gt; observer;</span><br><span class="line"></span><br><span class="line">    ResultObserver(Observer&lt;? <span class="keyword">super</span> Result&lt;R&gt;&gt; observer) &#123;</span><br><span class="line">      <span class="keyword">this</span>.observer = observer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">      observer.onSubscribe(disposable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">      observer.onNext(Result.response(response));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        observer.onNext(Result.&lt;R&gt;error(throwable));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这回，重点在 <code>onError</code> 方法；</p><p>通过重载 <code>onError</code> 并使用 <code>Result</code> 的静态工厂；</p><p>让我们的 <code>observer</code> 也能通过 <code>onNext</code> 获取到具体的 <code>Throwable</code>；</p><p>也就是说，我们可以在 <code>onNext()</code> 处理网络错误。</p><p>而当更严重的错误发生时，<code>onError()</code> 才会被调用</p><p>结论：</p><p>网络异常和正常的网络内容都通过 <code>onNext()</code> 进行处理。</p><h3 id="33-observableresponset-的获取"><a class="markdownIt-Anchor" href="#33-observableresponset-的获取"></a> 3.3 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 的获取</h3><p>那么作为关键的 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 对象是从哪里获取的呢？</p><p>让我们将目光转向在开头的两个 <code>Call</code> 开头的 <code>Observable</code>；</p><p>很容易知道，一个对应了 <code>Retrofit</code> 的 <code>call.execute()</code>；</p><p>而另外一个对应了 <code>call.enqueue()</code></p><p>为了简便，我们只看 <code>execute()</code> 部分的源码：</p><p>下面就是关键的 <code>subscribeActual</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Response&lt;T&gt;&gt; observer)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Since Call is a one-shot type, clone it for each new observer.</span></span><br><span class="line">  Call&lt;T&gt; call = originalCall.clone();</span><br><span class="line">  observer.onSubscribe(<span class="keyword">new</span> CallDisposable(call));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> terminated = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Response&lt;T&gt; response = call.execute();</span><br><span class="line">    <span class="keyword">if</span> (!call.isCanceled()) &#123;</span><br><span class="line">      observer.onNext(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!call.isCanceled()) &#123;</span><br><span class="line">      terminated = <span class="keyword">true</span>;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    Exceptions.throwIfFatal(t);</span><br><span class="line">    <span class="keyword">if</span> (terminated) &#123;</span><br><span class="line">      RxJavaPlugins.onError(t);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!call.isCanceled()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        observer.onError(t);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">        Exceptions.throwIfFatal(inner);</span><br><span class="line">        RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过调用 <code>call.execute()</code> 获取 <code>Response</code> 对象；</p><p>然后将获取到的 <code>Response</code> 对象进行传递，就实现了一个 <code>Observable</code> 的功能。</p><h3 id="34-原理和结论"><a class="markdownIt-Anchor" href="#34-原理和结论"></a> 3.4 原理和结论</h3><p>通过以上的源码解读，我们得出了 <code>adapter-rxjava2</code> 的具体原理：</p><p>首先通过 <code>CallExecuteObservable</code> 获取到 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 对象；</p><p>然后根据不同的 <code>Observable</code> 类型对这个对象进行变换，最后传出，得到了我们需要的 <code>Observable</code>；</p><p>在调用 <code>Observable.subscribe(observer)</code> 时；</p><p>首先是最外层的 <code>subscribeActual()</code> 被调用；</p><p>然后被层层传递，直到 <code>CallExecuteObservable</code> 的 <code>subscribeActual()</code> 调用 <code>call.execute()</code>；</p><p>然后将 <code>Response</code> 向下进行层层传递，完成了整个订阅流程。</p><p>结论：</p><ol><li><p>只有最后 <code>subscribe()</code> 调用，才会触发网络请求</p><blockquote><p>在此之前可以先保留 <code>Observable</code> 对象；<br>直到需要的时候再进行调用</p></blockquote></li><li><p><code>Observable&lt;T&gt;</code> 的 2xx 结果在 <code>onNext()</code> 调用，4xx/5xx 结果在 <code>onError()</code> 调用</p></li><li><p><code>Observable&lt;Result&lt;T&gt;&gt;</code> 的 <code>error</code> 和 <code>response</code> 都在 <code>onNext()</code> 调用</p></li></ol><h2 id="4-创建-retrofit-实例"><a class="markdownIt-Anchor" href="#4-创建-retrofit-实例"></a> 4. 创建 <code>Retrofit</code> 实例</h2><p>当我们的 API 创建好之后，我们就可以开始创建 <code>Retrofit</code> 实例；</p><p>为了能够使用 Rxjava，必须给 <code>Retrofit</code> 加上 <code>CallAdapterFactory</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> retrofitBuilder: Retrofit.Builder =</span><br><span class="line">         Retrofit.Builder()</span><br><span class="line">                 .baseUrl(BASE_URL)</span><br><span class="line">                 .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                 .addConverterFactory(GsonConverterFactory.create(gson))</span><br></pre></td></tr></table></figure><p>这里来说一下有关 <code>RxJava2CallAdapterFactory</code> 的几个 <code>create()</code> 的区别；</p><p>这个工厂一共有三个静态构造方法：</p><ul><li><code>create()</code></li><li><code>createAsync()</code></li><li><code>createScheduler(scheduler)</code></li></ul><p>第一个是产生一个同步的 <code>Adapter</code>，相当于调用 <code>call.execute()</code>；</p><p>同时，也不对 <code>call.execute()</code> 的线程进行提前控制。</p><p>第二个是产生一个异步的 <code>Adapter</code>，相当于调用 <code>call.enqueue()</code>；</p><blockquote><p><strong>此时，<code>Observable</code> 的 <code>subscribeOn()</code> 方法失效</strong></p></blockquote><p>第三个是指定一个 <code>Scheduler</code>，让 <code>Adapter</code> 产生的 <code>Observable</code> 一开始就 <code>subscribeOn</code> 到那个线程上。</p><h2 id="5-调用网络-api"><a class="markdownIt-Anchor" href="#5-调用网络-api"></a> 5. 调用网络 API</h2><p>终于，我们可以开始对构建起来的 API 进行调用了，调用的方法和 Rxjava 的普通使用无异；</p><p>下面给出一个基本的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApiManager.createTrendingService(TrendingApi::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                   .<span class="title">getTrending</span>(<span class="title">since</span>)</span></span><br><span class="line"><span class="class">                   .<span class="title">subscribeOn</span>(<span class="title">Schedulers</span>.<span class="title">io</span>())</span></span><br><span class="line"><span class="class">                   .<span class="title">observeOn</span>(<span class="title">AndroidSchedulers</span>.<span class="title">mainThread</span>())</span></span><br><span class="line"><span class="class">                   .<span class="title">subscribe</span>(<span class="title">observer</span>)</span>;</span><br></pre></td></tr></table></figure><p>这里，让我们的网络请求在 <code>io()</code> 线程上发生；</p><p>然后在 Android 的主线程进行回调；</p><p>需要注意的是，我们需要使用 <code>AndroidSchedulers</code> 来进行主线程的指定。</p><blockquote><p>特别需要注意的是，<code>observeOn()</code> 是可以多次指定的<br>如果你需要对结果进行变换操作<br>请务必将 <code>observeOn()</code> 紧挨在 <code>subscribe()</code> 进行设置<br>否则就会在主线程进行请求的变换操作</p></blockquote><h2 id="6-取消请求"><a class="markdownIt-Anchor" href="#6-取消请求"></a> 6. 取消请求</h2><p>讲了这么多都是在讲发起请求，那么该如何取消请求呢？</p><p>没有了 <code>Call</code> 对象，我们该如何取消已经发出去的请求呢？</p><p>实际上 <code>adapter-rxjava2</code> 已经考虑到了这一点。</p><p>在 <code>CallExecuteObservable</code> 中，它向 <code>observer</code> 的 <code>onSubscribe()</code> 传入了一个 <code>CallDisposable</code> 对象；</p><p>通过这个 <code>CallDisposable</code>，当我们取消订阅时，就会自动地将请求取消。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CallDisposable</span> <span class="keyword">implements</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Call&lt;?&gt; call;</span><br><span class="line"></span><br><span class="line">   CallDisposable(Call&lt;?&gt; call) &#123;</span><br><span class="line">     <span class="keyword">this</span>.call = call;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     call.cancel();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDisposed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> call.isCanceled();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>所以，只要在 <code>onSubscribe()</code> 中获取到 <code>Disposable</code> 对象；</p><p>通过调用 <code>dispose()</code> 就能取消请求。</p><h2 id="7-其他"><a class="markdownIt-Anchor" href="#7-其他"></a> 7. 其他</h2><p><code>adapter-rxjava2</code> 除了支持 <code>Observable</code> 以外，还支持了 <code>Flowable</code>、<code>Single</code> 和 <code>Maybe</code> 等对象；</p><p>由于原理都是类似的，在这里就不详细展开了。</p><blockquote><p>不过，请务必注意 <code>Flowable</code> 和 <code>Observable</code> 的区别。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Retrofit 和 Rxjava 结合应该算得上是 Rxjava 在 Android 应用得最广泛的一个方面了。&lt;/p&gt;&lt;p&gt;这里就来讲讲关于这两个库具体组合的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://wafer.li/categories/Android/"/>
    
      <category term="Retrofit" scheme="https://wafer.li/categories/Android/Retrofit/"/>
    
    
      <category term="Android" scheme="https://wafer.li/tags/Android/"/>
    
      <category term="Rxjava2" scheme="https://wafer.li/tags/Rxjava2/"/>
    
      <category term="Retrofit" scheme="https://wafer.li/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 坑点详解</title>
    <link href="https://wafer.li//Rxjava/Rxjava2%20%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wafer.li//Rxjava/Rxjava2 坑点详解/</id>
    <published>2017-05-01T19:03:00.000Z</published>
    <updated>2017-05-01T23:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rxjava，是一个响应式的(Reactive)，基于观察者模式的异步框架。</p><p>除此之外，还有其他的 RxScala 和 RxSwift 等。</p><blockquote><p>说起来现在已经 2017 年了，应该没有什么 Java 工程师不知道什么是 Rxjava 了吧</p></blockquote><a id="more"></a><p>网上关于 Rxjava 的文章已经非常多了， 如果你没有了解过 Rxjava；</p><p>那么请直接到文章最后看一些资料和教程；</p><p>这里就主要来讲讲一些 Rxjava2 的坑点。</p><h2 id="1-observable-和-flowable"><a class="markdownIt-Anchor" href="#1-observable-和-flowable"></a> 1. <code>Observable</code> 和 <code>Flowable</code></h2><p>Rxjava2 新增了一个 <code>Flowable</code>，看起来 API 调用和 <code>Observable</code> 类似，而且官方的 README 上都是 <code>Flowable</code> 的示例教程；</p><p>那么很自然的就会联想到 <code>Flowable</code> 是 <code>Obserable</code> 的替代用品；</p><p>它们的 API 调用没有什么区别；</p><p>如果你这么想那就是 <strong>大错特错</strong>！</p><p>它们俩存在一个很大的区别就是关于背压问题的处理。</p><h3 id="11-什么是背压backpressure"><a class="markdownIt-Anchor" href="#11-什么是背压backpressure"></a> 1.1 什么是背压(backpressure)</h3><p>在异步任务中，经常会出现一种情况：生产者生产产品过快，而消费者消费速率不同；</p><p>如果不做处理，那么接收端就会被发送端淹没，或者发送端堆积一大堆事件无法处理，最终导致内存爆炸。</p><p>在计算机网络中，对于这种情况的最简单处理就是采用停等模型，直到收到接收端的回报之后，才发送下一个数据。</p><p>而背压，指的就是这样一种处理策略：</p><p>通过将默认的被动接受事件的模式变成 <strong>主动请求事件</strong> ，从而避免接收端处理不及而被淹没或者 OOM 的问题。</p><h3 id="12-关于背压的不同处理"><a class="markdownIt-Anchor" href="#12-关于背压的不同处理"></a> 1.2 关于背压的不同处理</h3><p>那么两者具体的区别就是：</p><ol><li><p><code>Flowable</code> 是有背压策略的，需要<strong>主动请求事件发送</strong></p></li><li><p>而 <code>Observable</code> 是没有背压策略的，事件会自动发送，多了就会 OOM</p></li></ol><h3 id="13-具体的例子"><a class="markdownIt-Anchor" href="#13-具体的例子"></a> 1.3 具体的例子</h3><p>Observable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">          .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// Disposable 用来取消订阅</span></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure><p><code>Observable</code> 对应的是 <code>Observer</code>；</p><p>这个写法是没有背压控制的，如果事件过多会 OOM</p><p>Flowable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    Subscription sub;</span><br><span class="line">    <span class="comment">//当订阅后，会首先调用这个方法，其实就相当于onStart()，</span></span><br><span class="line">    <span class="comment">//传入的Subscription s参数可以用于请求数据或者取消订阅</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onsubscribe start"</span>);</span><br><span class="line">        sub=s;</span><br><span class="line">        sub.request(<span class="number">1</span>);</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onsubscribe end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer o)</span> </span>&#123;</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onNext---&gt;"</span>+o);</span><br><span class="line">        sub.request(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onComplete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Flowable</code> 对应的是 <code>Subscriber</code></p><p>可以看到，在具体的回调方法中，我们需要使用 <code>request()</code> 来指示上游的数据传输。</p><p>否则， <strong>数据是不会自动传输的</strong>。</p><p>还有一个有趣的地方在于上面代码的输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onsubscribe start</span><br><span class="line">onNext---&gt;0</span><br><span class="line">onNext---&gt;1</span><br><span class="line">onNext---&gt;2</span><br><span class="line">...</span><br><span class="line">onNext---&gt;10</span><br><span class="line">onComplete</span><br><span class="line">onsubscribe end</span><br></pre></td></tr></table></figure><p>可以看到，<code>onNext</code> 在 <code>onSubscribe</code> 方法 <strong>并没有执行完毕</strong> 就开始调用了。</p><p>具体来说，是在 <code>request()</code> 之后，<code>onNext</code> 方法就立即被执行了；</p><blockquote><p>不过在实践中也不一定是这样的结果</p></blockquote><p>所以千万要注意，在 <code>request()</code> 之前就要将所有的初始化工作做好。</p><h2 id="2-线程调度"><a class="markdownIt-Anchor" href="#2-线程调度"></a> 2. 线程调度</h2><p>能够对线程进行自由调度是 Rxjava 的一大优势；</p><p>但是，由于 Rxjava 的 API 是流式调用，所以很可能会出现线程调度的坑。</p><p>具体来说，Rxjava 通过 <code>subscribeOn()</code> 和 <code>observeOn()</code> 来实现对线程的调度；</p><p>其中，<code>subscribeOn()</code> 指定的是数据的生产线程；</p><p><code>observeOn()</code> 指定的是数据的消费线程。</p><p>但是，一个很重要的区别在于：</p><ol><li><p><code>subscribeOn()</code> 只能指定一次</p><blockquote><p>如果多次指定，则以第一次为准</p></blockquote></li><li><p><code>observeOn()</code> 可以指定多次</p><blockquote><p>每指定一次，其之后流式操作所在的线程就会是指定的线程</p></blockquote></li></ol><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(getFilePath())</span><br><span class="line">           <span class="comment">//指定在新线程中创建被观察者</span></span><br><span class="line">          .subscribeOn(Schedulers.newThread())</span><br><span class="line">          <span class="comment">//将接下来执行的线程环境指定为io线程</span></span><br><span class="line">          .observeOn(Schedulers.io())</span><br><span class="line">            <span class="comment">//map就处在io线程</span></span><br><span class="line">          .map(mMapOperater)</span><br><span class="line">            <span class="comment">//将后面执行的线程环境切换为主线程，</span></span><br><span class="line">            <span class="comment">//但是这一句依然执行在io线程</span></span><br><span class="line">          .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">          <span class="comment">//指定线程无效，但这句代码本身执行在主线程</span></span><br><span class="line">          .subscribeOn(Schedulers.io())</span><br><span class="line">          <span class="comment">//执行在主线程</span></span><br><span class="line">          .subscribe(mSubscriber)</span><br></pre></td></tr></table></figure><h2 id="3-参考资料"><a class="markdownIt-Anchor" href="#3-参考资料"></a> 3. 参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9nYW5rLmlvL3Bvc3QvNTYwZTE1YmUyZGNhOTMwZTAwZGExMDgz" title="https://gank.io/post/560e15be2dca930e00da1083">给 Android 开发者的 RxJava 详解<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzZmZDg2NDAwNDZmMQ==" title="http://www.jianshu.com/p/6fd8640046f1">关于RxJava最友好的文章<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wL2U2MWUxMzA3ZTUzOA==" title="http://www.jianshu.com/p/e61e1307e538">关于RxJava最友好的文章（进阶）<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzJjNDc5OWZhOTFhNA==" title="http://www.jianshu.com/p/2c4799fa91a4">关于RxJava最友好的文章——背压（Backpressure）<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzIyMDk1NWVlZmMxZg==" title="http://www.jianshu.com/p/220955eefc1f">关于 RxJava 最友好的文章—— RxJava 2.0 全新来袭<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rxjava，是一个响应式的(Reactive)，基于观察者模式的异步框架。&lt;/p&gt;&lt;p&gt;除此之外，还有其他的 RxScala 和 RxSwift 等。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;说起来现在已经 2017 年了，应该没有什么 Java 工程师不知道什么是 Rxjava 了吧&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Rxjava" scheme="https://wafer.li/categories/Rxjava/"/>
    
    
      <category term="Rxjava2" scheme="https://wafer.li/tags/Rxjava2/"/>
    
      <category term="Rxjava" scheme="https://wafer.li/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Scoping 函数</title>
    <link href="https://wafer.li//Kotlin/Kotlin%20Scoping%20%E5%87%BD%E6%95%B0/"/>
    <id>https://wafer.li//Kotlin/Kotlin Scoping 函数/</id>
    <published>2017-04-22T12:02:00.000Z</published>
    <updated>2017-04-22T16:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Kotlin 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pldEJyYWlucy9rb3RsaW4vYmxvYi9tYXN0ZXIvbGlicmFyaWVzL3N0ZGxpYi9zcmMva290bGluL3V0aWwvU3RhbmRhcmQua3Q=" title="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt">Standard.kt<i class="fa fa-external-link"></i></span> 中提供了一些特殊的高阶函数；</p><p>它们被称作 <strong>Scoping 函数</strong>，此类函数通过使用一个函数 <code>block</code>，将你需要对某对象进行的一系列操作限制在 lambda 作用域内；</p><p>这样，对于该对象操作的代码就不会泄露到外层作用域，使得代码更为干净整洁。</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DbConnection.getConnection().let &#123; connection -&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connection is no longer visible here</span></span><br></pre></td></tr></table></figure><p>可以看到，对于 <code>connection</code> 的操作就仅局限于 <code>let</code> 的 lambda 区域，而在 lambda 区域外是不可见的；</p><p>这就可以保证对 <code>connection</code> 的操作，不会影响到接下来的作用域。</p><a id="more"></a><h2 id="1-let"><a class="markdownIt-Anchor" href="#1-let"></a> 1. <code>let</code></h2><h3 id="11-定义"><a class="markdownIt-Anchor" href="#11-定义"></a> 1.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(f: (<span class="type">T</span>)</span></span> -&gt; R): R = f(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><h3 id="12-例子"><a class="markdownIt-Anchor" href="#12-例子"></a> 1.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.let &#123; it.toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; HOGE</span></span><br></pre></td></tr></table></figure><p>从定义之中我们可以看到，<code>let</code> 是所有类型都具有的扩展函数；</p><p>它的 <code>lambda</code> 的参数就是 <code>let</code> 的调用者。</p><h3 id="13-主要用途"><a class="markdownIt-Anchor" href="#13-主要用途"></a> 1.3 主要用途</h3><p><code>let</code> 的主要用途在 Kotlin 的 <span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy9kb2NzL3JlZmVyZW5jZS9pZGlvbXMuaHRtbCNleGVjdXRlLWlmLW5vdC1udWxs" title="https://kotlinlang.org/docs/reference/idioms.html#execute-if-not-null">Idioms<i class="fa fa-external-link"></i></span> 中有介绍；</p><p>主要就是用于在对象 <code>nullable</code> 的时候，对对象进行操作；</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span>?.let &#123;</span><br><span class="line">    ... <span class="comment">// execute this block if not null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>data</code> 为 <code>null</code> 时，<code>let</code> 就不执行，而直接返回 <code>null</code>；</p><p>否则就执行 <code>let</code> 的 lambda。</p><p>此时，它与 Java <code>Optional</code> 的以下三个函数的功能类似：</p><ul><li><code>map</code></li><li><code>flatMap</code></li><li><code>ifPresent</code></li></ul><p>可以看到，<code>let</code> 实际上就相当于集合中的 <code>map</code>，作用就是进行元素的变换功能；</p><p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fevs5lulszj30ho08k74u.jpg" alt></p><p>注意，不能在 <code>let</code> 中调用 <code>it</code> 的修改方法；</p><p>否则，就会对原有对象进行改变。</p><h2 id="2-with"><a class="markdownIt-Anchor" href="#2-with"></a> 2. <code>with</code></h2><h3 id="21-定义"><a class="markdownIt-Anchor" href="#21-定义"></a> 2.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> <span class="title">with</span><span class="params">(receiver: <span class="type">T</span>, f: <span class="type">T</span>.()</span></span> -&gt; R): R = receiver.f()</span><br></pre></td></tr></table></figure><h3 id="22-例子"><a class="markdownIt-Anchor" href="#22-例子"></a> 2.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> w = Window()</span><br><span class="line">with(w) &#123;</span><br><span class="line">  setWidth(<span class="number">100</span>)</span><br><span class="line">  setHeight(<span class="number">200</span>)</span><br><span class="line">  setBackground(RED)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 <code>let</code> 不同，<code>with</code> <strong>并不是扩展函数</strong>；</p><p>它的第一个参数，是任意类型的对象，如上面的 <code>x</code>；</p><p>需要注意的是它的 lambda 部分，它的 lambda 要求接收者（调用者）必须是第一个参数的类型；</p><p>也就是说，我们可以在它的 lambda 中调用第一个参数的方法；</p><p>正如上面的例子，其中的几个 <code>set</code> 方法都隐含了调用者是 <code>w</code></p><h3 id="23-主要用途"><a class="markdownIt-Anchor" href="#23-主要用途"></a> 2.3 主要用途</h3><p>由于指定了接收者类型，所以 <code>with</code> 函数主要用于对复杂对象的一系列配置操作。</p><p>如上面的设置 <code>Window</code> 的宽度和高度，以及背景颜色等。</p><p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fevsj7j8fij30e60agjrw.jpg" alt></p><p>可以看到，<code>with</code> 的调用 <strong>会改变传入的对象</strong></p><p>实际上，这里也可以使用 <code>let</code> 函数进行这种操作；</p><p>不过由于 <code>let</code> 函数是将对象当做 <strong>参数</strong> 传入，所以如果要获得和 <code>with</code> 一样的效果，就必须在前面加 <code>it</code>：</p><p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fevslr0wr7j30iu0aijrz.jpg" alt></p><p>所以，<code>let</code> 并不适合这里所说的这个用途，利用 <code>let</code> 进行元素变换即可。</p><h2 id="3-run"><a class="markdownIt-Anchor" href="#3-run"></a> 3. <code>run</code></h2><h3 id="31-定义"><a class="markdownIt-Anchor" href="#31-定义"></a> 3.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">run</span><span class="params">(f: <span class="type">T</span>.()</span></span> -&gt; R): R = f()</span><br></pre></td></tr></table></figure><h3 id="32-例子"><a class="markdownIt-Anchor" href="#32-例子"></a> 3.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.run &#123; toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; HOGE</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>run</code> 实际上就是 <code>let</code> 和 <code>with</code> 的结合；</p><p>可以让 <code>with</code> 不需要指定 <code>receiver</code> 参数就进行对象内部属性的配置；</p><p>同时，<code>run</code> 也是一个扩展函数，可以通过任何的类进行调用。</p><h3 id="33-主要用途"><a class="markdownIt-Anchor" href="#33-主要用途"></a> 3.3 主要用途</h3><p>作为 <code>let</code> 和 <code>with</code> 的合体方法，那么最主要的用途当然还是进行某个对象的配置。</p><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fevw96ztszj30go0843yz.jpg" alt></p><p>需要注意的是，<code>run</code> 也会对对象进行改变。</p><h2 id="4-apply"><a class="markdownIt-Anchor" href="#4-apply"></a> 4. <code>apply</code></h2><h3 id="41-定义"><a class="markdownIt-Anchor" href="#41-定义"></a> 4.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">apply</span><span class="params">(f: <span class="type">T</span>.()</span></span> -&gt; <span class="built_in">Unit</span>): T &#123; f(); <span class="keyword">return</span> <span class="keyword">this</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="42-例子"><a class="markdownIt-Anchor" href="#42-例子"></a> 4.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.apply &#123; toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; hoge</span></span><br></pre></td></tr></table></figure><p>相比之前的结果，返回的依旧是小写字符；</p><p>这是由于 <code>apply</code> 返回的是 <code>apply</code> 的调用者的缘故。</p><h3 id="43-主要用途"><a class="markdownIt-Anchor" href="#43-主要用途"></a> 4.3 主要用途</h3><p>由于 <code>apply</code> 的返回类型为调用者自身，所以可以利用 <code>apply</code> 实现一个 <strong>流式 API 调用</strong>。</p><p>实际上就是 <code>with</code> 最后返回 <code>this</code> 的简略版本。</p><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fevwr9abcuj30va062q3m.jpg" alt></p><h2 id="5-also"><a class="markdownIt-Anchor" href="#5-also"></a> 5. <code>also</code></h2><p>这是 Kotlin 1.1 新增的 scoping 函数</p><h3 id="51-定义"><a class="markdownIt-Anchor" href="#51-定义"></a> 5.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">also</span><span class="params">(block: (<span class="type">T</span>)</span></span> -&gt; <span class="built_in">Unit</span>): T &#123; block(<span class="keyword">this</span>); <span class="keyword">return</span> <span class="keyword">this</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="52-使用例子"><a class="markdownIt-Anchor" href="#52-使用例子"></a> 5.2 使用例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.also &#123; it.toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; hoge</span></span><br></pre></td></tr></table></figure><p>可以看到，其作用和 <code>apply</code> 一样；</p><p>但是和 <code>apply</code> 的区别在于，<code>also</code> 的函数参数并非指定接收者；</p><p>而是将调用者 <code>T</code> 当做其参数传入 lambda；</p><p>类似于 <code>let</code> 的 <code>apply</code> 版本。</p><h3 id="53-主要用途"><a class="markdownIt-Anchor" href="#53-主要用途"></a> 5.3 主要用途</h3><p>那么这样做有什么好处呢？</p><p>首先，由于 <strong>没有指定接收者</strong>，所以 lambda 内外的 <code>this</code> 的含义没有改变：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// applyを使用</span></span><br><span class="line"><span class="keyword">val</span> button = Button(<span class="keyword">this</span>).apply &#123;</span><br><span class="line">  text = <span class="string">"Click me"</span></span><br><span class="line">  setOnClickListener &#123;</span><br><span class="line">    startActivity(Intent(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, NextActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">    <span class="comment">// 単なる「this」ではNG   ^</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// alsoを使用</span></span><br><span class="line"><span class="keyword">val</span> button = Button(<span class="keyword">this</span>).also &#123; button -&gt;</span><br><span class="line">  button.text = <span class="string">"Click me"</span></span><br><span class="line">  button.setOnClickListener &#123;</span><br><span class="line">    startActivity(Intent(<span class="keyword">this</span>, NextActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，可以通过赋予 lambda 参数名字，例如上面的 <code>button</code> ，增强可读性。</p><h3 id="54-和-let-的区别"><a class="markdownIt-Anchor" href="#54-和-let-的区别"></a> 5.4 和 <code>let</code> 的区别</h3><p><code>also</code> 和 <code>let</code> 都是通过将调用者作为 lambda 的参数传入函数的形式进行调用；</p><p>其区别就在于 <code>also</code> 最终返回值为其自身的调用者，即 <code>this</code>；</p><p>而 <code>let</code> 的最终返回值由它的 lambda 的最后一个表达式的返回值决定。</p><p>类似于 <code>apply</code> 和 <code>with</code> 的区别；</p><p>同理，也可以利用 <code>let</code> 来实现上面的 <code>also</code> 实现的功能：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> button = Button(<span class="keyword">this</span>).let &#123; button -&gt;</span><br><span class="line">  button.text = <span class="string">"Click me"</span></span><br><span class="line">  button.setOnClickListener &#123;</span><br><span class="line">    startActivity(Intent(<span class="keyword">this</span>, NextActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">  &#125;</span><br><span class="line">  button <span class="comment">// letの場合はこれが必要になる</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-总结"><a class="markdownIt-Anchor" href="#6-总结"></a> 6. 总结</h2><ol><li><code>let</code> 用于进行元素变换操作，类似于 <code>map</code></li><li><code>with</code> 用于对复杂对象的配置，需要提供具体的对象</li><li><code>run</code> 是 <code>with</code> 的 <code>let</code> 版本，配置对象属性，不需要提供具体对象</li><li><code>apply</code> 是 <code>with</code> 的流式 API 版本</li><li><code>also</code> 是 <code>let</code> 的 <code>apply</code> 版本，用于对象配置，同时保留流式 API 和 当前 <code>this</code> 的含义</li></ol><h2 id="7-参考资料"><a class="markdownIt-Anchor" href="#7-参考资料"></a> 7. 参考资料</h2><p><span class="exturl" data-url="aHR0cDovL3FpaXRhLmNvbS9uZ3N3X3Rhcm8vaXRlbXMvZDI5ZTMwODBkOWZjOGEzODY5MWUjJUU1JUFFJTlBJUU3JUJFJUE5LTI=" title="http://qiita.com/ngsw_taro/items/d29e3080d9fc8a38691e#%E5%AE%9A%E7%BE%A9-2">Kotlin スコープ関数 用途まとめ<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2JldXN0LmNvbS93ZWJsb2cvMjAxNS8xMC8zMC9leHBsb3JpbmctdGhlLWtvdGxpbi1zdGFuZGFyZC1saWJyYXJ5Lw==" title="http://beust.com/weblog/2015/10/30/exploring-the-kotlin-standard-library/">Exploring the Kotlin standard library<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Kotlin 的 &lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Standard.kt&lt;/a&gt; 中提供了一些特殊的高阶函数；&lt;/p&gt;&lt;p&gt;它们被称作 &lt;strong&gt;Scoping 函数&lt;/strong&gt;，此类函数通过使用一个函数 &lt;code&gt;block&lt;/code&gt;，将你需要对某对象进行的一系列操作限制在 lambda 作用域内；&lt;/p&gt;&lt;p&gt;这样，对于该对象操作的代码就不会泄露到外层作用域，使得代码更为干净整洁。&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DbConnection.getConnection().let &amp;#123; connection -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// connection is no longer visible here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到，对于 &lt;code&gt;connection&lt;/code&gt; 的操作就仅局限于 &lt;code&gt;let&lt;/code&gt; 的 lambda 区域，而在 lambda 区域外是不可见的；&lt;/p&gt;&lt;p&gt;这就可以保证对 &lt;code&gt;connection&lt;/code&gt; 的操作，不会影响到接下来的作用域。&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="https://wafer.li/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://wafer.li/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Scala for-comprehension</title>
    <link href="https://wafer.li//Scala/Scala%20for-comprehension/"/>
    <id>https://wafer.li//Scala/Scala for-comprehension/</id>
    <published>2017-04-22T05:21:00.000Z</published>
    <updated>2017-04-22T08:08:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Scala 作为函数式语言，提供了很多用于高阶函数来解决一类范式问题；</p><p>但是，使用过多的高阶函数就会让代码的可读性变差；</p><p>所以，对此 Scala 提供了一种类 Python 的简便的语法糖，用来解决代码的可读性问题。</p><a id="more"></a><h2 id="1-问题背景"><a class="markdownIt-Anchor" href="#1-问题背景"></a> 1. 问题背景</h2><p>在这里举一个 <em>Effective Scala</em> 中的例子：</p><p>比如说，我要列出所有不同字母组成的 <code>pair</code>，那么该怎么办呢？</p><p>如果用 Java 的话，就会有两层 <code>for</code>，那么在 Scala 下，我们就应该用到 <code>flatMap</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> chars = 'a' to 'z'</span><br><span class="line"></span><br><span class="line">chars flatMap &#123; a =&gt;</span><br><span class="line">    chars flatMap &#123; b =&gt;</span><br><span class="line">        <span class="type">Vector</span>(<span class="string">"%c%c"</span>.format(a, b))</span><br><span class="line">    &#125;</span><br><span class="line">&#125; filter &#123; s =&gt; s.head != s.last &#125;</span><br></pre></td></tr></table></figure><p>这里用到了两个 <code>flatMap</code>，为什么？</p><p>首先，如果都使用 <code>map</code>，那么内部的 <code>map</code> 将元素转变为了 <code>Vector</code>；</p><p>而 <code>char</code> 作为 <code>Range</code>，会默认选择 <code>Vector</code> 作为 <code>map</code> 的选项；</p><p>此时， <code>a</code> 转换成的东西就变成了 <code>Vector[Vector[String]]</code>；</p><p>而 <code>chars</code> 又会默认生成一层 <code>Vector</code>；</p><p>所以，最后生成的东西就会有三层 <code>Vector</code>，即 <code>Vector[Vector[Vector(String)]]</code>；</p><p>所以，我们需要两次 <code>flatten</code> 进行展平，才能最终得到 <code>Vector(String)</code>；</p><p>这也是为什么需要两次 <code>flatMap</code> 的原因。</p><p>可以看到，如果采用 <code>flatMap</code>，那么操作就会变得十分难以理解。</p><h2 id="2-for-comprehension"><a class="markdownIt-Anchor" href="#2-for-comprehension"></a> 2. <code>for-comprehension</code></h2><p>对此，Scala 提供了一种简便的，用于生成 <code>Seq</code> 的 <code>for</code> 表达式；</p><p>通常称为 <code>for-comprehension</code>，也称为 <code>Sequence Comprehension</code>，或者 <code>for expression</code>。</p><p>它的语法结构如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (s) <span class="keyword">yield</span> e</span><br></pre></td></tr></table></figure><p>其中，<code>s</code> 被称作 <code>enumerators</code>，<code>e</code> 则是遍历生成的元素；</p><p>表达式对于 <code>s</code> 有以下几点要求：</p><ol><li><p><code>s</code> 是 <code>generator</code> 和 <code>filter</code> 组成的，以分号间隔的语句序列。</p></li><li><p><code>genrator</code> 的形式为： <code>p &lt;- c</code>。</p><blockquote><p>其中 <code>p</code> 是一个模式(pattern)，<code>c</code> 则是一个集合</p></blockquote></li><li><p><code>filter</code> 的形式为 <code>if condition</code>，其中 <code>condition</code> 是个布尔表达式</p></li><li><p>允许多个 <code>generator</code>，但是在下面的 <code>generator</code> 必须比在上面的要变化的快。</p><blockquote><p>换成指令性语言的话，就是在下面的 <code>generator</code> 必须在更内部的 <code>for</code> 循环中。</p></blockquote></li></ol><p>经过执行之后，这个表达式会返回一个由 <code>e</code> 组成的集合；</p><p>具体返回的集合类型，例如 <code>List</code> 和 <code>Vector</code>，则由 <code>s</code> 来决定；</p><p>如果类型不能满足，则会向类型结构的上一层回溯，直到找到一个最接近的满足要求的类型为止。</p><p>同时，<code>for-comprehension</code> 可以使用花括号代替圆括号，此时，就不需要用分号来分隔语句了。</p><h2 id="3-使用-for-comprehension-解决问题"><a class="markdownIt-Anchor" href="#3-使用-for-comprehension-解决问题"></a> 3. 使用 <code>for-comprehension</code> 解决问题</h2><p>那么，对于上面的问题，我们试着使用 <code>for-comprehension</code> 来解决：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> chars = 'a' to 'z'</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    a &lt;- chars</span><br><span class="line">    b &lt;- chars</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">&#125; <span class="keyword">yield</span> <span class="string">"%c%c"</span>.format(a, b)</span><br></pre></td></tr></table></figure><p>可以看到，使用 <code>for-comprehension</code> 来解决，写出来的代码会比 <code>flatMap</code> 简单得多。</p><h2 id="4-关于返回类型"><a class="markdownIt-Anchor" href="#4-关于返回类型"></a> 4. 关于返回类型</h2><p>对于上面的表达式，它的返回类型是什么呢？</p><p>实际上，是一个 <code>Vector</code>。</p><p>为什么是一个 <code>Vector</code> ？</p><p>这是因为，<code>chars</code> 实际上是一个 <code>Range</code> 对象；</p><p>而对于 <code>Range</code> 对象，它不能拥有一堆 <code>String</code>；</p><p>此时，Scala 编译器会在类型结构中向上寻找最近的满足条件的类型；</p><p>此时，寻找到的是 <code>IndexedSeq</code>，而这个类型的默认 <code>Seq</code> 实现就是 <code>Vector</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scala 作为函数式语言，提供了很多用于高阶函数来解决一类范式问题；&lt;/p&gt;&lt;p&gt;但是，使用过多的高阶函数就会让代码的可读性变差；&lt;/p&gt;&lt;p&gt;所以，对此 Scala 提供了一种类 Python 的简便的语法糖，用来解决代码的可读性问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala List 高阶函数</title>
    <link href="https://wafer.li//Scala/Scala%20List%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://wafer.li//Scala/Scala List 高阶函数/</id>
    <published>2017-04-20T18:20:00.000Z</published>
    <updated>2017-04-22T18:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>高阶函数是函数式编程的一个很大的特性；</p><p>同时，其中集合类的高阶函数在日常的开发和使用中，占了一个很重要的位置；</p><p>但是，这些函数有可能会在刚接触的时候搞不懂它们的具体作用；</p><p>那么今天就以 <code>List</code> 来说一说常用的高阶函数具体的作用。</p><a id="more"></a><h2 id="1-子集操作"><a class="markdownIt-Anchor" href="#1-子集操作"></a> 1. 子集操作</h2><p>在一个集合中选取一些特定的元素作为子集；</p><p>我们在指令性语言中，通常选用 <code>for</code> 语句来实现这个需求；</p><p>而在函数式语言中，我们有对应的高阶函数来解决这个问题。</p><h3 id="11-filterp-t-boolean"><a class="markdownIt-Anchor" href="#11-filterp-t-boolean"></a> 1.1 <code>filter(p: (T) =&gt; Boolean)</code></h3><p>顾名思义， <strong>过滤器</strong>，用来 <strong>选取符合条件的元素</strong>， 并将其作为返回值；</p><p>这里的 <strong>符合条件</strong> 指的是 使得函数 <code>p</code> 的返回值为 <code>true</code> 的元素。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.filter((x) =&gt; x &gt; <span class="number">2</span>) <span class="comment">// List(3, 4)</span></span><br></pre></td></tr></table></figure><h3 id="12-filternotp-t-boolean"><a class="markdownIt-Anchor" href="#12-filternotp-t-boolean"></a> 1.2 <code>filterNot(p: (T) =&gt; Boolean)</code></h3><p>同理，这个函数是上面的反面，也就是用来 <strong>过滤掉</strong> 符合条件的元素；</p><p>返回的是， <strong>不包含符合元素的子集</strong>；</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">list.filterNot((x) =&gt; x == <span class="number">2</span>) <span class="comment">// List(1, 3)</span></span><br></pre></td></tr></table></figure><h3 id="13-partitionp-t-boolean"><a class="markdownIt-Anchor" href="#13-partitionp-t-boolean"></a> 1.3 <code>partition(p: (T) =&gt; Boolean)</code></h3><p>这个函数是上面两个函数的集合体，返回的是一个 <code>Turple</code>，包含的元素为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(list.filter, list.filterNot)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: (List(1, 2, 3), List(4, 5, 6, 7))</span></span><br><span class="line">list.partition((x) =&gt; x &lt; <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="14-takewhilep-t-boolean"><a class="markdownIt-Anchor" href="#14-takewhilep-t-boolean"></a> 1.4 <code>takeWhile(p: (T) =&gt; Boolean)</code></h3><p>这个函数会一直选取元素， <strong>直到 <code>p</code> 的返回值为 <code>false</code></strong>，然后将元素作为新的集合返回。</p><p>可以看到，这个函数返回的就是 <strong>符合条件的集合前缀</strong></p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意最后一个 1 并没有拿走</span></span><br><span class="line">list.takeWhile((x) =&gt; x == <span class="number">1</span>) <span class="comment">// List(1, 1, 1, 1)</span></span><br></pre></td></tr></table></figure><h3 id="15-dropwhilep-t-boolean"><a class="markdownIt-Anchor" href="#15-dropwhilep-t-boolean"></a> 1.5 <code>dropWhile(p: (T) =&gt; Boolean)</code></h3><p>和上面的方法相反，这个方法会一直 <strong>丢弃</strong> 元素，直到 <code>p</code> 的返回值为 <code>false</code>；</p><p>那么可以看到，这个函数返回的就是 <strong>不符合条件的集合后缀</strong>；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">list.dropWhile((x) x != <span class="number">4</span>) <span class="comment">// List(4, 2, 1)</span></span><br></pre></td></tr></table></figure><h3 id="16-spanp-t-boolean"><a class="markdownIt-Anchor" href="#16-spanp-t-boolean"></a> 1.6 <code>span(p: (T) =&gt; Boolean)</code></h3><p>这个函数是上两个函数的结合，它返回的是如下的一个 <code>Turple</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(list.takeWhile, list.dropWhile)</span><br></pre></td></tr></table></figure><h3 id="17-partition-span-和它们的基本方法的区别"><a class="markdownIt-Anchor" href="#17-partition-span-和它们的基本方法的区别"></a> 1.7 <code>partition</code>、<code>span</code> 和它们的基本方法的区别</h3><p>既然 <code>partition</code> 和 <code>span</code> 都可以用基本的 <code>filter</code>、<code>filterNot</code> 和 <code>takeWhile</code>、<code>dropWhile</code> 来解决，那为什么还要专门实现一次这两个方法呢？</p><p>其实，<code>span</code> 和 <code>partition</code> 只需要扫描一次集合；</p><p>但是如果使用 <code>filter</code>、<code>filterNot</code> 和 <code>takeWhile</code>、<code>dropWhile</code> 来实现的话，就需要扫描两次集合了。</p><p>所以，如果同时需要两者的数据的话，那么使用 <code>span</code> 和 <code>partition</code> 显然是更经济的。</p><h3 id="18-withfilter"><a class="markdownIt-Anchor" href="#18-withfilter"></a> 1.8 <code>withFilter</code></h3><p>Scala 除了 <code>filter</code> 之外，还提供了一个 <code>withFilter</code> 函数；</p><p>那么，这两者有什么区别呢？</p><p>根据文档：</p><blockquote><p>Note: the difference between <code>c filter p</code> and <code>c withFilter p</code> is that the former creates a new collection, whereas the latter only restricts the domain of subsequent map, flatMap, foreach, and withFilter operations.</p></blockquote><p>也就是说，<code>filter</code> 会返回一个 <strong>新的 <code>List</code></strong>；</p><p>但是 <code>withFilter</code> 不会返回新的 <code>List</code>；</p><p>它只会提供一个过滤器的作用，让符合条件的元素通过，以方便接下来的 <code>map</code> 等其他高阶函数的使用；</p><p>而就效率而言，<code>withFilter</code> 比 <code>filter</code> 要快。</p><p>如果你需要返回一个新的集合，就使用 <code>filter</code>；</p><p>如果你只是需要一个元素过滤器，而接下来，还需要进行其他操作，那么就使用 <code>withFilter</code></p><h2 id="2-元素检查"><a class="markdownIt-Anchor" href="#2-元素检查"></a> 2. 元素检查</h2><p>有时候，我们会希望检查集合内部的元素状态；</p><p>比如说， <strong>是否所有的元素都满足某个特定条件</strong>；</p><p>或者， <strong>是否有元素满足特定条件</strong>。</p><p>在 Scala 中，我们有高阶函数来进行这个操作。</p><h3 id="21-forallp-t-boolean-boolean"><a class="markdownIt-Anchor" href="#21-forallp-t-boolean-boolean"></a> 2.1 <code>forAll(p: (T) =&gt; Boolean): Boolean</code></h3><p>顾名思义，检查 <strong>是否所有的元素都满足特定条件</strong></p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.forAll(c =&gt; c &gt; <span class="number">0</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="22-existsp-t-boolean-boolean"><a class="markdownIt-Anchor" href="#22-existsp-t-boolean-boolean"></a> 2.2 <code>exists(p: (T) =&gt; Boolean): Boolean</code></h3><p>同理，检查 <strong>是否存在满足条件的元素</strong></p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.exists(c =&gt; c &lt; <span class="number">0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="3-变换"><a class="markdownIt-Anchor" href="#3-变换"></a> 3. 变换</h2><h3 id="31-mapf-t-u"><a class="markdownIt-Anchor" href="#31-mapf-t-u"></a> 3.1 <code>map(f: (T) =&gt; U)</code></h3><p><code>map</code> 函数，可以说是这里面用的最多的高阶函数了；</p><p><code>map</code> 函数的真正作用，实际上是一种变换功能，而且不仅可以变换成和现元素类型相同的类型，也可以变换成不同的类型；</p><p>也就是说，可以通过 <code>map</code> 函数，将一种元素的集合，变成另一种元素的集合。</p><p>例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有元素都乘以 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.map((x) =&gt; x * <span class="number">2</span>)  <span class="comment">// List(2, 4, 6, 8)</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Int 变成 String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.map((x) =&gt; x.toString())   <span class="comment">// List("1", "2", "3", "4")</span></span><br></pre></td></tr></table></figure><h3 id="32-flatten"><a class="markdownIt-Anchor" href="#32-flatten"></a> 3.2 <code>flatten</code></h3><p>这个函数可以将嵌套的 <code>List</code> 展平，就像它的名字一样。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listOfLists = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">listOfLists.flatten = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="33-flatmap"><a class="markdownIt-Anchor" href="#33-flatmap"></a> 3.3 <code>flatMap</code></h3><p>它是 <code>map</code> 和 <code>flatten</code> 的集合体，相当于先进行 <code>map</code> 然后 <code>flatten</code>。</p><p>例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listOfLists = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">listOfLists.flatMap((x) =&gt; x.map(_ * <span class="number">2</span>)) <span class="comment">// List(2, 4, 6, 8)</span></span><br></pre></td></tr></table></figure><p>也就是说，<code>flatMap</code> 先将元素 <code>map</code> 成 <strong>嵌套的</strong> <code>List</code>；</p><p>随后，再调用 <code>flatten</code>，将嵌套的 <code>List</code> 展平</p><blockquote><p><code>flatMap</code> 的作用过于强大，使用时需要小心谨慎<br>在 Twitter 的 <em>Effective Scala</em> 中，推荐使用 <em>for-comprehention</em> 来代替 <code>flatMap</code> 的使用</p></blockquote><h3 id="34-ziptxs-listu-listt-u"><a class="markdownIt-Anchor" href="#34-ziptxs-listu-listt-u"></a> 3.4 <code>zip[T](xs: List[U]): List[(T, U)]</code></h3><p>压缩，它的左右两个操作数分别是 <strong>两个 <code>List</code></strong>；</p><p>然后返回一个分别包含两个 <code>List</code> 元素的二元组的 <code>List</code>。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// List((1, "a"), (2, "b"), (3, "c"), (4, "d"))</span></span><br><span class="line">list1 zip list2</span><br></pre></td></tr></table></figure><h3 id="35-unzip"><a class="markdownIt-Anchor" href="#35-unzip"></a> 3.5 <code>unzip</code></h3><p>有压缩就有解压；</p><p>这个函数的作用就是将上面压缩后的结果解压出来；</p><p>具体来说就是接受一个二元组的 <code>List</code>， 返回一个 <code>List</code> 的二元组。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (List(1, 2, 3, 4), List("a", "b", "c", "d"))</span></span><br><span class="line">(list1 zip list2) unzip</span><br></pre></td></tr></table></figure><h3 id="36-collect"><a class="markdownIt-Anchor" href="#36-collect"></a> 3.6 <code>collect</code></h3><p>根据文档，<code>collect</code> 接受一个 <code>PartialFunction</code>，然后对集合中的每个元素都 apply 这个函数，返回一个新的集合。</p><p>听起来，这个方法和 <code>map</code> 很像，不过其区别就是在于 <code>collect</code> 接受的是一个 <code>PartialFnction</code> ；</p><p>这具体是什么意思呢？</p><p>我们来举个例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> convertFn: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; i;</span><br><span class="line">  <span class="keyword">case</span> s: <span class="type">String</span> =&gt; s.toInt;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Some</span>(s: <span class="type">String</span>) =&gt; s.toInt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="type">Some</span>(<span class="number">4</span>), <span class="type">Some</span>(<span class="string">"5"</span>)).</span><br><span class="line">  collect(convertFn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// List[Int] = List(0, 1, 2, 3, 5)</span></span><br></pre></td></tr></table></figure><p>注意到， <code>collect</code> 的 lambda 中，并没有对所有的 <code>case</code> 都进行处理；</p><p>上面的 <code>List</code> 除了含有 <code>String</code> 、 <code>Int</code> 和 <code>Some[String]</code> 之外，还含有 <code>Some[Int]</code>；</p><p>这就是所谓的 <code>PartialFunction</code> ，它并没有对所有的情形都进行处理，也没有提供一个默认的选项。</p><p>如果上面的 <code>collect</code> 替换为 <code>map</code>，则第四个 <code>Some(4)</code> 就会导致 <code>MatchError</code>；</p><p>而 <code>collect</code> 则避开了这个错误。</p><p>理论上，<code>collect</code> 进行了 <code>map</code> 和 <code>filter</code> 的两重功能。</p><p>虽然，<code>collect</code> 不会造成 <code>MatchError</code>；</p><p>但是 <code>collect</code> 不是使用 <code>try...catch</code> 实现的。</p><p><code>collect</code> 是通过检查函数中提供的 <code>case</code> 检查；</p><p>如果 <code>case</code> 不匹配，则跳过该元素，不调用函数；</p><p>如果 <code>case</code> 中存在 <code>???</code>，那么同样也会抛出异常：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="string">""</span>).collect(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; i;</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; ???</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">scala.<span class="type">NotImplementedError</span>: an implementation is missing</span><br><span class="line">  at scala.<span class="type">Predef</span>$.$qmark$qmark$qmark(<span class="type">Predef</span>.scala:<span class="number">225</span>)</span><br><span class="line">  at $anonfun$<span class="number">1.</span>applyOrElse(&lt;console&gt;:<span class="number">8</span>)</span><br><span class="line">  at scala.collection.immutable.<span class="type">List</span>.collect(<span class="type">List</span>.scala:<span class="number">303</span>)</span><br><span class="line">  ... <span class="number">33</span> elided</span><br></pre></td></tr></table></figure><h3 id="37-collectfirst"><a class="markdownIt-Anchor" href="#37-collectfirst"></a> 3.7 <code>collectFirst</code></h3><p>这是 <code>collect</code> 的简化版本；</p><p>它只会将函数应用在 <strong>第一个满足</strong> 其 <code>case</code> 的元素中，并返回一个包含该元素的 <code>Option</code> 对象。</p><p>如果不存在这样的函数，那么就返回 <code>None</code></p><h3 id="38-groupbyaf-a-k-mapk-seqa"><a class="markdownIt-Anchor" href="#38-groupbyaf-a-k-mapk-seqa"></a> 3.8 <code>groupBy[A](f: (A) =&gt; K): Map[K, Seq[A]]</code></h3><p><code>groupBy</code> 通过函数 <code>f</code>，将 <code>List</code> 分成不同的部分；</p><p>每一个部分由一个键值 <code>K</code> 来进行映射，最终返回结果为一个 <code>Map</code> 对象。</p><p>例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fruit = <span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"peer"</span>, <span class="string">"orange"</span>, <span class="string">"pineapple"</span>)</span><br><span class="line"></span><br><span class="line">fruit groupBy (_.head)</span><br><span class="line"></span><br><span class="line"><span class="comment">//&gt; Map(p -&gt; List("peer", "pineapple"),</span></span><br><span class="line"><span class="comment">//      a -&gt; List("apple"),</span></span><br><span class="line"><span class="comment">//      o -&gt; List("orange"))</span></span><br></pre></td></tr></table></figure><h2 id="4-规约"><a class="markdownIt-Anchor" href="#4-规约"></a> 4. 规约</h2><p>在一个集合中，我们通常还会进行规约操作；</p><p>例如求一个 1 到 100 的和；</p><p>那么，此时，我们就是将一个 1 到 100 的集合规约到一个 <code>Int</code>，它是这个集合所有元素的和。</p><p>下面介绍的就是一系列规约函数。</p><h3 id="41-reduceleftop-b-t-b"><a class="markdownIt-Anchor" href="#41-reduceleftop-b-t-b"></a> 4.1 <code>reduceLeft(op: (B, T) =&gt; B)</code></h3><p>顾名思义，从左到右进行规约操作；</p><p>该函数会从左到右地使用操作符 <code>op</code> 将元素连接起来。</p><p>注意 <code>op</code> 是个二元操作，它接受两个参数，返回一个值。</p><p>那么产生的结果就是一个 <strong>左斜的树</strong>：</p><img src="https://www.plantuml.com/plantuml/svg/RO_12i8m44Jl-OhyW8Ucnn3fpOye7bPsQGin6v8LMyH_DwqIMd1lCs-MOReiaEHnzmgd8K4SzKM_b2uN64dtUOH8BdgOWj0iLxinmg4mI8cV8m6wm84AsXZ7HlSURkGTnr-Ue_dZjGUlFf_EUcxiGPgApQgBRVTwRYjllxpKPLayEMGHmbtb6WzMlLL70Slk3m00"><p>需要注意的是，<code>reduceLeft</code> 不仅能返回和原有元素相同类型的值，也能返回不同类型的值；</p><p>基于这样的树结构，那么对 <code>op</code> 的类型就有了要求；</p><p>可以看到，在上面，下方的 <code>op</code> 的返回值是作为上方 <code>op</code> 的左节点；</p><p>也就是说，<code>reduceLeft</code> 要求， <strong><code>op</code> 的左边参数的类型，必须和其返回值的类型相同。</strong></p><h3 id="42-foldleftz-bop-b-t-b"><a class="markdownIt-Anchor" href="#42-foldleftz-bop-b-t-b"></a> 4.2 <code>foldLeft(z: B)(op: (B, T) =&gt; B)</code></h3><p><code>foldLeft</code> 则是对 <code>reduceLeft</code> 的进一步泛化；</p><p><code>reduceLeft</code> 是不允许在 <strong>空列表</strong> 中执行的；</p><p>对此，<code>foldLeft</code> 提供了一个 <strong>初始值</strong> <code>z</code>；</p><p>如果列表为空，那么就返回 <code>z</code>；</p><p>它生成的树如下：</p><img src="https://www.plantuml.com/plantuml/svg/RO_12i8m44Jl-OhyW8Usnn3fpOye7bPsQGen6z8LMyL_DwqI8hYtcJVBCFqiaEHszGgdCK5q-gIVIkSBZAI7sK4a6prCGMYHizaPuPWPfCHtHu0sSA2CTiQnqOE72tdByPldsFxnkX-lF1-E-c5gjJI5jflEjgdrqXRUVNXkcsNrP9552Al6BHwCUgcU0kRPRm00"><p>这里比较有意思的就是 <code>foldLeft</code> 实际上是一个 <strong>柯里化函数</strong>；</p><p>可以先提供初始值，然后在 <code>op</code> 操作确定之后，再进行规约运算。</p><h3 id="43-reducerightop-t-b-b"><a class="markdownIt-Anchor" href="#43-reducerightop-t-b-b"></a> 4.3 <code>reduceRight(op: (T, B) =&gt; B)</code></h3><p>我们既然能从左边规约，当然也可以从右边规约；</p><p><code>reduceRight</code> 的作用就是， <strong>从右到左</strong> 执行规约操作；</p><p>那么，它所生成的树就是 <strong>右斜的</strong>：</p><img src="https://www.plantuml.com/plantuml/svg/RP312eCm44JlVaNmN0_giQHuwqU4KhPaKI7DXcIBbj9_RunjLN1FOLvcTjWcC7X-t4sc-zQ3wyHPl38Hnv965JfmA9s1tZAEV3acXBf51TxJq25eQSbY90cHAuKoS4CZoNs_awjsj7gZ9N6ysf-OntTHvfSbjJY9iLGClN7aMORXdvHONBA2gpvLSbQxpcfsnYehwq44VXgKcfXHBq5r2fegxaNDT0Ed4k-iGQlZVJy0"><p>同理，<code>reduceRight</code> 要求，它的右操作数的类型必须和它的返回值类型相同。</p><h3 id="44-foldrightz-bop-t-b-b"><a class="markdownIt-Anchor" href="#44-foldrightz-bop-t-b-b"></a> 4.4 <code>foldRight(z: B)(op: (T, B) =&gt; B)</code></h3><p>同样的，我们也具有一个 <code>foldRight</code> 函数，在集合为空时，返回初始值 <code>z</code>；</p><p>它生成的树如下：</p><img src="https://www.plantuml.com/plantuml/svg/RP0n3i8m34Ntdi87WA7fY8AwSOY8mIXMMod4KMBK0kBkX81AGVNev_TjkKs2KIvdLzcXYnXwEC2zWboUBPdKOo0T70vUQ9BZhY2o7HcCaSUUq6hFdZ8fY4CDnk69dERm6UUWLdhDJs-MjtkOQYCukC1HT1fdeR2SjO2BjQgOQjLKRpDlNAWRI79rf2sBaFq6DQ_X6wm65JPv-3lXKRNaRNxY4m00"><h3 id="45-left-和-right-的区别"><a class="markdownIt-Anchor" href="#45-left-和-right-的区别"></a> 4.5 <code>left</code> 和 <code>right</code> 的区别</h3><p>那么 <code>left</code> 和 <code>right</code> 有什么区别呢？</p><p>实际上，高阶函数的作用范围都是 <strong>整个列表</strong>；</p><p>所以，对于满足 <strong>交换律</strong> 和 <strong>结合律</strong> 的运算，从左边执行和从右边执行的结果是 <strong>一样的</strong>，例如 <strong>加法操作</strong>；</p><p>但是，对于不满足交换律和结合律的运算，例如 <strong>减法操作</strong>；</p><p>那么这两个函数的执行结果就不一样。</p><h3 id="46-其他规约函数"><a class="markdownIt-Anchor" href="#46-其他规约函数"></a> 4.6 其他规约函数</h3><p>Scala 还提供了一些其他的针对数字类型的规约函数；</p><p>例如：<code>sum</code>， <code>product</code>，<code>max</code> 和 <code>min</code>；</p><p>不过，<code>sum</code> 和 <code>product</code> 只能用于数字类型，否则会报错。</p><h2 id="5-其他高阶函数"><a class="markdownIt-Anchor" href="#5-其他高阶函数"></a> 5. 其他高阶函数</h2><p>Scala 集合中还拥有其他的高阶函数，诸如：<code>count</code>、<code>find</code>、<code>sortWith</code> 等；</p><p>这些函数的作用比较明显，可以从它的命名中推测出其作用，在这里就不多做解释了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高阶函数是函数式编程的一个很大的特性；&lt;/p&gt;&lt;p&gt;同时，其中集合类的高阶函数在日常的开发和使用中，占了一个很重要的位置；&lt;/p&gt;&lt;p&gt;但是，这些函数有可能会在刚接触的时候搞不懂它们的具体作用；&lt;/p&gt;&lt;p&gt;那么今天就以 &lt;code&gt;List&lt;/code&gt; 来说一说常用的高阶函数具体的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>ofo 使用体验</title>
    <link href="https://wafer.li//Talk/ofo%20%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>https://wafer.li//Talk/ofo 使用体验/</id>
    <published>2017-04-18T13:10:00.000Z</published>
    <updated>2017-04-18T13:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为和舍友出去看电影，终于第一次体验了一下著名的小黄车 ofo；</p><p>ofo 的确是很方便，同时也解决了所谓「最后一公里」的这个需求痛点；</p><p>但是，我不得不说，ofo 的运营团队还很年轻，一些很基本的流程问题都没搞清楚就胡乱上线功能。</p><a id="more"></a><h2 id="1-校园认证"><a class="markdownIt-Anchor" href="#1-校园认证"></a> 1. 校园认证</h2><p>就比如说 ofo 的校园认证，的确对我等大学生有很大的优惠；</p><p>但是，当你校园认证不通过，而你急着用车，去进行了普通认证，那么：</p><p><strong>你就再也不能进行校园认证了!</strong></p><p>明明就是一个很容易考虑到的 Corner Case，可是 ofo 却没有处理好；</p><p>看来 ofo 还需要多招几个测试大牛。</p><h2 id="2-客服电话"><a class="markdownIt-Anchor" href="#2-客服电话"></a> 2. 客服电话</h2><p>APP 上解决不了的问题，一般的用户就会想着去联系客服解决；</p><p>在这里我不得不说一声 MMP，ofo 的客服电话三天两头打不通；</p><p>在半个小时之内，我连续向其拨打了 12 通电话；但是，只有 3 通是能接通的。</p><p>第一通电话接通之后，首先是让我退押金，然后再打电话；</p><blockquote><p>这也无可厚非，毕竟银行信用卡激活就是这么要求的</p></blockquote><p>第二通电话，就有点莫名其妙了，首先接话员连普通话也说不标准；</p><p>然后说没有权限恢复我的认证状态，在经过多次撕逼之后，让我去找一个微信号去解决；</p><p>结果这个微信号居然是个 <strong>异常号！</strong></p><p>第三通电话之后，告诉我，你还有余额没有退，所以不能给你恢复认证状态。</p><p>结果呢？帮我申请了余额退款，说要到账之后才能进行下一步的操作。</p><p>所以就导致我现在，没有押金，余额还在银行流转，所以小黄车就不关我什么事了。</p><h2 id="3-总结"><a class="markdownIt-Anchor" href="#3-总结"></a> 3. 总结</h2><p>可以看出，就是因为一个没有考虑到的 Corner Case ，现在我只能去骑 mobike;</p><p>想到当年即使是写小学期项目，也要跟队员讨论个大半天的 Corner Case 才开始着手编码；</p><p>可能这就是互联网 APP 泡沫生态的现状吧：</p><p>大家都去抢功能，让功能尽早上线，剩下的维护啊支持啊，都可以往后边放一放。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为和舍友出去看电影，终于第一次体验了一下著名的小黄车 ofo；&lt;/p&gt;&lt;p&gt;ofo 的确是很方便，同时也解决了所谓「最后一公里」的这个需求痛点；&lt;/p&gt;&lt;p&gt;但是，我不得不说，ofo 的运营团队还很年轻，一些很基本的流程问题都没搞清楚就胡乱上线功能。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://wafer.li/categories/Talk/"/>
    
    
      <category term="ofo" scheme="https://wafer.li/tags/ofo/"/>
    
      <category term="杂谈" scheme="https://wafer.li/tags/Talk/"/>
    
  </entry>
  
  <entry>
    <title>Coursera 作业之函数集合</title>
    <link href="https://wafer.li//Coursera/Scala/Coursera%20%E4%BD%9C%E4%B8%9A%E4%B9%8B%E5%87%BD%E6%95%B0%E9%9B%86%E5%90%88/"/>
    <id>https://wafer.li//Coursera/Scala/Coursera 作业之函数集合/</id>
    <published>2017-04-16T17:41:00.000Z</published>
    <updated>2017-04-18T16:32:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文源码：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL3NjYWxhLWNvdXJzZXJhL3RyZWUvbWFzdGVyL2Z1bnNldHM=" title="https://github.com/wafer-li/scala-coursera/tree/master/funsets">https://github.com/wafer-li/scala-coursera/tree/master/funsets<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="1-背景知识"><a class="markdownIt-Anchor" href="#1-背景知识"></a> 1. 背景知识</h2><p>该作业是实现一个函数集合的相关内容。</p><p>何为函数集合？</p><p>一般来说，编程语言中的集合(Collection)都是有限集合；</p><p>但是，在数学上，还有很多的集合是无限集合，比如说 <strong>负数集</strong>；</p><p>我们有没有一种办法去表示这个集合呢？</p><a id="more"></a><p>当然有的，对于上面的负数集来说，我们如何知道一个数字是不是负数集中的元素呢？</p><p>将它与 0 进行比较，如果 x &lt; 0，那么它就是负数集的元素。</p><p>此时，<code>(x) =&gt; x == 0</code> 就成为了负数集的判断标准，我们将其作为负数集的 <strong>特征函数</strong>，通过特征函数来指代特定的集合。</p><p>于是，我们得到了函数集合的定义：<code>type Set = (Int) =&gt; Boolean</code></p><p>和它的一个基本方法 <code>contains()</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(set: <span class="type">Set</span>, x : <span class="type">Int</span>) = set(x)</span><br></pre></td></tr></table></figure><h2 id="2-基本方法"><a class="markdownIt-Anchor" href="#2-基本方法"></a> 2. 基本方法</h2><p>接下来，题目要求我们实现一些集合的基本方法。</p><h3 id="21-singletonset"><a class="markdownIt-Anchor" href="#21-singletonset"></a> 2.1 <code>singletonSet()</code></h3><p>如何返回一个只有一个元素的函数集合呢？</p><p>对于我们的特征函数来说，也就是只有给定的元素才能满足这个特征函数，这样的集合就是只存在给定元素的集合。</p><p>所以，定义如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singletonSet</span></span>(elem: <span class="type">Int</span>): <span class="type">Set</span> = (x) =&gt; x == elem</span><br></pre></td></tr></table></figure><h3 id="22-交-并-补"><a class="markdownIt-Anchor" href="#22-交-并-补"></a> 2.2 交、并、补</h3><p>这几个基本的数学集合操作并不难，只需要抓住我们特征函数就是 <code>contains()</code> 这一点就行了。</p><h3 id="23-filter"><a class="markdownIt-Anchor" href="#23-filter"></a> 2.3 <code>filter()</code></h3><p>这个方法算是在 JVM 函数式语言中经常出现的集合方法；</p><p>作用就是返回满足条件的集合内的元素；</p><p>其中，一个很有趣的地方在于，<code>filter(s, p)</code> 的两个参数，虽然其表面上的类型不一样；</p><p>但是实际上他们的类型是一样的，也就是说，<code>s</code> 和 <code>p</code> 都是集合！</p><p>所以，我们只需要返回 <code>s</code> 和 <code>p</code> 的交集就行了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>) = intersect(s, p)</span><br></pre></td></tr></table></figure><h2 id="3-forall"><a class="markdownIt-Anchor" href="#3-forall"></a> 3. <code>forAll()</code></h2><p>然后，有趣的地方来了，题目要求我们实现一个 <code>forAll()</code> 方法，用来检测是否 <strong>所有的</strong> 元素都满足给定的条件。</p><p>当然，我们不能遍历全部的无限集元素；</p><p>所以，我们就采取一个区间的办法，如果在这个区间内的所有的元素都满足条件，那么我们有信心认为所有的元素都满足了条件。</p><p>在这里，同样要注意， <code>s</code> 和 <code>p</code> 的类型实际上是一样的！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forall</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">iter</span></span>(a: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; bound) <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (diff(s, p)(a)) <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span> iter(a + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  iter(-bound)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-exists"><a class="markdownIt-Anchor" href="#4-exists"></a> 4. <code>exists()</code></h2><p>本题第二难的地方来了，题目要求实现一个 <code>exists()</code> 函数，用于检测 <strong>是否存在</strong> 一个元素满足给定的条件。</p><p>按说这个还不是很难，但是，题目要求使用 <code>forAll()</code> 进行实现。</p><p>按照我的早就丢给高中老师的逻辑关系知识，『所有』和 『存在』好像并无什么联系。</p><p>不过，在论坛上有人提醒了我，可以使用 <strong>间接法</strong>；</p><p>也就是说，我们可以考虑一下 <strong>不存在</strong> 的情况；</p><p>也就是说，对于 <strong>所有的</strong> 元素，都 <strong>不满足</strong> 给定的条件；</p><p>到此，我们就可以利用上之前实现的 <code>forAll()</code> 了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exists</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>) =</span><br><span class="line">    !forAll(s, (elem) =&gt; !p(elem))</span><br></pre></td></tr></table></figure><p>但是，这显得太长了，能不能缩短到只有一行代码呢？</p><p>之前提到，<code>s</code> 和 <code>p</code> 的类型实际上是一样的，也就是说，我们可以重用上面的方法来对 <code>s</code> 和 <code>p</code> 进行处理。</p><p>那么，<code>s</code> 和 <code>p</code> 在不存在的情况下，是什么样的关系呢？</p><p>我们可以从上面的结论出发继续思考：</p><p>对于所有的元素，都不满足给定条件 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">⇒</span></span></span></span> 对于 <code>s</code> 的所有元素，都位于「在 <code>s</code> 且不在 <code>p</code> 中」这个集合内</p><p>所以，我们得到了一个简便的写法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exists</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>) = !forAll(s, diff(s, p))</span><br></pre></td></tr></table></figure><h2 id="5-map"><a class="markdownIt-Anchor" href="#5-map"></a> 5. <code>map()</code></h2><p>本题最难的部分来了，<code>map()</code> 函数，用于对集合中的元素进行变换操作，返回一个变换过后的新集合。</p><p>鉴于我们的集合是一个 <strong>函数</strong>，那么 <code>map()</code> 方法也就是返回一个 <strong>新函数</strong>，用来检测参数是否满足新变换过后的条件。</p><p>因为 <code>map()</code> 函数是针对原有集合进行变换，所以，我们应该基于原有集合生成上面的新函数。</p><p>也就是说，对于原有集合来说，是否存在一个元素，它变换过后的数值和传入的参数相等：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(s: <span class="type">Set</span>, f: <span class="type">Int</span> =&gt; <span class="type">Int</span>) =</span><br><span class="line">    x =&gt; exists(s, elem =&gt; x==f(elem))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文源码：&lt;br&gt;&lt;a href=&quot;https://github.com/wafer-li/scala-coursera/tree/master/funsets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wafer-li/scala-coursera/tree/master/funsets&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;1-背景知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-背景知识&quot;&gt;&lt;/a&gt; 1. 背景知识&lt;/h2&gt;&lt;p&gt;该作业是实现一个函数集合的相关内容。&lt;/p&gt;&lt;p&gt;何为函数集合？&lt;/p&gt;&lt;p&gt;一般来说，编程语言中的集合(Collection)都是有限集合；&lt;/p&gt;&lt;p&gt;但是，在数学上，还有很多的集合是无限集合，比如说 &lt;strong&gt;负数集&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt;我们有没有一种办法去表示这个集合呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Coursera" scheme="https://wafer.li/categories/Coursera/"/>
    
      <category term="Scala" scheme="https://wafer.li/categories/Coursera/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
      <category term="Coursera" scheme="https://wafer.li/tags/Coursera/"/>
    
  </entry>
  
  <entry>
    <title>Scala 模式匹配</title>
    <link href="https://wafer.li//Scala/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>https://wafer.li//Scala/Scala 模式匹配/</id>
    <published>2017-04-15T18:07:00.000Z</published>
    <updated>2017-04-18T16:32:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>模式匹配，是 Scala 相比 Java 在类型上的一个很好地改进；</p><p>通过引入模式匹配，消除了 Java 中常见的类型检测和强制转换(cast)；</p><p>拥有更高的安全性</p><a id="more"></a><h2 id="1-问题背景"><a class="markdownIt-Anchor" href="#1-问题背景"></a> 1. 问题背景</h2><p>模式匹配主要解决的问题就是一个树状的类型依赖图；</p><p>比如算数表达式，由文法可知，它是具有树状依赖关系的：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>E</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>→</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mo>+</mo><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mo>−</mo><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mo>∗</mo><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mi mathvariant="normal">/</mi><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} E &amp; \rightarrow \\ &amp; E+E \ | \\ &amp; E-E \ | \\ &amp; E*E \ | \\ &amp; E/E \ | \\ &amp; (E) \ | \\ &amp; i \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.500000000000004em;vertical-align:-5.000000000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.500000000000001em"><span style="top:-7.660000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span><span style="top:-6.16em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-4.659999999999999em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-3.1599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-1.6599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-.15999999999999837em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:1.3400000000000016em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.000000000000002em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.500000000000001em"><span style="top:-7.660000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span></span></span><span style="top:-6.16em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-4.659999999999999em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-3.1599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-1.6599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-.15999999999999837em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:1.3400000000000016em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.000000000000002em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，我们可以使用如下的类来表示一个算术表达式：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Sum</span>(<span class="params">leftOp: <span class="type">Expr</span>, rightOp: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br></pre></td></tr></table></figure><p>那么当我们需要使用类似 <code>eval()</code> 的方法时，该如何实现这个方法呢？</p><h2 id="2-各有缺陷的解法"><a class="markdownIt-Anchor" href="#2-各有缺陷的解法"></a> 2. 各有缺陷的解法</h2><h3 id="21-使用类型说明"><a class="markdownIt-Anchor" href="#21-使用类型说明"></a> 2.1 使用类型说明</h3><p>一个暴力解决的思路就是为 <code>Expr</code> 添加上一个类型的说明，即：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span></span>: <span class="type">Boolean</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSum</span></span>: <span class="type">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，随着以后算术表达式的种类越来越多，比如加入了乘法和除法；</p><p>那么，这个实现会导致方法数的平方级别爆炸。</p><blockquote><p>每增加一个种类，都需要对现有的所有类进行方法的增加</p></blockquote><p>显然，使用类型说明(classification) 是不行的。</p><h3 id="22-类型检测和造型"><a class="markdownIt-Anchor" href="#22-类型检测和造型"></a> 2.2 类型检测和造型</h3><p>Java 这门面向对象语言对此则有比较好的解法：</p><p>通过对对象进行类型检测和强制转换(cast)；</p><p>由于强制转换后类型得到限定，所以就可以分别进行检测工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eval</span><span class="params">(Expr e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Sum) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对的，Scala 也具有这种语法特性：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>(e: <span class="type">Expr</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.isInstanceOf[<span class="type">Number</span>]) &#123;</span><br><span class="line">        e.asInstanceOf[<span class="type">Number</span>].numberValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.isInstanceOf[<span class="type">Sum</span>]) &#123;</span><br><span class="line">        <span class="keyword">val</span> sum = e.asInstanceOf[<span class="type">Sum</span>]</span><br><span class="line">        eval(sum.leftOp) + eval(sum.rightOp)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，这种方法由于是比较低层级的，具有指令性特征；</p><p>同时，过多的类型检测和强制转换也造成了诸多不安全因素：</p><p>如果运行时类型改变了，那么很可能会出现异常。</p><h3 id="23-面向对象的解法"><a class="markdownIt-Anchor" href="#23-面向对象的解法"></a> 2.3 面向对象的解法</h3><p>现在我们来选择一个更高级的解决办法，通过利用多态特性，来解决此类问题。</p><p>相比将 <code>eval()</code> 作为一个外部的函数，不如将其作为类的一个内部方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>(<span class="params">leftOp: <span class="type">Expr</span>, rightOp: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = leftOp.eval + rightOp.eval</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过语言自带的多态特性，我们可以使用到具体的 <code>eval()</code>；</p><p>这样就能很优雅的解决上面的问题；</p><p>不过，这种写法有个缺陷；</p><p>如果我们需要添加一个新的方法，例如 <code>show()</code>，则需要更改所有的现存类；</p><p>而且，如果我们需要一个化简操作，它不能仅仅只考虑一个节点，而需要多个节点综合考虑；</p><p>这样，我们可以发现，即使使用多态，也没能解决我们所有的问题</p><h2 id="3-模式匹配"><a class="markdownIt-Anchor" href="#3-模式匹配"></a> 3. 模式匹配</h2><p>在 Scala 中，具有一个很常用的语法用于解决这类问题，即 <strong>模式匹配</strong>；</p><p>模式匹配使用 <code>match</code> 定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sum</span>(left, right) =&gt; left.eval + right.eval</span><br><span class="line">    <span class="keyword">case</span> anotherE =&gt; anotherE.eval</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="comment">//Ignore</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>match</code> 语句块中，包含多个 <code>case</code> 语句；</p><p>每个 <code>case</code> 语句包括：<code>case</code> 关键字，模式和表达式，模式和表达式使用 <code>=&gt;</code> 分隔。</p><p>乍一看，这个语法和 C++/Java 中的 <code>switch</code> 很像；</p><p>不过，它进行了大幅度的强化，主要就是放宽了对选择器的限制：</p><p>现在 <code>case</code> 语句可以是：</p><ol><li>构造器</li><li>变量</li><li>常量</li><li>通配符 <code>_</code></li></ol><p>其中：</p><ul><li>构造器必须是 <code>case class</code></li><li>变量必须以小写字母开头</li><li>常量必须以大写字母开头</li></ul><h2 id="4-匹配处理"><a class="markdownIt-Anchor" href="#4-匹配处理"></a> 4. 匹配处理</h2><p>首先，如果没有 <code>case</code> 能够匹配选择器，则会抛出异常。</p><p>然后，如果匹配成功，会将 <strong>整个 <code>match</code> 语句</strong> 替换为 <code>case</code> 的 right-hand side。</p><p>对于不同的情况，则是：</p><ul><li>构造器，将参数绑定 <code>case</code> 中的形参</li><li>变量，对变量进行赋值</li><li>常量，检测和常量的相等性</li></ul><h2 id="5-case-class"><a class="markdownIt-Anchor" href="#5-case-class"></a> 5. Case Class</h2><p>Case Class 是一种特殊的类，通常用于进行模式匹配；</p><p>但是，它还具有一些其他的有用特性：</p><p>它不需要 <code>new</code> 关键字进行构建：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">Person</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"hehe"</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>它的主要构造器参数直接可以作为类的字段：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = person.name</span><br></pre></td></tr></table></figure><p>它的相等性判断是结构化的，当它所有的成员都相等时，它就相等，和引用无关；</p><p>同时还提供了 <code>toString()</code> 方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> firstSms = <span class="type">SMS</span>(<span class="string">"12345"</span>, <span class="string">"Hello!"</span>)</span><br><span class="line"><span class="keyword">val</span> secondSms = <span class="type">SMS</span>(<span class="string">"12345"</span>, <span class="string">"Hello!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstSms == secondSms) &#123;</span><br><span class="line">  println(<span class="string">"They are equal!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">"SMS is: "</span> + firstSms)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">They are equal!</span><br><span class="line">SMS is: SMS(12345, Hello!)</span><br></pre></td></tr></table></figure><h2 id="6-模式匹配的解决办法"><a class="markdownIt-Anchor" href="#6-模式匹配的解决办法"></a> 6. 模式匹配的解决办法</h2><p>使用模式匹配，我们不仅可以对单个节点进行解析工作；</p><p>同时，我们还可以查看节点之间的关系：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sum</span>(left, right) =&gt; left.eval + right.eval</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>: <span class="type">String</span> = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n.toString</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sum</span>(left, right) =&gt; left.show + <span class="string">"+"</span> + right.show</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Prod</span>(left, right) =&gt;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(e: <span class="type">Expr</span>): <span class="type">String</span> = e <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Sum</span>(l, r) =&gt; <span class="string">"("</span> + l.show + <span class="string">"+"</span> + r.show + <span class="string">")"</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; e.show</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      f(left) + <span class="string">"*"</span> + f(right)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Var</span>(x) =&gt; x</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Sum</span>(<span class="params">left: <span class="type">Expr</span>, right: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Var</span>(<span class="params">x: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Prod</span>(<span class="params">left: <span class="type">Expr</span>, right: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br></pre></td></tr></table></figure><p>上面的 <code>show</code> 方法通过查看子节点情况，实现了优先级区分:</p><p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fenynuh6prj316g09g763.jpg" alt></p><h2 id="7-和多态方法的区别"><a class="markdownIt-Anchor" href="#7-和多态方法的区别"></a> 7. 和多态方法的区别</h2><p>那么模式匹配相比面向对象方法有什么优势呢？</p><p>如果你倾向于在现有的类架构上添加 <strong>通用的方法</strong>，那么采用模式匹配会更好；</p><p>因为模式匹配只需要修改匹配代码，而不需要在各个子类重新实现方法。</p><p>但是，如果你倾向于增加子类，而不是增加通用的处理方法，那么采用多态方法会更好；</p><p>原因是采用多态架构只需要建立一个子类，而重载方法这些繁琐工作 IDE 会帮你做好；</p><p>而模式匹配还需要在顶层代码中进行修改</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模式匹配，是 Scala 相比 Java 在类型上的一个很好地改进；&lt;/p&gt;&lt;p&gt;通过引入模式匹配，消除了 Java 中常见的类型检测和强制转换(cast)；&lt;/p&gt;&lt;p&gt;拥有更高的安全性&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>打字训练网站</title>
    <link href="https://wafer.li//Talk/%E6%89%93%E5%AD%97%E8%AE%AD%E7%BB%83%E7%BD%91%E7%AB%99/"/>
    <id>https://wafer.li//Talk/打字训练网站/</id>
    <published>2017-04-15T04:37:00.000Z</published>
    <updated>2017-04-15T14:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>买了新键盘之后就想试一试它的威力，所以就找了一个打字训练网站来打字；</p><p>在知乎上找了一圈，结果就找到了 <span class="exturl" data-url="aHR0cDovL3d3dy5rZXlici5jb20vcHJhY3RpY2U=" title="http://www.keybr.com/practice">这个<i class="fa fa-external-link"></i></span>；</p><p>练了一圈的感受就是： <strong>左手好累啊！！！</strong></p><p>基本上单词表里面最长的 S 和 T 都在左手了，而我又习惯使用左手来按空格键；</p><p>结果就是我的左手现在累得不成样子了；</p><p>不过最后成绩也不怎么样，大概也就 50 多 wpm 吧，相信大家一定会比我打字快的。</p><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fenqgox6a5j317a0jejtu.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;买了新键盘之后就想试一试它的威力，所以就找了一个打字训练网站来打字；&lt;/p&gt;&lt;p&gt;在知乎上找了一圈，结果就找到了 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL3d3dy5rZXlici5jb20vcHJhY3RpY2U=&quot;
        
      
    
    </summary>
    
      <category term="杂谈" scheme="https://wafer.li/categories/Talk/"/>
    
    
      <category term="杂谈" scheme="https://wafer.li/tags/Talk/"/>
    
      <category term="打字" scheme="https://wafer.li/tags/Typing/"/>
    
      <category term="Typing training" scheme="https://wafer.li/tags/Typing-training/"/>
    
  </entry>
  
  <entry>
    <title>Realforce 87u</title>
    <link href="https://wafer.li//Buying/Realforce%2087u/"/>
    <id>https://wafer.li//Buying/Realforce 87u/</id>
    <published>2017-04-11T04:28:00.000Z</published>
    <updated>2018-01-08T05:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近终于下定决心来买这个键盘了。</p><p>主要说说使用感受吧</p><p>2018/1/8 更新部分内容</p><a id="more"></a><h2 id="1-手感"><a class="markdownIt-Anchor" href="#1-手感"></a> 1. 手感</h2><p>我买的这个是静音版，手感介于红轴和茶轴之间，就是稍微软一点的茶轴，按起来有种噗噗的感觉；</p><p>显然，打击感是一点也没有了，不过真的有种揉胸的感觉。</p><p>不过这个键盘的优点在于：由于是分区压力，所以能极大地缓解小拇指的压力；</p><p>之前我用的 filco 青轴，最后有 40% 的概率用小拇指打不出 shift 按键；</p><p>这也是为什么我要买一个新键盘的原因。</p><h2 id="2-特色功能"><a class="markdownIt-Anchor" href="#2-特色功能"></a> 2. 特色功能</h2><p>Realforce 87u 有个特色功能，就是把没有什么卵用的 Scroll Lock 变成了 NumLock；</p><p>也就是说，这个键盘有 <strong>小键盘</strong> 的功能！</p><p>这是我在 87 键盘上从来没有见到过的。</p><p>不过在 Mac 上，这个 NumLock 就失效了；</p><blockquote><p>2018/1/8 补充：<br><strong>可惜的是，自从升级到 High Sierra 之后下面的方法就不管用了</strong><br><strong>不过吧，反正我也不怎么用这个小键盘，先就这样吧。</strong></p></blockquote><p>需要使用 Karabiner 进行键位修改。</p><p>首先下载 Karabiner，这里有个小问题就是 <code>brew cask</code> 会报 <code>Operation not permitted</code> 的错误；</p><p>所以最好还是自己下载镜像安装为好。</p><p>随后点击 <code>Open private.xml</code>：</p><p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1feindhtm6kj318g0zoagn.jpg" alt></p><p>然后加上一条自定义配置<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Map Realforce Numlock to OSX Numlock function<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>private.pc_numlock_to_mac_numlock<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">autogen</span>&gt;</span>__KeyToKey__ KeyCode::KEYPAD_CLEAR, KeyCode::VK_IOHIKEYBOARD_TOGGLE_NUMLOCK<span class="tag">&lt;/<span class="name">autogen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后再到 <code>Change Key</code> 启用就可以了。</p><p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1feingd0pg8j30ts06qabi.jpg" alt></p><h2 id="3-缺点"><a class="markdownIt-Anchor" href="#3-缺点"></a> 3. 缺点</h2><p>目前遇到的缺点只有一个：</p><p>就是它的导线槽太紧了，几乎是死死卡住键盘的线缆；</p><p>结果我摆弄的时候需要用很大的力气才能把线弄出来，希望以后不要弄烂为好；</p><blockquote><p>小贴士：弄的时候长痛不如短痛，直接一个猛劲可以更快的减轻线缆的损伤</p></blockquote><p>其次就是居然不配理线用的尼龙扎带，差评！</p><h2 id="4-为什么不买-hhkb"><a class="markdownIt-Anchor" href="#4-为什么不买-hhkb"></a> 4. 为什么不买 HHKB</h2><p>不喜欢 HHKB 的配列。</p><p>我就爱用 <code>Caps Lock</code> 🙃</p><h2 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5. 总结</h2><p>如果你很喜欢用青轴，很享受用青轴的打击感，请直接买青轴，静电容不适合你；</p><p>如果你用青轴感觉到力不从心，但是钱不够，请买茶轴或者红轴；</p><p>如果你有点闲钱，而且比较有意向打造一个良好的打字环境，那么可以考虑买一个静电容；</p><p>最后来一张玉照：</p><p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1feinxuuro5j31kw23ve83.jpg" alt></p><h2 id="6-补充"><a class="markdownIt-Anchor" href="#6-补充"></a> 6. 补充</h2><p>上传一张 Switch 的说明书，说不定以后会用到。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fn953gfiazj31kw2t5h2v.jpg" alt></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM5NTIyNDMxL2Fuc3dlci84MTc1MzcyMw==" title="https://www.zhihu.com/question/39522431/answer/81753723">https://www.zhihu.com/question/39522431/answer/81753723<i class="fa fa-external-link"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近终于下定决心来买这个键盘了。&lt;/p&gt;&lt;p&gt;主要说说使用感受吧&lt;/p&gt;&lt;p&gt;2018/1/8 更新部分内容&lt;/p&gt;
    
    </summary>
    
      <category term="买买买" scheme="https://wafer.li/categories/Buying/"/>
    
    
      <category term="买买买" scheme="https://wafer.li/tags/Buying/"/>
    
      <category term="键盘" scheme="https://wafer.li/tags/Keyboard/"/>
    
      <category term="Realforce" scheme="https://wafer.li/tags/Realforce/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Experience</title>
    <link href="https://wafer.li//Hexo/Hexo%20Experience/"/>
    <id>https://wafer.li//Hexo/Hexo Experience/</id>
    <published>2017-04-08T16:56:00.000Z</published>
    <updated>2017-04-09T05:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>这是我折腾 Hexo 博客框架的经验；</p><p>希望能给后来者以启迪。</p><a id="more"></a><h2 id="2-我所需要的功能"><a class="markdownIt-Anchor" href="#2-我所需要的功能"></a> 2. 我所需要的功能</h2><p>虽然，现今，网上已经很多教你如何一步一步地搭建 Hexo 博客，也有很多人踩过很多坑；</p><p>不过，对于我的一些要求，仍然有很多的方面未能解决。</p><p>我主要需要的功能一共有四个：</p><ol><li>数学公式渲染</li><li>PlantUML 图</li><li>TODO List</li><li>Footnotes</li></ol><h2 id="3-数学公式渲染"><a class="markdownIt-Anchor" href="#3-数学公式渲染"></a> 3. 数学公式渲染</h2><p>这个倒是有很多人发了很多博客，然后也解决了一些问题。</p><p>主要就是 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZWQ=" title="https://www.npmjs.com/package/hexo-renderer-marked"><code>hexo-renderer-marked</code><i class="fa fa-external-link"></i></span> 中，把 MathJax 中的 <code>_</code> 解析渲染成了斜体；</p><p>这样，就造成了解析错误；</p><p>同时，对于多行的数学公式，也存在很多问题。</p><p>经过一番倒腾，我的最终决定是使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1rcmFtZWQ=" title="https://www.npmjs.com/package/hexo-renderer-kramed"><code>hexo-renderer-karmed</code><i class="fa fa-external-link"></i></span> 代替原先官方自带的 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZWQ=" title="https://www.npmjs.com/package/hexo-renderer-marked"><code>hexo-renderer-marked</code><i class="fa fa-external-link"></i></span></p><p>对于另外的渲染器，它们主要的缺点有：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1wYW5kb2M=" title="https://www.npmjs.com/package/hexo-renderer-pandoc"><code>hexo-renderer-pandoc</code><i class="fa fa-external-link"></i></span> 过于沉重</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZG93bi1pdA==" title="https://www.npmjs.com/package/hexo-renderer-markdown-it"><code>hexo-renderer-markdown-it</code><i class="fa fa-external-link"></i></span> 不支持 NexT 主题的 『Read More』</li></ul><p>所以，最后选择使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZG93bi1pdA==" title="https://www.npmjs.com/package/hexo-renderer-markdown-it"><code>hexo-renderer-karmed</code><i class="fa fa-external-link"></i></span>；</p><p>不过这个插件在某些时候也存在问题；</p><p>在<span class="exturl" data-url="aHR0cDovL3h1ZG9uZ3lhbmcuY29kaW5nLm1lL21hdGgtaW4taGV4by8=" title="http://xudongyang.coding.me/math-in-hexo/">这里<i class="fa fa-external-link"></i></span>有一个 workaround</p><h2 id="4-plantuml"><a class="markdownIt-Anchor" href="#4-plantuml"></a> 4. PlantUML</h2><p>平时我主要使用的 UML 绘图工具就是这个；</p><p>主要是因为我用 Atom 上面的 <code>markdown-preview-enhanced</code> 能够实时展现 PlantUML 图。</p><p>Hexo 插件列表中，也存在一个 PlantUML 的插件，<code>hexo-tag-plantuml</code>；</p><p>不过这个是 <code>tag</code> 插件，如果使用这个的话，我就需要使用标签来定义 UML；</p><p>而不能使用 markdown 原生的 code fence；</p><p>此时，我的 <code>markdown-preview-enhanced</code> 也会不起作用；</p><p>所以就只能自造轮子：自己实现了一个 <code>filter</code> 插件，用来将 code fence 转换成 PlantUML 图。</p><p>插件源码在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL2hleG8tZmlsdGVyLXBsYW50dW1s" title="https://github.com/wafer-li/hexo-filter-plantuml">这里<i class="fa fa-external-link"></i></span></p><h2 id="5-todo-list"><a class="markdownIt-Anchor" href="#5-todo-list"></a> 5. TODO List</h2><p>这个是比较神奇的：</p><p>之前选择的 <code>kramed</code> 没有这个功能，而 <code>marked</code> 有这个功能；</p><p>不过幸好代码量不多，可以直接将 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXJlbmRlcmVyLW1hcmtlZC9wdWxsLzMy" title="https://github.com/hexojs/hexo-renderer-marked/pull/32">PR<i class="fa fa-external-link"></i></span> 中的改动合并到 <code>kramed</code> 中。</p><h2 id="6-footnotes"><a class="markdownIt-Anchor" href="#6-footnotes"></a> 6. Footnotes</h2><p>这个实际上是一个 Reference 的功能；</p><p>这个是目前最容易而且也没有坑的；</p><p>直接安装 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZWZlcmVuY2U=" title="https://www.npmjs.com/package/hexo-reference"><code>hexo-reference</code><i class="fa fa-external-link"></i></span> 插件即可。</p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><p><span class="exturl" data-url="aHR0cDovL2lqaWFvYmVyLmdpdGh1Yi5pby9jYXRlZ29yaWVzL2hleG8v" title="http://ijiaober.github.io/categories/hexo/">Goon X 的 Hexo 合集<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovLzJ3aWxka2lkcy5jb20vMjAxNi8xMC8wNi8lRTUlQTYlODIlRTQlQkQlOTUlRTUlQTQlODQlRTclOTAlODZIZXhvJUU1JTkyJThDTWF0aEpheCVFNyU5QSU4NCVFNSU4NSVCQyVFNSVBRSVCOSVFOSU5NyVBRSVFOSVBMiU5OC8=" title="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/">如何处理Hexo和MathJax的兼容问题<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h2&gt;&lt;p&gt;这是我折腾 Hexo 博客框架的经验；&lt;/p&gt;&lt;p&gt;希望能给后来者以启迪。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://wafer.li/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wafer.li/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://wafer.li/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Scala 泛型和变形</title>
    <link href="https://wafer.li//Scala/Scala%20%E6%B3%9B%E5%9E%8B%E5%92%8C%E5%8F%98%E5%BD%A2/"/>
    <id>https://wafer.li//Scala/Scala 泛型和变形/</id>
    <published>2017-04-07T15:00:00.000Z</published>
    <updated>2017-04-18T16:32:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>泛型是多态的一个重要组成部分，通过运行时确定的类型来加载对应的类代码；</p><p>作为一个面向对象语言，Scala 同样具有泛型功能。</p><a id="more"></a><h2 id="2-定义"><a class="markdownIt-Anchor" href="#2-定义"></a> 2. 定义</h2><p>与 Java 不同，Scala 的泛型是使用方括号 <code>[]</code> 定义的：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>同样，在泛型方法的定义中，泛型参数的位置也和 Java 不一样：</p><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; listOf()</span><br></pre></td></tr></table></figure><p>Scala:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listOf</span></span>[<span class="type">T</span>]()</span><br></pre></td></tr></table></figure><h2 id="3-上界和下界"><a class="markdownIt-Anchor" href="#3-上界和下界"></a> 3. 上界和下界</h2><p>这个方面，Scala 和 Java 有些许不同；</p><p>首先，在定义方面，Scala 使用两个特殊的符号表示上下界：</p><p><code>A &lt;: B</code> 表示 A 是 B 的子类，也就是 B 是 A 的上界；</p><p><code>A &gt;: B</code> 表示 A 是 B 的超类，也就是 B 是 A 的下界。</p><p>而 Java 使用 <code>extends</code> 关键字来说明。</p><p>其次，Scala 中，可以使用超类限定类型参数；</p><p>而 Java 只能使用 <code>extends</code> 即子类限定类型参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Scala</span><br><span class="line">[U &gt;: T]</span><br><span class="line"></span><br><span class="line">// Java</span><br><span class="line">U super T // ERROR!</span><br></pre></td></tr></table></figure><h2 id="4-逆变和协变"><a class="markdownIt-Anchor" href="#4-逆变和协变"></a> 4. 逆变和协变</h2><p>关于逆变和协变，Scala 相比于 Java 中的 <strong>使用声明</strong>，还可以在定义中指明协变和逆变。</p><h3 id="41-名词解释"><a class="markdownIt-Anchor" href="#41-名词解释"></a> 4.1 名词解释</h3><p>如果 <code>A &lt;: B</code> (A 是 B 的子类)，那么对于类 <code>C</code> 来说：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mo>:</mo><mi>C</mi><mo stretchy="false">[</mo><mi>B</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[A] &lt;: C[B]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault">A</span><span class="mclose">]</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">]</span></span></span></span> =&gt; C 是协变(covariant)的</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mo>:</mo><mi>C</mi><mo stretchy="false">[</mo><mi>B</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[A] &gt;: C[B]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault">A</span><span class="mclose">]</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">]</span></span></span></span> =&gt; C 是逆变(contravariant)的</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[A]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault">A</span><span class="mclose">]</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>B</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[B]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">]</span></span></span></span> 没有继承关系 =&gt; C 是不变(nonvariant) 的</li></ol><p>对 Java 而言，<code>? extends T</code> 提供了协变特性；</p><p><code>? super T</code> 提供了逆变特性</p><h3 id="42-定义中指明可变性"><a class="markdownIt-Anchor" href="#42-定义中指明可变性"></a> 4.2 定义中指明可变性</h3><p>这是 Scala 和 Kotlin 中相对于 Java 的一个改进，可以在 <strong>类定义</strong> 中指明泛型可变性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Scala</span><br><span class="line">class List[+T]</span><br><span class="line"></span><br><span class="line">// Kotlin</span><br><span class="line">class List&lt;out T&gt;</span><br></pre></td></tr></table></figure><p>此时，指明了 <code>List</code> 是 <strong>协变的</strong>，也就是说，<code>List[String]</code> 是 <code>List[Object]</code> 的子类。</p><p>同理，下面的写法指明了逆变性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Scala</span><br><span class="line">class List[-T]</span><br><span class="line"></span><br><span class="line">// Kotlin</span><br><span class="line">class List&lt;in T&gt;</span><br></pre></td></tr></table></figure><p>当不使用 <code>+</code>、<code>-</code> 号修饰时，就是不变(nonvariant)的</p><h3 id="43-函数"><a class="markdownIt-Anchor" href="#43-函数"></a> 4.3 函数</h3><p>事实上，在 Scala 中，函数也是一个对象；</p><p><code>def</code> 语句声明的函数会被转化成一个 <code>FunctionN&lt;-T, +U&gt;</code> 类：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Function1</span>[-<span class="type">T</span>, +<span class="type">U</span>] </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(param: <span class="type">T</span>): <span class="type">U</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>apply</code> 函数来进行函数的调用。</p><p>我们可以看到，函数参数是逆变的，但是返回类型是协变的；</p><p>这是为什么呢？</p><p>实际上，这是里氏法则的应用：</p><p>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>&lt;</mo><mo>:</mo><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_2 &lt;: A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo>&lt;</mo><mo>:</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_1 &lt;: B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，那么对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1 \Rightarrow B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2 \Rightarrow B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 来说：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 所接受的范围比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 广，所以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 作为参数，可以接受 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 要更加严格，所以返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 就相当于肯定能返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>；</p><p>此时，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1 \Rightarrow B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 的形参和返回值都满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2 \Rightarrow B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 的要求；</p><p>我们就可以使用前者替代后者，也就是说，此时：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>1</mn></msub><mo>&lt;</mo><mo>:</mo><msub><mi>A</mi><mn>2</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_1 \Rightarrow B_1 &lt;: A_2 \Rightarrow B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></span></p><p>那么说明， <strong>函数形参是逆变的，而返回值是协变的</strong></p><p>Scala 会自动检查函数的泛型变形，以满足上面的要求。</p><h3 id="44-协变的函数形参"><a class="markdownIt-Anchor" href="#44-协变的函数形参"></a> 4.4 协变的函数形参</h3><p>函数上面的变形要求是为了保证数据的一致性；</p><p>如果你的函数不进行数据的更改操作，那么事实上是可以将形参声明为协变的；</p><p>不过，鉴于 Scala 的泛型检查，它禁止了这种方法的出现；</p><p>此时，我们可以使用泛型下界，来让我们的变形满足 Scala 的要求：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat</span></span>[<span class="type">U</span> &gt;: <span class="type">T</span>](elem: <span class="type">U</span>): <span class="type">List</span>[<span class="type">U</span>] = <span class="keyword">new</span> <span class="type">Cons</span>(elem, <span class="type">Empty</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;泛型是多态的一个重要组成部分，通过运行时确定的类型来加载对应的类代码；&lt;/p&gt;&lt;p&gt;作为一个面向对象语言，Scala 同样具有泛型功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架 Collection</title>
    <link href="https://wafer.li//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%20Collection/"/>
    <id>https://wafer.li//Java/Java 集合框架 Collection/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p><code>Collection</code> 接口是 Java 集合框架最基本的接口；</p><p>它提供了基本的元素操作方法和遍历使用的迭代器；</p><p>同时，它还提供了关于 <code>Collection</code> 的批量操作方法。</p><a id="more"></a><h2 id="2-基本操作"><a class="markdownIt-Anchor" href="#2-基本操作"></a> 2. 基本操作</h2><p>基本的元素操作包括 <code>add()</code> 和 <code>remove()</code>，同时也包括 <code>size()</code> 和 <code>isEmpty()</code> 等一系列的集合基本操作。</p><p>其中 <code>add()</code> 和 <code>remove()</code> 的返回值是 <code>boolean</code>；</p><p>这个布尔值用于表示增加和删除是否成功。（是否对集合本身进行了操作）</p><h2 id="3-遍历操作"><a class="markdownIt-Anchor" href="#3-遍历操作"></a> 3. 遍历操作</h2><p>Java 的 Collection 遍历操作有三种：</p><ol><li>使用迭代器 <code>Iterator</code></li><li>使用 <em>for each</em> 循环</li><li>使用 <code>Stream</code> 的聚合操作(Java 8)</li></ol><p>实际上，使用 <em>for each</em> 循环和使用迭代器是一样的；</p><p><em>for each</em> 可以应用于任何实现了 <code>Iterable</code> 接口的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ineterface Iterable&lt;E&gt; &#123;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>for each</em> 实际上就是应用它返回的迭代器进行遍历操作。</p><p>关于 <code>Stream</code> 用单独的一篇文章介绍，这里主要解析迭代器的工作。</p><h2 id="4-迭代器的遍历"><a class="markdownIt-Anchor" href="#4-迭代器的遍历"></a> 4. 迭代器的遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>next()</code> 方法返回下一个元素，<code>hasNext()</code> 方法用于检测是否到达了集合末尾。</p><p>当到达了集合末尾时，调用 <code>next()</code> 会抛出 <code>NoSuchElementException</code>，所以，正确的写法是在循环时使用 <code>hasNext()</code> 作为判断条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    element = iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>Collection</code> 接口已经扩展(extends)了 <code>Iterable</code> 接口，所以自带 <code>iterator()</code> 方法。</p><p>元素被访问的顺序取决于集合类的具体实现。</p><p>比较特别的是，Java 中的迭代器和 C++ 中的迭代器不一样；</p><p>C++ 中的迭代器是基于索引的，可以不执行查找操作就将迭代器进行移动；</p><p>相反，Java 中的迭代器更类似于 <code>read()</code> 方法，迭代器的查找操作和移动操作紧密相连；</p><p>Java 中的迭代器更类似于是 <strong>位于两个元素之间</strong>，调用 <code>next()</code> 将越过一个元素，并返回这个元素的引用。</p><h2 id="5-迭代器的删除"><a class="markdownIt-Anchor" href="#5-迭代器的删除"></a> 5. 迭代器的删除</h2><p>比较特别的是，<code>Iterator</code> 接口还提供了一个 <code>remove()</code> 方法；</p><p>它会删除 <strong>上次</strong> 调用 <code>next()</code> 的元素；</p><p>也就是说，如果你想删除某个位置上的元素，你的迭代器就必须 <strong>先越过</strong> 这个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"></span><br><span class="line">iter.next();    <span class="comment">//skip over the first</span></span><br><span class="line">iter.remove();  <span class="comment">// delete the first</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>next()</code> 和 <code>remove()</code> 是具有依赖性的；</p><p><strong>不能连续调用两次 <code>remove()</code></strong>，否则，将会抛出 <code>IllegalStateException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iter.remove();</span><br><span class="line">iter.remove();</span><br></pre></td></tr></table></figure><p>必须先调用 <code>next()</code> 来越过将要删除的元素。</p><h2 id="6-批量操作"><a class="markdownIt-Anchor" href="#6-批量操作"></a> 6. 批量操作</h2><p>Collection 同时提供了一套批量操作方法，用于对另一个集合进行操作，主要的方法有：</p><ol><li><p><code>containsAll()</code></p><blockquote><p>判断另一集合是否为本集合的子集<br>（本集合是否完全包含了另一集合）</p></blockquote></li><li><p><code>addAll()</code></p><blockquote><p>将另一集合的所有元素加入到本集合中</p></blockquote></li><li><p><code>removeAll()</code></p><blockquote><p>将本集合中含有的 另一集合中的所有元素 从本集合中删除</p></blockquote></li><li><p><code>retainAll()</code></p><blockquote><p>将本集合中 <strong>不属于</strong> 另一集合的所有元素从本集合中删除<br>即，将本集合改造成两个集合的 <strong>交集</strong></p></blockquote></li><li><p><code>clear()</code></p><blockquote><p>删除本集合中的所有元素</p></blockquote></li></ol><h2 id="7-和数组的转换操作"><a class="markdownIt-Anchor" href="#7-和数组的转换操作"></a> 7. 和数组的转换操作</h2><p><code>Collection</code> 存在一个 <code>toArray()</code> 方法；</p><p>但是，比较坑爹的是，这个方法仅仅只返回一个 <code>Object[]</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] a = c.toArray();</span><br></pre></td></tr></table></figure><p>这显然没有什么卵用，因为 <code>Object[]</code> 是 <strong>新构建的</strong>，它不能强制转换成更为具体的数组。</p><p>所以，我们需要采用另一个 <code>toArray(T[] a)</code> 方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">String[] stringArray = c.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>实际上，我们可以直接向 <code>toArray()</code> 提供一个足够大的数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">String[] stringArray = c.toArray(<span class="keyword">new</span> String[c.size()]);</span><br></pre></td></tr></table></figure><p>那么这两种写法有什么区别呢？</p><p>根据 JDK 文档，当数组参数的空间不够大时，它会自动重新构建一个足够大的数组进行元素转存；</p><p>当数组空间足够大时，<code>toArray()</code> 就不自己构建数组了，而是直接将元素储存到数组中。</p><p>这样看来，写法一好像没有什么必要，毕竟都要创建数组，不如直接创建了事，何必要多出一个无用的数组呢？</p><p>实际上，写法二具有线程安全问题；</p><p>即使你使用线程安全的 <code>Collection</code>，但是当有元素在 <code>size()</code> 和 <code>toArray()</code> 之间被删除了，那么最终生成的数组就会包含 <code>null</code>。</p><p>而，写法一就可以直接避免这个问题。</p><blockquote><p>线程安全的 <code>Collection</code> 只保证每个方法是线程安全的，当你调用两个以上的方法联合使用时，就不具备线程安全了。</p></blockquote><p>Reference: <span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMjkzOTQ2L3RoZS1lYXNpZXN0LXdheS10by10cmFuc2Zvcm0tY29sbGVjdGlvbi10by1hcnJheSNjb21tZW50NjY3MzAxNzhfMzI5Mzk3MA==" title="http://stackoverflow.com/questions/3293946/the-easiest-way-to-transform-collection-to-array#comment66730178_3293970">The easiest way to transform collection to array?<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt; 接口是 Java 集合框架最基本的接口；&lt;/p&gt;&lt;p&gt;它提供了基本的元素操作方法和遍历使用的迭代器；&lt;/p&gt;&lt;p&gt;同时，它还提供了关于 &lt;code&gt;Collection&lt;/code&gt; 的批量操作方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://wafer.li/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wafer.li/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架</title>
    <link href="https://wafer.li//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://wafer.li//Java/Java 集合框架/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>任何语言都会提供一套基础的数据结构的库；</p><p>Java 也不例外，而且提供了一个庞大的数据结构库，有时对于它们之间的选择让人很困惑。</p><p>这里就来简单说明一下 Java 的 Collection 和基本的 Collection 数据结构</p><a id="more"></a><h2 id="2-接口关系图"><a class="markdownIt-Anchor" href="#2-接口关系图"></a> 2. 接口关系图</h2><p>和现代的数据结构类库一样，Java 采用了 Collection 接口和实现相分离的策略。</p><p>通过这样，来做到使用一个统一的接口，对某种数据结构的不同实现进行多态调用。</p><p>基本的 <code>Collection</code> 接口继承关系如下：</p><img src="https://www.plantuml.com/plantuml/svg/RP1D2i8m48NtSufSe3TmKT2bBiGJXEQL1l9Jqyb2yF2cgP0XkXduFfZtXXatrecpTsG38yrwWZf7vp2nZO64VO05NUqcyPwH8VY2Ps6v7HF3x1dKujNfFGmrk7SrlfT7IM-Fgd-XLCQNMdixwQRNdmDtHsN8jUeMQw3WLtuf3rwYaMQsS8P615CU-G40"><p>需要注意的是，<code>Map</code> 并非 <code>Collection</code> 的子类，而是自成一派。</p><p>同时，这些接口都是 <strong>泛型接口</strong>，可以使用它们定义泛型方法。</p><h2 id="3-接口具体含义"><a class="markdownIt-Anchor" href="#3-接口具体含义"></a> 3. 接口具体含义</h2><p>这些接口的具体含义如下：</p><ul><li><p><code>Collection</code></p><blockquote><p>Collection 类结构的根，一个 Collection 代表了一堆对象的集合体，对象通常被称作 <em>元素</em></p></blockquote></li><li><p><code>Set</code></p><blockquote><p>一个 <strong>不能拥有重复元素</strong> 的 Collection，类似数学意义上的集合</p></blockquote></li><li><p><code>List</code></p><blockquote><p>一个 <strong>有序的</strong> Collection，有时也被称作 <strong>序列</strong>(sequence)<br>一般来说，<code>List</code> 的用户对于 <code>List</code> 有着比较精确地控制<br>用户可以使用索引来进行元素的查找和插入操作</p></blockquote></li><li><p><code>Queue</code></p><blockquote><p>一个存储着即将进行处理的元素的 Collection<br>相比 Collection，它提供了特别的加入、删除和查找操作</p><p>比较特别的是，队列一般来说具有 <strong>先进先出</strong>(FIFO) 的插入和删除次序<br>队列的新元素位于队列末尾，旧元素位于队列头部</p></blockquote></li><li><p><code>Deque</code></p><blockquote><p>双端队列，在队列两头都可以进行插入和删除操作<br>同时，双端队列也同时支持 <strong>先进先出</strong>(FIFO) 和 <strong>后进先出</strong>(LIFO) 的插入和删除策略</p></blockquote></li><li><p><code>Map</code></p><blockquote><p>一个存储键值对的对象<br><code>Map</code> 不能包含重复键，每个键可以被映射到最多一个值上</p></blockquote></li><li><p><code>SortedSet</code></p><blockquote><p>一个它的元素按照 <strong>升序排列</strong> 的 <code>Set</code></p></blockquote></li><li><p><code>SortedMap</code></p><blockquote><p>一个它的键按照 <strong>升序排列</strong> 的 <code>Map</code></p></blockquote></li></ul><h2 id="4-abstract-类"><a class="markdownIt-Anchor" href="#4-abstract-类"></a> 4. Abstract 类</h2><p>集合框架中，除了接口和具体实现，还提供了一系列的 <code>Abstract*</code> 类；</p><p>它是 <code>Collection</code> 和 <code>Map</code> 以及其子接口的简单实现形式，利用泛型来提供了一些通用的方法；</p><p>比如 <code>contains()</code> 方法，就是利用了泛型的 <code>Iterator</code> 实现的。</p><p><code>Abstract</code> 类是用于进行具体集合类实现的，通过继承 <code>Abstract</code> 类，可以极大减轻</p><h2 id="5-视图"><a class="markdownIt-Anchor" href="#5-视图"></a> 5. 视图</h2><p>在通常情况下，我们需要将一个具体的 <code>Collection</code> 或者 <code>Map</code> 对象转换成另一种集合框架内的具体对象进行操作；</p><p>所以，集合框架提供了一种很有用的视图技术；</p><p>视图(views) 指的就是返回一个实现了 <strong>其他接口</strong> 的 <strong>引用</strong>，通过这个引用，来进行 <strong>原有集合</strong> 的操作，这个对象引用就是视图。</p><h3 id="51-arrayaslist"><a class="markdownIt-Anchor" href="#51-arrayaslist"></a> 5.1 <code>Array.asList()</code></h3><p>不仅集合框架中存在包装器，<code>Array</code> 类中也存在可以包装成一个 <code>List</code> 的方法；</p><p>它返回一个 <code>List</code> 的视图，可以通过它来使用 <code>List</code> 中的访问方法（包括 <code>get</code> 和 <code>set</code>）对 <strong>原数组</strong> 进行访问和元素的修改；</p><p>但是，不能调用 <code>add()</code> 和 <code>remove()</code> 这种能够对数组大小产生影响的方法；</p><p>注意，视图对象始终是在 <strong>原对象</strong> 进行操作的。</p><blockquote><p>有趣的是，<code>asList()</code> 返回的也是 <code>ArrayList</code> 对象<br>不过，不是 <code>java.util.ArrayList</code>，而是 <code>java.util.Arrays.ArrayList</code>，是其自身的一个子类</p></blockquote><p>Java 5 之后，<code>asList()</code> 方法声明为了不定参数，可以直接传入元素进行转换操作。</p><h3 id="52-子范围"><a class="markdownIt-Anchor" href="#52-子范围"></a> 5.2 子范围</h3><p>可以使用诸如 <code>subXXX()</code> 和 <code>headXXX()</code> 和 <code>tailXXX()</code> 方法返回 Collection 的一个子范围；</p><p>可以通过这个子范围视图对集合的一部分进行操作。</p><h3 id="53-不可变的视图"><a class="markdownIt-Anchor" href="#53-不可变的视图"></a> 5.3 不可变的视图</h3><p>通过 <code>unmodifiableXXX()</code> 可以获取一个不可修改的视图；</p><p>这个视图中的所有的更改器方法都会返回 <code>UnsupportedOperationException</code>；</p><p>当然，这不意味着其原始集合不能被更改，只是视图对象不能更改原有集合，但是通过原始集合的引用，同样可以更改原始的集合。</p><p>需要注意的是，<code>unmodifiableCollection()</code> 返回的集合是通过原始的 <code>Object.equals()</code> 方法进行相等性判断的；</p><p>也就是说，不能通过 <code>Collection</code> 视图进行相等性判定。</p><h3 id="54-同步视图"><a class="markdownIt-Anchor" href="#54-同步视图"></a> 5.4 同步视图</h3><p>集合框架还提供了一个同步视图，用来进行一系列的多线程同步工作。</p><p>通过 <code>synchronizedXXX()</code> 可以获取到一个线程安全的 <code>Collection</code> 或者 <code>Map</code>；</p><p>不过，这个线程安全仅限于一些基本的方法；</p><p>对于遍历方法，包括使用迭代器和 <code>Stream</code>，都需要 <strong>手动进行同步</strong></p><h3 id="55-检查视图"><a class="markdownIt-Anchor" href="#55-检查视图"></a> 5.5 检查视图</h3><p>在 Java 5 引入泛型之后，集合框架提供了一个检查视图；</p><p>它专门用于检查是否有其他类型的对象混入了集合之中。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList a = strings;</span><br><span class="line">a.add(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><p>由于使用了原始类型，编译器无法发现这一泛型错误。</p><p>使用检查视图，我们就可以发现这一错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; checkedStrings = Colllections.checkedList(strings, String.class);</span><br></pre></td></tr></table></figure><p>当发现类型不符合时，它会立即抛出一个 <code>ClassCastException</code>；</p><p>不过，它也有缺陷，它是依赖于虚拟机的泛型安全机制；</p><p>当向 <code>ArrayList&lt;Pair&lt;String&gt;&gt;</code> 中插入 <code>Pair&lt;Date&gt;</code> 时，就不能检测出这种错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-介绍&quot;&gt;&lt;/a&gt; 1. 介绍&lt;/h2&gt;&lt;p&gt;任何语言都会提供一套基础的数据结构的库；&lt;/p&gt;&lt;p&gt;Java 也不例外，而且提供了一个庞大的数据结构库，有时对于它们之间的选择让人很困惑。&lt;/p&gt;&lt;p&gt;这里就来简单说明一下 Java 的 Collection 和基本的 Collection 数据结构&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://wafer.li/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wafer.li/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Scala Hello World</title>
    <link href="https://wafer.li//Scala/Scala%20Hello%20World/"/>
    <id>https://wafer.li//Scala/Scala Hello World/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-08T13:58:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>Scala 既可以使用交互式命令行来编程，也可以将其写成一个独立的程序；</p><p>其中，关于构建独立程序的写法一共有两种。</p><a id="more"></a><h2 id="2-main-方法"><a class="markdownIt-Anchor" href="#2-main-方法"></a> 2. <code>main()</code> 方法</h2><p>使用 <code>main()</code> 方法是通常各种语言的程序入口，Scala 也不例外：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用-application-特质"><a class="markdownIt-Anchor" href="#3-使用-application-特质"></a> 3. 使用 <code>Application</code> 特质</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h2&gt;&lt;p&gt;Scala 既可以使用交互式命令行来编程，也可以将其写成一个独立的程序；&lt;/p&gt;&lt;p&gt;其中，关于构建独立程序的写法一共有两种。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala 简介</title>
    <link href="https://wafer.li//Scala/Scala%20%E7%AE%80%E4%BB%8B/"/>
    <id>https://wafer.li//Scala/Scala 简介/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Scala 是高层级的，函数式，基于 JVM，完美调用 Java 的编程语言。<br>其主要特点就是它是一门函数式语言。</p><p>语法上，Kotlin 借鉴了其大部分的语法，所以体现出和 Kotlin 非常相似的特征。</p><p>同时，由于基于 JVM，所以类型系统和 Java 没有多大区别。</p><a id="more"></a><h2 id="2-什么是函数式语言"><a class="markdownIt-Anchor" href="#2-什么是函数式语言"></a> 2. 什么是函数式语言</h2><p>函数式语言的两大理念：</p><ol><li>函数也是值，可以作为参数，也可以保存在变量中，与其他类型同级</li><li>函数只应该接受参数输入，并输出返回值，不应该具有其他副作用</li></ol><h2 id="3-没有分号"><a class="markdownIt-Anchor" href="#3-没有分号"></a> 3. 没有分号</h2><p>这里需要说的一个问题是，虽然 Scala 没有分号；</p><p>但是当你写长表达式的时候可能会有问题：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someLongExpression</span><br><span class="line">+ someOtherExpression</span><br></pre></td></tr></table></figure><p>上面的语句会被隐式加上分号：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someLongExpression;</span><br><span class="line">+ someOtherExpression</span><br></pre></td></tr></table></figure><p>这样显然是不符合我们的实际意图的，解决办法有两个：</p><ol><li><p>使用括号</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(someLongExpression</span><br><span class="line">    + someOtherLongExpression)</span><br></pre></td></tr></table></figure></li><li><p>将操作符放在行尾</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someLongExpression +</span><br><span class="line">someOtherExpression</span><br></pre></td></tr></table></figure></li></ol><p>分号推断的规则为，除非以下情况，否则行尾将会被认为是一个分号：</p><ol><li><p>行尾由一个不能合法作为行尾的字符结束，如句点(<code>.</code>) 和中缀操作符 (<code>+</code>、<code>-</code>)</p></li><li><p>下一行开始于不能作为语句开始的字</p></li><li><p>行结束于括号(<code>()</code>) 和 方括号 (<code>[]</code>) 之中</p><blockquote><p>由于括号中不能容纳多个语句，所以，它之中的行不可能是一个逻辑行</p></blockquote></li></ol><h2 id="4-面向对象"><a class="markdownIt-Anchor" href="#4-面向对象"></a> 4. 面向对象</h2><p>Scala 中所有东西都是 <strong>对象</strong>；</p><p>操作符实际上是对象的 <strong>方法</strong></p><h2 id="5-变量定义"><a class="markdownIt-Anchor" href="#5-变量定义"></a> 5. 变量定义</h2><p>语法上和 Kotlin 无多大差别</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="6-函数定义"><a class="markdownIt-Anchor" href="#6-函数定义"></a> 6. 函数定义</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) x</span><br><span class="line">    <span class="keyword">else</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有趣的是，Scala 中，函数定义需要一个<strong>等号</strong>；</p><p>这意味着，函数实际上是一个 <strong>变量</strong>，而函数体实际上是一个 <strong>返回值的表达式</strong>。</p><p>同时，函数体 <strong>没有 <code>return</code></strong>，这主要是因为函数体是一个 <strong>表达式</strong>，而一个表达式理应返回其计算得到的值。</p><p>这正好体现了函数式编程的思想，函数是一个值，函数体是一个表达式。</p><h2 id="7-使用函数式风格"><a class="markdownIt-Anchor" href="#7-使用函数式风格"></a> 7. 使用函数式风格</h2><p>Scala 程序员在解决问题时，应该优先考虑函数式风格而非指令式风格。</p><p>简单的判断标准有：</p><ol><li><p>尽量使用 <code>val</code> 解决问题</p><blockquote><p>使用 <code>var</code> 会让你的 编码层级变低，而函数式编程的一个重要作用就是使你的视野聚焦在高层级中。</p></blockquote></li><li><p>尽量避免定义返回 <code>Unit</code> 的函数</p><blockquote><p>函数式编程一个理念就是函数体是表达式，而返回 <code>Unit</code> (Java 中的 <code>void</code>) 的函数一般来说都具有 <strong>副作用</strong> (即函数做了不是生成返回值的工作)</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;&lt;/a&gt; 1. 概述&lt;/h2&gt;&lt;p&gt;Scala 是高层级的，函数式，基于 JVM，完美调用 Java 的编程语言。&lt;br&gt;其主要特点就是它是一门函数式语言。&lt;/p&gt;&lt;p&gt;语法上，Kotlin 借鉴了其大部分的语法，所以体现出和 Kotlin 非常相似的特征。&lt;/p&gt;&lt;p&gt;同时，由于基于 JVM，所以类型系统和 Java 没有多大区别。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala 类和对象基础</title>
    <link href="https://wafer.li//Scala/Scala%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <id>https://wafer.li//Scala/Scala 类和对象基础/</id>
    <published>2017-04-02T15:00:00.000Z</published>
    <updated>2017-04-14T11:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>Scala 除了是一门函数式语言外，还同时具有面向对象的特征；</p><p>在 Scala 中，一样具有类和对象以及多态的支持。</p><a id="more"></a><h2 id="2-构造器"><a class="markdownIt-Anchor" href="#2-构造器"></a> 2. 构造器</h2><p>类具有一个默认的 primary 构造器，它的参数直接位于 <code>class</code> 头中；</p><p>而且，更加神奇的是，<code>class</code> 中可以直接执行另外的函数；</p><p>也就是说， <strong>整个类</strong> 都是 primary 构造器。</p><p>对于多个构造器，我们采用如下的声明来实现：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name:<span class="type">String</span>, val age: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>) = <span class="keyword">this</span>(name, <span class="number">17</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过直接定义 <code>this</code> 来定义一个新的构造器</p><h2 id="3-定义和创建"><a class="markdownIt-Anchor" href="#3-定义和创建"></a> 3. 定义和创建</h2><p>和 Java 一样，Scala 中，类使用 <code>class</code> 关键字进行定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChecksumAccumulator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过和 Java 不同的，对象的构建，类没有参数，则不需要括号：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">ChecksumAccumulator</span></span><br></pre></td></tr></table></figure><h2 id="4-字段和方法"><a class="markdownIt-Anchor" href="#4-字段和方法"></a> 4. 字段和方法</h2><p>类中，字段使用 <code>val</code> 和 <code>var</code> 定义，方法使用 <code>def</code> 定义。</p><p>注意 <code>def</code> 同样要使用等于号 <code>=</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChecksumAccumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSum</span></span>(): <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">return</span> ~(sum + <span class="number">0XFF</span>) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，如果方法需要有副作用，则将其返回值声明为 <code>Unit</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(b: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    sum += b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，方法会忽略函数体最后的值类型，转而将其转换为 <code>Unit</code></p><p>如果需要返回 <code>Unit</code>，我们也可以直接省略等于号，使用 Java 中常用的方法声明形式：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(b: <span class="type">Int</span>) &#123;</span><br><span class="line">    sum += b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个函数或者方法的定义没有等于号，那么默认其返回值类型为 <code>Unit</code>。</p><p>如果需要函数或者方法来推断返回值类型，则需要加上等于号</p><h2 id="5-getter-和-setter"><a class="markdownIt-Anchor" href="#5-getter-和-setter"></a> 5. Getter 和 Setter</h2><p>很遗憾，Scala 的类成员是字段形式的，所以，不能像 Kotlin 那样采用语法糖式的 getter 和 setter 的写法；</p><p>相比 Java，Scala 在定义字段时，会自动生成字段的 getter 和 setter，他们的命名为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span></span>:<span class="type">T</span>                      <span class="comment">// getter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_=</span> </span>: (y: <span class="type">T</span>): <span class="type">Unit</span>       <span class="comment">// setter</span></span><br></pre></td></tr></table></figure><p>注意，方法名为 <code>x</code> 和 <code>x_=</code></p><p>那么如何提供自定义的 getter 和 setter 呢？</p><p>我们只能采用后备字段，同时，将我们自定义的 getter 和 setter 满足上面的命名公约：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">private var _name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span> </span>= _name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name_=</span> </span>(thatName: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        _name = thatName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就能够像使用属性一样使用 <code>name</code> 了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"hehe"</span>)</span><br><span class="line"></span><br><span class="line">p.name = <span class="string">"nihao"</span></span><br></pre></td></tr></table></figure><h2 id="6-可见性简述"><a class="markdownIt-Anchor" href="#6-可见性简述"></a> 6. 可见性简述</h2><p>Scala 中，默认的可见性是 <code>public</code>；</p><p>其余的可见性修饰符和 Java 一致。</p><h2 id="7-伴生对象"><a class="markdownIt-Anchor" href="#7-伴生对象"></a> 7. 伴生对象</h2><p>Scala 没有静态成员，但是具有伴生对象(companion object)，是对象(object) 的一种。</p><p>对象是一个 <strong>单例</strong>，当对象和类在同一个文件中定义，具有同样的名称时，称对象是类的伴生对象。</p><p>对象不带参数，不能通过 <code>new</code> 关键字进行构建。</p><p>方法的调用形式和 Java 的静态方法调用相同。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ChecksumAccumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cache = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> =</span><br><span class="line">    <span class="keyword">if</span> (cache.contains(s))</span><br><span class="line">        cache(s)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> acc = <span class="keyword">new</span> <span class="type">ChecksumAccumulator</span></span><br><span class="line">        <span class="keyword">for</span> (c &lt;- s)</span><br><span class="line">            acc.add(c.toByte)</span><br><span class="line">        <span class="keyword">val</span> cs = acc.checksum()</span><br><span class="line">        cache += (s -&gt; cs)</span><br><span class="line">        cs</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>没有伴生类的对象称为 <strong>孤立对象</strong>，实际上就是一个简单的单例。</p><h2 id="8-类的解析过程"><a class="markdownIt-Anchor" href="#8-类的解析过程"></a> 8. 类的解析过程</h2><p>Scala 采用代换模型对表达式进行解析，那么它是如何解析类的定义和声明调用的呢？</p><p>对此，有如下的几个步骤：</p><ol><li><p>将 <code>new</code> 关键字当成普通方法进行代换，最终为值</p></li><li><p>解析类定义中的方法形参</p></li><li><p>解析构造器形参</p></li><li><p>将 <code>this</code> 关键字替换成 <code>new</code> 的表达式</p></li><li><p>将上述解析到的所有值进行代入，函数解析为字面量</p></li><li><p>继续代换，最终得到结果</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简介&quot;&gt;&lt;/a&gt; 1. 简介&lt;/h2&gt;&lt;p&gt;Scala 除了是一门函数式语言外，还同时具有面向对象的特征；&lt;/p&gt;&lt;p&gt;在 Scala 中，一样具有类和对象以及多态的支持。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://wafer.li/categories/Scala/"/>
    
    
      <category term="Scala" scheme="https://wafer.li/tags/Scala/"/>
    
  </entry>
  
</feed>
