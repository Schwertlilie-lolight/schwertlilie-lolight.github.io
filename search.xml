<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>音视频开发基础概念</title>
      <link href="//MediaDev/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>//MediaDev/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>最近准备入门音视频开发，就学习内容做一下笔记吧</p><a id="more"></a><h2 id="1-声音的物理相关概念"><a class="markdownIt-Anchor" href="#1-声音的物理相关概念"></a> 1. 声音的物理相关概念</h2><p>声音是纵波，是由波源振动产生的，声波在介质中传播，是通过波源振动引起介质分子的周期性振动进行的</p><h3 id="11-声音相关-n-要素解析"><a class="markdownIt-Anchor" href="#11-声音相关-n-要素解析"></a> 1.1 声音相关 n 要素解析</h3><ul><li>声波三要素<ol><li>频率</li><li>振幅</li><li>波形</li></ol></li><li>语音四要素<ol><li>音高</li><li>音强</li><li>音长</li><li>音色</li></ol></li><li>声音三要素<ol><li>音调</li><li>响度</li><li>音色</li></ol></li></ul><p>几要素之间的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">频率 &lt;-&gt; 音高 = 音调</span><br><span class="line">振幅 &lt;-&gt; 音强 &lt;-&gt; 响度</span><br><span class="line">波形 &lt;-&gt; 音色</span><br></pre></td></tr></table></figure><p>具体来说，声音的音高就是音调，与声波的频率相关<br>声音的音强和响度相关，两者和声波的振幅有关<br>声音的音色与声波的波形相关，但也和其他要素有关</p><p>音长是一个音的持续时间长短，在语音学等有研究意义，但不属于声音的物理性质</p><p>下面对几个概念进行解析</p><h4 id="111-音调与频率"><a class="markdownIt-Anchor" href="#111-音调与频率"></a> 1.1.1 音调与频率</h4><p>音调或者音高是衡量人类心理对标准音高的感受，通常使用字母和升降调符号（如 <code>A#</code>）来对音高进行标记，和声波的频率相关。</p><p>标准音高记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span>，其频率为 <strong>440Hz</strong></p><p>事实上，根据不同的标准可以列出频率和音调之间的函数关系，如广为使用的 MIDI 标准规定了一个线性的音高空间，其函数表达式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>=</mo><mn>69</mn><mo>+</mo><mn>12</mn><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mrow><mo fence="true">(</mo><mfrac><mi>f</mi><mn>440</mn></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">p = 69 + 12\times\log_2 { \left(\frac {f}{440} \right) }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">6</span><span class="mord">9</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-.95003em"></span><span class="mop"><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.20696799999999996em"><span style="top:-2.4558600000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span><span class="mord">4</span><span class="mord">0</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0"><span class="delimsizing size3">)</span></span></span></span></span></span></span></span></p><p>其中，标准音高 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mn>69</mn></mrow><annotation encoding="application/x-tex">A = 69</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">6</span><span class="mord">9</span></span></span></span></p><p>与音调相关的常见概念还有：</p><ol><li>音阶：按照音高排列的一系列音符，有多种组合方式，例如常见的 Do-Re-Mi 就是七声音阶</li><li>音程：两个音的音高之间的相对关系，在频率上表现为两个音的频率差距，通过调律系统确定，目前最常用的为十二平均律</li><li>八度：音程的一种，指的是两个音的频率关系为 <strong>2:1</strong></li><li>半音：采用十二平均律的一种音程划分，一个八度分为十二个半音，半音之间的频率<strong>比值</strong>为： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mtext> </mtext><mroot><mn>2</mn><mn>12</mn></mroot><mo>=</mo><msup><mn>2</mn><mfrac><mn>1</mn><mn>12</mn></mfrac></msup><mo>≈</mo><mtext> </mtext></mstyle><mstyle scriptlevel="0" displaystyle="true"><mn>1.0594630943593</mn></mstyle><mstyle scriptlevel="0" displaystyle="true"><mn>1.0594630943593</mn></mstyle></mrow><annotation encoding="application/x-tex">{\displaystyle \,{\sqrt[{12}]{2}}=2^{\frac {1}{12}}\approx \,} {\displaystyle 1.0594630943593} {\displaystyle 1.0594630943593}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0879250000000003em;vertical-align:-.08390500000000001em"></span><span class="mord"><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.845534em"><span style="top:-3.023314em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.956095em"><span class="svg-align" style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord" style="padding-left:.833em"><span class="mord">2</span></span></span><span style="top:-2.916095em"><span class="pstrut" style="height:3em"></span><span class="hide-tail" style="min-width:.853em;height:1.08em"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.08390500000000001em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0040200000000001em"><span style="top:-3.4130000000000003em;margin-right:.05em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8443142857142858em"><span style="top:-2.656em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em"><span class="pstrut" style="height:3em"></span><span class="frac-line mtight" style="border-bottom-width:.049em"></span></span><span style="top:-3.384em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.344em"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:.16666666666666666em"></span></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mord">9</span><span class="mord">4</span><span class="mord">6</span><span class="mord">3</span><span class="mord">0</span><span class="mord">9</span><span class="mord">4</span><span class="mord">3</span><span class="mord">5</span><span class="mord">9</span><span class="mord">3</span></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mord">9</span><span class="mord">4</span><span class="mord">6</span><span class="mord">3</span><span class="mord">0</span><span class="mord">9</span><span class="mord">4</span><span class="mord">3</span><span class="mord">5</span><span class="mord">9</span><span class="mord">3</span></span></span></span></span></li><li>全音：两个半音的距离为一个全音</li></ol><h4 id="112-音强-声压和响度"><a class="markdownIt-Anchor" href="#112-音强-声压和响度"></a> 1.1.2 音强、声压和响度</h4><p>音强、声压响度都与声波的振幅相关，都是描述声音能量大小的一个度量，其中：</p><p>音强又称声强，是<strong>客观量</strong>，定义为单位面积的声音功率，单位为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">W</mi><mi mathvariant="normal">/</mi><msup><mi mathvariant="normal">m</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathrm{W/m^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathrm" style="margin-right:.01389em">W</span><span class="mord mathrm">/</span><span class="mord"><span class="mord mathrm">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>声压也是<strong>客观量</strong>，是指声波通过介质时，由振动产生的<strong>压强改变量</strong>，单位为帕斯卡(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">Pa</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord mathdefault">a</span></span></span></span>)</p><p>响度是<strong>主观量</strong>，指的是人类感觉声音大小的知觉量，响度不仅和音强有关，也和<strong>频率</strong>有关</p><h5 id="1121-音强和声压"><a class="markdownIt-Anchor" href="#1121-音强和声压"></a> 1.1.2.1 音强和声压</h5><p>音强和声压具有换算关系，设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">I</span></span></span></span> 为声强，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span>为声压，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span></span></span></span>为声音在介质中的速度，则：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo>=</mo><mi>p</mi><mo>⋅</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">I = p \cdot v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.63889em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span></span></span></span></span></p><blockquote><p>上面的计算式可以通过单位制运算进行验证：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mi>a</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>N</mi><mi mathvariant="normal">/</mi><msup><mi>m</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>v</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>m</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><msub><mi>I</mi><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>N</mi><msup><mi>m</mi><mn>2</mn></msup></mfrac><mo>⋅</mo><mfrac><mi>m</mi><mi>s</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>N</mi><mrow><mi>m</mi><mi>s</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∵</mo><mi>I</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>W</mi><mi mathvariant="normal">/</mi><msup><mi>m</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>P</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo>⋅</mo><mi>v</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>N</mi><mo>⋅</mo><mi>m</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>W</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><msub><mi>I</mi><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>W</mi><msup><mi>m</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mi>N</mi><mo>⋅</mo><mi>m</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><msup><mi>m</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>N</mi><mrow><mi>m</mi><mi>s</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∵</mo><msub><mi>I</mi><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>I</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><mi>C</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} Pa &amp;= N / m^2 \\ v &amp;= m/s \\ \therefore I_1 &amp;= \frac{N}{m^2} \cdot \frac{m}{s} \\ &amp;= \frac{N}{ms} \\ \because I &amp;= W/m^2 \\ P &amp;= F \cdot v \\ &amp;= N \cdot m/s \\ &amp;= W \\ \therefore I_2 &amp;= \frac{W}{m^2} \\ &amp;= \frac{N \cdot m/s}{m^2} \\ &amp;= \frac{N}{ms} \\ \because I_1 &amp;= I_2 \\ \therefore C&amp;orrect \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:23.846536em;vertical-align:-11.673268000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:12.173268em"><span style="top:-14.73616em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord mathdefault">a</span></span></span><span style="top:-13.23616em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span></span></span><span style="top:-11.21583em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-8.869499999999999em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:-7.019391999999998em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.07847em">I</span></span></span><span style="top:-5.519391999999998em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span></span></span><span style="top:-4.019391999999998em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:-2.519391999999999em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:-.4990619999999989em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:1.913938em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:4.260268000000003em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:6.086268000000002em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:7.586268000000002em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:11.673268000000002em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:12.173268em"><span style="top:-14.73616em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-13.23616em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span><span style="top:-11.21583em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.740108em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-8.869499999999999em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-7.019391999999998em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">W</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-5.519391999999998em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span></span></span><span style="top:-4.019391999999998em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span><span style="top:-2.519391999999999em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">W</span></span></span><span style="top:-.4990619999999989em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.740108em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:1.913938em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.740108em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:4.260268000000003em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:6.086268000000002em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:7.586268000000002em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:11.673268000000002em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><h5 id="1122-声压和声压级"><a class="markdownIt-Anchor" href="#1122-声压和声压级"></a> 1.1.2.2 声压和声压级</h5><p>声压的变化范围很广，因此，通常使用声压级(SPL)对声音的大小进行描述，声压级是以对数尺度衡量有效声压对一个基准值的大小，单位为分贝(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow><annotation encoding="application/x-tex">\mathrm{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">B</span></span></span></span></span>)</p><p>声压级基准值：人类对于 <strong>1kHz</strong> 的听阈，即产生听觉的最小压强，为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn><mi>μ</mi><mrow><mi mathvariant="normal">P</mi><mi mathvariant="normal">a</mi></mrow></mrow><annotation encoding="application/x-tex">20\mu\mathrm{Pa}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord">2</span><span class="mord">0</span><span class="mord mathdefault">μ</span><span class="mord"><span class="mord mathrm">P</span><span class="mord mathrm">a</span></span></span></span></span>，也被定义为 0 分贝</p><p>声压级换算公式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>p</mi></msub><mo>=</mo><mn>20</mn><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mrow><mo fence="true">(</mo><mfrac><msub><mi>p</mi><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">s</mi></mrow></msub><msub><mi>p</mi><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">f</mi></mrow></msub></mfrac><mo fence="true">)</mo></mrow><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow></mrow><annotation encoding="application/x-tex">L_{p}=20\log _{10}\left({\frac {p_{\mathrm {rms} }}{p_{\mathrm {ref} }}}\right){\mathrm{dB}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.969438em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-.95003em"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.20696799999999996em"><span style="top:-2.4558600000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner"><span class="mopen delimcenter" style="top:0"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">r</span><span class="mord mathrm mtight">e</span><span class="mord mathrm mtight" style="margin-right:.07778em">f</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">r</span><span class="mord mathrm mtight">m</span><span class="mord mathrm mtight">s</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.8804400000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose delimcenter" style="top:0"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">B</span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">f</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_\mathrm{ref}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">r</span><span class="mord mathrm mtight">e</span><span class="mord mathrm mtight" style="margin-right:.07778em">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 即为声压级基准值</p><blockquote><p>分贝，是两个量度相同的单位的<strong>比值的度量</strong>，任何的两个相同单位的量的比值都可以是分贝，因此分贝的使用范围非常广泛，除了在这里的声学领域使用到以外，在通信领域，例如 WIFI 的信号强度也是使用分贝进行度量</p></blockquote><h5 id="1123-响度-声压值和频率的关系"><a class="markdownIt-Anchor" href="#1123-响度-声压值和频率的关系"></a> 1.1.2.3 响度、声压值和频率的关系</h5><p>响度不仅和声压级相关，同时和频率也有关系，这三者的关系可以制作出一张著名的<strong>等响曲线</strong></p><p><img alt="等响曲线" data-src="../../images/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AD%89%E5%93%8D%E6%9B%B2%E7%BA%BF.png"></p><p>其中，里面的 1kHz 标准音声级即为响度的单位</p><p>从图中我们可以看到，曲线在 <strong>3kHz-4kHz</strong> 范围内<strong>最凹</strong>，说明在这个频率范围，达到同样响度所需要的声压级比其他范围要少，即人对 3kHz-4kHz 的声音<strong>更敏感</strong></p><h5 id="1123-响度的单位"><a class="markdownIt-Anchor" href="#1123-响度的单位"></a> 1.1.2.3 响度的单位</h5><p>响度的单位有两个，分别为<strong>方(Phon)</strong> 和 <strong>宋(Sone)</strong></p><p>方是响度的客观度量，定义为 1kHz 下的声压级，称为响度级，如 1kHz 下的 60dB 的声音响度级为 60 方；<br>方不具备数量之间的关系，两个方的数量的不同仅代表两个声音的大小不同，不能对这两个声音进行量化，如 60 方的声音比 40 方的声音大，但是不能说 60 方的响度大小为 40 方的 1.5 倍，双方不具备这种关系</p><p>宋是响度的主观度量，<strong>表示人耳在自然状态下，根据声压级的变化所表现出的对于响度听感的变化</strong>；<br>宋具有数量关系，2 宋的声音一定比 1 宋的声音大两倍</p><p>宋和方之间的关系是非线性的</p><h4 id="113-波形-基波和谐波"><a class="markdownIt-Anchor" href="#113-波形-基波和谐波"></a> 1.1.3 波形、基波和谐波</h4><p>声波总是可以分解为不同频率、不同振幅的正弦波的叠加，这种分解过程就称为傅里叶变换；</p><p>基波：一个标准的正弦波，称为基波<br>谐波：比基波的频率高<strong>整数倍</strong>的波被称作谐波</p><p>如果一个复合音由基波和它的谐波相叠加构成，那么这个过程就叫做<strong>谐波叠加</strong></p><h3 id="12-声速-反射与透射"><a class="markdownIt-Anchor" href="#12-声速-反射与透射"></a> 1.2 声速、反射与透射</h3><p>传播声音的介质有很多，如空气、水等，声音在不同介质的传播速度也不同：</p><ol><li>空气：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>340</mn><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">s</mi></mrow></mrow><annotation encoding="application/x-tex">340\mathrm{m/s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">3</span><span class="mord">4</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">/</span><span class="mord mathrm">s</span></span></span></span></span></li><li>蒸馏水：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1497</mn><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">s</mi></mrow></mrow><annotation encoding="application/x-tex">1497\mathrm{m/s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">4</span><span class="mord">9</span><span class="mord">7</span><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">/</span><span class="mord mathrm">s</span></span></span></span></span></li><li>铁棒：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5200</mn><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">s</mi></mrow></mrow><annotation encoding="application/x-tex">5200\mathrm{m/s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">5</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">/</span><span class="mord mathrm">s</span></span></span></span></span></li></ol><p>声音是纵波，遇到阻碍就会发生反射与透射；</p><p>反射是声波在遇到阻碍之后，改变传播方向的一种特性<br>透射则是声波在遇到阻碍之后，穿越阻碍的一种特性</p><p>根据这两个声波的传播特点，人们开发出了两个对应的产品：吸音棉和隔音棉</p><p>吸音主要是为了减少声音反射引起的嘈杂感，吸音棉可以衰减声音的反射能量，从而达到原有声音的保真效果，在录音棚常用；</p><p>隔音主要是为了减少声音的穿透，保证主体空间的相对安静，隔音棉可以减少声音的透射能量，从而保证主体空间的安静，在 KTV 常用。</p><h3 id="13-回音"><a class="markdownIt-Anchor" href="#13-回音"></a> 1.3 回音</h3><p>回音或回声是声音遇到阻碍后反射，再次被人听到的一种现象，通常在高山和空旷山地常常出现</p><p>人耳无时无刻不在接收回音，但是如果人耳接收到两种声音的时间差小于 <strong>80 毫秒</strong>，那么人耳就无法分辨出回声</p><h3 id="14-共鸣"><a class="markdownIt-Anchor" href="#14-共鸣"></a> 1.4 共鸣</h3><p>共鸣是一个物品发声导致另一个物品发声的现象，说明声波的传播可以导致另一个物品发生振动，本质上是能量的传播过程；</p><p>吉他等乐器常常利用共鸣现象达到较好的音频效果</p><h3 id="15-与人相关的一些值"><a class="markdownIt-Anchor" href="#15-与人相关的一些值"></a> 1.5 与人相关的一些值</h3><ol><li>人耳的能听到的最小声压级为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow><mo>=</mo><mn>20</mn><mi>μ</mi><mrow><mi mathvariant="normal">P</mi><mi mathvariant="normal">a</mi></mrow></mrow><annotation encoding="application/x-tex">0\mathrm{dB} = 20\mu\mathrm{Pa}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">0</span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">B</span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord">2</span><span class="mord">0</span><span class="mord mathdefault">μ</span><span class="mord"><span class="mord mathrm">P</span><span class="mord mathrm">a</span></span></span></span></span></li><li>人类的听觉频率范围：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn><mrow><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow><mo>∼</mo><mn>20</mn><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow></mrow><annotation encoding="application/x-tex">20\mathrm{Hz} \sim 20\mathrm{kHz}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">2</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">2</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">k</span><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span></span></span></span></li><li>人类的敏感频率：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow><mo>∼</mo><mn>4</mn><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow></mrow><annotation encoding="application/x-tex">3\mathrm{kHz} \sim 4\mathrm{kHz}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">3</span><span class="mord"><span class="mord mathrm">k</span><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">4</span><span class="mord"><span class="mord mathrm">k</span><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span></span></span></span></li><li>宽频的音乐，较佳的声压级为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>80</mn><mo>∼</mo><mn>90</mn><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow></mrow><annotation encoding="application/x-tex">80 \sim 90 \mathrm{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">8</span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">9</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">B</span></span></span></span></span></li><li>损伤人耳的声压级：高于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>90</mn><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow></mrow><annotation encoding="application/x-tex">90\mathrm{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">9</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">B</span></span></span></span></span></li><li>人耳极限：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>105</mn><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">B</mi></mrow></mrow><annotation encoding="application/x-tex">105\mathrm{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">B</span></span></span></span></span></li><li>人耳痛阈：120 方</li><li>人耳回音的分辨最小时差：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>80</mn><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">s</mi></mrow></mrow><annotation encoding="application/x-tex">80\mathrm{ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">8</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">s</span></span></span></span></span></li></ol><h2 id="2-数字音频"><a class="markdownIt-Anchor" href="#2-数字音频"></a> 2. 数字音频</h2><p>声音经过麦克风采集之后变成模拟信号，要将模拟进行数字化，转换为现今时代的数字音频，主要需要经历如下的三个步骤：</p><ol><li>采样</li><li>量化</li><li>编码</li></ol><h3 id="21-采样"><a class="markdownIt-Anchor" href="#21-采样"></a> 2.1 采样</h3><p>采样就是在<strong>时间轴</strong>上对信号进行离散数字化，根据奈奎斯特定理，应按照比声音的最高频率高两倍以上的频率对声音进行采样即可保持声音的原有质量。</p><p>由于人耳的听觉频率范围为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn><mrow><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow><mo>∼</mo><mn>20</mn><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow></mrow><annotation encoding="application/x-tex">20\mathrm{Hz} \sim 20\mathrm{kHz}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">2</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">2</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">k</span><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span></span></span></span>，所以一般采用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>44.1</mn><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow></mrow><annotation encoding="application/x-tex">44.1\mathrm{kHz}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">4</span><span class="mord">4</span><span class="mord">.</span><span class="mord">1</span><span class="mord"><span class="mord mathrm">k</span><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span></span></span></span> 作为采样频率可以保持数字化后的声音质量。</p><p><img alt="声音的采样" data-src="http://static.oschina.net/uploads/img/201306/03145436_bTNr.gif"></p><h3 id="22-量化"><a class="markdownIt-Anchor" href="#22-量化"></a> 2.2 量化</h3><p>具体到每个采样值如何表示就是量化，可以使用 8bit、16bit、32bit 等表示一个采样值，使用的 bit 越多，所能表达的采样值就越精确。</p><p>比如目前最常用的 16bit 量化格式，就是在将振幅分成了 66535 层，这样量化的声音显然会比 8 bit 的更为精确。</p><h3 id="23-编码"><a class="markdownIt-Anchor" href="#23-编码"></a> 2.3 编码</h3><p>将声音信号进行数字化之后，就需要对这些采样进行存储，而编码就是这些存储的格式，有顺序存储和压缩存储等等。</p><p>其中，通常所说的音频裸数据为 PCM 格式，而最常用的压缩格式为 MP3，当然还有一些其他的格式如 WAV、OGG、FLAC 等。</p><h3 id="24-pcm-数据的描述参数"><a class="markdownIt-Anchor" href="#24-pcm-数据的描述参数"></a> 2.4 PCM 数据的描述参数</h3><p>对于直接录制得到的音频数据，PCM，有一些关于它的描述参数：</p><ul><li>量化格式（位深度）</li><li>采样频率</li><li>声道数</li><li>比特率</li></ul><p>量化格式，也叫位深度，指的是一个采样采用多少 bit 进行表示，目前普遍使用的是 16bit。</p><p>采样频率即一秒钟采样的次数，单位为赫兹(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow><annotation encoding="application/x-tex">\mathrm{Hz}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord"><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span></span></span></span>)</p><p>声道数，为录制的声道的数量，通常为双声道立体声</p><p>比特率，为音频数据一秒钟的数据量大小，单位为 bit/s</p><p>其中比特率的计算公式如下：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>i</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mtext> </mtext><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>×</mo><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mtext> </mtext><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mo>×</mo><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">bitrate = sample\ rate \times sample \ format \times channels</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">s</span></span></span></span></span></p><p>例如，一个采样率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>44100</mn><mrow><mi mathvariant="normal">H</mi><mi mathvariant="normal">z</mi></mrow></mrow><annotation encoding="application/x-tex">44100\mathrm{Hz}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">4</span><span class="mord">4</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathrm">H</span><span class="mord mathrm">z</span></span></span></span></span>，量化格式为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>16</mn><mrow><mi mathvariant="normal">b</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">t</mi></mrow></mrow><annotation encoding="application/x-tex">16 \mathrm{bit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">6</span><span class="mord"><span class="mord mathrm">b</span><span class="mord mathrm">i</span><span class="mord mathrm">t</span></span></span></span></span>，声道数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span></span></span></span> 的 CD 的比特率为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>44100</mn><mo>×</mo><mn>16</mn><mo>×</mo><mn>2</mn><mo>=</mo><mn>1378.125</mn><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">p</mi><mi mathvariant="normal">s</mi></mrow></mrow><annotation encoding="application/x-tex">44100 \times 16 \times 2 = 1378.125 \mathrm{kbps}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">4</span><span class="mord">4</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">7</span><span class="mord">8</span><span class="mord">.</span><span class="mord">1</span><span class="mord">2</span><span class="mord">5</span><span class="mord"><span class="mord mathrm">k</span><span class="mord mathrm">b</span><span class="mord mathrm">p</span><span class="mord mathrm">s</span></span></span></span></span></span></p><p>那么一分钟内这类 CD 音质的数据大小为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1378.125</mn><mo>×</mo><mn>60</mn><mo>÷</mo><mn>8</mn><mo>÷</mo><mn>1024</mn><mo>=</mo><mn>10.09</mn><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">B</mi></mrow></mrow><annotation encoding="application/x-tex">1378.125 \times 60 \div 8 \div 1024 = 10.09\mathrm{MB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">7</span><span class="mord">8</span><span class="mord">.</span><span class="mord">1</span><span class="mord">2</span><span class="mord">5</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">8</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">9</span><span class="mord"><span class="mord mathrm">M</span><span class="mord mathrm">B</span></span></span></span></span></span></p><p>如果量化格式更为精确，如 32bit 表示一个采样，或者采样频率更为密集，则所占的存储空间就越大。</p><h3 id="25-音频编码"><a class="markdownIt-Anchor" href="#25-音频编码"></a> 2.5 音频编码</h3><p>这里来介绍几种常见的音频编码格式</p><ol><li>WAV<blockquote><p>有多种实现方式，但都不对 PCM 进行压缩，其中一种是在 PCM 数据之前加上 44 字节的文件头信息</p></blockquote></li><li>MP3<blockquote><p>具有不错的压缩比，应用最为普遍的有损压缩声音编码格式，适用于 128 kbps 以上的音频</p></blockquote></li><li>AAC<blockquote><p>有损压缩格式，在 128 kbps 以下码率表现优异，通常用于视频中音频轨的编码</p></blockquote></li><li>OGG<blockquote><p>可以使用更小的码率实现比 MP3 更好的音质，但兼容性不够好，流媒体特性不支持，通常用于语音通信的音频消息场景</p></blockquote></li><li>FLAC<blockquote><p>无损压缩形式，FLAC 可实时播放已经压缩了的音频数据，同时具有抗损伤能力</p></blockquote></li></ol><h2 id="3-图像的物理概念"><a class="markdownIt-Anchor" href="#3-图像的物理概念"></a> 3. 图像的物理概念</h2><p>图像，实际上就是光线进入人眼后，在视网膜中形成的物体概念，根据棱镜实验，光线都是由不同的三原色光——红、绿、蓝复合而成的。</p><p>屏幕上的图像，实际上是由很多个带颜色的点构成的，每个点称为一个 <strong>像素</strong>，一个像素由三个 <strong>子像素</strong> 组成，分别为红、绿、蓝，通常我们将这三个子像素分别称为 <strong>通道</strong>；<br>而一个屏幕一共有多少个像素点，我们称为这个屏幕的 <strong>分辨率</strong>，通常由一个乘式表示，例如：1280 * 720 则表示，这个屏幕在水平方向上有 1280 个像素点，在竖直方向上有 720 个像素点。</p><p>现在的屏幕显像原理稍有不同，但是都是由屏幕背后的光源照亮前方的像素点实现的显像，因此通常屏幕是 <strong>自发光</strong> 的，而不是通过光的反射让人看到图像。</p><h2 id="4-图像的数值表示"><a class="markdownIt-Anchor" href="#4-图像的数值表示"></a> 4. 图像的数值表示</h2><h3 id="41-rgb-表示"><a class="markdownIt-Anchor" href="#41-rgb-表示"></a> 4.1 RGB 表示</h3><p>根据图像的物理原理，我们可以知道任何一种光都可以由红（R） 、绿（G）、蓝（B）表示，因此我们就有了第一种图像表示方法——RGB 表示法。</p><p>但对于每个通道如何表示，则有不同的格式：</p><ul><li>浮点表示<blockquote><p>取值范围为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.0</mn><mo>∼</mo><mn>1.0</mn></mrow><annotation encoding="application/x-tex">0.0\sim1.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span></span></span></span>，OpenGL ES 中就采用这种表示形式</p></blockquote></li><li>整数表示<blockquote><p>取值范围为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mn>255</mn></mrow><annotation encoding="application/x-tex">0 \sim 255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span></span></span></span>，8 bit 表示一个子像素，32 bit 表示一个像素，例如 Android 中的 <code>ARGB_8888</code> 表示格式即为 RGB 通道加 Alpha 通道（表示透明度），每个通道采用 8 bit 表示，一共 32 bit 表示一个像素</p></blockquote></li></ul><p>对于一副 1280 * 720 的图像，如果采用 <code>ARGB_8888</code> 表示法进行表示，那么这张图片的大小为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1280</mn><mo>×</mo><mn>720</mn><mo>×</mo><mn>4</mn><mo>=</mo><mn>3.516</mn><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">B</mi></mrow></mrow><annotation encoding="application/x-tex">1280 \times 720 \times 4 = 3.516\mathrm{MB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mord">0</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">7</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">4</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">5</span><span class="mord">1</span><span class="mord">6</span><span class="mord"><span class="mord mathrm">M</span><span class="mord mathrm">B</span></span></span></span></span></span></p><p>所以图像的裸数据都是很大的，通常要进行编码之后才能在网络上传输。</p><h3 id="42-yuv-表示法"><a class="markdownIt-Anchor" href="#42-yuv-表示法"></a> 4.2 YUV 表示法</h3><p>虽然我们知道色光由 RGB 组成，但是在彩色电视机发明之前，人们通常使用的都是老式的黑白电视机，为了保持和老式黑白电视机的兼容性，我们有另一种图像的表示方式，即 YUV 表示法。</p><p>其中，Y 表示明亮度，也称作灰阶值，UV 则表示图像的色度，包括色调和饱和度，分别用 Cr 和 Cb 表示，所以 YUV 表示法也被称作 YCrCb 表示法；<br>其中 Cr 反应了 RGB 输入信号的红色部分与 RGB 亮度之间的差异，Cb 反应的则是 RGB 蓝色部分和 RGB 亮度值之间的关系。</p><p>YUV 色彩空间相对于 RGB 空间而言，优势在于 Y 通道和 UV 通道之间是可以分离的，如果只传输 Y 通道，那么这样的图像就是黑白灰度图像，因此也解决了彩色电视机和黑白电视机的兼容问题。</p><p>YUV 最常用的表示法是 Y、U、V 都采用一个字节(8bit) 来表示，取值范围为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mn>255</mn></mrow><annotation encoding="application/x-tex">0\sim255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span></span></span></span>；<br>但是在广播电视系统中，不传输很低或者很高的值，因此无论是 Rec.601 还是 BT.709 标准中，Y 的取值范围都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>16</mn><mo>∼</mo><mn>255</mn></mrow><annotation encoding="application/x-tex">16\sim255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span></span></span></span>，UV 的取值范围都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>16</mn><mo>∼</mo><mn>240</mn></mrow><annotation encoding="application/x-tex">16\sim 240</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span><span class="mord">4</span><span class="mord">0</span></span></span></span>。</p><p>YUV 在采样中也有不同的采样格式，有 YUV444、YUV422、YUV420 这三种大类，三者的区别如下图表示：</p><p><img alt="yuv444、yuv422、yuv420 的区别" data-src="../../images/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/yuv444%E3%80%81yuv422%E3%80%81yuv420-%E7%9A%84%E5%8C%BA%E5%88%AB.png"></p><p>YUV444 指的是一个 Y 通道拥有独立的 UV 通道<br>YUV422 指的是两个 Y 通道共用一个 UV 通道<br>YUV420 指的是四个 Y 通道共用一个 UV 通道</p><p>为什么可以这样采样，主要是因为人眼对于图像的亮度更为敏感，而对图像的色度信息并不那么敏感，因此我们就可以减少图像的 UV 信息达到相同的显示效果。</p><p>其中，最常用的采样格式为 YUV 420</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>翻译文章——在 Android Studio 3.3 中迁移 Gradle 到 Kotlin DSL</title>
      <link href="//Android/%E7%BF%BB%E8%AF%91%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E5%9C%A8-android-studio-3-3-%E4%B8%AD%E8%BF%81%E7%A7%BB-gradle-%E5%88%B0-kotlin-dsl/"/>
      <url>//Android/%E7%BF%BB%E8%AF%91%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E5%9C%A8-android-studio-3-3-%E4%B8%AD%E8%BF%81%E7%A7%BB-gradle-%E5%88%B0-kotlin-dsl/</url>
      
        <content type="html"><![CDATA[<p>这是一篇翻译文章，目前可以作为迁移 Gradle 到 Kotlin DSL 的备忘录，译者在 Android Studio 3.5 RC-1 上也迁移成功。</p><p>原文：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BzdG9sdG1hbmphbi9taWdyYXRpbmctZ3JhZGxlLXRvLWtvdGxpbi1kc2wtaW4tYW5kcm9pZC1zdHVkaW8tMy0zLTE4NjUxZjM3MjI3Zg==" title="https://medium.com/@stoltmanjan/migrating-gradle-to-kotlin-dsl-in-android-studio-3-3-18651f37227f">Migrating Gradle to Kotlin DSL in Android Studio 3.3<i class="fa fa-external-link"></i></span></p><a id="more"></a><blockquote><p>注意：在本文中我认为你应该了解了<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmdyYWRsZS5vcmcva290bGluLW1lZXRzLWdyYWRsZQ==" title="https://blog.gradle.org/kotlin-meets-gradle">Kotlin 可以应用于 Gradle 中<i class="fa fa-external-link"></i></span>，同时你想寻找一个快速备忘录或者一个直接复制粘贴就能用的解决方案。如果你想寻找一个完整的文档，请到<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmcvY3VycmVudC91c2VyZ3VpZGUva290bGluX2RzbC5odG1s" title="https://docs.gradle.org/current/userguide/kotlin_dsl.html">这里<i class="fa fa-external-link"></i></span>查看。</p></blockquote><h2 id="第一步gradle-wrapper-版本"><a class="markdownIt-Anchor" href="#第一步gradle-wrapper-版本"></a> 第一步：Gradle Wrapper 版本</h2><p>迁移 Gradle 到 Kotlin DSL 推荐使用 5.0 以上的 Gradle 版本，但不巧的是，在 Android 工程中，它也同时强烈建议当你没有使用 Android Gradle Plugin 3.4 时，不要使用 Gradle 5.0。在这种情况下，请确认你使用了目前支持的最新 Gradle 版本（本文撰写时该版本为 4.10.1）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//gradle.properties</span></span><br><span class="line"><span class="attr">distributionBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">distributionPath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"><span class="attr">zipStoreBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">zipStorePath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-4.10.1-all.zip</span></span><br></pre></td></tr></table></figure><h2 id="第二步更改所有的单引号为双引号"><a class="markdownIt-Anchor" href="#第二步更改所有的单引号为双引号"></a> 第二步：更改所有的单引号为双引号</h2><p>使用查找和替换(在 Android Studio 中使用 <kbd>ctrl + R</kbd>)工具将 Gradle 文件中所有的单引号(<code>'</code>)改为双引号(<code>&quot;</code>)</p><p>对于一个新建的工程，你要修改以下的三个文件：</p><ul><li>settings.gradle</li><li>build.gradle (根目录)</li><li>build.gradle (模块目录)</li></ul><h2 id="第三步将所有的隐式赋值和函数调用修改为显式的"><a class="markdownIt-Anchor" href="#第三步将所有的隐式赋值和函数调用修改为显式的"></a> 第三步：将所有的隐式赋值和函数调用修改为显式的</h2><p>然后，所有的 Gradle 式的赋值和函数调用都要转换为 Koltin 式的。像下面这个例子这样将它们进行转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Groovy assignment</span><br><span class="line">applicationId &quot;com.yggdralisk.githubbrowser&quot;</span><br><span class="line">// Kotlin assignment</span><br><span class="line">applicationId = &quot;com.yggdralisk.githubbrowser&quot;</span><br><span class="line">// Groovy function call</span><br><span class="line">implementation &quot;androidx.constraintlayout:constraintlayout:2.0.0-alpha3&quot;</span><br><span class="line">// Kotlin function call</span><br><span class="line">implementation(&quot;androidx.constraintlayout:constraintlayout:2.0.0-alpha3&quot;)</span><br></pre></td></tr></table></figure><p>如果你不知道在这一步该如何修改，甚至不知道该修改什么，你可以通过文章底部的示例文件链接查看一下实例文件。</p><h2 id="第四步迁移-settingsgradle-文件"><a class="markdownIt-Anchor" href="#第四步迁移-settingsgradle-文件"></a> 第四步：迁移 settings.gradle 文件</h2><blockquote><p>注意：在开始这一步之前，你应该要关掉 Gradle 的 auto-sync 功能，否则它会让你十分抓狂。当你完成了整个工程的迁移工作之后，可以将其再次打开。</p></blockquote><blockquote><p>译者注：其实 Gradle 官方并不推荐开启 auto-sync 功能，官方推荐的是开启 auto-load，但是最好是开发者自己去 sync<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><p>使用重命名文件(<kbd>shift + F6</kbd>)功能将 settings.gradle 文件重命名为 settings.gradle.kts。</p><p>对于一个新建的工程，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//settings.gradle.kts</span></span><br><span class="line">include(<span class="string">":app"</span>)</span><br></pre></td></tr></table></figure><h2 id="第五步迁移根目录-buildgradle-文件"><a class="markdownIt-Anchor" href="#第五步迁移根目录-buildgradle-文件"></a> 第五步：迁移根目录 build.gradle 文件</h2><p>对根目录的 build.gradle 文件进行类似上一步的操作，将它的文件名修改为 build.gradle.kts</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build.gradle.kts (Project)</span></span><br><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    <span class="keyword">val</span> kotlinVersion = <span class="string">"1.3.11"</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"com.android.tools.build:gradle:3.3.0"</span>)</span><br><span class="line">        classpath(kotlin(<span class="string">"gradle-plugin"</span>, kotlinVersion))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks &#123;</span><br><span class="line">    <span class="keyword">val</span> clean <span class="keyword">by</span> registering(Delete::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        delete(buildDir)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六步迁移模块的-settingsgradle-文件"><a class="markdownIt-Anchor" href="#第六步迁移模块的-settingsgradle-文件"></a> 第六步：迁移模块的 settings.gradle 文件</h2><p>对于模块的 settings.gradle 文件，我们也执行同样的操作，将它的文件名修改为 build.gradle.kts</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jetbrains.kotlin.config.KotlinCompilerVersion</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">"com.android.application"</span>)</span><br><span class="line">    kotlin(<span class="string">"android"</span>)</span><br><span class="line">    kotlin(<span class="string">"android.extensions"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion(<span class="number">28</span>)</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId = <span class="string">"com.yggdralisk.githubbrowser"</span></span><br><span class="line">        minSdkVersion(<span class="number">21</span>)</span><br><span class="line">        targetSdkVersion(<span class="number">28</span>)</span><br><span class="line">        versionCode = <span class="number">1</span></span><br><span class="line">        versionName = <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner = <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        getByName(<span class="string">"release"</span>) &#123;</span><br><span class="line">            isMinifyEnabled = <span class="literal">false</span></span><br><span class="line">            proguardFiles(getDefaultProguardFile(<span class="string">"proguard-android.txt"</span>), <span class="string">"proguard-rules.pro"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(fileTree(mapOf(<span class="string">"dir"</span> to <span class="string">"libs"</span>, <span class="string">"include"</span> to listOf(<span class="string">"*.jar"</span>))))</span><br><span class="line">    implementation(kotlin(<span class="string">"stdlib-jdk7"</span>, KotlinCompilerVersion.VERSION))</span><br><span class="line">    implementation(<span class="string">"com.android.support:appcompat-v7:28.0.0"</span>)</span><br><span class="line">    testImplementation(<span class="string">"junit:junit:4.12"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"com.android.support.test:runner:1.0.2"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"com.android.support.test.espresso:espresso-core:3.0.2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven(<span class="string">"http://repository.jetbrains.com/all"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例文件链接"><a class="markdownIt-Anchor" href="#示例文件链接"></a> 示例文件链接</h2><p>你可以在我的 GitHub 仓库中找到能用的 Gradle 示例文件，你也可以在任何时间随意地分叉和复制这些文件。</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phblN0b2x0bWFuL0dpdGh1YkJyb3dzZXIvYmxvYi9tYXN0ZXIvc2V0dGluZ3MuZ3JhZGxlLmt0cw==" title="https://github.com/JanStoltman/GithubBrowser/blob/master/settings.gradle.kts">settings.gradle.kts<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phblN0b2x0bWFuL0dpdGh1YkJyb3dzZXIvYmxvYi9tYXN0ZXIvYnVpbGQuZ3JhZGxlLmt0cw==" title="https://github.com/JanStoltman/GithubBrowser/blob/master/build.gradle.kts">根目录 build.gradle.kts<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phblN0b2x0bWFuL0dpdGh1YkJyb3dzZXIvYmxvYi9tYXN0ZXIvYXBwL2J1aWxkLmdyYWRsZS5rdHM=" title="https://github.com/JanStoltman/GithubBrowser/blob/master/app/build.gradle.kts">模块 build.gradle.kts<i class="fa fa-external-link"></i></span></li></ul><p>如果你在迁移中遇到了任何问题，记住要查看 <strong>build/sync logs</strong> 里面的错误提示，而不是看 Android Studio 弹出的错误提示，因为 Android Studio 对于 Gradle Kotlin DSL 的支持还远远称不上完美。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmcvY3VycmVudC91c2VyZ3VpZGUva290bGluX2RzbC5odG1sI2F1dG9tYXRpY19idWlsZF9pbXBvcnRfdnNfYXV0b21hdGljX3JlbG9hZGluZ19vZl9zY3JpcHRfZGVwZW5kZW5jaWVz" title="https://docs.gradle.org/current/userguide/kotlin_dsl.html#automatic_build_import_vs_automatic_reloading_of_script_dependencies">https://docs.gradle.org/current/userguide/kotlin_dsl.html#automatic_build_import_vs_automatic_reloading_of_script_dependencies<i class="fa fa-external-link"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
            <tag> Kotlin </tag>
            
            <tag> Translate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 高德地图轨迹回放</title>
      <link href="//android-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/"/>
      <url>//android-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<p>最近公司要求实现一个轨迹回放功能，想着 JS 都有 demo 的功能，Android 实现起来不还是小菜一碟？</p><p>结果显然是我太拿衣服了</p><a id="more"></a><h2 id="0-太长不看"><a class="markdownIt-Anchor" href="#0-太长不看"></a> 0. 太长不看</h2><p>全篇都采用高德 API 实现，基于 <span class="exturl" data-url="aHR0cHM6Ly9iaW50cmF5LmNvbS9iaW50cmF5L2pjZW50ZXIvY29tLmFtYXAuYXBpJTNBM2RtYXAvNi45LjI=" title="https://bintray.com/bintray/jcenter/com.amap.api%3A3dmap/6.9.2"><code>3dmap 6.9.2</code><i class="fa fa-external-link"></i></span> 包</p><p>使用 <code>MovingPointOverlay</code> 实现点的平滑移动</p><p>使用 <code>AMap.setCustomRenderer</code> 获取每帧回调，绘制走过的线路</p><h2 id="1-需求分析"><a class="markdownIt-Anchor" href="#1-需求分析"></a> 1. 需求分析</h2><p>轨迹回放的功能在高德的 <span class="exturl" data-url="aHR0cHM6Ly9sYnMuYW1hcC5jb20vYXBpL2phdmFzY3JpcHQtYXBpL2V4YW1wbGUvbWFya2VyL3JlcGxheWluZy1oaXN0b3JpY2FsLXJ1bm5pbmctZGF0YS8/c3VnX2luZGV4PTE=" title="https://lbs.amap.com/api/javascript-api/example/marker/replaying-historical-running-data/?sug_index=1">JS Demo<i class="fa fa-external-link"></i></span> 上有，具体来说就是点按照既定路线去移动，同时绘制其走过的路线。</p><p>那么我们可以将功能拆解为移动点和绘制线路</p><p>本来我想着这种常见的功能在网上随便搜搜就能找到的，然而显然是我太 Naive 了。</p><p>搜到的唯二相关的内容，其中一个排版很差，而且估计是公司内部代码，没有给出 demo，第二个则是硬怼一个自定义 View，但是地图肯定是要移动放大之类的，自定义 View 也需要做手势控制，实现难度相对较大。</p><p>所以最好还是在高德内部框架上实现这个需求。</p><h2 id="2-api-调研"><a class="markdownIt-Anchor" href="#2-api-调研"></a> 2. API 调研</h2><p>经过一番查找之后，我找到了 <code>SmoothMoveMarker</code> 可以实现点的平滑移动功能，然而：</p><p><img alt="SmoothMoveMarker Deprecated" data-src="../images/android-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/smoothmovemarker-deprecated.png"></p><p>这里不得不吐槽一下高德的混淆策略，它不仅混淆了代码，同时还把文档混淆了，明明各部分文档都是公开的，将其保留在源代码里面也不会增大多少空间，然而这样全部删掉，导致我不得不切一个网页去看它的 API doc，开发效率急剧下降</p><p>在查看了高德地图的 API doc 之后，发现这个类是被 <code>MovingPointOverlay</code> 替代了，也就是说我们需要采用 <code>MovingPointOverlay</code> 实现点的平滑移动</p><h2 id="3-获取点位置回调"><a class="markdownIt-Anchor" href="#3-获取点位置回调"></a> 3. 获取点位置回调</h2><p>在 <code>MovingPointOverlay</code> 的 <a href>API doc</a> 中，有一个方法叫 <code>setMovingListener</code>，当时的我想当然的认为这个就是点移动时的回调设置方法，因此把画线的逻辑放到了里面去。</p><p>原先我将动画的总时间设置为 10 秒，此时点跑得比较快，乍一看没什么问题；<br>但是当我将动画的时间拉长，点跑得很慢的时候，问题就出现了—— <code>setMovingListener</code> <strong>并不是每帧回调！</strong></p><p>也就是说，只有当 Marker 跑到下一个路径点的时候，才能绘制上经过的路线！</p><p>这显然会导致线路绘制不平滑，达不到需求的要求。</p><p>那怎么办呢？这时候我就进入了一段瞎糊弄的时间，尝试着通过自行实现动画效果来完成需求，然而无论是经纬度计算、屏幕像素计算都存在误差，不太可能在短时间能将需求实现。</p><p>正当我想着『万策尽きた！』，无聊浏览高德地图 API doc 的时候，突然发现 <code>AMap</code> 有个 <code>runOnDrawFrame()</code> 方法，是用来触发高德地图的重绘的；</p><p>既然有这个方法，那就一定有绘制的回调方法！功夫不负有心人，在往下看了几行之后，我终于发现了这个重要的方法 <code>setCustomRenderer()</code>，而且两者意外的离的很近：</p><p><img alt="runOnDrawFrame And setCustomRenderer" data-src="../images/android-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/runondrawframe-and-setcustomrenderer.png"></p><p>这个方法接受一个 <code>CustomRenderer</code> 参数，那么什么是 <code>CustomRenderer</code> 呢？</p><p><img alt="CustomRenderer" data-src="../images/android-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/customrenderer.png"></p><p>从这里看，它有一个 <code>onDrawFrame()</code>，正是绘制每一帧的回调接口，那么我们只要将画线逻辑放到里面去就可以了。</p><p>当然，我们也不能抛弃 <code>setMovingListener</code>，因为我们需要它来判断是否已经到达终点。</p><h2 id="4-实现逻辑"><a class="markdownIt-Anchor" href="#4-实现逻辑"></a> 4. 实现逻辑</h2><ol><li>使用 <code>MovingPointOverlay</code> 实现点的平滑移动</li><li>使用 <code>AMap.setCustomRenderer</code> 获取每帧回调，绘制经过的线路</li><li>使用 <code>MovingPointOverlay.setMovingListener</code> 判断是否已经到达终点，如果到达终点，则清除经过线路的点</li></ol><h2 id="5-坑点"><a class="markdownIt-Anchor" href="#5-坑点"></a> 5. 坑点</h2><p>无论是 <code>setCustomRenderer</code> 还是 <code>setMovingListener</code>，它们的回调都是在 OPEN GL 线程回调，而<strong>不是在主线程回调</strong></p><p>因此，如果需要在动画完毕之后更改 UI，就必须使用 <code>runOnUiThread</code>，否则无论你怎么在里面更改 UI，都不会有任何效果</p><h2 id="6-demo"><a class="markdownIt-Anchor" href="#6-demo"></a> 6. Demo</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL0FNYXBSZXBsYXlEZW1v" title="https://github.com/wafer-li/AMapReplayDemo">https://github.com/wafer-li/AMapReplayDemo<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 高德地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap 的 loadFactor 为什么是 0.75</title>
      <link href="//Interview/hashmap-%E7%9A%84-loadfactor-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-0-75/"/>
      <url>//Interview/hashmap-%E7%9A%84-loadfactor-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-0-75/</url>
      
        <content type="html"><![CDATA[<p>之前看各大面经的时候搜索到了这个问题，切实感觉到如果刨根问底的问，自己还真不能抵挡住这种攻势，现在闲暇时间又心血来潮地想起来这个问题，就打算好好弄懂弄透，也希望能在将来面试的时候做好准备。</p><p>本文基于<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMxNDAxODM2" title="https://stackoverflow.com/a/31401836">这个 StackOverflow 回答<i class="fa fa-external-link"></i></span>进一步推导，并给出详细解答步骤</p><a id="more"></a><h2 id="1-loadfactor-是什么"><a class="markdownIt-Anchor" href="#1-loadfactor-是什么"></a> 1. loadFactor 是什么</h2><p>loadFactor 翻译为 <strong>负载因子</strong>，是 HashMap 负载程度的一个度量，所谓负载程度即 HashMap 持有的元素数量和 HashMap 大小的比值</p><p>当 HashMap 中的元素数量大于 <code>capacity * loadFactor</code> 时，HashMap 就要扩容，并进行重新 hash</p><p>那么，我们可以得出一个重要结论，<code>loadFactor</code> 是为了让 HashMap 尽可能 <strong>不满</strong> 而存在的</p><p>众所周知，HashMap 越空越好，这样插入和查找都能尽可能接近常数级别</p><p>那么接下来的一个重要问题就是：HashMap 什么时候是空的？通过这个问题，我们就可以一步一步推导出 <code>loadFactor</code> 的值</p><h2 id="2-hashmap-什么时候不是很满"><a class="markdownIt-Anchor" href="#2-hashmap-什么时候不是很满"></a> 2. HashMap 什么时候不是很满</h2><p>我们调整 loadFactor 的根本目标在于，要让元素的插入时间缩短到最少，也就是说，<strong>元素最好不要发生碰撞</strong></p><p><strong>只要元素在插入时不发生碰撞，那么我们的 HashMap 就不算特别的满</strong></p><p>这是一个很重要的结论，通过它，我们成功地把 HashMap 满不满的问题，转换到了插入元素是否碰撞的问题</p><h2 id="3-插入元素的碰撞几率"><a class="markdownIt-Anchor" href="#3-插入元素的碰撞几率"></a> 3. 插入元素的碰撞几率</h2><p>插入元素是否碰撞，这是一个概率事件，有可能碰撞，也可能不碰撞</p><p>对于一个未知的元素，它有可能插入到 HashMap 的任何一个位置，因此，对于未知的元素插入，碰撞是<strong>等可能的</strong>，而一个元素是否碰撞和它之后的元素是否碰撞并无关系，因此是 <strong>独立的</strong></p><blockquote><p>为什么是独立的？因为 HashMap 采用拉链法解决碰撞，碰撞的元素不占用数组空间，因此一个元素是否碰撞和它前一个元素是否碰撞没有关系</p></blockquote><p>在这里，我们要引入一个假设，上面我们提到的 HashMap 不是很满，但是 loadFactor 也不应该让一个 HashMap 过于空，太空的 HashMap 会造成空间的浪费；<br>假如一个元素的插入正好导致它碰撞，那么说明这个 HashMap 肯定不是特别空旷，而且当元素插入就碰撞时，恰好说明我们需要扩大 HashMap，而不是修改元素的 <code>hash()</code> 方法</p><p>因此，我们有单个元素插入碰撞的概率为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>=</mo><mfrac><mn>1</mn><mi>s</mi></mfrac></mrow><annotation encoding="application/x-tex">p = \frac{1}{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="4-hashmap-在插入过程中不发生碰撞的概率"><a class="markdownIt-Anchor" href="#4-hashmap-在插入过程中不发生碰撞的概率"></a> 4. HashMap 在插入过程中不发生碰撞的概率</h2><p>得到单个元素插入发生碰撞的概率之后，我们来考虑整个 HashMap 在插入过程中不发生碰撞的概率</p><p>对于一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span></span></span></span> 大小的 Hashmap，我们插入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 个元素，这个操作属于等可能独立事件的<strong>重复操作</strong>，满足 <strong>二项分布</strong>，因此我们可以得出，在这个重复插入操作中，没有碰撞的概率为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><mo>×</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mn>0</mn></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mn>0</mn></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(0) &amp; = C_n^0 \times (\frac{1}{s})^0 \times (1 - \frac{1}{s})^{n - 0} \\ &amp; = (1 - \frac{1}{s})^n \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.61488em;vertical-align:-2.05744em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.55744em"><span style="top:-4.55744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.05744em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.55744em"><span style="top:-4.55744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.864108em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.05744em"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="5-什么叫hashmap-很可能不满"><a class="markdownIt-Anchor" href="#5-什么叫hashmap-很可能不满"></a> 5. 什么叫“HashMap 很可能不满”</h2><p>假如一个 HashMap，它在插入元素的过程中，如果它一次碰撞都没有发生，说明它没有满；</p><p>上面我们得到了这个事件的概率，如果这个事件发生的概率很大，那么就说明 HashMap <strong>很可能不满</strong></p><p>所以，若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">P(0) \le 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>，则说明 HashMap 很可能没有满</p><p>则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>≥</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} (1 - \frac{1}{s})^n \ge \frac{1}{2} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-.90372em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4037200000000003em"><span style="top:-3.4037200000000003em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.90372em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 代表 HashMap 中元素的个数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span></span></span></span> 代表 HashMap 的数组大小</p><h2 id="6-loadfactor-的计算过程"><a class="markdownIt-Anchor" href="#6-loadfactor-的计算过程"></a> 6. loadFactor 的计算过程</h2><p>HashMap 中 <code>loadFactor</code> 即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">n/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span></span>，首先求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span>，对于上面的式子取对数，则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>n</mi><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≥</mo><mo>−</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mfrac><mrow><mo>−</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>s</mi></mfrac><mo stretchy="false">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mfrac><mrow><mo>−</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow><mi>s</mi></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} n\ln(1 - \frac{1}{s}) &amp; \ge -\ln2 \\ n &amp; \le \frac{-\ln2}{\ln(1 - \frac{1}{s})} \\ n &amp; \le \frac{-\ln2}{\ln\frac{s-1}{s}} \\ n &amp; \le \frac{\ln2}{\ln\frac{s}{s-1}} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.571307000000001em;vertical-align:-5.0356535em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.5356535000000004em"><span style="top:-7.5856535em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-5.228213499999999em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-2.4766655em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:.2748824999999997em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.0356535em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.5356535000000004em"><span style="top:-7.5856535em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">−</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span><span style="top:-5.228213499999999em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4766655em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.2748824999999997em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.0356535em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mn>2</mn><mi>s</mi></mrow><mrow><mn>2</mn><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">n \le \frac{\ln2}{\ln\frac{2s}{2s-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.7719400000000001em;vertical-align:-.13597em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.5635929999999998em;vertical-align:-.6834849999999999em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8801079999999999em"><span style="top:-2.59898em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">ln</span><span class="mspace mtight" style="margin-right:.19516666666666668em"></span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8443142857142858em"><span style="top:-2.656em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2255em"><span class="pstrut" style="height:3em"></span><span class="frac-line mtight" style="border-bottom-width:.049em"></span></span><span style="top:-3.384em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.40352142857142853em"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">ln</span><span class="mspace mtight" style="margin-right:.19516666666666668em"></span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.6834849999999999em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 时，HashMap <strong>很可能</strong>不满，所以</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mi>s</mi></mfrac><mo>≤</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{s} \le \frac{\ln2}{s\ln\frac{s}{s-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.4607710000000003em;vertical-align:-1.089331em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">s \to \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord">∞</span></span></span></span> 时，有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>F</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} loadFactor &amp; = \lim_{s \to \infty}\frac{\ln2}{s\ln\frac{s}{s-1}} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.760771em;vertical-align:-1.1303855em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6303855em"><span style="top:-3.6303855em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1303855em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6303855em"><span style="top:-3.6303855em"><span class="pstrut" style="height:3.3714399999999998em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1303855em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>对于分母的式子有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \lim_{s \to \infty}s\ln\frac{s}{s-1} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.17689em;vertical-align:-.8384450000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.338445em"><span style="top:-3.338445em"><span class="pstrut" style="height:3.1075600000000003em"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.8384450000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>从形式上来看，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">s \to \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord">∞</span></span></span></span> 时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mi>s</mi></mrow><mrow><mn>2</mn><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{2s}{2s-1} \to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-.403331em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，则上式为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi><mo>⋅</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\infty \cdot 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.44445em;vertical-align:0"></span><span class="mord">∞</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 型，应转换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>0</mn><mi mathvariant="normal">∞</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{0}{\infty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi mathvariant="normal">∞</mi><mn>0</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\infty}{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 计算，对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span></span></span></span> 取倒数，有：<br>令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>=</mo><mfrac><mn>1</mn><mi>t</mi></mfrac></mrow><annotation encoding="application/x-tex">s = \frac{1}{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mi>t</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mfrac><mn>1</mn><mi>t</mi></mfrac><mrow><mfrac><mn>1</mn><mi>t</mi></mfrac><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mi>t</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mfrac><mn>1</mn><mi>t</mi></mfrac><mfrac><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow><mi>t</mi></mfrac></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mi>t</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow><mi>t</mi></mfrac><mo>⋯</mo><mo stretchy="false">(</mo><mo>⋆</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \lim_{t \to 0} \frac{1}{t} \ln\frac{\frac{1}{t}}{\frac{1}{t} - 1} \\ &amp; = \lim_{t \to 0}\frac{1}{t} \ln\frac{\frac{1}{t}}{\frac{1-t}{t}} \\ &amp; = \lim_{t \to 0} \frac{1}{t}\ln\frac{1}{1-t} \\ &amp; = \lim_{t \to 0} \frac{\ln\frac{1}{1-t}}{t} \cdots (\star) \\ \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.966749em;vertical-align:-5.2333745em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.7333745em"><span style="top:-7.7917055em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span><span style="top:-4.8314895em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span><span style="top:-2.1299415em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span><span style="top:.5778275000000002em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.2333745em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.7333745em"><span style="top:-7.7917055em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.580108em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7350000000000003em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-4.8314895em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.580108em"><span style="top:-2.2648919999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7350000000000003em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.080108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.1299415em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.5778275000000002em"><span class="pstrut" style="height:3.638439em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.638439em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7933310000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord">⋆</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.2333745em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>遇见 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x \to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，就要想 <strong>等价无穷小</strong>，对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\ln</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mop">ln</span></span></span></span> 可以构造 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\ln(1 + x) \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">x</span></span></span></span>，则有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>t</mi><mo>+</mo><mi>t</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>ln</mi><mo>⁡</mo><mn>1</mn><mo>+</mo><mfrac><mi>t</mi><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \ln\frac{1}{1-t} \\ &amp; = \ln\frac{1-t+t}{1-t} \\ &amp; = \ln 1 + \frac{t}{1-t} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.14295em;vertical-align:-3.3214750000000004em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8214749999999995em"><span style="top:-5.8214749999999995em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-3.4307049999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-1.0692949999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3214750000000004em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8214749999999995em"><span style="top:-5.8214749999999995em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.4307049999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0692949999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.29208em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3214750000000004em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>⋆</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\star)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">⋆</span><span class="mclose">)</span></span></span></span>式则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mfrac><mi>t</mi><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac><mi>t</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>t</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>F</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mrow><mi>s</mi><mi>ln</mi><mo>⁡</mo><mfrac><mi>s</mi><mrow><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mn>1</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∼</mo><mn>0.693</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \lim_{t \to 0} \frac{\frac{t}{1-t}}{t} \\ &amp; = \lim_{t \to 0} \frac{1}{1-t} \\ &amp; = 1 \\ \\ \therefore loadFactor &amp; = \lim_{s \to \infty}\frac{\ln2}{s\ln\frac{s}{s-1}} \\ &amp; = \lim_{s \to \infty} \frac{\ln2}{1} \\ &amp; = \ln2 \\ &amp; \sim 0.693 \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:16.157975999999998em;vertical-align:-7.828988000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.328987999999999em"><span style="top:-10.328987999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-7.990439999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-6.081109999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-4.581109999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:-2.549669999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span></span></span><span style="top:.21110100000000065em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:2.0511010000000005em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span><span style="top:3.551101000000001em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.828988000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.328987999999999em"><span style="top:-10.328987999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.617887em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7933310000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.824556em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-7.990439999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.082892em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.717108em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-6.081109999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span></span></span><span style="top:-2.549669999999999em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.403331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.089331em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.21110100000000065em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:2.0511010000000005em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span><span style="top:3.551101000000001em"><span class="pstrut" style="height:3.617887em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mord">9</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.828988000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="7-为什么是-075"><a class="markdownIt-Anchor" href="#7-为什么是-075"></a> 7. 为什么是 0.75</h2><p>从上面的计算来看，<code>loadFactor</code> 取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\ln2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mop">ln</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span> 时，能够让 HashMap 尽可能不满</p><p>但是在实际中，HashMap 碰撞与否，其实是与 <code>hashCode()</code> 的设计有很大关系，因此 JDK 设计者在平衡空间利用和性能方面给了一个更高的经验数字。</p><h2 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8. 总结</h2><p>当然，这只是一家之言，你也可以从其他方面解释 0.75 这个值如何如何；</p><p>其实这种刨根问底的问题，终究希望考察你的 <strong>能力</strong> 而不是 <strong>记忆</strong>，只要你能给出自己的解释，而不是被问住，呆若木鸡，就能通过面试。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 面经总结 2019 春招</title>
      <link href="//Android/android-%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93-2019-%E6%98%A5%E6%8B%9B/"/>
      <url>//Android/android-%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93-2019-%E6%98%A5%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<p>折腾了好一段时间，也算是找到了工作了，做个面经总结来告慰一下我的学生生涯</p><a id="more"></a><h2 id="1-ihandy"><a class="markdownIt-Anchor" href="#1-ihandy"></a> 1. iHandy</h2><p>为什么 Android 要设计 Intent Service？直接使用线程不就行了？</p><blockquote><p>考点：Intent Service 和线程的区别<br>答：Thread 依赖于 Activity 存在，在 Activity finish 的时候 Thread 必须终止，否则会造成内存泄漏<br>Intent Service 不依赖于 Activity 存在，当 Activity 关闭之后，它依旧会继续进行，直到任务完成或者系统强制将其回收</p></blockquote><p>按下 App 强制停止，发生了什么？</p><blockquote><p>调用了 forceStopPackage()</p></blockquote><p>跨进程单例实现</p><blockquote><p>使用 AIDL 接口实现一个单例，然后制定一个进程存储（实现）这个单例，其他进程连接这个 Service 获取其 Binder</p></blockquote><h2 id="2-头条"><a class="markdownIt-Anchor" href="#2-头条"></a> 2. 头条</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc29ydC1jb2xvcnMv" title="https://leetcode.com/problems/sort-colors/">荷兰国旗问题<i class="fa fa-external-link"></i></span></p><p>只遍历一次的算法</p><p><img alt="荷兰国旗算法示意图" data-src="../../images/android-%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><p><code>curr</code> 从前往后遍历：</p><ol><li>如果遍历到白球，<code>curr++</code></li><li>如果遍历到红球，则与 <code>red</code> 交换，然后 <code>red++</code>，<code>curr++</code></li><li>如果遍历到黑球，则与 <code>black</code> 交换，<code>black--</code>，<strong><code>curr</code> 不动</strong></li></ol><p><code>curr</code> 表示 <strong>前面已经排好了</strong>，和后面交换并不保证前面已经排好</p><p>HTTPS 通信流程</p><blockquote><p>HTTPS 全称是：HTTP over TLS</p></blockquote><img data-src="https://www.plantuml.com/plantuml/svg/dL5BJiCm5Dpt5Bb05y2kYzwb4bqMKE003Q8q5BS9LSedH8BmImN1BgeW2gBaCdcsi-8A64mIgv0DE-kzcNapOy1Nr8pO0watgJU4WI-U3Gsi8_uSSHBHfzsFDmIeHmz365eSOtPWKYyKG-eGYWo6J-Xy0cEKkHRrNg6_e9EPfhSsrZSxAxL2ijw4_513Opxc-AOGaioIjge9ELMzGaQOpBg6tC7P57fXDhxbn4ZZkngKiHH6Te_4NaBOuplOmmeWSoweQIyRMzCWVicwBa_wIrTXS0baNxAqBRtTQMtlj7LLN2tt6mpsYBbx2bW9gO2PCsM1yHKik1Qi4Y-AuwC8hEFSN4MKT948ZVn7YehpHD8pa9W5ivyKmQauLs7dlsf_Do7LViDvSivz92UYxpJnFm40"><p>HTTPS 的验证过程如何防止中间人攻击？中间人偷换公钥怎么办？</p><blockquote><p>搞清楚几个问题：</p><ol><li>服务器 SSL 证书是怎么来的？<br>-&gt; 是从 CA 申请的，CA 向服务器下发公私钥对，并在证书中使用 CA 私钥对服务器公钥进行签名</li><li>客户端是如何验证的？<br>-&gt; 客户端拿到服务器公钥之后，使用 CA 公钥对签名部分进行解密，然后对比解密后的公钥是不是同一个（即签名校验）<br>所以，防止中间人攻击是经过 CA 来实现的<br>如果发现证书签名不一致，则说明遭受到了中间人攻击，那么就中断连接<br>重点：HTTPS 防止中间人是依靠 CA 实现的，因此，并不是一定可以防止中间人攻击，如果客户系统导入了奇怪的证书，就可能会遭受到中间人攻击</li></ol></blockquote><h2 id="3-珍爱网"><a class="markdownIt-Anchor" href="#3-珍爱网"></a> 3. 珍爱网</h2><p><code>HashMap</code> 与 <code>ArrayList</code> 如何扩容</p><blockquote><p>ArrayList<br>插入前先确保容量，如果不足就扩容，数组增长到 1.5 倍<br><strong>不会自动缩小</strong></p><p>HashMap</p><ol><li>初始大小 16，扩容因子 <code>loadFactor</code> 0.75</li><li>当 <code>size &gt; capacity * loadFactor</code> 时，就扩容 2 倍</li><li>数组扩容完毕之后进行 <code>rehash()</code></li><li>HashMap 的 hash 方法为 <code>hashCode &amp; (sizeOfArray - 1)</code></li><li><a href="https://wafer.li/Interview/hashmap-%E7%9A%84-loadfactor-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-0-75">为什么是 0.75</a></li></ol></blockquote><p><code>HashMap</code> 的键值对是否可以为 <code>null</code></p><blockquote><p><code>HashMap</code> 可以为 <code>null</code>(Key, Value 都可以)<br><code>HashTable</code> 不行</p></blockquote><p><code>HashMap</code> 与 <code>Set</code> 的 <code>put</code> 有什么区别</p><blockquote><p><code>HashMap</code> 的 <code>put</code> 当存在相同 Key 的时候会改变原值<br><code>Set</code> 的 <code>put</code> 不会</p></blockquote><p>GC 过程</p><ol><li>对象是否已死(GCRoot可达性)</li><li>四大引用(强 -&gt; 软 -&gt; 弱 -&gt; 虚逐步递减)<blockquote><p>强：最为普通的引用，如果对象不死，就不会被回收<br>软：稍弱一些的引用，如果即将 OutOfMemoryError 就会对其进行回收<br>弱：常用的防止内存泄漏的引用类型，只要进行垃圾回收就马上被回收<br>虚：最弱的引用，无法取到目标对象，用于跟踪对象垃圾回收的状态，通过查看引用队列是否有虚引用判断其是否即将被回收</p></blockquote></li><li>是否有必要<blockquote><p>GCRoot 不可达 -&gt; 第一次标记进入 F-Queue -&gt; F-Queue 第二次标记 -&gt; 回收</p></blockquote></li><li>回收方法区(废弃常量、无用静态类)</li><li>类没有实例</li><li>ClassLoader 也被回收</li><li>Class 对象没有被引用</li><li>回收算法</li><li>标记-清除算法(会产生内存碎片)</li><li>复制-清除算法(初生代常用，from 和 to Survivor 区域)</li><li>标记-移动算法(老生代常用，标记回收对象，回收之后移动剩余对象)</li></ol><p><code>wait()</code> 和 <code>sleep()</code> 的区别</p><ol><li><code>wait()</code> 位于 <code>Object</code>，<code>sleep()</code> 位于 <code>Thread</code></li><li><code>wait()</code> 只能用于同步块， <code>sleep()</code> 什么地方都使用</li><li><code>wait()</code> 会释放锁，<code>sleep()</code> 不会释放锁</li></ol><p>线程开启有哪几种方式</p><ol><li>继承 <code>Thread</code>，重写 <code>run()</code></li><li>实现 <code>Runnable</code>，调用 <code>Thread.start()</code></li><li>实现 <code>Callable</code>，使用 <code>FutureTask</code> 包装并传入 <code>Thread</code></li><li><code>FutureTask</code> 获取返回值实现原理 (<code>get()</code>)<blockquote><p>如果完成了，就返回，如果未完成，就阻塞主线程，等待结果</p></blockquote></li></ol><p>如何保证线程执行顺序</p><ol><li><code>thread.join()</code> 当前线程等待 <code>thread</code> 的终止</li><li>使用锁</li><li>使用 <code>Condition</code></li><li>CAS 操作</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidX 测试坑点详解（二）—— VectorDrawable 和 tint 问题解析</title>
      <link href="//Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
      <url>//Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="/Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/">上篇文章</a>我们说到如果你的 VectorDrawable 如果采用一个带 <code>&lt;selector&gt;</code> 的颜色进行着色，那么就需要在测试代码中对 Drawable 进行重新着色，而不是直接比较。</p><p>本篇文章就来着重说说其中的原理。</p><a id="more"></a><h2 id="1-测试-drawable-的主要流程"><a class="markdownIt-Anchor" href="#1-测试-drawable-的主要流程"></a> 1. 测试 Drawable 的主要流程</h2><p>首先，我们来看看整个测试程序经历的流程，自顶向下才能更好的把握是什么地方什么阶段出现了问题。</p><p>运行 Drawable 的测试的过程大体如下：</p><ol><li><code>ImageView</code> 将 Drawable 在界面中展示</li><li><code>TestRunner</code> 从 Context 中获取期望值</li><li>将两者进行比较</li></ol><p>接下来，我们就分步来看具体流程，最后来定位到底是什么地方出现了问题。</p><h2 id="2-imageview-展示-drawable-的流程"><a class="markdownIt-Anchor" href="#2-imageview-展示-drawable-的流程"></a> 2. ImageView 展示 Drawable 的流程</h2><p>在测试中，我们采用 <code>imageView.setImageResource()</code> 的方法来展示 Drawable，由于代码比较长，就不贴出全部代码了，仅仅对流程和某些关键语句和行进行介绍。</p><p>首先，<code>ImageView</code> 会将原先的 Drawable 置为空，然后在 <code>resolveUri()</code> 方法中，会对我们传入的资源 ID 进行解析，然后通过 <code>Context</code> 获取这个 Drawable：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Drawable d = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (mResource != <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    d = mContext.getDrawable(mResource);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>获取到 Drawable 之后，<code>ImageView</code> 就会调用 <code>updateDrawable()</code> 更新自身的 Drawable：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void updateDrawable(Drawable d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (d != mRecycleableBitmapDrawable &amp;&amp; mRecycleableBitmapDrawable != <span class="literal">null</span>) &#123;</span><br><span class="line">        mRecycleableBitmapDrawable.setBitmap(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean sameDrawable = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mDrawable != <span class="literal">null</span>) &#123;</span><br><span class="line">       sameDrawable = mDrawable == d;</span><br><span class="line">       mDrawable.setCallback(<span class="literal">null</span>);</span><br><span class="line">       unscheduleDrawable(mDrawable);</span><br><span class="line">       <span class="keyword">if</span> (!sCompatDrawableVisibilityDispatch &amp;&amp; !sameDrawable &amp;&amp; isAttachedToWindow()) &#123;</span><br><span class="line">         mDrawable.setVisible(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     mDrawable = d;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (d != <span class="literal">null</span>) &#123;</span><br><span class="line">       d.setCallback(<span class="keyword">this</span>);</span><br><span class="line">       d.setLayoutDirection(getLayoutDirection());</span><br><span class="line">       <span class="keyword">if</span> (d.isStateful()) &#123;</span><br><span class="line">         d.setState(getDrawableState());</span><br><span class="line">       &#125;</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><p>其中，比较重要的是 <code>d.setState()</code>，正是它根据当前 <code>ImageView</code> 所处的状态（State）来对其 Drawable 进行着色的。</p><p>那么，我们看到，实际上 <code>ImageView</code> 在展示 Drawable 的时候，实际上大体上分成了两个步骤：</p><ol><li>通过 <code>Context</code> 获取 Drawable 实例</li><li>根据 <code>ImageView</code> 所处状态和相应属性对获取得到的 Drawable 做出相应改变</li><li>展示</li></ol><p>所以问题是不是出现在 <code>Context</code> 获取 Drawable 的时候呢？我们来继续看看 Context 获取 Drawable 的过程。</p><h2 id="3-context-获取-drawable-的过程"><a class="markdownIt-Anchor" href="#3-context-获取-drawable-的过程"></a> 3. Context 获取 Drawable 的过程</h2><p>所有的测试，实际上都是拿期望值和实际结果进行比较，而对于 Drawable 来说，期望值实际上就是我们本地存储的 Drawable，而获取这个期望值实际上还是通过 Context 来获取得到的。</p><p>要想深入了解这个问题的成因，我们就要首先看看 Context 获取 Drawable 的过程。</p><p>首先，<code>Context</code> 调用 <code>getDrawable()</code> 最终会调用到 <code>ResourceImpl</code> 的 <code>loadDrawable()</code> 方法，这个方法的流程大致如下：</p><ol><li>查找 Drawable 缓存</li><li>若缓存命中，则直接返回缓存值</li><li>若未命中，则创建 Drawable</li><li>使用传入的 <code>theme</code> 对新创建的 Drawable 进行相关调整（如着色等）</li><li>将 Drawable 写入缓存</li><li>返回</li></ol><p>这个流程本身没什么问题，但是在经过 <code>applyTheme()</code> 方法之后，我们发现此时的 Drawable 出现了变化：</p><p>在 <code>applyTheme()</code> 之前，Drawable 的 <code>mTintFilter</code> 和 <code>mVectorState</code> 中的 <code>mTint</code> 都是空的：</p><p><img alt="applyTheme 之前" data-src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/applytheme-%E4%B9%8B%E5%89%8D.png"></p><p>而在经过 <code>applyTheme()</code> 之后，Drawable 的 <code>mTintFilter</code> 和 <code>mVectorState</code> 中的 <code>mTint</code> 都被赋上了值：</p><p><img alt="applyTheme 之后" data-src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/applytheme-%E4%B9%8B%E5%90%8E.png"></p><p>其中更重要的一点就是这个 <code>mColor</code> 值和我们后面从 <code>ImageView</code> 的 Drawable 中得到的 <code>mColor</code> 并不一样：</p><p><img alt="ImageView Drawable 中的 mColor" data-src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/imageview-drawable-%E4%B8%AD%E7%9A%84-mcolor.png"></p><p>进一步的分析可以看到，在 <code>mVectorState</code> 中的 <code>mTint</code> 实际上保留了两个 <code>mColor</code> 值，其中一个是 <code>Context</code> 获取的 Drawable 的 <code>mColor</code>，另一个则是在 <code>ImageView</code> 中获取到的 <code>mColor</code>。</p><p>所以说，极有可能是在 <code>applyTheme()</code> 方法中出现了什么问题，导致其赋予 Drawable 一个错误的 <code>mTint</code> 从而导致 BUG 的出现。</p><h2 id="4-深入-applytheme-方法"><a class="markdownIt-Anchor" href="#4-深入-applytheme-方法"></a> 4. 深入 applyTheme 方法</h2><p>在上面的分析中，我们知道，在 <code>applyTheme()</code> 方法中，系统会赋予 Drawable 一个着色，但是这个着色是有问题的，那么我们只要找到哪条代码会导致着色变化即可。</p><p>经过不断的步进，我终于找到了对着色进行更改的方法——<code>updateLocalState()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateLocalState</span><span class="params">(Resources res)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> density = Drawable.resolveDensity(res, mVectorState.mDensity);</span><br><span class="line">  <span class="keyword">if</span> (mTargetDensity != density) &#123;</span><br><span class="line">    mTargetDensity = density;</span><br><span class="line">    mDpiScaledDirty = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mTintFilter = updateTintFilter(mTintFilter, mVectorState.mTint, mVectorState.mTintMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这个方法最后会调用 <code>updateTintFilter()</code> 使用 <code>mVectorState</code> 中的着色值对 Drawable 进行着色，而这个着色值正是我们在上面看到的那个具有两个 Int 的数组，包含了两种不同的颜色。</p><p>深入进去，我们可以发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="function">PorterDuffColorFilter <span class="title">updateTintFilter</span><span class="params">(@Nullable PorterDuffColorFilter tintFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable ColorStateList tint, @Nullable PorterDuff.Mode tintMode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tint == <span class="keyword">null</span> || tintMode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> color = tint.getColorForState(getState(), Color.TRANSPARENT);</span><br><span class="line">    <span class="keyword">if</span> (tintFilter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PorterDuffColorFilter(color, tintMode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tintFilter.setColor(color);</span><br><span class="line">    tintFilter.setMode(tintMode);</span><br><span class="line">    <span class="keyword">return</span> tintFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，这个方法是通过 Drawable 的 State 在 <code>mVectorState.mTint</code> 中获取对应的颜色，然后对 <code>mTintFilter</code> 进行赋值的。</p><p>到这里，关键点就来了，由于我们是第一次通过 <code>Context</code> 获取 Drawable，此时，Drawable 还不具备状态，那么 <code>getState()</code> 的结果实际上是一个 <strong>空数组！</strong></p><p>我们紧接着看 <code>getColorForState()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColorForState</span><span class="params">(@Nullable <span class="keyword">int</span>[] stateSet, <span class="keyword">int</span> defaultColor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> setLength = mStateSpecs.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; setLength; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] stateSpec = mStateSpecs[i];</span><br><span class="line">    <span class="keyword">if</span> (StateSet.stateSetMatches(stateSpec, stateSet)) &#123;</span><br><span class="line">      <span class="keyword">return</span> mColors[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> defaultColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过调试结果，我们可以看到：</p><p><img alt="getColorState 调试结果" data-src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/getcolorstate-%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><p>这里面的 <code>mColor</code> 正是 <code>mVectorState.mTint</code> 的两个值，并且，第一个就是 Context Drawable 的 <code>mTint</code> 值。</p><p>那么也就说明：<code>stateSetMatches()</code> 方法第一次就通过了。</p><p>所以，问题应该就是出在 <code>stateSetMatches()</code> 方法中。</p><h2 id="5-statesetmatches-方法流程"><a class="markdownIt-Anchor" href="#5-statesetmatches-方法流程"></a> 5. stateSetMatches 方法流程</h2><p>这里先上一个调试结果：</p><p><img alt="stateSetMatches调试结果" data-src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/statesetmatches%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><p>从调试中我们可以看到，<code>stateSpec</code> 有一个负数值，而 <code>stateSet</code> 是空的。</p><p>下面是这个方法的部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">stateSetMatches</span><span class="params">(<span class="keyword">int</span>[] stateSpec, <span class="keyword">int</span>[] stateSet)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (stateSet == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> (stateSpec == <span class="keyword">null</span> || isWildCard(stateSpec));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> stateSpecSize = stateSpec.length;</span><br><span class="line">     <span class="keyword">int</span> stateSetSize = stateSet.length;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stateSpecSize; i++) &#123;</span><br><span class="line">         <span class="keyword">int</span> stateSpecState = stateSpec[i];</span><br><span class="line">         <span class="keyword">if</span> (stateSpecState == <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">// We've reached the end of the cases to match against.</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">boolean</span> mustMatch;</span><br><span class="line">         <span class="keyword">if</span> (stateSpecState &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             mustMatch = <span class="keyword">true</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// We use negative values to indicate must-NOT-match states.</span></span><br><span class="line">             mustMatch = <span class="keyword">false</span>;</span><br><span class="line">             stateSpecState = -stateSpecState;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; stateSetSize; j++) &#123;</span><br><span class="line">           ...</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (mustMatch &amp;&amp; !found) &#123;</span><br><span class="line">             <span class="comment">// We've reached the end of states to match and we didn't</span></span><br><span class="line">             <span class="comment">// find a must-match state.</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从中我们可以看到，实际上这个函数就是对比状态是否相等，由于我们的 <code>stateSet</code> 是空数组，所以就隐去了其相关的 <code>for</code> 循环部分，因为这个循环实际上是会被跳过的。</p><p>从外部的 <code>for</code> 循环中来看，我们发现由于 <code>stateSpecState</code> 是一个负数，所以 <code>mustMatch</code> 为 <code>false</code>，而由于我们又没有找到相应的符合规范的状态，因此 <code>found</code> 也是 <code>false</code>。</p><p>此时，外层的第一次也是唯一一次的 <code>for</code> 循环就结束了，那么循环跳出，<strong>最后返回 true！</strong></p><p><img alt="stateSetMatches 返回 true" data-src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/statesetmatches-%E8%BF%94%E5%9B%9E-true.png"></p><p>也就是说，当 Drawable 没有状态时，系统会默认其 <strong>符合任何状态！</strong></p><p>于是，<code>mColors</code> 的第一个颜色值会被返回，但实际上它并不是 <code>ColorStateList</code> 的默认值：</p><p><img alt="第一个 mColor 并不是默认值" data-src="../../images/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/%E7%AC%AC%E4%B8%80%E4%B8%AA-mcolor-%E5%B9%B6%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E5%80%BC.png"></p><p>而由于 <code>ImageView</code> 会在拿到 Drawable 之后通过其状态来更新着色，因此就会导致着色的不相同。</p><h2 id="6-案件重现"><a class="markdownIt-Anchor" href="#6-案件重现"></a> 6. 案件重现</h2><p>到这里，问题的成因就已经水落石出了，侦探推理完成后都会进行一下案件重演，那么在这里也重新回顾一下整个流程和问题的原因：</p><ol><li>ImageView 展示 Drawable 调用了 <code>Context</code></li><li><code>Context</code> 第一次创建 Drawable 并不带有状态</li><li>空状态导致系统着色判断错误</li><li><code>Context</code> 随即将错误的着色 Drawable 进行缓存</li><li><code>ImageView</code> 获取到 Drawable 之后根据其状态给予了正确的着色</li><li>测试程序再次通过 <code>Context</code> 获取 Drawable 由于缓存命中，返回了错误着色的 Drawable</li><li>由于测试程序获取的期望值和 <code>ImageView</code> 的真实值不相同，因此测试报错不通过</li></ol><p>其中，我们看到，问题的关键在于系统在 Drawable 初次创建完成时错误判断了其着色颜色，从而返回颜色列表的第一个值而忽略其真正的默认值。</p><p>由于我们再次通过 <code>Context</code> 取 Drawable 会因为缓存而拿到错误着色的 Drawable，所以我们需要对拿到的 Drawable 根据运行环境进行重新着色。</p><p>但是如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 就是默认的话，那么就没有这个问题，不需要重新着色了。</p><h2 id="7-附默认的-colorcontrolnormal-值"><a class="markdownIt-Anchor" href="#7-附默认的-colorcontrolnormal-值"></a> 7. 附：默认的 colorControlNormal 值</h2><p>在调试之余我还翻了一下默认的 <code>colorControlNormal</code> 值，结果是根据你设定的根主题的不同，可能会有下面的两个值：</p><ol><li><code>?android:attr/textColorPrimary</code></li><li><code>?android:attr/textColorSecondary</code></li></ol><p>但无一例外它们都是 <code>&lt;selector&gt;</code>，而且有状态的颜色值处在第一个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- textColorPrimary --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:alpha</span>=<span class="string">"?attr/disabledAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:alpha</span>=<span class="string">"?attr/primaryContentAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- textColorSecondary --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:alpha</span>=<span class="string">"?attr/disabledAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:alpha</span>=<span class="string">"?attr/secondaryContentAlpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"?attr/colorForeground"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Instrument Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidX 测试坑点详解（一）</title>
      <link href="//Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>//Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>最近在迁移到 AndroidX 之后一直折腾 TDD 的事情，也遇到了大的小的不少坑点；</p><p>鉴于 AndroidX 在测试方面还没有太多的文档，就写一篇博文来总结一下折腾的经验，也给后来人做一些参考。</p><a id="more"></a><h2 id="1-国产-rom-的坑"><a class="markdownIt-Anchor" href="#1-国产-rom-的坑"></a> 1. 国产 ROM 的坑</h2><p><code>ActivityScenario</code> 和 <code>ActivityScenarioRule</code> 是新推出的操作 Activity 生命周期的类。</p><p>当构建 <code>ActivityScenario</code> 时，它便会自动启动你指定的 Activity 并让它处于 <code>RESUMED</code> 状态。</p><p>使用示例如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(AndroidJunit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@get:Rule</span></span><br><span class="line">  <span class="keyword">val</span> mainActivityScenarioRule = ActivityScenarioRule&lt;MainActivity&gt;(MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onCreate_saveInstanceNull</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mainActivityScenarioRule.scenario</span><br><span class="line">                .onActivity &#123; activity -&gt;</span><br><span class="line">                  <span class="comment">// 在这里获取 Activity 实例</span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，当我在手机上跑这个测试的时候，却遇到了下面的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.AssertionError: Activity never becomes requested state <span class="string">"[RESUMED]"</span></span><br><span class="line">(last lifecycle transition = <span class="string">"PRE_ON_CREATE"</span>)</span><br></pre></td></tr></table></figure><p>也就是说，我这个 Activity 实际上并没有真正的 <code>onCreate</code> 而是一直处于被创建之前的状态，随后因为超时导致了报错退出。</p><blockquote><p>具体的超时时间是 45 秒</p></blockquote><p>但是到底是什么东西导致我的 Activity 启动不了却没有什么头绪，直到我用模拟器运行测试代码的时候，我发现： <strong>居然测试通过了！</strong></p><p>原来，Android 的仪器测试(Instrumented Test)都会构建一个独立的 <code>test.apk</code> 并自动安装和运行。</p><p>而国产的手机系统对于应用自启动的管理非常激进（例如华为），而我也没有对 <code>test.apk</code> 设置白名单，于是系统就一直禁止 <code>tesk.apk</code> 的启动，导致测试失败。</p><p>在华为的手机应用管家中为 <code>test.apk</code> 设置白名单，测试就可以通过了。</p><h2 id="2-fragment-testing-的坑"><a class="markdownIt-Anchor" href="#2-fragment-testing-的坑"></a> 2. Fragment Testing 的坑</h2><h3 id="21-编译依赖的坑"><a class="markdownIt-Anchor" href="#21-编译依赖的坑"></a> 2.1 编译依赖的坑</h3><p>和 <code>ActivityScenario</code> 一样，Google 也提供了一个 <code>FragmentScenario</code> 方便在测试中获取 <code>Fragment</code> 实例和对 <code>Fragment</code> 进行操作。</p><p>但是需要引入 <code>fragment-testing</code> 库，按照 Google 的文档是下面的这条语句:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debugImplementation <span class="string">'androidx.fragment:fragment-testing:1.1.0-alpha07'</span></span><br></pre></td></tr></table></figure><p>这里就是它的第一个坑，如果你只引入上面的这条语句，实际上根本不可能成功 Build。</p><p>主要有以下两点原因：</p><ol><li><p><code>fragment-testing</code> 需要依赖 <code>androidx.test.core</code>，而 debugImplementation 并没有引入 <code>androidx.text.core</code></p></li><li><p>我们需要在 Instrumented Test 中使用 <code>fragment-testing</code>，而上面并没有在 <code>androidTestImplementation</code> 引入</p></li></ol><p>于是乎，正确的引入方式是：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">debugImplementation(Libs.androidx_test_core)</span><br><span class="line">debugImplementation(Libs.fragment_testing)</span><br><span class="line">androidTestImplementation(Libs.androidx_test_core)</span><br><span class="line">androidTestImplementation(Libs.fragment_testing)</span><br></pre></td></tr></table></figure><p>那么能不能把 <code>debugImplementation</code> 换成普通的 <code>implementation</code> 呢？</p><p>很可惜，这是不行的，不过至于为什么不行，我目前并没有对此进行深入研究。</p><h3 id="22-主题的坑"><a class="markdownIt-Anchor" href="#22-主题的坑"></a> 2.2 主题的坑</h3><p>导入和依赖的坑解决之后就到了如何使用的环节了。</p><p>具体的用法为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testFragment</span><span class="params">()</span></span> &#123;</span><br><span class="line">  launchFragmentScenario&lt;LoginFragment&gt;() &#123; fragment -&gt;</span><br><span class="line">    <span class="comment">// 使用 fragment</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这么使用也是不行的。</p><p>如果你使用了 Material 的组件，例如 <code>TextInputLayout</code>，那么它会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: android.view.InflateException: Binary XML file line</span><br><span class="line">#9: Error inflating class</span><br><span class="line">**com.google.android.material.textfield.TextInputLayout**</span><br></pre></td></tr></table></figure><p>在查阅相关资料之后，发现了<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvMTE5MDU0NDMx" title="https://issuetracker.google.com/issues/119054431">一个相关的 Issue<i class="fa fa-external-link"></i></span></p><p>其中 Google 的人指出：</p><blockquote><p>You need to tell FragmentScenario <strong>what theme you want</strong> if you want something <strong>other than the default Theme.WithActionBar</strong>, that’s correct.</p></blockquote><p>也就是说，如果你使用了 Material 相关的主题，比如说常见的 <code>Theme.Appcompat</code> 等，那么就需要向 <code>FragmentScenario</code> 明确指出你使用的主题样式。</p><p>也就是说，上面的代码需要写成：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testFragment</span><span class="params">()</span></span> &#123;</span><br><span class="line">  launchFragmentScenario&lt;LoginFragment&gt;(</span><br><span class="line">    themeResId = R.style.Your_App_Theme</span><br><span class="line">    ) &#123; fragment -&gt;</span><br><span class="line">    <span class="comment">// 使用 fragment</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序才能正常运行。</p><h2 id="3-onfragmentonactivity-和-check-的坑"><a class="markdownIt-Anchor" href="#3-onfragmentonactivity-和-check-的坑"></a> 3. onFragment/onActivity 和 check 的坑</h2><p><code>ActivityScenario</code> 和 <code>FragmentScenario</code> 都提供了一个相应的高阶函数 <code>onActivity()</code> 和 <code>onFragment()</code>，可以在其中获取到对应的 <code>Activity</code> 和 <code>Fragment</code> 的实例，并用它做相应的操作。</p><blockquote><p>实际上 <code>onFragment()</code> 内部也是调用了 <code>onActivity()</code></p></blockquote><p>但是！需要注意的是，这两个 <code>on</code> 方法都是运行在主线程的，而 Espresso 的 <code>check()</code> 函数是一个耗时操作，如果你在 <code>onFragment()</code> 中调用 <code>check()</code>，那么就会 <strong>阻塞 UI 线程</strong>。</p><p>也就是说，需要将 <code>onView()</code> 相关的内容放到 <code>onFragment/onActivity</code> 的外面：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">launchFragmentInContainer&lt;LoginFragment&gt;(</span><br><span class="line">    themeResId = R.style.Theme_Shrine</span><br><span class="line">).onFragment &#123;</span><br><span class="line">    tintColorRes = typedValue.resourceId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onView(withContentDescription(R.string.shr_logo_content_description))</span><br><span class="line">    .check(matches(withDrawable(R.drawable.shr_logo, tintColorRes)))</span><br><span class="line">    .check(matches(isCompletelyDisplayed()))</span><br></pre></td></tr></table></figure><p>等等，放到外面就不会阻塞 UI 线程了吗？难道不会阻塞 <code>test.apk</code> 的 UI 线程？</p><p>经过反编译 <code>tesk.apk</code> 之后发现，实际上 <code>test.apk</code> <strong>只包含测试用例相关的内容</strong>，甚至没有一个 <code>Activity</code>，而真正的被测试的内容实际上还是在我们原来的 apk 之中，<code>test.apk</code> 实际上是通过启动被测试的 apk 的相关内容来实现仪器测试的。</p><p>也就是说，如果将 <code>onView</code> 相关的代码放到外面，实际上是在 <code>test.apk</code> 里面跑的，也就不会对被测试的 apk 进行阻塞。</p><h2 id="4-动画的坑"><a class="markdownIt-Anchor" href="#4-动画的坑"></a> 4. 动画的坑</h2><p>Android 官方的 Espresso 测试框架不能兼容动画效果，在跑测试，特别是点击、输入等 UI 测试时，需要进入开发者模式把能显示动画的都关掉：</p><p><img alt="Turn Off Animation" data-src="../../images/android-espresso-%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/turn-off-animation.png"></p><p>不然 Espresso 会报 <code>PerformException</code>。</p><h2 id="5-测试-imageview-的-drawable-的坑"><a class="markdownIt-Anchor" href="#5-测试-imageview-的-drawable-的坑"></a> 5. 测试 ImageView 的 Drawable 的坑</h2><h3 id="51-androidtint-的坑"><a class="markdownIt-Anchor" href="#51-androidtint-的坑"></a> 5.1 android:tint 的坑</h3><p>对于 <code>ImageView</code>，我们需要测试它是否展示出了我们传入的 Drawable，不过比较可惜的是，Espresso 自身并没有提供 <code>withDrawable()</code> 方法，幸运的是，我们可以通过 Kotlin 的扩展函数实现这个功能：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">withDrawable</span><span class="params">(<span class="meta">@DrawableRes</span> id: <span class="type">Int</span>, <span class="meta">@ColorRes</span> tint: <span class="type">Int</span>? = <span class="literal">null</span>, tintMode: <span class="type">PorterDuff</span>.<span class="type">Mode</span> = SRC_IN)</span></span> = <span class="keyword">object</span> : TypeSafeMatcher&lt;View&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeTo</span><span class="params">(description: <span class="type">Description</span>)</span></span> &#123;</span><br><span class="line">        description.appendText(<span class="string">"ImageView with drawable same as drawable with id <span class="variable">$id</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchesSafely</span><span class="params">(view: <span class="type">View</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context = view.context</span><br><span class="line">        <span class="keyword">val</span> expectedBitmap = context.getDrawable(id)?.toBitmap()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view <span class="keyword">is</span> ImageView &amp;&amp; view.drawable.toBitmap().sameAs(expectedBitmap)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，<code>ImageView</code> 支持着色 (tint) 功能，真正显示出来的 Drawable 和我们从 <code>Context</code> 里面拿到的 Drawable 很可能是不一样的，因此，我们也需要给 <code>expectedBitmap</code> 进行着色：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">toColor</span><span class="params">(context: <span class="type">Context</span>)</span></span> = ContextCompat.getColor(context, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Drawable.<span class="title">tinted</span><span class="params">(<span class="meta">@ColorInt</span> tintColor: <span class="type">Int</span>? = <span class="literal">null</span>, tintMode: <span class="type">PorterDuff</span>.<span class="type">Mode</span> = SRC_IN)</span></span> =</span><br><span class="line">        apply &#123;</span><br><span class="line">            setTintList(tintColor?.toColorStateList())</span><br><span class="line">            setTintMode(tintMode)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">toColorStateList</span><span class="params">()</span></span> = ColorStateList.valueOf(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">withDrawable</span><span class="params">(<span class="meta">@DrawableRes</span> id: <span class="type">Int</span>, <span class="meta">@ColorRes</span> tint: <span class="type">Int</span>? = <span class="literal">null</span>, tintMode: <span class="type">PorterDuff</span>.<span class="type">Mode</span> = SRC_IN)</span></span> = <span class="keyword">object</span> : TypeSafeMatcher&lt;View&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeTo</span><span class="params">(description: <span class="type">Description</span>)</span></span> &#123;</span><br><span class="line">        description.appendText(<span class="string">"ImageView with drawable same as drawable with id <span class="variable">$id</span>"</span>)</span><br><span class="line">        tint?.let &#123; description.appendText(<span class="string">", tint color id: <span class="variable">$tint</span>, mode: <span class="variable">$tintMode</span>"</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchesSafely</span><span class="params">(view: <span class="type">View</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context = view.context</span><br><span class="line">        <span class="keyword">val</span> tintColor = tint?.toColor(context)</span><br><span class="line">        <span class="keyword">val</span> expectedBitmap = context.getDrawable(id)?.tinted(tintColor, tintMode)?.toBitmap()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view <span class="keyword">is</span> ImageView &amp;&amp; view.drawable.toBitmap().sameAs(expectedBitmap)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-vectordrawable-的坑"><a class="markdownIt-Anchor" href="#52-vectordrawable-的坑"></a> 5.2 VectorDrawable 的坑</h3><p>从 5.0 之后， Android 支持矢量图，即 <code>VectorDrawable</code>，在 <code>ImageView</code> 中使用 <code>app:srcCompat</code> 进行显示。</p><p>但是，虽然在普通的 apk 中可以正常显示矢量图，但是在运行仪器测试时仅仅这样是显示不了的，还需要在代码中使用 <code>setImageResource()</code> 才能在测试中显示出矢量图。</p><p>目前来看这是 Android 测试框架的一个 Bug，如果不想改代码的话可以不进行这方面的测试，毕竟图能不能显示出来，用眼睛看看就行了。</p><h3 id="53-vectordrawable-和-tint-的坑"><a class="markdownIt-Anchor" href="#53-vectordrawable-和-tint-的坑"></a> 5.3 VectorDrawable 和 tint 的坑</h3><p>上面说到了 Drawable 需要 tint，如果我们的 <code>ImageView</code> 显示的是 <code>VectorDrawable</code>，那就要小心了，因为 <code>VectorDrawable</code> 可以在它自己的 xml 文件中进行着色：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:height</span>=<span class="string">"152dp"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:tint</span>=<span class="string">"?attr/colorControlNormal"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:viewportHeight</span>=<span class="string">"152"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:viewportWidth</span>=<span class="string">"149"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:width</span>=<span class="string">"149dp"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意上面的 <strong><code>android:tint=&quot;?attr/colorControlNormal&quot;</code></strong>，这是在 <code>vector</code> 中定义的。</p><p>如果你给这个 <code>tint</code> 设定的是一个 <code>&lt;selector&gt;</code>，那么就需要注意了：</p><p>如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 不是默认颜色，而是 <code>state_enable:false</code> 之类的有状态的颜色，那么就需要在测试代码中获取 <code>R.attr.colorControlNormal</code> 并对 Drawable 重新进行着色，否则即使你没有对这个 Drawable 进行过任何修改，测试依旧会报错失败。</p><p>如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 是默认的不带有状态限定的颜色，那么就不需要重新着色。</p><p>鉴于默认的 <code>colorControlNormal</code> 是 <code>&lt;selector&gt;</code> 颜色，我建议在测试 Drawable 的时候都统一进行重新着色。</p><p>而如何在运行时取到 <code>colorControlNormal</code> 的真正的颜色资源 ID，可以参照以下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> typedValue = TypedValue()</span><br><span class="line">it.activity?.theme?.resolveAttribute(R.attr.colorControlNormal, typedValue, <span class="literal">true</span>)</span><br><span class="line">tintColorRes = typedValue.resourceId</span><br></pre></td></tr></table></figure><p>最后拿到的 <code>tintColorRes</code> 即为颜色资源 ID。</p><p>关于其中具体原理，可以参照我的<a href="/Android/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/">下一篇文章</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Instrument Test </tag>
            
            <tag> Espresso </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConnectedDevice: No Test Found 调试过程</title>
      <link href="//Android/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/"/>
      <url>//Android/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>之前又稍微折腾着想尝试一下 TDD，并在每次构建的时候加入测试环节，当测试不通过就不允许 build。</p><p>当一切都配置好，点下 build App 的时候，却出现了 <code>There were failing tests.</code>。</p><p>我心想，不会啊，现在我就根本没写几个测试用例，为什么会通不过？</p><p>于是，就开始了艰难的调试过程</p><a id="more"></a><h2 id="0-更新"><a class="markdownIt-Anchor" href="#0-更新"></a> 0. 更新</h2><p>2019-05-27 更新： Google 回复：Instant Run 在新版本已经不被支持了，他们开发了一个更好的功能叫 Apply Change。</p><p><img alt="Google Response Instant Run Deprecated" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/google-response-instant-run-deprecated.png"></p><blockquote><p>Instant Run has been deprecated in Android Studio 3.5 and instead we’ve implemented a brand new solution called Apply Changes that is more stable and doesn’t modify your APK on build.<br>…<br>We recommend <strong>turning off Instant Run</strong> in the settings for earlier versions of Android Studio</p></blockquote><p>尝试了一下 2019-05-23 编译的 Android Studio 3.6 Canary 1 ，问题的确已经被修复了。</p><p><img alt="Build Success with AS 3.6.1" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/build-success-with-as-3-6-1.png"></p><p>所以还在使用 3.4 稳定版的，直接把 Instant Run 关掉吧。</p><h2 id="1-connecteddevice-no-tests-found"><a class="markdownIt-Anchor" href="#1-connecteddevice-no-tests-found"></a> 1. ConnectedDevice No tests found</h2><p>打开测试结果，就得到了下面这张图</p><p><img alt="ConnectedDevice No test found" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/connecteddevice-no-test-found.png"></p><p>再点进去一看：<br><img alt="ConnectedDevice No Test found detail" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/connecteddevice-no-tests-found-detail.png"></p><p>它说我没有按照 JUnit 的方式编写测试用例，但是我的测试用例都是加了 <code>@Test</code> 的啊</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(AndroidJUnit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">useAppContext</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// Context of the app under test.</span></span><br><span class="line">        <span class="keyword">val</span> appContext = InstrumentationRegistry.getInstrumentation().targetContext</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">"aaa.bbb.ccc.ddd"</span>, appContext.packageName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是就陷入了困境，问题到这里就消失了，到底应该怎样才能定位到问题呢？</p><h2 id="2-使用-gradle-命令行进行构建尝试"><a class="markdownIt-Anchor" href="#2-使用-gradle-命令行进行构建尝试"></a> 2. 使用 gradle 命令行进行构建尝试</h2><p>Android Studio 的 Run App 实际上就是先执行 <code>assemble[Build-Variant]</code> 然后再将生成的 apk 安装到手机的过程。</p><p>而这个 <code>assemble</code> 实际上是通过 <code>gradle</code> 执行的，于是可以尝试通过 gradle 命令行进行编译，看看是不是 gradle 导致的问题。</p><p>然而，gradle 单独进行编译并没有这个问题：</p><p><img alt="gradle build successful" data-src="/images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/gradle-build-successful.png"></p><p>所以很有可能是 Android Studio 自身的构建出现了问题，但是，目前的构建信息并不足以让我们定位到问题，所以需要获取更多的构建信息。</p><h2 id="3-instrument-process-crashed"><a class="markdownIt-Anchor" href="#3-instrument-process-crashed"></a> 3. INSTRUMENT: Process Crashed</h2><p>首先，我们在 <code>Build, Execution, Deployment -&gt; Compiler</code> 开启 <code>gradle --scan</code></p><p><img alt="Gradle Scan In Android Studio" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/gradle-scan-in-android-studio.png"></p><p>然后，点击红框里面的小图标让 Build 信息变成文字：</p><p><img alt="Build Output Text" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/build-output-text.png"></p><p>之后，就看到了 build 失败的详细信息了：</p><p><img alt="Fail due to Process Crashed" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/fail-due-to-process-crash.png"></p><p>原来是在测试的时候程序崩溃了，这才导致了测试的失败。</p><p>经过一番 StackOverflow 之后，<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxNjExMzcw" title="https://stackoverflow.com/a/21611370">这个答案<i class="fa fa-external-link"></i></span> 提醒了我：</p><p><img alt="StackOverflow See LogCat" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/stackoverflow-see-logcat.png"></p><p>由于 Instrument Test 实际上是安装了一个 <code>test.apk</code>，所以它的报错信息会在 Log Cat 而不是 Build Output 中。</p><h2 id="4-didnt-find-class-corecomponentfactory"><a class="markdownIt-Anchor" href="#4-didnt-find-class-corecomponentfactory"></a> 4. Didn’t find class CoreComponentFactory</h2><p>打开 Log Cat，首先映入眼帘的是 <code>Unable to instantiate application</code></p><p><img alt="Unable to instantiate application" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/unable-to-instantiate-application.png"></p><p>原来在执行测试的时候，没有办法实例化 <code>Application</code> 导致 Instrument Test 无法找到 <code>Context</code>，于是程序就崩溃导致测试失败了。</p><p>再往上看，可以看到导致无法实例化 <code>Application</code> 的原因：</p><p><img alt="Didn't find class CoreComponentFactory" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/didn-t-find-class-corecomponentfactory.png"></p><p>原来是构建 <code>Application</code> 的工厂找不到了，从而造成它无法实例化。</p><h2 id="5-罪魁祸首-instant-run"><a class="markdownIt-Anchor" href="#5-罪魁祸首-instant-run"></a> 5. 罪魁祸首 Instant Run</h2><p><code>Didn't find class CoreComponentFactory</code> 这个问题之前也遇到过，是因为 R8 将其混淆了，导致在 release 模式下找不到这个类，但是现在是 debug 模式，并没有启用混淆，但是依然还是找不到这个类。</p><p>在经过又一阵子的 StackOverflow 之后，我找到了<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU2MTg2ODIx" title="https://stackoverflow.com/a/56186821">这么一个答案<i class="fa fa-external-link"></i></span>：</p><p><img alt="Answer Disable Instant Run" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/answer-disable-instant-run.png"></p><p>虽然它被减成了负分，但是也不妨碍我尝试一下它的可用性。</p><p>于是我将 Instant Run 取消掉，奇迹发生了，程序竟然就编译通过并成功安装在了模拟器上。</p><p><img alt="Build Success" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/build-success.png"></p><p><img alt="Run Success" data-src="../../images/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/run-success.png"></p><h2 id="6-总结"><a class="markdownIt-Anchor" href="#6-总结"></a> 6. 总结</h2><p>到这里，整个调试过程就结束了，也给 Google 提了这个 bug。</p><p>虽然不敢肯定一定是 Instant Run 的问题，但是目前（AS 3.4.1）来看，取消 Instant Run 就可以运行成功。</p><p>这个问题本身可能有一些特异性，不过倒是从中学到了一个知识：</p><p>类似的 Instrument Test 的失败最好先去 Log Cat 寻找原因。</p><p>也希望大家能从这篇博客中能学到一些什么吧。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Instrument Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 buildSrcVersions 轻松管理 gradle 依赖</title>
      <link href="//Android/%E4%BD%BF%E7%94%A8-buildsrcversions-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86-gradle-%E4%BE%9D%E8%B5%96/"/>
      <url>//Android/%E4%BD%BF%E7%94%A8-buildsrcversions-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86-gradle-%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<p>如果你开发过稍微有点体量的 Android App，都会因为越来越多的 Gradle 依赖而头疼。</p><p>一个 App 的编译依赖少则十几项，多则几十项，如果再加上多 module，那么依赖的统一管理就很重要了。</p><p>但是，如何高效统一管理，则是一个难题。今天就来说说如何使用 buildSrcVersions 轻松管理 gradle 依赖。</p><a id="more"></a><h2 id="1-ext-的弊端"><a class="markdownIt-Anchor" href="#1-ext-的弊端"></a> 1. Ext 的弊端</h2><p>在介绍 buildSrcVersions 之前，我们先来看看 Google 官方推荐的统一管理方式，即使用 <code>ext</code> 进行管理，例如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    <span class="comment">// The following are only a few examples of the types of properties you can define.</span></span><br><span class="line">    compileSdkVersion = <span class="number">28</span></span><br><span class="line">    buildToolsVersion = <span class="string">"28.0.3"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can also use this to specify versions for dependencies. Having consistent</span></span><br><span class="line">    <span class="comment">// versions between modules can avoid behavior conflicts.</span></span><br><span class="line">    supportLibVersion = <span class="string">"28.0.0"</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>build.gradle</code> 中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  <span class="comment">// Use the following syntax to access properties you defined at the project level:</span></span><br><span class="line">  <span class="comment">// rootProject.ext.property_name</span></span><br><span class="line">  compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">  buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是！这种方式有很大的问题：</p><ol><li>由于多 module 工程需要共享一些变量，<code>ext</code> 定义的位置可能在其他地方</li><li>最大的问题在于，IDE 不能跳转到这些变量的定义</li></ol><p>在日常使用中，如果你对工程不是很熟悉，那么在依赖版本需要更改的时候就要翻箱倒柜找一阵，这不免令人烦躁，影响工作效率。</p><p>那么除了 <code>ext</code> 之外有没有更好的统一管理依赖的方式呢？</p><p>有的，Gradle 提供了一个 <code>buildSrc</code> 方式。</p><h2 id="2-kotlin-buildsrc-管理-gradle-依赖"><a class="markdownIt-Anchor" href="#2-kotlin-buildsrc-管理-gradle-依赖"></a> 2. Kotlin + buildSrc 管理 gradle 依赖</h2><p>时至今日，Kotlin 不仅可以作为源文件用于开发目的，而且也可以当成脚本运行，这就是 <code>.kts</code> 文件，而且 Gradle 系统也支持使用 <code>kts</code> 文件作为 build 脚本。</p><p>废话不多说，使用 Kotlin 和 buildSrc 进行依赖管理主要需要以下步骤：</p><ol><li>在根目录建立 <code>buildSrc</code> 文件夹</li><li>在 <code>buildSrc</code> 中创建 <code>build.gradle.kts</code>，并加上如下语句</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  `kotlin-dsl`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>buildSrc/src/main/java</code> 中创建 <code>Versions.kt</code> 和 <code>Libs.kt</code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Versions &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> compileSdkVersion = <span class="number">28</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> targetSdkVersion = <span class="number">28</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> retrofit = <span class="string">"2.8.6"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Libs &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> retrofit = <span class="string">"com.squareup.retrofit2:retrofit:<span class="subst">$&#123;Versions.retrofit&#125;</span>”</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>最后，在 <code>app/build.gradle</code> 中</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  compileSdkVersion(Versions.compileSdkVersion)</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  implementation(Libs.retrofit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们既能实现依赖的统一管理，也能使用到 IDE 的自动补全和定义跳转功能，迅速定位到需要改动的版本。</p><p>但是！上面我们还是要自己去编写 <code>buildSrc</code>，不免有些麻烦。</p><p>而于此同时，我们也丢失了原先 gradle 会自动提示依赖的版本升级特性。</p><p>那么有没有一种东西能够把这两个东西结合在一起实现文体两开花呢？</p><p>到这里终于进入本篇主题：使用 <code>buildSrcVersions</code> 插件</p><h2 id="3-buildsrcversions-自动生成-buildsrc-目录"><a class="markdownIt-Anchor" href="#3-buildsrcversions-自动生成-buildsrc-目录"></a> 3. buildSrcVersions 自动生成 buildSrc 目录</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ptZmF5YXJkL2J1aWxkU3JjVmVyc2lvbnM=" title="https://github.com/jmfayard/buildSrcVersions"><code>buildSrcVersions</code> 插件的项目地址<i class="fa fa-external-link"></i></span></p><p>首先，我们在根目录的 <code>build.gradle</code> 中引入插件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">plugins &#123;</span><br><span class="line">  id(<span class="string">"de.fayard.buildSrcVersions"</span>) version <span class="string">"0.3.2"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Don't put any code before the buildscripts &#123;&#125; and plugins &#123;&#125; block</span></span><br></pre></td></tr></table></figure><p>这个插件增加了 <code>buildSrcVersions</code> 这个 gradle task。</p><p>运行这个 task，它就会扫描并读取你的依赖项，并以此自动生成 <code>buildSrc</code> 目录。</p><p>运行的结果如下：<br><img alt="buildSrcVersions Result" data-src="https://pic2.superbed.cn/item/5ce99625451253d178df7b87.jpg"></p><p>接下来，我们就可以将 <code>build.gradle</code> 中的依赖换成使用 <code>Libs</code> 进行引用</p><p><img alt="build.gradle with buildSrc" data-src="https://pic.superbed.cn/item/5ce9971a451253d178df821a.jpg"></p><p>可以看到，上面这些依赖都是染了色的，也就是说它们可以直接跳转到对应的定义，而且也可以进行补全。</p><p>同时，<code>buildSrcVersions</code> 还具备检查更新的能力，如果你已经生成过 <code>buildSrc</code> 了，那么再次运行 <code>buildSrcVersions</code> task 就会对你的依赖项进行更新检查，可用的新版本会以注释的形式附在对应依赖项字符串的后面。</p><p><img alt="buildSrcVersions Update" data-src="https://pic.superbed.cn/item/5ce99890451253d178df8c1e.jpg"></p><p>当然，它是不会随便改你的代码的，这个更新它只是进行一下提示，到底要不要使用新版本还是根据项目情况来决定。</p><p>不过，这个好用的插件也是有缺陷的：</p><p>首先，它会生成一个空的 <code>settings.gradle.kts</code> 文件，因为工程中只能有一个 <code>settings.gradle</code>，所以当它为空时还好，但是如果你往里面填东西，就会让 gradle 摸不着头脑，导致编译不稳定</p><p>对此，我们需要让它自动将 <code>settings.gradle</code> 文件删掉，为 <code>buildSrcVersions</code> task 增加一个 <code>doLast()</code> 即可：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasks[<span class="string">"buildSrcVersions"</span>].doLast &#123; delete(<span class="string">"$&#123;rootDir.path&#125;/buildSrc/settings.gradle.kts"</span>) &#125;</span><br></pre></td></tr></table></figure><p>其次，它会导致 <code>build configuration</code> 失败，如图：</p><p><img alt data-src="https://pic.superbed.cn/item/5ce99ac2451253d178df9b03.jpg"></p><p>其原因在于它的进程会占用 <code>build/dependenciesUpdate</code> 导致 <code>task(&quot;clean&quot;)</code> 无法创建。</p><p>虽然不影响工程的 Sync 和构建，但是有这个黄条总归是看的不爽的。</p><p>最后，它并不能自动的帮你改你的 <code>build.gradle</code>，需要你手动修改，当第一次使用这个东西的时候需要打的字还挺多的。</p><p>不过，比起它能自动快速构建 <code>buildSrc</code> 来说，也还算得上是瑕不掩瑜。</p><h2 id="4-一些潜在的坑"><a class="markdownIt-Anchor" href="#4-一些潜在的坑"></a> 4. 一些潜在的坑</h2><p>如果你选择使用 <code>buildSrcVersions</code> 插件，那么请将 Android 构建相关的版本号单独放置在一个新文件中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AndroidVersions.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> AndroidVersions &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> compileSdkVersion = <span class="number">28</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> targetSdkVersion = <span class="number">28</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">val</span> minSdkVersiosn = <span class="number">20</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每次 <code>buildSrcVersions</code> 运行都有可能会替换掉它生成的 <code>Versions.kt</code> 和 <code>Libs.kt</code></p><p>如果你选择自己编写 <code>buildSrc</code> 目录，务必注意以下几件事情：</p><ol><li>使用正确的目录结构</li></ol><blockquote><p><code>buildSrc</code> 遵循默认的 Java/Kotlin 目录结构，即 <code>buildSrc/src/main/java/...</code></p></blockquote><ol start="2"><li>不要忘记加 <code>jcenter()</code></li></ol><blockquote><p>不要忘记在 <code>buildSrc/build.gradle.kts</code> 中增加 <code>jcenter()</code>，否则 <code>kotlin-dsl</code> 插件是加载不成功的</p></blockquote><p>最后，也希望我的这篇文章能给大家提高劳动生产率吧，毕竟谁都想偷懒不是？😆</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归树分析归并排序算法复杂度</title>
      <link href="//Algorithm/%E9%80%92%E5%BD%92%E6%A0%91%E5%88%86%E6%9E%90%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>//Algorithm/%E9%80%92%E5%BD%92%E6%A0%91%E5%88%86%E6%9E%90%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>之前学算法分析的时候只知道通过数语句来计算算法的复杂度，而对于递归算法没有很好的方法；</p><p>由于递归算法通常采用分治思路，每递归一次，子问题在增多，但是子问题的规模在减少，所以如何去计算这种递归类算法的复杂度呢？<br>斯坦福的教授提供了一种使用 <strong>递归树</strong> 的方法。</p><a id="more"></a><h2 id="归并的复杂度"><a class="markdownIt-Anchor" href="#归并的复杂度"></a> 归并的复杂度</h2><p>这里我们采用经典的归并排序算法作为一个例子，使用递归树来分析它的复杂度。</p><p>我们知道，归并排序算法主要分为三个步骤：</p><ol><li>递归左半部分</li><li>递归右半部份</li><li>将排好序的左半边和右半边合并</li></ol><p>对于归并(merge)部分，我们可以很清楚地计算出其复杂度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for k from 0 to N-1:</span><br><span class="line">    if A[i] &lt; B[j]:</span><br><span class="line">        C[k] = A[i]</span><br><span class="line">        i++</span><br><span class="line">    else if B[j] &lt; A[i]:</span><br><span class="line">        C[k] = B[j]</span><br><span class="line">        j++</span><br></pre></td></tr></table></figure><p>首先在循环部分，循环的每一次执行了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">4</span></span></span></span> 次操作，所以一共需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">4N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次操作；</p><p>然后初始化 <code>i</code> 和 <code>j</code> 需要两次操作；</p><p>所以，归并部分一共执行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>N</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">4N + 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span></span></span></span> 次操作，由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N \ge 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8193em;vertical-align:-.13597em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>，所以：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>N</mi><mo>+</mo><mn>2</mn><mo>≤</mo><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">4N + 2 \le 6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.78041em;vertical-align:-.13597em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span></p><p>粗糙一点，我们可以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 作为归并部分的复杂度。</p><h2 id="递归树和归并排序的复杂度"><a class="markdownIt-Anchor" href="#递归树和归并排序的复杂度"></a> 递归树和归并排序的复杂度</h2><p>对于我们的递归程序，我们采用递归树来分析它的复杂度：</p><p><img alt data-src="https://ws3.sinaimg.cn/large/006tNc79gy1fomd2buxgyj30h208vglh.jpg"></p><p>其中，横条表示的是 <strong>输入数据的长度</strong>，根节点的输入规模为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>；</p><p>每进行一次递归，树就向下深入一层；</p><p>那么，根据二叉树结论，树的总层数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\log{N} + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>；</p><p>对于第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span> 层，拥有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>j</mi></msup></mrow><annotation encoding="application/x-tex">2^j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.824664em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.824664em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span></span></span></span> 个节点，同时每个节点的输入规模为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>j</mi></msup></mrow><annotation encoding="application/x-tex">N / {2^j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.824664em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，对于第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span> 层，其执行的操作数为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>j</mi></msup><mo>×</mo><mn>6</mn><mo stretchy="false">(</mo><mi>N</mi><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>j</mi></msup><mo stretchy="false">)</mo><mo>=</mo><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">2^j \times 6(N/2^j) = 6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.957994em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.874664em"><span style="top:-3.1130000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.124664em;vertical-align:-.25em"></span><span class="mord">6</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.874664em"><span style="top:-3.1130000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span></p><p>而二叉树一共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\log{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span> 层，所以，归并排序的总复杂度是：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mn>6</mn><mi>N</mi><mo>=</mo><mn>6</mn><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>+</mo><mn>6</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">(\log{N} + 1) \times 6N = 6N\log{N} + 6N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span></p><p>所以，我们就得到了归并排序的总复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N\log{N})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span><span class="mclose">)</span></span></span></span></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>这里来总结一下使用递归树进行算法分析的步骤：</p><ol><li>计算递归的每一步中的复杂度</li><li>按照递归的分裂程度，画出不同的递归树</li><li>分析 <strong>每一层</strong> 的时间复杂度，重点关注<strong>节点数量</strong>和<strong>该层每节点的输入规模</strong></li><li>每一层的复杂度乘以层数，就是递归算法的总复杂度</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Algorithm Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPG + Yubikey 4 折腾手记</title>
      <link href="//GPG/GPG%20+%20Yubikey%204%20%E6%8A%98%E8%85%BE%E6%89%8B%E8%AE%B0/"/>
      <url>//GPG/GPG%20+%20Yubikey%204%20%E6%8A%98%E8%85%BE%E6%89%8B%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>GPG 相信很多人都折腾过，Yubikey 也有很多人买过；</p><p>但是好像只有老外折腾过 Yubikey + GPG 的；</p><p>最近刚折腾完毕，因为自己不慎还把一个老钥匙搞丢了，现在只能随它去了；</p><p>这里就写写我折腾过程中遇到的坑，前车之鉴，后事之师。</p><a id="more"></a><h2 id="准备-yubikey"><a class="markdownIt-Anchor" href="#准备-yubikey"></a> 准备 Yubikey</h2><p>Yubikey 买不就行了，为什么要单开一个 section 来说呢？</p><p>其实 Yubikey 目前主要有两个系列，一个是 Yubikey 4，一个是 Yubikey NEO。</p><p>这两者有什么区别呢？</p><ol><li>Yubikey 4 不支持 NFC，但是可以支持 4096 bit 的密钥</li><li>Yubikey NEO 支持 NFC，但是只能支持 2048 bit 的密钥</li></ol><p>也就是说，如果你想在手机上用，那么就只能使用 2048 bit 的密钥；</p><p>如果你想更长的密钥，就不能在手机上用。</p><p>当然，除了用于 GPG 的 Smartcard 以外，Yubikey 还可以用于两步验证等其他方面，这就要看你的需求的取舍了，这个东西在你买的时候就要考虑好。</p><h2 id="安装-gpg"><a class="markdownIt-Anchor" href="#安装-gpg"></a> 安装 GPG</h2><p>折腾 GPG 的第一步当然就是安装 GPG，我使用的是 Mac，所以直接安装 <span class="exturl" data-url="aHR0cHM6Ly9ncGd0b29scy5vcmcv" title="https://gpgtools.org/">GPGSuite<i class="fa fa-external-link"></i></span>，然后再用 <code>brew</code> 安装 <code>gnupg</code> 就行了。</p><p>不过，如果你使用 4096 bit 的密钥，那么你需要使用 <code>gpg2</code> 而不是 <code>gpg</code></p><h2 id="编辑卡的信息"><a class="markdownIt-Anchor" href="#编辑卡的信息"></a> 编辑卡的信息</h2><p>把 Yubikey 拿到手之后我们先别忙着生成密钥，首先，我们要配置一下卡的信息，其实主要就是设置卡的 PIN 和 Admin PIN，而这个在要把密钥导入卡的时候需要。</p><p>将卡插入 USB，然后执行 <code>gpg2 --card-edit</code>；</p><p>然后你就会看到卡的相关信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Reader ...........: Yubico Yubikey 4 OTP U2F CCID</span><br><span class="line">Application ID ...: D2760001240102010006046218630000</span><br><span class="line">Version ..........: 2.1</span><br><span class="line">Manufacturer .....: Yubico</span><br><span class="line">Serial number ....: 04621863</span><br><span class="line">Name of cardholder: Wafer Li</span><br><span class="line">Language prefs ...: zh</span><br><span class="line">Sex ..............: 男性</span><br><span class="line">URL of public key : hkp://keys.gnupg.net</span><br><span class="line">Login data .......: omyshokami@gmail.com</span><br><span class="line">Signature PIN ....: 必须</span><br><span class="line">Key attributes ...: rsa4096 rsa4096 rsa4096</span><br><span class="line">Max. PIN lengths .: 127 127 127</span><br><span class="line">PIN retry counter : 3 0 3</span><br><span class="line">Signature counter : 43</span><br><span class="line">Signature key ....: E219 29F0 DEC5 FAEC 434A  91D7 E22B 63C2 E449 298F</span><br><span class="line">      created ....: 2018-01-21 09:31:56</span><br><span class="line">Encryption key....: 20F2 E95E 0107 1097 A853  A5CC E6AB 1330 6FE4 E5D9</span><br><span class="line">      created ....: 2018-01-21 09:31:56</span><br><span class="line">Authentication key: C1A4 2561 3A5D E7D5 4CBF  CD4B 7440 5003 FFA1 4684</span><br><span class="line">      created ....: 2018-01-21 09:32:39</span><br><span class="line">General key info..: pub  rsa4096/E22B63C2E449298F 2018-01-21 Wafer Li (Gmail. Mainly used <span class="keyword">in</span> git) &lt;omyshokami@gmail.com&gt;</span><br><span class="line">sec&gt;  rsa4096/E22B63C2E449298F  创建于：2018-01-21  有效至：2020-01-21</span><br><span class="line">                                卡号：0006 04621863</span><br><span class="line">ssb&gt;  rsa4096/E6AB13306FE4E5D9  创建于：2018-01-21  有效至：2020-01-21</span><br><span class="line">                                卡号：0006 04621863</span><br><span class="line">ssb&gt;  rsa4096/74405003FFA14684  创建于：2018-01-21  有效至：2020-01-21</span><br><span class="line">                                卡号：0006 04621863</span><br></pre></td></tr></table></figure><p>然后输入 <code>admin</code>，再输入 <code>help</code>，就可以使用管理员命令并看到相关帮助：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gpg/card&gt; admin</span><br><span class="line">允许使用管理员命令</span><br><span class="line"></span><br><span class="line">gpg/card&gt; <span class="built_in">help</span></span><br><span class="line">quit           离开这个菜单</span><br><span class="line">admin          显示管理员命令</span><br><span class="line"><span class="built_in">help</span>           显示这份在线说明</span><br><span class="line">list           列出所有可用数据</span><br><span class="line">name           更改卡持有人的姓名</span><br><span class="line">url            更改获取密钥的 URL</span><br><span class="line">fetch          根据卡中指定的 URL 获取密钥</span><br><span class="line">login          更改登录名</span><br><span class="line">lang           更改首选语言首选</span><br><span class="line">sex            更改卡持有人的性别</span><br><span class="line">cafpr          更改一个 CA 指纹</span><br><span class="line">forcesig       设定 PIN 签名是否必须</span><br><span class="line">generate       生成新的密钥</span><br><span class="line">passwd         更改或解锁 PIN 的菜单</span><br><span class="line">verify         验证 PIN 并列出所有数据</span><br><span class="line">unblock        unblock the PIN using a Reset Code</span><br><span class="line">factory-reset  destroy all keys and data</span><br></pre></td></tr></table></figure><p>最近 <code>gpg2</code> 的中文化做的不错，相信你已经看懂大概了，要修改密码，我们输入 <code>passwd</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gpg/card&gt; passwd</span><br><span class="line">gpg: 检测到 OpenPGP 卡号 D2760001240102010006046218630000</span><br><span class="line"></span><br><span class="line">1 - change PIN</span><br><span class="line">2 - unblock PIN</span><br><span class="line">3 - change Admin PIN</span><br><span class="line">4 - <span class="built_in">set</span> the Reset Code</span><br><span class="line">Q - quit</span><br><span class="line"></span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>然后我们分别输入 <code>1</code> 和 <code>2</code> 去修改 PIN 和 Admin PIN。</p><p>接着会弹出一个框让你输入原来的 PIN，那么原来的 PIN 是什么呢？</p><p>根据 Yubikey 的文档，<strong>PIN 和 Admin PIN 的出厂设置都是 12345678</strong>。</p><p>记住这个密码，如果你接下来把东西搞炸了，你还可以把 Yubikey 恢复出厂设置，这时你就需要它了。</p><p>改完密码之后我们选择 <code>Q</code> 和 <code>quit</code> 退出卡的编辑界面，注意不要 <code>Ctrl + C</code>，可能会丢失修改，最好还是使用它的退出来退出。</p><h2 id="生成密钥"><a class="markdownIt-Anchor" href="#生成密钥"></a> 生成密钥</h2><p>现在我们终于要生成密钥了，生成密钥这个很多人都讲过了，操作也就那些，这里就不再细讲，说点要注意的地方。</p><p>首先就是密钥的长度，如果你使用 Yubikey 4 的话，使用 4096 bit 的，如果你使用 Yubikey NEO 的话，那么就只能使用默认的 2048 bit 了。</p><p>但是，如果你以后想换成 Yubikey NEO 的话，那么还是用 2048 的，不要用 4096 的。</p><p>然后在生成密钥的时候为了让它得到更多的熵，多动动鼠标就行了，不需要敲键盘，否则就敲到什么命令了。</p><p>生成完毕之后，输入 <code>gpg2 --expert --edit-key KEYID</code> 进入下一个步骤。</p><h3 id="生成子密钥"><a class="markdownIt-Anchor" href="#生成子密钥"></a> 生成子密钥</h3><p>这个可能很多人没讲过，实际上 Yubikey 可以存储 3 种密钥，签名、加密和认证；</p><p>默认生成的只有签名密钥和加密密钥，并不会生成认证密钥。</p><p>认证密钥有什么用呢？我查到主要还是用于 SSH 登录，不过这次我没有折腾出来，之后可能会写另外一篇关于这个的文章。</p><p>刚才我们进入了 <code>--edit-key</code> 的界面，在这里我们输入 <code>addkey</code> 就可以增加一个子密钥了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gpg&gt; addkey</span><br><span class="line">主钥的私钥部分存储在卡上。</span><br><span class="line">请选择您要使用的密钥种类：</span><br><span class="line">   (3) DSA (仅用于签名)</span><br><span class="line">   (4) RSA (仅用于签名)</span><br><span class="line">   (5) ElGamal (仅用于加密)</span><br><span class="line">   (6) RSA (仅用于加密)</span><br><span class="line">   (7) DSA (自定义用途)</span><br><span class="line">   (8) RSA (自定义用途)</span><br><span class="line">  (10) ECC (sign only)</span><br><span class="line">  (11) ECC (<span class="built_in">set</span> your own capabilities)</span><br><span class="line">  (12) ECC (encrypt only)</span><br><span class="line">  (13) Existing key</span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>这里之所以出现这么多选项是因为我们上面使用了 <code>--expert</code> 模式，如果你要创建认证密钥，那么就必须使用这种模式。</p><p>在这里我们选择 8，用 RSA 算法来生成认证子密钥。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RSA 密钥可能的操作：签名 加密 认证</span><br><span class="line">目前允许的操作：签名 加密</span><br><span class="line"></span><br><span class="line">   (S) 选择是否用于签名</span><br><span class="line">   (E) 选择是否用于加密</span><br><span class="line">   (A) 选择是否用于认证</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>这里给你的选项是个开关选项，像现在的状态，我如果选择 S，上面的 <em>目前允许的操作</em> 就会变成只有加密。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">您的选择？ s</span><br><span class="line"></span><br><span class="line">RSA 密钥可能的操作：签名 加密 认证</span><br><span class="line">目前允许的操作：加密</span><br><span class="line"></span><br><span class="line">   (S) 选择是否用于签名</span><br><span class="line">   (E) 选择是否用于加密</span><br><span class="line">   (A) 选择是否用于认证</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择？</span><br></pre></td></tr></table></figure><p>然后我们让这个密钥只能进行认证，然后生成它就行了。</p><p>最后输入 <code>save</code> 保存并退出。</p><h2 id="备份密钥"><a class="markdownIt-Anchor" href="#备份密钥"></a> 备份密钥</h2><p>注意！</p><p><strong>这个操作必须在将密钥传入 Yubikey 之前进行！</strong></p><p>备份是很重要的，一旦你将密钥传入 Yubikey 中，那么就再也取不出来了！</p><p style="font-weight:700;font-size:x-large">而且尤其注意要备份你的主密钥！</p><p></p><p>你的主密钥不仅具有签名功能，而且还代表了你的身份，如果丢失了主密钥，就意味着你的身份就此丢失，你只能创建一个新的密钥，并把原来的吊销掉。</p><p>这里尤其要注意：</p><p style="font-weight:700;font-size:xx-large">请记住你的密钥 passphrase</p><p></p><p>因为 GPG 在导入一个私钥的时候会要求它的密码，如果你把它忘记了，那么你就丢失了你的密钥。</p><p>使用下面的命令来导出你的私钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --armor --export-secret-keys KEYID &gt;&gt; private.asc</span><br></pre></td></tr></table></figure><p>请好好保存它，并记住它的密码。</p><h2 id="转移密钥到-yubikey"><a class="markdownIt-Anchor" href="#转移密钥到-yubikey"></a> 转移密钥到 Yubikey</h2><p>当你备份并保存好你的主私钥之后，就可以将密钥传入 Yubikey 了。</p><p>当然其实也可以不将主密钥传到 Yubikey 中，不过在有了良好备份的情况下，我们就可以追求更高的安全性，毕竟把你的私钥保存在电脑里面总是不好的。</p><p>进入密钥编辑模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --edit-key KEYID</span><br></pre></td></tr></table></figure><p>输入 <code>toggle</code>，然后输入 <code>keytocard</code>，输入 <code>y</code> 确认将主密钥传入 Yubikey 中，然后选择 <code>1</code>，将主密钥作为签名密钥。</p><p>这时就会把你的主密钥传到 Yubikey 中，这时它就会问你密钥的密码，还有 Yubikey 的 Admin PIN。</p><p>输入 <code>key 1</code> 选择<strong>第二个</strong>密钥：</p><p><img alt data-src="https://ws1.sinaimg.cn/large/006tNc79ly1fnppmejbx9j307b06ft8m.jpg"></p><p>这时候你的第二个密钥就会有个 <code>*</code>，如上图所示。</p><p>然后继续输入 <code>keytocard</code> 将密钥传入，接着选择对应的密钥类型就行了。</p><p>第二个密钥传入完成之后，我们输入 <code>key 1</code> <strong>取消选择第二个密钥</strong>。</p><p><img alt data-src="https://ws4.sinaimg.cn/large/006tNc79ly1fnpppmud1vj307b061q2u.jpg"></p><p>接着，我们再输入 <code>key 2</code> 选择第三个密钥。</p><p><img alt data-src="https://ws4.sinaimg.cn/large/006tNc79ly1fnppq8ms3xj308105lq2u.jpg"></p><p>接着再输入 <code>keytocard</code> 传入 Yubikey，选择对应的密钥类型就行了。</p><h2 id="关于-keytocard-的说明"><a class="markdownIt-Anchor" href="#关于-keytocard-的说明"></a> 关于 keytocard 的说明</h2><p>当你使用了 keytocard 之后会发现，好像你的密钥并没有传出去啊？</p><p>如果你使用 <code>gpg2 --export-secret-keys</code> 也能正常导出，这是怎么回事呢？</p><p>其实，<code>keytocard</code> 的确将你的密钥导出了，但是它在电脑里面留下了一个 stub，这个实际上是没有什么用的。</p><p>使用 <code>gpg2 --export-secret-keys</code> 可以将你的密钥导出，但是，并没有什么卵用，它不是真的私钥，如果你将你的 Yubikey 恢复出厂设置，删掉你的私钥并将这个新导出的导入。</p><p>然后你就会发现你<strong>并没有导入私钥</strong>，在你的钥匙链里面显示的你的密钥是<strong>公钥</strong>，并不是密钥对。</p><p>这也是为什么我一再强调必须备份私钥并记住密码的原因了；</p><p>假如你随便乱搞，没有备份私钥又将 Yubikey 恢复出厂设置，那么你的私钥就彻底丢失了。</p><h2 id="使用密钥"><a class="markdownIt-Anchor" href="#使用密钥"></a> 使用密钥</h2><p>GPG 能干嘛呢？可以给邮件加密，给 Git Commit 签名之类的。</p><p>或者你可以直接用 <code>gpg2 --clearsign</code> 签名一段信息；</p><p>如果你没用 Yubikey，那么 GPG 会直接询问你的密钥 passphrase；</p><p>但是如果你使用了 Yubikey，那么它就不会问你 passphrase，而是问你的 Yubikey PIN 作为密码。</p><p>如果你在 Yubikey 拔掉的时候进行 GPG 签名或者加密操作，那么它就会要求你插入智能卡。</p><p>如果你遇见了上面的情况，那么就说明你的配置成功了。</p><h2 id="yubikey-的支持性"><a class="markdownIt-Anchor" href="#yubikey-的支持性"></a> Yubikey 的支持性</h2><p>目前来看，PC 端(Mac)和 Android 都支持使用 Yubikey；</p><p>但是 Chrome 插件就不行了，还是只能使用 passphrase 解锁私钥。</p><p>这也是为什么要让你记住 passphrase 的原因。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>说了这么多，最后欢迎大家导入我的公钥给我发加密邮件。</p><p>我的密钥是 E449298F<br>指纹：E219 29F0 DEC5 FAEC 434A 91D7 E22B 63C2 E449 298F</p><p>你应该会至少看到 3 个标识，两个邮箱，一个 PhotoID；</p><p>其中邮箱有 Tsanie Lily(1701D0C1) 的签名。</p>]]></content>
      
      
      <categories>
          
          <category> GPG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPG </tag>
            
            <tag> Yubikey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决脚注中数学公式不能渲染的问题</title>
      <link href="//Hexo/%E8%A7%A3%E5%86%B3%E8%84%9A%E6%B3%A8%E4%B8%AD%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%83%BD%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>//Hexo/%E8%A7%A3%E5%86%B3%E8%84%9A%E6%B3%A8%E4%B8%AD%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%83%BD%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近，鉴于性能考量，我从 MathJax 迁移到了 Katex，但是随之而来出现了一个问题，就是脚注里面的数学公式没办法渲染出来。</p><a id="more"></a><p>如图：<br><img alt="Math Cannot Render In Footnote" data-src="https://user-images.githubusercontent.com/12459199/34936577-4bafd6de-fa25-11e7-972d-6f165f2e94ab.png"></p><p>但是，如果我仅仅使用 <code>node</code> 的 REPL 和用于 markdown 渲染的 <code>markdown-it</code> 以及它的两个插件 <code>markdown-it-katex</code> 和 <code>markdonw-it-footnote</code> 分别用于提供 Katex 和脚注功能的话；</p><p>是可以渲染出 Katex 和脚注的 HTML 结构的：</p><p><img alt data-src="https://user-images.githubusercontent.com/12459199/34937236-7d5a1652-fa27-11e7-9601-8ca331a00cde.png"></p><p>这是怎么回事呢？</p><p>经过辛苦的研究之后发现，我的原本的 <code>_config.yml</code> 写的就比较有毒，很多自定义的配置都插在了原来配置的中间，而且缩进格式也不规范。</p><p>后来重新将所有配置都写在原来配置的后面，规范了一下缩进问题就解决了。</p><p>所以大家遇到这种问题的时候最好检查一下自己的 <code>_config.yml</code> 文件有没有格式上的错误，特别是缩进的错误。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Katex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Travis CI 总是更新旧博客的问题</title>
      <link href="//Hexo/%E8%A7%A3%E5%86%B3%20Travis%20CI%20%E6%80%BB%E6%98%AF%E6%9B%B4%E6%96%B0%E6%97%A7%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>//Hexo/%E8%A7%A3%E5%86%B3%20Travis%20CI%20%E6%80%BB%E6%98%AF%E6%9B%B4%E6%96%B0%E6%97%A7%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>本文着重介绍一下如何解决 Travis CI 在进行自动集成的时候，总是会更新旧博客的问题。</p><p>之前有想过要把这篇文章合并到上一篇里面，不过这个问题比较隐蔽，而且较难解决，最后还是新开一篇文章来详细讲一下该怎么做，防止以后有人再被这个问题困扰。</p><a id="more"></a><h2 id="1-初级症状master-的-commit-只有两个"><a class="markdownIt-Anchor" href="#1-初级症状master-的-commit-只有两个"></a> 1. 初级症状——master 的 commit 只有两个</h2><p>在经过上一篇文章的折腾之后，Travis CI 总算是能够正常执行脚本并提交到 GitHub 上进行；</p><p>不过，如果你查看 master 的 commit 情况就会发现，你原本满满当当的页面构建历史突然就只有两个了。</p><p>博客最重要的就是积累，现在一个构建你的博客就变成新博客了，简直不能忍。</p><p>这个问题的原因在于你的博客目录下没有之前 deploy 会生成的 <code>.deploy_git</code> 这个目录；</p><p>这个目录实际上也就是你的 master 分支，在没有这个目录的情况下，<code>hexo-deploy-git</code> 插件会自动生成 <code>.deploy_git</code>，并将 <code>public</code> 复制到这个目录下；</p><p>然后插件会进行 <strong>force push</strong>！这就是你的 commit 历史会丢失的原因！</p><p>解决方法也很简单，首先你需要在本地进行一次 deploy，来恢复你的 commit 历史</p><p>然后，只需要在每次构建的时候都 <code>clone</code> 一下这个目录，这样你的历史就不会丢失了。</p><p>往 <code>.travis.yml</code> 加入如下脚本即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch=master</span> <span class="string">&#123;your_blog_repo_git_url&#125;</span> <span class="string">.deploy_git</span></span><br></pre></td></tr></table></figure><h2 id="2-高级症状旧博客总是被更新"><a class="markdownIt-Anchor" href="#2-高级症状旧博客总是被更新"></a> 2. 高级症状——旧博客总是被更新</h2><p>这个症状是本文的重点，也是本文最终要解决的问题。</p><p>症状的具体表现在于，博客的更新时间总是最新的；</p><p><strong>就连你没有更新过的旧博客也一样！</strong></p><p>如图所示，图片中的更新时间全部都一样，按常理来说这是不可能的。</p><p><img alt data-src="https://ws2.sinaimg.cn/large/006tNc79ly1fnedchdb50j30jn0dg0ta.jpg"></p><p>这到底是什么原因呢？</p><h3 id="21-症状原因"><a class="markdownIt-Anchor" href="#21-症状原因"></a> 2.1 症状原因</h3><p>经过一番查询之后，我查到了<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmphbWVzcGFuLm1lLzIwMTYvMDQvMjQvcmVzdG9yZS1maWxlcy1tb2RpZmljYXRpb24tdGltZS1pbi1naXQ=" title="https://blog.jamespan.me/2016/04/24/restore-files-modification-time-in-git">这篇博文<i class="fa fa-external-link"></i></span>；</p><p>里面提到，Hexo 并不识别文章的更新时间，而是将这个更新时间交给了系统进行；</p><p>实际上 Hexo 的文章更改时间就是 markdown 文件的 <strong>最后修改时间</strong>；</p><p>到这里，原因已经很明显了：</p><p>由于 Travis CI 在构建的时候，总是 <strong>重新 clone repo</strong>，这就造成了 <strong>所有文件的最后修改时间都是最新的 clone 时间</strong>；</p><p>实际上，这并不是 Travis CI 的问题，而是 git 的问题，git 由于分布式的原因，并不会保留文件的最后修改时间；</p><p>不过，作为一个博客系统来说，我们可以采用 git 的最后 commit 时间来替代，这样子就能恢复文件的修改时间了。</p><h3 id="22-解决办法"><a class="markdownIt-Anchor" href="#22-解决办法"></a> 2.2 解决办法</h3><p>解决方案清楚之后我就开始寻找相关的实现，不过网上现有的一步到位修改文件 last modified time 的实现都不能解决 non-ASCII 的问题；</p><blockquote><p>所谓 non-ASCII 的问题就是当你的文件名含有中文或者其他的字符的时候，脚本就会炸掉，执行不下去。</p></blockquote><p>最后面还是毛主席说得好，自己动手丰衣足食，在参照了<span class="exturl" data-url="aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vYS83NzQ1NzQ=" title="https://serverfault.com/a/774574">这个 StackOverflow 的答案<i class="fa fa-external-link"></i></span>之后，我编写了下面的脚本，终于解决了 non-ASCII 文件名的问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ != <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">raise</span> ImportError(<span class="string">"%s should not be used as a module."</span> % __name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'git ls-files -z | xargs -0 -n1 -I&#123;&#125; -- git log -1 --format="%ct &#123;&#125;" &#123;&#125; | sort'</span></span><br><span class="line">git_ls_cmd = <span class="string">'git ls-files -z'</span></span><br><span class="line">xargs_cmd = <span class="string">'xargs -0 -n1 -I&#123;&#125; -- git log -1 --format="%ct &#123;&#125;" &#123;&#125;'</span></span><br><span class="line">sort_cmd = <span class="string">'sort'</span></span><br><span class="line"></span><br><span class="line">work_dir = os.getcwd()</span><br><span class="line"></span><br><span class="line">git_ls_result = subprocess.Popen(shlex.split(git_ls_cmd), stdout=subprocess.PIPE)</span><br><span class="line">xargs_result = subprocess.Popen(shlex.split(xargs_cmd), stdin=git_ls_result.stdout, stdout=subprocess.PIPE)</span><br><span class="line">result = subprocess.check_output(<span class="string">'sort'</span>, stdin=xargs_result.stdout)</span><br><span class="line"></span><br><span class="line">timestamp_file_list = [tuple(it.split(<span class="string">' '</span>, <span class="number">1</span>)) <span class="keyword">for</span> it <span class="keyword">in</span> result.decode(<span class="string">'utf-8'</span>).split(<span class="string">'\n'</span>)][:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> timestamp, file_path <span class="keyword">in</span> timestamp_file_list:</span><br><span class="line">    os.utime(os.path.join(work_dir, file_path), (int(timestamp), int(timestamp)))</span><br></pre></td></tr></table></figure><p>你也可以在<span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vd2FmZXItbGkvYTdhNjJhNDQyM2NmMzljNDNkYzU2ZDYyOGZmNGMzNjU=" title="https://gist.github.com/wafer-li/a7a62a4423cf39c43dc56d628ff4c365">这个 gist<i class="fa fa-external-link"></i></span>里面获取其代码；</p><p>在你把 repo 克隆下来，进行了 <code>user.name</code> 和 <code>user.email</code> 的配置之后，用 <code>python3</code> 执行一下这个脚本，就能恢复文件的最后修改时间。</p><p>相关的 <code>.travis.yml</code> 配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Git Config</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"your_user_name"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"your_email"</span></span><br><span class="line"><span class="comment"># Restore last modified time</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">git_reset_mtime.py</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">python3</span> <span class="string">./git_reset_mtime.py</span></span><br></pre></td></tr></table></figure><blockquote><p>特别注意！<strong>必须使用 <code>python3</code> 执行</strong>，本脚本目前最低支持到 python 3.4</p></blockquote><blockquote><p>之所以是 3.4 是因为 Travis CI 的 python3 的最新版本就只到 3.4；<br>不能采用 3.5 之后才能使用的 <code>subprocess.run()</code></p></blockquote><h3 id="23-clone-depth-导致的问题"><a class="markdownIt-Anchor" href="#23-clone-depth-导致的问题"></a> 2.3 Clone Depth 导致的问题</h3><p>在经过上面的一番折腾之后，你会发现一个奇怪的现象：在本地测试脚本完全成功，但是把脚本放到 Travis CI 去运行却不行， <strong>最多只能恢复几天前的修改时间</strong>。</p><p>在查看了一下 Travis CI 的 log 之后，我发现：</p><p>Travis CI 默认会采用 <code>--depth=50</code> 这个参数，也就是说，它之后克隆 <strong>前 50 个 commit</strong>；</p><p>而我们的脚本需要<strong>完整的 git 历史记录</strong>才能正确的恢复文件的修改时间；</p><p>所以，我们还需要取消 Travis CI 的默认 <code>depth</code> 参数，让它克隆我们完整的 git 仓库:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">    depth:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="3-最终的-travis-ci-脚本"><a class="markdownIt-Anchor" href="#3-最终的-travis-ci-脚本"></a> 3. 最终的 Travis CI 脚本</h2><p>这里给出我最终测试成功的 Travis CI 脚本给大家参考：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dist:</span> <span class="string">trusty</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">    ssh_known_hosts:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">github.com</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">git.coding.net</span></span><br><span class="line"><span class="attr">    apt:</span></span><br><span class="line"><span class="attr">        packages:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">nasm</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">ATOM_WRITER_PATCH_URL=https://raw.githubusercontent.com/wafer-li/hexo-generator-atom-markdown-writer-meta/9f8ab23d42a60a9fa7ef8eed161f216a7716d14d/lib/generator.js</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">ATOM_WRITER_DIR=node_modules/hexo-generator-atom-markdown-writer-meta/</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">TZ=Asia/Tokyo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">source</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">    depth:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    submodules:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">    apt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    directories:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Git Config</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"wafer-li"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"omyshokami@gmail.com"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Restore last modified time</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"git ls-files -z | while read -d '' path; do touch -d \"$(git log -1 --format=\"@%ct\" \"$path\")\" \"$path\"; done"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Submodules</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--recursive</span> <span class="bullet">--remote</span> <span class="bullet">--init</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Deploy history</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch=master</span> <span class="bullet">--single-branch</span> <span class="attr">https://github.com/wafer-li/wafer-li.github.io.git</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSH Setup</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_XXXXXXXXX_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_XXXXXXXXX_iv</span> <span class="bullet">-in</span> <span class="string">blog_deploy_key.enc</span> <span class="bullet">-out</span> <span class="string">blog_deploy_key</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">eval</span> <span class="string">"$(ssh-agent -s)"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">./blog_deploy_key</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ssh-add</span> <span class="string">./blog_deploy_key</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">    <span class="comment"># Patch atom writer generator</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">curl</span> <span class="string">$ATOM_WRITER_PATCH_URL</span> <span class="string">&gt;|</span> <span class="string">$&#123;ATOM_WRITER_DIR&#125;/lib/generator.js</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## Theme Dependencies</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">themes/next-reloaded</span></span><br><span class="line">    <span class="comment"># canvas-nest</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-canvas-nest</span> <span class="string">source/lib/canvas-nest</span></span><br><span class="line">    <span class="comment"># fancybox3</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-fancybox3</span> <span class="string">source/lib/fancybox</span></span><br><span class="line">    <span class="comment"># reading_progress</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-reading-progress</span> <span class="string">source/lib/reading_progress</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">../..</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span> <span class="bullet">-d</span> <span class="bullet">--config</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure><h2 id="4-参考资料"><a class="markdownIt-Anchor" href="#4-参考资料"></a> 4. 参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmphbWVzcGFuLm1lLzIwMTYvMDQvMjQvcmVzdG9yZS1maWxlcy1tb2RpZmljYXRpb24tdGltZS1pbi1naXQ=" title="https://blog.jamespan.me/2016/04/24/restore-files-modification-time-in-git">从 Git 提交历史中「恢复」文件修改时间<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vYS83NzQ1NzQ=" title="https://serverfault.com/a/774574">How to retrieve the last modification date of all files in a git repository<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01lc3RyZUxpb24vZ2l0LXRvb2xzL2Jsb2IvbWFzdGVyL2dpdC1yZXN0b3JlLW10aW1l" title="https://github.com/MestreLion/git-tools/blob/master/git-restore-mtime">git-tools/git-restore-mtime at master · MestreLion/git-tools<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Trivas CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 集成 Travis CI 自动部署博文</title>
      <link href="//Hexo/Hexo%20%E9%9B%86%E6%88%90%20Travis%20CI%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E6%96%87/"/>
      <url>//Hexo/Hexo%20%E9%9B%86%E6%88%90%20Travis%20CI%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>这个想法是我在折腾 Hexo Next 6.0 的时候发现的，有位仁兄在 Next 的新 repo 问如何处理 CI 问题，受到他的启发，我就开始折腾使用 Travis CI 进行博客的自动部署了。</p><a id="more"></a><h2 id="1-为什么要用-ci-来部署博客"><a class="markdownIt-Anchor" href="#1-为什么要用-ci-来部署博客"></a> 1. 为什么要用 CI 来部署博客</h2><p>遇到一项新技术，一个好习惯就是问一下自己 <strong>为什么要用这个新技术</strong>，它带来了什么好处，解决了什么问题？否则就会陷入为了使用新技术而使用新技术的陷阱之中。</p><p>那么为什么要用 CI 来部署呢？好处是显而易见的：</p><p>在未采用 CI 的时候，编写完博客总需要自己手动 <code>hexo g -d</code>，这种工作是重复性的、枯燥的，那么就应当尽量寻找让重复性的工作进行自动化的方法；</p><p>在使用 CI 之后，我只需要执行 <code>git push</code>，将博客的 markdown source 推到远端仓库，剩下的静态页面构建过程就由 CI 接手进行，而不需要我手动打字，而且还占用我的 CPU。</p><p>这虽然方便，但是不禁会有人担心：如果每 push 一次就会自己构建，博客会不会因为 push 上去了一些不好的东西而搞炸了？</p><p>其实这种担心是多余的，只需要在进行了大面积更改的时候先在本地查看一下，如果没有问题就再 push 就行了，这时候虽然需要本地生成，但是你不可能整天重构你的博客，所以 CI 的效率提升还是存在的。</p><h2 id="2-travis-ci-的配置流程"><a class="markdownIt-Anchor" href="#2-travis-ci-的配置流程"></a> 2. Travis CI 的配置流程</h2><p>本博客采用 Travis CI 作为持续集成工具，下面就介绍一下基本的配置流程。</p><p>由于 Travis CI 比较流行，注册和关联 repo 这种操作就不介绍了。</p><h3 id="21-获取相关权限"><a class="markdownIt-Anchor" href="#21-获取相关权限"></a> 2.1 获取相关权限</h3><p>在配置和使用 Travis CI 之前，我们首先要做的就是为 Travis CI 获取其所需要的权限。</p><p>当然，获取所需要的权限有很多种方法，这里推荐两种，分别为 Access Token和 Deploy Key</p><p>这两种各有好处，Deploy Key 的好处在于安全性比较高，Access Token 的好处是较为灵活。</p><p>下面每种都写了推荐使用的 repo，你可以根据你的 repo 的实际情况来选择。</p><h4 id="211-使用-depoly-key-进行部署"><a class="markdownIt-Anchor" href="#211-使用-depoly-key-进行部署"></a> 2.1.1 使用 Depoly Key 进行部署</h4><blockquote><p><strong>本方法适用于大多数的公有博客仓库</strong><br><strong>同时，仓库内不具备私有的子模块</strong><br><strong>建议首选</strong></p></blockquote><p>Deploy Key 是一个 SSH Key，区别于个人 SSH Key 的是，它仅对配置了它的仓库有效；</p><p>也就是说，如果应用使用了 Deploy Key，那么应用的权限就仅限于 repo 之中，准确的来说，是仅限于 repo 的 <strong>文件读写权限</strong>。</p><p>这就给 Deploy Key 带来了很高的安全度，即使 Key 泄漏了，威胁到的也只是设置了它的仓库，而不会威胁帐号本身。</p><p>使用了 SSH Key 也就意味着我们是使用 SSH 和 GitHub 进行连接，那么对 SSH 的配置是必不可少的；</p><h5 id="2111-密钥生成"><a class="markdownIt-Anchor" href="#2111-密钥生成"></a> 2.1.1.1 密钥生成</h5><p>首先我们要生成一对公钥和私钥，这个在很多地方都有操作介绍了，这里就不多讲。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"email"</span> -f key_file -N <span class="string">''</span></span><br></pre></td></tr></table></figure><p>接着，到 repo 的 Settings 里面创建一个 Deploy Key，把公钥的内容粘贴进去。</p><blockquote><p>如果是 <span class="exturl" data-url="aHR0cDovL2NvZGluZy5uZXQ=" title="http://coding.net">coding.net<i class="fa fa-external-link"></i></span> 的话，是配置在 <code>部署公钥</code> 之中。</p></blockquote><p>然后我们把公钥删掉，避免你误把它加入了 git 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f key_file.pub</span><br></pre></td></tr></table></figure><h5 id="2112-使用-travis-命令行程序进行加密"><a class="markdownIt-Anchor" href="#2112-使用-travis-命令行程序进行加密"></a> 2.1.1.2 使用 Travis 命令行程序进行加密</h5><p>密钥显然是不能给别人看的，因此，我们就要把密钥通过 <code>travis</code> 程序加密。</p><p>首先，我们要安装 <code>travis</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><blockquote><p>如果你的 <code>ruby</code> 版本太旧，可能还需要先升级一下。<br><strong>最好在你的 repo 目录下执行 <code>travis</code> 命令</strong><br>方便 <code>travis</code> 自动识别仓库。</p></blockquote><p>然后，我们通过 <code>travis</code> 来登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login</span><br></pre></td></tr></table></figure><p>这是为了让 <code>travis</code> 自动将加密好的东西上传到 Settings 的环境变量中，这样就不用我们配置 <code>.travis.yml</code> 文件了。</p><p>接着，我们对文件进行加密：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt key_file</span><br></pre></td></tr></table></figure><p>随后，我们把生成的 <code>.enc</code> 文件加入 git 中，并把私钥删掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f key_file</span><br><span class="line">git add key_file.enc</span><br></pre></td></tr></table></figure><h5 id="2113-配置-known-hosts-和-ssh"><a class="markdownIt-Anchor" href="#2113-配置-known-hosts-和-ssh"></a> 2.1.1.3 配置 Known Hosts 和 SSH</h5><p>接下来，我们就进行 SSH 的相关配置；</p><p><strong>首先需要配置的是 Known Hosts，否则 CI 就会卡在问你是否要继续那里。</strong></p><p>然后，我们使用 <code>openssl</code> 把之前加密的文件解压成私钥，最后把私钥配置上就行了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">    ssh_known_hosts:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">github.com</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">git.coding.net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># SSH Setup</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_693585a97b8c_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_693585a97b8c_iv</span> <span class="bullet">-in</span> <span class="string">blog_deploy_key.enc</span> <span class="bullet">-out</span> <span class="string">blog_deploy_key</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">eval</span> <span class="string">"$(ssh-agent -s)"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">./blog_deploy_key</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ssh-add</span> <span class="string">./blog_deploy_key</span></span><br></pre></td></tr></table></figure><h4 id="212-获取-access-token"><a class="markdownIt-Anchor" href="#212-获取-access-token"></a> 2.1.2 获取 Access Token</h4><blockquote><p><strong>本方法适用于具有私有 Submodule 的仓库的情况</strong></p></blockquote><p>GitHub 获取 Access Token 的步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Settings -&gt; Developer settings -&gt; Personal access token</span><br><span class="line">-&gt; Generate new token</span><br></pre></td></tr></table></figure><p>接着就进入创建 Access Token 的页面了，对于一个博客的 CI 来说，我们需要的权限比较少，我尝试了一下只需要 <code>public_repo</code> 的权限即可；</p><p>为了尽量保证我们 GitHub 帐号的安全，能少给权限就少给。</p><p>然后我们选择生成，此时会返回到 <code>Personal access token</code> 的页面，并显示我们刚才生成的 access token。</p><blockquote><p>需要注意的是，这个 access token <strong>只会在这一个页面显示一次</strong>，切记要复制下来，否则就只能 <strong>重新生成</strong>。</p></blockquote><p>然后我们到博客 repo 的 Travis CI 设置页面中新建一个环境变量，将这个 Access Token 粘贴到环境变量的 value 中。</p><blockquote><p>这里要注意一定要关掉 <code>Display in log</code> 的选项，否则你的 Access Token 就泄漏了。</p></blockquote><h3 id="22-只构建含有-travisyml-文件的分支"><a class="markdownIt-Anchor" href="#22-只构建含有-travisyml-文件的分支"></a> 2.2 只构建含有 <code>.travis.yml</code> 文件的分支</h3><p>对于本博客而言，我采用单 repo 双分支管理，即一个 <code>source</code> 分支保存原始的 markdown 文件，另一个 <code>master</code> 分支保存用于部署的 HTML。</p><p>对于这种情况，我们就 <strong>必须要</strong> 在 Travis CI 的 <strong>repo 设置页面</strong> 中勾选 <strong>只构建含有 <code>.travis.yml</code> 文件的分支</strong>；</p><p>由于 Travis CI 会侦听 commit 事件进行自动构建，而对于 master 上的 commit，是不含有 <code>.travis.yml</code> 文件也不需要构建的。</p><p>为了防止 Travis CI 构建 master 分支，我们就必须要勾选这个选项。</p><p>有些教程提到使用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">source</span></span><br></pre></td></tr></table></figure><p>也可以起到只构建 <code>source</code> 的功能；<br>不过在我这里这种方法行不通，最后还是使用了只构建含有 <code>.travis,yml</code> 文件的方法。</p><h3 id="23-travisyml-文件的基本配置"><a class="markdownIt-Anchor" href="#23-travisyml-文件的基本配置"></a> 2.3 <code>.travis.yml</code> 文件的基本配置</h3><p>本博客使用的 Hexo 框架是采用 Node.js 技术编写的，所以可以直接套用 Node.js 的 Travis CI 流程。</p><p>下面是一些基本的 Node.js <code>.travis.yml</code> 的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量，注意一个 item 就会构建一次</span></span><br><span class="line"><span class="comment"># 所以一次构建中需要多个环境变量的，也要写到一行里</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ENV_1=xxxxxx</span> <span class="string">ENV_2=yyyyyy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span>   <span class="comment"># 构建的编程语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">node</span>       <span class="comment"># Node.js 的版本，node 表示最新版</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存的目录</span></span><br><span class="line"><span class="comment"># Node.js 项目一般缓存 node_modules</span></span><br><span class="line"><span class="comment"># 用于加快构建速度</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"node_modules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 install 阶段之前执行的命令</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install 阶段，在这里是 npm install</span></span><br><span class="line"><span class="attr">install:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 script 之前执行的命令</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Script 阶段，执行 hexo 相关命令</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span> <span class="bullet">-d</span> <span class="bullet">--config</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure><p>在拥有 <code>.travis.yml</code> 文件后，每次 commit 之后 Travis CI 就会读取这个文件用来进行自动化构建工作</p><h2 id="3-相关的坑"><a class="markdownIt-Anchor" href="#3-相关的坑"></a> 3. 相关的坑</h2><p>当然，Travis CI 的配置不可能这么一帆风顺，还存在着非常多的坑。</p><p>下面就来介绍一下我所遇到的坑，希望给大家以前车之鉴。</p><h3 id="31-git-submodule-的坑"><a class="markdownIt-Anchor" href="#31-git-submodule-的坑"></a> 3.1 Git Submodule 的坑</h3><p>如果你的 GitHub 使用了两步验证，那么你平时肯定是使用 ssh 的地址进行 git 的相关操作；</p><p>但是对于 Travis CI 的虚拟机来说，它不具备你的 SSH key，当然也就不能使用 ssh 地址进行 clone 和 push。</p><p>特别是对于 git submodule，由于 Travis CI 自己可以处理 https 地址的 submodule，但是如果采用 ssh 方式，它根本就无法 clone 下来。</p><p>此时，我们就需要自己手动管理 git submodule，在 <code>.travis.yml</code> 中增加如下选项：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">    submodules:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br></pre></td></tr></table></figure><p>上面的 <code>sed</code> 命令就是将 ssh 地址替换成 https 地址的。</p><p>不过，对于后面的部署阶段，由于要 push 到自己的仓库，所以 deploy 的地址需要修改为 <code>https://&lt;username&gt;:&lt;ACCESS_TOKEN&gt;@github.com/&lt;username&gt;/repo.git</code></p><p>所以，如果使用 <code>hexo-deploy</code> 插件的话，还需要以下的命令：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sed</span> <span class="string">i</span> <span class="string">"s/git@github.com:/https:\/\/yourusername:$&#123;ACCESS_TOKEN&#125;@github.com\//"</span> <span class="string">you_config_file.yml</span></span><br></pre></td></tr></table></figure><p>把上面的 <code>yourusername</code> 和 <code>your_config_file.yml</code> 作出相应修改即可。</p><h3 id="32-安装某些额外程序包"><a class="markdownIt-Anchor" href="#32-安装某些额外程序包"></a> 3.2 安装某些额外程序包</h3><p>如果你使用 <code>hexo-all-minifier</code> 来进行 HTML 的相关文件压缩，那么你就需要额外安装一个系统程序包 <code>nasm</code>。</p><p>Travis CI 对此推出了 <code>addons</code> 选项来方便你配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">  apt:</span></span><br><span class="line"><span class="attr">    packages:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">nasm</span></span><br></pre></td></tr></table></figure><p>这个问题比较难暴露，我查看了很久的 log，最后在 <code>npm install</code> 的 log 里面发现了某个依赖没办法安装；</p><p>最后才发现是缺了一个系统的程序包。</p><h3 id="33-patch-某些-hexo-插件"><a class="markdownIt-Anchor" href="#33-patch-某些-hexo-插件"></a> 3.3 Patch 某些 Hexo 插件</h3><p>有时候你使用的 Hexo 插件有些问题，虽然有人提出了 PR，但是久久没有合并；</p><p>在本地生成的时代，你需要自己手动 patch 这个插件，然而我们现在使用 CI，当然不可能由你进去复制粘贴。</p><p>这时候，我们可以使用 <code>curl</code> 把 patch 文件下载下来，并覆写相关文件。</p><p>通过下面的命令可以进行覆写操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &#123;raw-path-file-url&#125; &gt;| &#123;problem_file&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>&gt;|</code> 符号可以使后面的文件清空，类似于文件操作的 <code>w</code> 选项。</p><h3 id="34-安装-hexo-next-主题的插件"><a class="markdownIt-Anchor" href="#34-安装-hexo-next-主题的插件"></a> 3.4 安装 Hexo Next 主题的插件</h3><p>Hexo Next 在 6.0 之后，把一些原本在 <code>source/lib</code> 中的 js 文件移到了新的 repo 中，以减少 next 本身 repo 的复杂度。</p><p>但是由于 Next 把 <code>source/lib</code> 这个路径 ignore 了，所以我们要手动将插件 clone 到 <code>source/lib</code> 里面。</p><p>在使用 CI 时，我们需要在 <code>hexo g -d</code> 之前将插件装好：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="comment">## Theme Dependencies</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">themes/next-reloaded</span></span><br><span class="line">  <span class="comment"># canvas-nest</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-canvas-nest</span> <span class="string">source/lib/canvas-nest</span></span><br><span class="line">  <span class="comment"># fancybox3</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-fancybox3</span> <span class="string">source/lib/fancybox</span></span><br><span class="line">  <span class="comment"># reading_progress</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/theme-next/theme-next-reading-progress</span> <span class="string">source/lib/reading_progress</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">../..</span></span><br></pre></td></tr></table></figure><p>这里需要注意一下当前工作路径的问题，记得切换回原目录。</p><h3 id="35-时区问题"><a class="markdownIt-Anchor" href="#35-时区问题"></a> 3.5 时区问题</h3><p>Travis CI 好像默认使用的是美国的时区，这样就会让你的 master commit 历史变得很乱。</p><p>所以，我们有必要让 Travis CI 和你的本机时区进行统一</p><p>这个配置比较简单，通过设置 <code>TZ</code> 环境变量即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">TZ=Asia/Tokyo</span></span><br></pre></td></tr></table></figure><blockquote><p>别吐槽我为什么用日本时区，玩游戏需要。</p></blockquote><p>这里需要多说一点的是，如果只有 <code>env</code>，如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ENV1=xxxx</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ENV2=yyyy</span></span><br></pre></td></tr></table></figure><p>此时，Travis CI 就会进行 <strong>两次</strong> 构建，分别采用 <code>ENV1</code> 和 <code>ENV2</code></p><p>而对于 <code>global</code> 的环境变量，就会采取所有的环境变量，只构建一次。</p><h2 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结"></a> 4. 总结</h2><p>经过一段时间的奋战，Travis CI 的集成终于做好了；<br>虽然花费了点时间，不过在折腾的过程中还接触了一下 Travis CI 的配置流程，想必还是有些收获的；</p><p>要不人们总说折腾博客比写博客有趣呢？</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Trivas CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity 基础知识和概述</title>
      <link href="//Solidity/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E6%A6%82%E8%BF%B0/"/>
      <url>//Solidity/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>Solidity 是运行于以太坊(Ethereum) 区块链上的智能合约语言，它是图灵完备的，意味着可以用它写一些任意复杂度的程序并运行于区块链中。</p><a id="more"></a><h2 id="1-区块链基础知识"><a class="markdownIt-Anchor" href="#1-区块链基础知识"></a> 1. 区块链基础知识</h2><p>区块链加密货币的技术基础，本文属于 Solidity，对此不过多介绍，可能在以后会在其他文章进行介绍。</p><h3 id="11-交易"><a class="markdownIt-Anchor" href="#11-交易"></a> 1.1 交易</h3><p>区块链形象的来说就是一个全球共享的交易数据库，这意味着每个人都可以访问这个数据库并发起更改，这个更改就是 <strong>交易</strong>。</p><p>区块链对交易有单一性保证，也就是当你的交易正在提交到数据库的时候，其他的交易不能影响你的交易。</p><p>同时，区块链对交易有完成保证，意思就是一个交易，要不就 <strong>全部完成</strong>，要不就 <strong>都不完成</strong>。不会出现一方余额变动，而另一方却不变的情况。</p><p>其次，一个交易总是由发起方进行密码学方面的签名(signed)，这也就保证交易的来源方的可信赖性。只有拥有对应的密钥键值对，才能从账户中转钱。</p><h3 id="12-区块"><a class="markdownIt-Anchor" href="#12-区块"></a> 1.2 区块</h3><p>交易数据库都有一个需要处理的基本问题：如果两个交易都想清空一个账户的余额怎么办？这在比特币的术语中叫做 <strong>“doble-spend attack”</strong>，也就是交易之间出现了冲突。</p><p>区块链对此作出的回答是， <strong>你不需要担心这种问题</strong>。<br>区块链会对交易的顺序作出选择，此时，这些交易会被捆绑进一个 <strong>区块</strong> 中，当两个交易出现冲突的时候，排在后面的交易就会被抛弃而不会进入区块中。</p><p>这些区块在时间上呈现出一种线性的形状，因而我们将这些区块所构成的系统，也就是上面的交易数据库称为 <strong>区块链</strong></p><p>而区块链中所应用的交易选择机制，也就是交易的公证机制，我们称其为 <strong>挖矿</strong></p><p>之所以称其为挖矿，原因在于新的包含 <strong>你所承认的交易</strong> 的区块是通过一系列的计算得到的，这个新区块的生成很类似从一堆数据中把金子挖出来的过程。</p><p>区块计算成功后，区块链系统会给予挖矿者奖励，在比特币系统中是赠与比特币，以太币系统则是奖励以太币。</p><p>当然，一个区块也有可能会被退回(reverted)，不过是仅当这个区块位于区块链的头部的时候；当越来越多的区块被加到区块链的头部之后，你所计算出的区块被退回的可能性就会越来越低。</p><h2 id="2-以太坊虚拟机evm"><a class="markdownIt-Anchor" href="#2-以太坊虚拟机evm"></a> 2. 以太坊虚拟机(EVM)</h2><p>以太坊虚拟机(Ethereum Virtual Machine) 是以太坊合约(contract)的运行环境，也即 Solidity 的运行环境。</p><p>和普通的虚拟机不同的是，EVM 不是一个沙盒系统，而是 <strong>完全独立的</strong></p><p>运行在 EVM 中的合约不能访问互联网、文件系统或者其他的进程，只能和运行于 EVM 的其他合约进行交互。</p><p>EVM 中有如下概念：</p><h3 id="21-账户accounts"><a class="markdownIt-Anchor" href="#21-账户accounts"></a> 2.1 账户(Accounts)</h3><p>EVM 中有着两种账户：<br>一种称为外来账户(External owned Accounts)，是使用公私有的键值对控制访问的，也就是真实人类控制的帐号。</p><p>另一种称为合约账户(Contract Accounts)，是含有代码的合约控制的帐号，代码被存储在合约中。</p><p>账户通过地址来进行标识；<br>外部账户的地址通过其 public key 来确定；<br>合约账户的地址是在其被创建的时候确定的，通过它的创建者(即交易的发送者)的地址和从创建者地址发送的交易数量来确定。</p><p>EVM 对于这两种账户都是平等对待的，不管它存不存储着代码。</p><p>每个账户都有着一个持久化的 key-value <code>mapping</code>(类似 <code>HashMap</code>)。<code>key</code> 和 <code>value</code> 分别是 256bit words 和 256bit words。这个 <code>mapping</code> 被称为 <code>storage</code></p><p>同时，每个账户都具有 <strong>以太币</strong> 的余额(balance)，可以通过发送以太币的交易来修改。</p><p>两种账户的对比</p><ul><li>外部账户(External Accounts)<ul><li>具有以太币余额</li><li>可以发送交易(可以发送或者触发合约代码)</li><li>使用键值对来控制</li><li>不储存有代码</li></ul></li></ul><hr><ul><li>合约账户(Contract Accounts)<ul><li>具有以太币余额</li><li>储存有代码</li><li>其代码的执行通过交易或者其他合约发送的信息来触发</li><li>当其代码执行时，可以：<ul><li>执行任意复杂度的操作(图灵完备)</li><li>修改其自身的持久性存储(storage)</li><li>调用其他合约</li></ul></li></ul></li></ul><h3 id="22-交易transactions"><a class="markdownIt-Anchor" href="#22-交易transactions"></a> 2.2 交易(Transactions)</h3><p>交易是一个账户发给另一个帐号的消息，交易可以包含二进制的数据(称为它的负载)，和以太币</p><p>如果目标账户具有代码，那么这个代码就会被执行，并且交易会提供其负载充当代码的输入数据。</p><p>如果目标账户是 <strong>零账户(zero-account)</strong>(它的账户的地址是 0)，那么，该交易就会创建一个 <strong>新的合约</strong>。上面已经说过，合约的地址是通过发送者的地址来确定的。</p><p>此时，交易的负载就会充当合约的构建参数，此时，EVM 开始执行构造函数，进行合约的构建，其结果即合约的代码，被存入合约账户中。</p><p>也就是说，不需要传入合约本身的代码即可完成合约的构建</p><h3 id="23-汽油gas"><a class="markdownIt-Anchor" href="#23-汽油gas"></a> 2.3 汽油(Gas)</h3><p>汽油是以太坊用于衡量执行交易的工作量的单位。</p><p>由于发起交易有可能导致合约的执行，代码执行就需要 CS 领域中的时间与空间，即需要矿工的算力来作为支撑。</p><p>为了保证网络中的算力不被大规模消耗和锁死，以太坊中的每一个交易都需要消耗汽油来完成，即交易的 <strong>手续费</strong>。</p><p>之所以称之为 <strong>汽油</strong>，是因为这个“手续费”是需要事先从交易发起者的账户中扣除掉，与该交易绑定，很类似一个汽车加油的过程。</p><p>唯一不同的是，<strong>交易的发起者可以自定义汽油的价格</strong></p><p>也就是说，交易发起者通过事先从账户中扣除一定量的 <strong>以太</strong>，作为充入的汽油；<br>充入的以太费用 = 汽油量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 自定义的汽油价格，汽油量实际上是通过充入的以太费用倒推得到的。</p><p>这也就类似于一个加油的过程。</p><p>然后，矿工开始处理交易，并按照一定的规则 <strong>不断消耗汽油</strong></p><p>当计算完成时，区块被生成，并加入区块链中，矿工得到所消耗的汽油的以太费用作为交易的手续费；<br>同时， <strong>多余的汽油会被退还回交易发起者的账户</strong>。</p><p>但是，如果汽油耗尽，交易还未处理完成的话，那么矿工就会 <strong>回退所有修改</strong>，并将该交易作为 <strong>失败的交易</strong> 加入到区块链中，同时， <strong>收取所有的汽油费用，不退换给发起者。</strong></p><h3 id="24-存储-内存和栈"><a class="markdownIt-Anchor" href="#24-存储-内存和栈"></a> 2.4 存储, 内存和栈</h3><h4 id="241-存储storage"><a class="markdownIt-Anchor" href="#241-存储storage"></a> 2.4.1 存储(Storage)</h4><p>每一个帐号都会具有一个 256bit -&gt; 256 bit 的键值对，这个键值对被称作 <code>storage</code><br>在合约中进行 <code>storage</code> 的遍历和枚举是不可能的，而且在 <code>storage</code>的读写操作都是相对昂贵的。</p><blockquote><p>即通常用于存储一些持久化的数据，所以称作 <code>storage</code></p></blockquote><p>事实上 <code>storage</code> 的读写是十分昂贵的，它需要 20000 gas 进行一次初始化，需要 5000 gas 来进行数据的修改，同时还需要 200 gas 进行一个 word 的读取。</p><p>为什么需要这么贵呢？是因为存储在 <code>storage</code> 的数据是永久保存在区块链中的，需要真实的存储开销。</p><h4 id="242-内存memory"><a class="markdownIt-Anchor" href="#242-内存memory"></a> 2.4.2 内存(Memory)</h4><p>第二个存储类型是 <code>memory</code>，就像内存一样，<code>memory</code> 仅在合约运行中有效，当合约运行完成时，内存就会被清空重置。</p><p>内存是线性的并被字节编码；<br>对于读取操作来说，只能一次性读取 256bit 的数据，即一个 word;<br>而对于写入操作来说，可以写入 8bit 或者 256bit。</p><p>当你读写超过了一个 word 的时候，内存以 word(256bit) 的级别扩大；<br>当然，随着内存的扩大，就要相应收取 gas 作为费用。<br>需要注意的是，内存每扩大一个数量级，都是平方级别的，所以不要过多使用内存，否则会消耗很多 gas。</p><p>相比 <code>storage</code> 来说，<code>memory</code> 的处理开销就便宜很多。<br>它只需要 3 gas 来读写数据，如果内存扩大了那么就收取一些扩容费用的 gas。</p><p>一般来说，内存就是通常的工作用地，基本的，不需要永久存储的东西都可以放到内存中。</p><h4 id="243-栈stack"><a class="markdownIt-Anchor" href="#243-栈stack"></a> 2.4.3 栈(Stack)</h4><p>EVM 不像传统的计算机是一个以寄存器为主的机器，而是以栈为主的机器，所有的计算都在一个被称作 <code>stack</code> 的空间中进行。</p><p>这个栈具有 1024 个元素的容量，而且包含着一些 word。</p><p>对于栈的访问仅限于前 16 个元素；<br>在前 16 个元素中，你可以将任意一个复制到顶部，或者将任意一个元素和顶部的元素做交换。</p><p>其他的操作则是提取顶部元素(可以不止提取一个)进行计算并将结果压入栈中。</p><p>当然，你也可以将栈中的元素移到内存和存储中，不过对于比前 16 个更深一点的元素就不能访问到了，除非你将前 16 个元素移除。</p><p>通常，这个栈中的元素不会使用到，就像函数栈一样由编译器或者解释器来操作。</p><h3 id="25-指令集"><a class="markdownIt-Anchor" href="#25-指令集"></a> 2.5 指令集</h3><p>EVM 的指令集比较简短，所有的指令都是对基本数据类型和 256bit 的字的操作，包含了一般的算术运算、位运算、逻辑运算和比较运算等，同时还可以进行条件跳转和非条件跳转。</p><p>同时，合约还可以访问它所在区块的一些信息比如说区块的编号和区块的时间戳。</p><h3 id="26-信息调用message-calls"><a class="markdownIt-Anchor" href="#26-信息调用message-calls"></a> 2.6 信息调用(Message Calls)</h3><p>合约可以通过 <strong>信息调用</strong> 来调用其他的合约或者给一个非合约账户发送以太币。</p><p>信息调用和交易类似，都具备一个发送者，目标者，数据负载，以太币，汽油和返回的数据。</p><p>事实上，每一个交易都是由 top-level 的信息调用组成的，top-level 的信息调用可以创建其他信息调用。</p><p>合约可以决定通过信息调用所传递的 gas 数量，如果一个 out-of-gas exception 发生的话，调用栈中就会压入一个 error value 来标识异常的发生。</p><p>此时，只有通过该调用传送的 gas 会被消耗掉。同时，发起信息调用的合约会手动引起一个异常，以保证异常栈的呈现。</p><p>上面也说过，被调用的合约会收到一个新鲜的 <code>memory</code> 实例，并可以访问随调用传来的数据负载；</p><p>此时，系统会提供一个额外的空间用于存储这种数据负载，叫做 <code>calldata</code></p><p>当合约代码执行完毕后，它可以将数据返回，而返回的数据会存储在调用者的内存中。</p><p>调用的深度被限制在 <strong>1024</strong>，所以对于一些比较复杂的操作，使用循环会比使用递归要好。</p><h3 id="27-委托调用delegatecall调用代码callcode和库"><a class="markdownIt-Anchor" href="#27-委托调用delegatecall调用代码callcode和库"></a> 2.7 委托调用(Delegatecall)/调用代码(Callcode)和库</h3><p>委托调用是一种特别的信息调用，它可以将调用者的上下文暴露给被调用者。</p><p>下面举一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">contract D &#123;</span><br><span class="line">    unit public n;</span><br><span class="line">    address public sender;</span><br><span class="line"></span><br><span class="line">    function delegatecallSetN(address _e, unit _n) &#123;</span><br><span class="line">        _e.delegatecall(byte4(sha3(&quot;setN(unit256)&quot;)), _n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract E &#123;</span><br><span class="line">    unit public n;</span><br><span class="line">    address public sender;</span><br><span class="line">    funciton setN(unit _n) &#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        sender = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个合约 <code>C</code> 调用 <code>D</code> 的方法时，是 <code>D</code> 的 <code>sender</code> 被设置成了 <code>C</code> ，而不是 <code>E</code> 的方法被设置。</p><p>这就是 delegatecall 和普通调用的区别，它相当于将其他合约的函数引入到了当前合约的作用域中。</p><p>引入这种调用之后，我们就可以在合约中动态调用函数，这也为我们实现 Solidity 的函数库提供了途径。</p><p>不过需要提醒的是，这个 <code>delegatecall</code> 方法是相当低级的方法， <strong>如果不做深入开发可以不管它</strong></p><h3 id="28-日志"><a class="markdownIt-Anchor" href="#28-日志"></a> 2.8 日志</h3><p>EVM 也提供从底层直至区块层级的日志功能，用这些功能来实现 <strong>事件系统</strong></p><p>但是，合约在它被创建之后就不能访问日志数据，不过日志数据可以从区块链的外部被访问。</p><p>一些日志数据被存储在布隆过滤器(bloom filter)中，所以一些轻量级的客户端也可以访问部分的区块链日志。</p><h3 id="29-合约创建"><a class="markdownIt-Anchor" href="#29-合约创建"></a> 2.9 合约创建</h3><p>合约除了通过信息调用来创建以外，还可以通过一个特别的指令来创建。</p><p>指令创建和普通的信息调用创建的区别在于，在指令创建完毕之后，创建者可以获取到新合约的地址。</p><h3 id="210-自毁"><a class="markdownIt-Anchor" href="#210-自毁"></a> 2.10 自毁</h3><p>想要去除区块链中的代码的唯一途径就是通过合约的自毁。</p><p>当合约调用析构指令(<code>selfdestruct</code>) 时，合约账户中剩余的以太币会被发往制定的目标，然后，合约的 <code>storage</code> 和代码就会从区块链中删除。</p><blockquote><p>即使合约代码中不包含 <code>selfdestruct</code> 指令，它也可以通过调用 <code>delegatecall</code> 或者 <code>callcode</code> 指令来执行</p></blockquote><blockquote><p>以太坊客户端似乎还未实现旧合约和旧代码的删除功能。存储节点可以自行选择是否删除合约。</p></blockquote><blockquote><p>当期，外部账户是无法被删除的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> Ethereum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近月少女的礼仪 2.1 感想</title>
      <link href="//Talk/%E8%BF%91%E6%9C%88%E5%B0%91%E5%A5%B3%E7%9A%84%E7%A4%BC%E4%BB%AA%202.1%20%E6%84%9F%E6%83%B3/"/>
      <url>//Talk/%E8%BF%91%E6%9C%88%E5%B0%91%E5%A5%B3%E7%9A%84%E7%A4%BC%E4%BB%AA%202.1%20%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>最近这部 FD 发售之后就忍不住玩了一下；</p><p>会结合本篇《近月少女的礼仪 2》(月に寄りそう乙女の作法２)　来谈一谈感想；</p><p>内有剧透，慎点</p><a id="more"></a><h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>此次发售的 FD 主要包含两条线路：艾斯特线和春心线，不过春心线是打酱油的，就没玩。</p><p>同时收录了前传《近月少女的礼仪0》，讲述大藏衣远学生时代的故事。</p><h2 id="2-内容和感想"><a class="markdownIt-Anchor" href="#2-内容和感想"></a> 2. 内容和感想</h2><p>艾斯特是本篇的女主角，在此 FD 中是着重描写的对象；</p><p>在取得菲丽展最优秀奖之后，两人回老家拜访父母（这基本属于固定流程了），随后回到学院展开第二年的学习生活的事。</p><p>对于本篇的评价中，多有『矛盾冲突不足』的批评；</p><p>相比前作《近月少女的礼仪 1》中暗流涌动的家族纷争，《近月 2》因为主角生长在优渥的环境中，因而在设定背景中缺失了磨炼的土壤，虽有才能，但是远远不及其父母闪耀。</p><p>在 FD 中此问题进一步暴露，由于取得了最优秀奖，班上的设计天才贾斯子开始认真对待设计的作业和考试，因而我们的主角小两口接连落败。</p><p>于是他们终于发现（实际上在本篇结尾也有体现），自己的才能只不过是人家的一个小指头；</p><p>于是一个问题就出现了， <strong>自己无论如何努力，都比不过天才</strong>；</p><p>小两口对此询问了很多的人，包括在公寓的邻居们，还直接向自己的父母求助；</p><p>不过露娜的回复真的比较令人伤心：</p><blockquote><p>「自己从来没有在才能上碰过壁，请随便努力一下吧」</p></blockquote><p>说实话，玩到这里的时候我是比较揪心的，明明自己也拥有耀眼的才能，但是，却只能这样任由其被更耀眼的光芒掩盖吗？</p><p>不过，幸好我们现在是主角小两口，经过和现任校长商量之后（顺便把校长洗白了），决定组成设计师组合『eS』一同向天才挑战！</p><p>不过，既然组成了设计师组合，那么提交设计的时候，就必须放弃一人，另外一人要尽力对设计图做出点检和修正。</p><p>于是很顺理成章的就过渡到是否要放弃自己的恋人身份，以女仆的身份来面对自己的主人兼恋人。</p><p>这个选项可以说是整个近月系列中最为重要和必有的选项</p><blockquote><p>为什么是『必有』？因为这是个伪娘游戏啊！</p></blockquote><p>但是，这个选项第一次承担了 END 分支的作用，而不只是单纯的 CG 回收。</p><p>如果选择了恋人，那么最后，就因为小两口要决出胜负，而双双输给天才贾斯子；</p><blockquote><p>不过即使输给了天才，小两口还是双双获得了二等奖，还是没有决出胜负（笑）</p></blockquote><p>如果选择了女仆，那么因为艾斯特的设计得到了完善，那么就能够战胜贾斯子。</p><p>这里是最让我惊艳的，<strong>如果你不选择被 gang，那么就达不成完美结局。</strong>（看起来官方也很懂玩家的心嘛）</p><p>也许在经过这一次的经历后，我们的才华大少爷才理解并践行了父亲一直以来对他的忠告：「能为谁派上用场是很了不起的事」</p><p>原本由于露娜的原因，我第一次选的时候仍然想让他去和自己的恋人竞争；</p><p>毕竟是樱小路露娜的儿子啊，怎么会输给他人，肯定是心性还不够成熟。</p><p>不过玩到最后，果然我们的主角还是「朝日的女儿」啊（笑）。</p><h2 id="3-亮点"><a class="markdownIt-Anchor" href="#3-亮点"></a> 3. 亮点</h2><ol><li><p>贾斯子和梅宫的百合剧</p><blockquote><p>《梅宫理论及其周边》（笑）</p></blockquote></li><li><p>才华的泳装</p><blockquote><p>我们的才华大小姐越来越漂亮了</p></blockquote></li><li><p>才华走 T 台的衣服</p><blockquote><p>真的好像他妈，差点认错了</p></blockquote></li><li><p>艾斯特的姐姐</p><blockquote><p>走 T 台和妹妹抢就算了，还要和妹妹抢男朋友……</p></blockquote></li></ol><h2 id="4-缺憾"><a class="markdownIt-Anchor" href="#4-缺憾"></a> 4. 缺憾</h2><p>最大的缺憾当然还是前作主要人物露娜和游星 <strong>没有登场</strong></p><p>估计官方还想再捞一笔，毕竟有很多人都期待这两个前作的最主要人物登场；</p><p>毕竟父亲（朝日娘）看到自己儿子女装侍奉另一个主人，想起来就十分有趣！</p><h2 id="5-和一代的比较"><a class="markdownIt-Anchor" href="#5-和一代的比较"></a> 5. 和一代的比较</h2><p>当然，整体剧情的矛盾和跌宕比不上一代是公认的；</p><p>不过，《近月 2》仍不失为一部十分优秀的作品，其中，我们的大少爷（小姐）的复杂性格和追求成功的方式可能更为现实，而不像露娜一样过于虚幻。</p><p>虽说如此，如果要做 《近月 3》的话，剧情安排上势必要起波澜（比如说大藏前家主身亡，衣远独力难支，家族重新陷入动荡和纷争），否则 3 只能是当做炒冷饭作品而已，这样只会砸烂近月的金字招牌。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Galgame </tag>
            
            <tag> 月に寄りそう乙女の作法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再谈单例模式</title>
      <link href="//DesignPattern/%E5%86%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>//DesignPattern/%E5%86%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>之前提到枚举实现是单例的最佳实现，这毋庸置疑；</p><p>不过，对比枚举和静态内部类，好像它们的区别就在于防止了反射攻击；</p><p>那么，都『攻击』了，为啥偏偏没事去改你的单例呢？直接获取更有意思的信息不是更好吗？</p><a id="more"></a><h2 id="1-反射攻击不是攻击"><a class="markdownIt-Anchor" href="#1-反射攻击不是攻击"></a> 1. 『反射攻击』不是攻击</h2><p>这里所提到的『反射攻击』的概念，实际上并不是信息安全领域的 『攻击』 的概念；</p><p>而是， <strong>通过反射的合理利用，可以令单例失效</strong>；</p><p>那么在日常开发中，最常遇到的反射攻击就是 <strong>对象的序列化</strong>。</p><p>当单例需要实现序列化的时候，反序列化过程实际上就是使用 <strong>反射</strong> 来生成了新的实例。</p><p>那么在序列化和反序列化的过程中，单例模式就被破坏掉了。</p><p>这时，有人提出可以利用 <code>readResolve()</code> 方法来防止这种事情的发生；</p><p>而实际上， <strong>单纯利用</strong> <code>readResolve()</code> 也并不能防止单例被破坏；</p><p>《Effective Java 第二版》在 77 条提出：</p><blockquote><p><strong>如果依赖 <code>readResolve()</code> 方法来进行实例控制，带有对象引用类型的所有实例域都必须声明为 <code>transient</code> 的。</strong></p><p>否则，那种破釜沉舟式的攻击者，就有可能在 <code>readResolve()</code> 方法运行之前，保护指向反序列化对象的引用。</p></blockquote><p>此时，枚举类型就派上用场了，枚举为了防止这种事情的发生，单独实现了一套序列化和反序列化的机制；</p><p>大体就是利用 <code>valueOf()</code> 来进行反序列化，而不是使用普通的序列化机制；</p><p>同时，也禁止声明 <code>readResolve()</code> 和 <code>readObject()</code> 这类方法。</p><h2 id="2-kotlin-单例是懒加载的"><a class="markdownIt-Anchor" href="#2-kotlin-单例是懒加载的"></a> 2. Kotlin 单例是懒加载的</h2><p>下面是 Kotlin 单例的反编译 Java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Test INSTANCE;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      INSTANCE = (Test)<span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> Test();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然它和所谓的饿汉式 Java 单例很类似，但是在实际使用中，它是 <strong>懒加载</strong> 的。</p><p>为什么呢？</p><p>原因就在于 JVM 类的加载时机；</p><p>JVM Specification 中在 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U3L2h0bWwvanZtcy01Lmh0bWwjanZtcy01LjQuMg==" title="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.4.2">准备阶段<i class="fa fa-external-link"></i></span> 中提出：</p><blockquote><p>explicit initializers for static fields are executed as part of initialization (§5.5), not preparation.</p></blockquote><p>所以，上面的 <code>INSTANCE</code> 的实例化，即 <code>static</code> 块是在类加载的 <strong>初始化阶段</strong> 进行的；</p><p>而对于初始化阶段，JVM Specification 强制规定了有且仅有 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U3L2h0bWwvanZtcy01Lmh0bWwjanZtcy01LjU=" title="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.5">5 种情况<i class="fa fa-external-link"></i></span> 可以触发初始化阶段；</p><p>而这 5 种情况，都是你真正使用到类的实例的时候才会出现的；</p><p>根据这 5 种情况，再结合 Kotlin <code>object</code> 的单例语法和使用，可以得出有且仅有 2 种情况会导致 <code>object</code> 单例提前进行初始化：</p><ol><li>反射</li><li>调用类中其他的静态变量</li></ol><p>对于反射，一个很典型的应用场景就是使用 classpath scanner 进行注解扫描；</p><p>不过，JB 的工程师提出，classpath scanner 并不需要反射来实现注解扫描<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>；</p><p>于是我随便找了一个 classpath scanner: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1a2VodXRjaC9mYXN0LWNsYXNzcGF0aC1zY2FubmVy" title="https://github.com/lukehutch/fast-classpath-scanner">fast-classpath-scanner<i class="fa fa-external-link"></i></span>；</p><p>经过使用之后，发现即使打印出了单例的信息，但是 JVM 只加载了 <code>main</code> 方法的类，而并没有加载单例。</p><p>相关的结果在 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vd2FmZXItbGkvMTkzMTE3MGZkNzljMGVjMTU2N2Y1NzM3NDU0ZjYxYWI=" title="https://gist.github.com/wafer-li/1931170fd79c0ec1567f5737454f61ab">这个 gist<i class="fa fa-external-link"></i></span> 中。</p><blockquote><p>单例的名字叫 <code>Test</code>，而 <code>main()</code> 方法类的名字叫 <code>SingletonTest</code></p></blockquote><p>对于第二种情况，在 Kotlin 中是不存在的。为什么呢？</p><p>因为对于 Kotlin <code>object</code> 中，声明值的方法只有 <code>var</code> <code>val</code> 和 <code>const val</code> 三种；</p><p>对于前两种，虽然反编译出来的代码指明这样的确定义了两个静态的值；</p><p><code>var</code> 的情况：</p><p><img alt data-src="https://ws3.sinaimg.cn/large/006tNbRwgy1ffzakmwghkj30rc0uotax.jpg"></p><p><code>val</code> 的情况：</p><p><img alt data-src="https://ws4.sinaimg.cn/large/006tNbRwgy1ffzalhmszqj30rs0ty40u.jpg"></p><p>但是，当你使用的时候，却是通过 <code>INSTANCE</code> 来引用的。</p><p>这样无论如何都会导致单例的实例化。</p><p>而使用 <code>const val</code> 的确得到了一个 <code>public static</code> 的值；</p><p>但是，当你使用的时候，编译器会自动替换为 <strong>字面量</strong>，不会导致单例加载；</p><p><img alt data-src="https://ws1.sinaimg.cn/large/006tNbRwgy1ffzamh0h4pj30tc0q276e.jpg"></p><p>所以，综上所述，Kotlin 中 <code>object</code> 单例是懒加载的。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9kaXNjdXNzLmtvdGxpbmxhbmcub3JnL3Qva290bGluLXNpbmdsZXRvbi1pbXBsZW1lbnRhdGlvbi8yODUzLzY/dT1vbXlzaG8=" title="https://discuss.kotlinlang.org/t/kotlin-singleton-implementation/2853/6?u=omysho">https://discuss.kotlinlang.org/t/kotlin-singleton-implementation/2853/6?u=omysho<i class="fa fa-external-link"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit2 + Rxjava2</title>
      <link href="//Android/Retrofit/Retrofit2%20+%20Rxjava2/"/>
      <url>//Android/Retrofit/Retrofit2%20+%20Rxjava2/</url>
      
        <content type="html"><![CDATA[<p>Retrofit 和 Rxjava 结合应该算得上是 Rxjava 在 Android 应用得最广泛的一个方面了。</p><p>这里就来讲讲关于这两个库具体组合的用法。</p><a id="more"></a><h2 id="1-添加依赖"><a class="markdownIt-Anchor" href="#1-添加依赖"></a> 1. 添加依赖</h2><p>具体需要添加的依赖库有： <code>Retrofit2</code>、<code>Rxjava2</code>、<code>RxAndroid2</code>、<code>Gson</code> 、<code>Rtrofit2</code> 到 <code>Rxjava2</code> 的转换器、<code>Retrofit2</code> 到 <code>Gson</code> 的转换器</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrofit</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.2.0'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'com.squareup.retrofit2'</span>, <span class="string">name:</span> <span class="string">'converter-gson'</span>, <span class="string">version:</span> <span class="string">'2.2.0'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'com.squareup.retrofit2'</span>, <span class="string">name:</span> <span class="string">'adapter-rxjava2'</span>, <span class="string">version:</span> <span class="string">'2.2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Rx*</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxjava:2.1.0'</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxkotlin:2.0.1-RC1'</span></span><br></pre></td></tr></table></figure><p>其中，<code>Gson</code> 是 JSON 解析库，也可以使用 <code>Jackson</code> 替代；</p><p>上面的 <code>rxkotlin</code> 是 <code>Rxjava</code> 的 <code>Kotlin</code> 轻量支持库；</p><p>如果不使用 Kotlin 可以无视。</p><h2 id="2-构建-api"><a class="markdownIt-Anchor" href="#2-构建-api"></a> 2. 构建 API</h2><p>使用 <code>Retrofit</code> 的第一步当然就是构建 API 接口；</p><p>不过既然我们使用的是 Rxjava2，那么，这个 API 接口当然就稍微有点不一样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TrendingApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">"&#123;language&#125;"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getTrending</span><span class="params">(<span class="meta">@Path(<span class="meta-string">"language"</span>)</span> language: <span class="type">String</span> = <span class="string">"."</span>, <span class="meta">@Query(<span class="meta-string">"since"</span>)</span> since: <span class="type">String</span>)</span></span></span><br><span class="line">            : Observable&lt;ResponseBody&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们 API 返回的是一个 <code>Observable&lt;T&gt;</code> 对象，而非通常的 <code>Call&lt;T&gt;</code> 对象。</p><p>对于这个 <code>Observable</code>，假设我们的 Body 对象为 <code>T</code>，那么 <code>Observable</code> 一共有以下的几种可能情况：</p><ul><li><code>Observable&lt;T&gt;</code></li><li><code>Observable&lt;Response&lt;T&gt;&gt;</code></li><li><code>Observable&lt;Result&lt;T&gt;&gt;</code></li></ul><p>前两个自然不用说，第三个 <code>Result</code> 是 <code>Response&lt;T&gt;</code> 和 <code>Throwable</code> 的包装对象；</p><p>也就是说，如果使用 <code>Result</code> 的话，我们可以在 <code>onNext()</code> 中同时处理正常情况和异常情况。</p><blockquote><p>所谓的异常情况指的是抛出了 Exception</p></blockquote><h2 id="3-三种-observable-的区别"><a class="markdownIt-Anchor" href="#3-三种-observable-的区别"></a> 3. 三种 <code>Observable</code> 的区别</h2><p>那么这三种 <code>Observable</code> 究竟有什么区别呢？</p><p>我们来看看具体 <code>adapter-rxjava2</code> 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;Response&lt;R&gt;&gt; responseObservable = isAsync</span><br><span class="line">      ? <span class="keyword">new</span> CallEnqueueObservable&lt;&gt;(call)</span><br><span class="line">      : <span class="keyword">new</span> CallExecuteObservable&lt;&gt;(call);</span><br><span class="line"></span><br><span class="line">  Observable&lt;?&gt; observable;</span><br><span class="line">  <span class="keyword">if</span> (isResult) &#123;</span><br><span class="line">    observable = <span class="keyword">new</span> ResultObservable&lt;&gt;(responseObservable);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBody) &#123;</span><br><span class="line">    observable = <span class="keyword">new</span> BodyObservable&lt;&gt;(responseObservable);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observable = responseObservable;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从这段代码可以看到，默认的情况就是 <code>Observable&lt;Response&lt;T&gt;&gt;</code>；</p><p>而这个默认的 <code>Observable</code> 是通过执行 <code>CallEnqueueObservable</code> 或者 <code>CallExecuteObservable</code> 得到的。</p><p>然后再通过判断 <code>Observable</code> 的包装状态，对上面得到的 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 进行转换。</p><h3 id="31-observablet"><a class="markdownIt-Anchor" href="#31-observablet"></a> 3.1 <code>Observable&lt;T&gt;</code></h3><p>首先来看我们的 <code>BodyObservable</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">  upstream.subscribe(<span class="keyword">new</span> BodyObserver&lt;T&gt;(observer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在 <code>subscribeActual()</code> 中，对我们传入的 <code>observer</code> 封装了一层外壳 <code>BodyObserver</code>；</p><p>然后将其传入上层的 <code>subscribe</code> 中，以启动网络请求。</p><p>这层外壳正是这个 <code>Adapter</code> 的关键所在，通过使用另一个对象，来处理不同的网络情况，然后再委派到我们真正传入的 <code>observer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyObserver</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Response</span>&lt;<span class="title">R</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> R&gt; observer;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> terminated;</span><br><span class="line"></span><br><span class="line">  BodyObserver(Observer&lt;? <span class="keyword">super</span> R&gt; observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observer = observer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">    observer.onSubscribe(disposable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">      observer.onNext(response.body());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      terminated = <span class="keyword">true</span>;</span><br><span class="line">      Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        observer.onError(t);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">        Exceptions.throwIfFatal(inner);</span><br><span class="line">        RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!terminated) &#123;</span><br><span class="line">      observer.onError(throwable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// This should never happen! onNext handles and forwards errors automatically.</span></span><br><span class="line">      Throwable broken = <span class="keyword">new</span> AssertionError(</span><br><span class="line">          <span class="string">"This should never happen! Report as a bug with the full stacktrace."</span>);</span><br><span class="line">      <span class="comment">//noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only.</span></span><br><span class="line">      broken.initCause(throwable);</span><br><span class="line">      RxJavaPlugins.onError(broken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，其实这层壳处理的并不是我们的 <code>Body</code> 对象，而是之前使用 <code>Call</code> 调用时返回的 <code>Response</code> 对象。</p><p>我们重点来看看 <code>onNext()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">    observer.onNext(response.body());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    terminated = <span class="keyword">true</span>;</span><br><span class="line">    Throwable t = <span class="keyword">new</span> HttpException(response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      observer.onError(t);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">      Exceptions.throwIfFatal(inner);</span><br><span class="line">      RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当成功访问并响应的时候(2xx)，结果返回给了我们的 <code>onNext()</code> ；</p><p>而当成功访问但不成功响应的时候(4xx/5xx)，返回的结果通过 <code>HttpException</code> 的包装，然后返回给了我们的 <code>onError()</code> 方法。</p><p>而当这个壳子中出现 <code>onError()</code> 时，意味着可能出现了断网的情况，或者其他异常；</p><p>此时也是通过 <code>onError()</code> 返回到我们的观察者中。</p><p>结论：</p><ul><li>2xx 结果通过 <code>onNext()</code> 返回</li><li>4xx/5xx 结果通过 <code>onError()</code> 返回</li><li>断网和其他异常情况也通过 <code>onError()</code> 返回</li></ul><h3 id="32-observableresultt"><a class="markdownIt-Anchor" href="#32-observableresultt"></a> 3.2 <code>Observable&lt;Result&lt;T&gt;&gt;</code></h3><p><code>Result</code> 是 <code>adapter-rxjava2</code> 新增的包装类，包装了 <code>error</code> 和 <code>response</code> ；</p><p>关于它具体如何工作的，我们来看看它的源码：</p><p>首先是 <code>Result</code> 类，下面的是 <code>ResultObservable</code> 使用到的静态工厂方法和 <code>Result</code> 的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">error</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"error == null"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">null</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">response</span><span class="params">(Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (response == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"response == null"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(response, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Response&lt;T&gt; response;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Throwable error;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(Response&lt;T&gt; response, Throwable error)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.response = response;</span><br><span class="line">  <span class="keyword">this</span>.error = error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>error</code> 和 <code>response</code> 是不共戴天的关系，符合 <code>Retrofit</code> 的设计。</p><p>下面我们来看看具体的 <code>ResultObservable</code> 的包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultObserver</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Response</span>&lt;<span class="title">R</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> Result&lt;R&gt;&gt; observer;</span><br><span class="line"></span><br><span class="line">    ResultObserver(Observer&lt;? <span class="keyword">super</span> Result&lt;R&gt;&gt; observer) &#123;</span><br><span class="line">      <span class="keyword">this</span>.observer = observer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">      observer.onSubscribe(disposable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Response&lt;R&gt; response)</span> </span>&#123;</span><br><span class="line">      observer.onNext(Result.response(response));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        observer.onNext(Result.&lt;R&gt;error(throwable));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          observer.onError(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">          Exceptions.throwIfFatal(inner);</span><br><span class="line">          RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这回，重点在 <code>onError</code> 方法；</p><p>通过重载 <code>onError</code> 并使用 <code>Result</code> 的静态工厂；</p><p>让我们的 <code>observer</code> 也能通过 <code>onNext</code> 获取到具体的 <code>Throwable</code>；</p><p>也就是说，我们可以在 <code>onNext()</code> 处理网络错误。</p><p>而当更严重的错误发生时，<code>onError()</code> 才会被调用</p><p>结论：</p><p>网络异常和正常的网络内容都通过 <code>onNext()</code> 进行处理。</p><h3 id="33-observableresponset-的获取"><a class="markdownIt-Anchor" href="#33-observableresponset-的获取"></a> 3.3 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 的获取</h3><p>那么作为关键的 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 对象是从哪里获取的呢？</p><p>让我们将目光转向在开头的两个 <code>Call</code> 开头的 <code>Observable</code>；</p><p>很容易知道，一个对应了 <code>Retrofit</code> 的 <code>call.execute()</code>；</p><p>而另外一个对应了 <code>call.enqueue()</code></p><p>为了简便，我们只看 <code>execute()</code> 部分的源码：</p><p>下面就是关键的 <code>subscribeActual</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Response&lt;T&gt;&gt; observer)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Since Call is a one-shot type, clone it for each new observer.</span></span><br><span class="line">  Call&lt;T&gt; call = originalCall.clone();</span><br><span class="line">  observer.onSubscribe(<span class="keyword">new</span> CallDisposable(call));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> terminated = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Response&lt;T&gt; response = call.execute();</span><br><span class="line">    <span class="keyword">if</span> (!call.isCanceled()) &#123;</span><br><span class="line">      observer.onNext(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!call.isCanceled()) &#123;</span><br><span class="line">      terminated = <span class="keyword">true</span>;</span><br><span class="line">      observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    Exceptions.throwIfFatal(t);</span><br><span class="line">    <span class="keyword">if</span> (terminated) &#123;</span><br><span class="line">      RxJavaPlugins.onError(t);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!call.isCanceled()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        observer.onError(t);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable inner) &#123;</span><br><span class="line">        Exceptions.throwIfFatal(inner);</span><br><span class="line">        RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, inner));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过调用 <code>call.execute()</code> 获取 <code>Response</code> 对象；</p><p>然后将获取到的 <code>Response</code> 对象进行传递，就实现了一个 <code>Observable</code> 的功能。</p><h3 id="34-原理和结论"><a class="markdownIt-Anchor" href="#34-原理和结论"></a> 3.4 原理和结论</h3><p>通过以上的源码解读，我们得出了 <code>adapter-rxjava2</code> 的具体原理：</p><p>首先通过 <code>CallExecuteObservable</code> 获取到 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 对象；</p><p>然后根据不同的 <code>Observable</code> 类型对这个对象进行变换，最后传出，得到了我们需要的 <code>Observable</code>；</p><p>在调用 <code>Observable.subscribe(observer)</code> 时；</p><p>首先是最外层的 <code>subscribeActual()</code> 被调用；</p><p>然后被层层传递，直到 <code>CallExecuteObservable</code> 的 <code>subscribeActual()</code> 调用 <code>call.execute()</code>；</p><p>然后将 <code>Response</code> 向下进行层层传递，完成了整个订阅流程。</p><p>结论：</p><ol><li><p>只有最后 <code>subscribe()</code> 调用，才会触发网络请求</p><blockquote><p>在此之前可以先保留 <code>Observable</code> 对象；<br>直到需要的时候再进行调用</p></blockquote></li><li><p><code>Observable&lt;T&gt;</code> 的 2xx 结果在 <code>onNext()</code> 调用，4xx/5xx 结果在 <code>onError()</code> 调用</p></li><li><p><code>Observable&lt;Result&lt;T&gt;&gt;</code> 的 <code>error</code> 和 <code>response</code> 都在 <code>onNext()</code> 调用</p></li></ol><h2 id="4-创建-retrofit-实例"><a class="markdownIt-Anchor" href="#4-创建-retrofit-实例"></a> 4. 创建 <code>Retrofit</code> 实例</h2><p>当我们的 API 创建好之后，我们就可以开始创建 <code>Retrofit</code> 实例；</p><p>为了能够使用 Rxjava，必须给 <code>Retrofit</code> 加上 <code>CallAdapterFactory</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> retrofitBuilder: Retrofit.Builder =</span><br><span class="line">         Retrofit.Builder()</span><br><span class="line">                 .baseUrl(BASE_URL)</span><br><span class="line">                 .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                 .addConverterFactory(GsonConverterFactory.create(gson))</span><br></pre></td></tr></table></figure><p>这里来说一下有关 <code>RxJava2CallAdapterFactory</code> 的几个 <code>create()</code> 的区别；</p><p>这个工厂一共有三个静态构造方法：</p><ul><li><code>create()</code></li><li><code>createAsync()</code></li><li><code>createScheduler(scheduler)</code></li></ul><p>第一个是产生一个同步的 <code>Adapter</code>，相当于调用 <code>call.execute()</code>；</p><p>同时，也不对 <code>call.execute()</code> 的线程进行提前控制。</p><p>第二个是产生一个异步的 <code>Adapter</code>，相当于调用 <code>call.enqueue()</code>；</p><blockquote><p><strong>此时，<code>Observable</code> 的 <code>subscribeOn()</code> 方法失效</strong></p></blockquote><p>第三个是指定一个 <code>Scheduler</code>，让 <code>Adapter</code> 产生的 <code>Observable</code> 一开始就 <code>subscribeOn</code> 到那个线程上。</p><h2 id="5-调用网络-api"><a class="markdownIt-Anchor" href="#5-调用网络-api"></a> 5. 调用网络 API</h2><p>终于，我们可以开始对构建起来的 API 进行调用了，调用的方法和 Rxjava 的普通使用无异；</p><p>下面给出一个基本的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApiManager.createTrendingService(TrendingApi::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                   .<span class="title">getTrending</span>(<span class="title">since</span>)</span></span><br><span class="line"><span class="class">                   .<span class="title">subscribeOn</span>(<span class="title">Schedulers</span>.<span class="title">io</span>())</span></span><br><span class="line"><span class="class">                   .<span class="title">observeOn</span>(<span class="title">AndroidSchedulers</span>.<span class="title">mainThread</span>())</span></span><br><span class="line"><span class="class">                   .<span class="title">subscribe</span>(<span class="title">observer</span>)</span>;</span><br></pre></td></tr></table></figure><p>这里，让我们的网络请求在 <code>io()</code> 线程上发生；</p><p>然后在 Android 的主线程进行回调；</p><p>需要注意的是，我们需要使用 <code>AndroidSchedulers</code> 来进行主线程的指定。</p><blockquote><p>特别需要注意的是，<code>observeOn()</code> 是可以多次指定的<br>如果你需要对结果进行变换操作<br>请务必将 <code>observeOn()</code> 紧挨在 <code>subscribe()</code> 进行设置<br>否则就会在主线程进行请求的变换操作</p></blockquote><h2 id="6-取消请求"><a class="markdownIt-Anchor" href="#6-取消请求"></a> 6. 取消请求</h2><p>讲了这么多都是在讲发起请求，那么该如何取消请求呢？</p><p>没有了 <code>Call</code> 对象，我们该如何取消已经发出去的请求呢？</p><p>实际上 <code>adapter-rxjava2</code> 已经考虑到了这一点。</p><p>在 <code>CallExecuteObservable</code> 中，它向 <code>observer</code> 的 <code>onSubscribe()</code> 传入了一个 <code>CallDisposable</code> 对象；</p><p>通过这个 <code>CallDisposable</code>，当我们取消订阅时，就会自动地将请求取消。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CallDisposable</span> <span class="keyword">implements</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Call&lt;?&gt; call;</span><br><span class="line"></span><br><span class="line">   CallDisposable(Call&lt;?&gt; call) &#123;</span><br><span class="line">     <span class="keyword">this</span>.call = call;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     call.cancel();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDisposed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> call.isCanceled();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>所以，只要在 <code>onSubscribe()</code> 中获取到 <code>Disposable</code> 对象；</p><p>通过调用 <code>dispose()</code> 就能取消请求。</p><h2 id="7-其他"><a class="markdownIt-Anchor" href="#7-其他"></a> 7. 其他</h2><p><code>adapter-rxjava2</code> 除了支持 <code>Observable</code> 以外，还支持了 <code>Flowable</code>、<code>Single</code> 和 <code>Maybe</code> 等对象；</p><p>由于原理都是类似的，在这里就不详细展开了。</p><blockquote><p>不过，请务必注意 <code>Flowable</code> 和 <code>Observable</code> 的区别。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Retrofit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Rxjava2 </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rxjava2 坑点详解</title>
      <link href="//Rxjava/Rxjava2%20%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>//Rxjava/Rxjava2%20%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Rxjava，是一个响应式的(Reactive)，基于观察者模式的异步框架。</p><p>除此之外，还有其他的 RxScala 和 RxSwift 等。</p><blockquote><p>说起来现在已经 2017 年了，应该没有什么 Java 工程师不知道什么是 Rxjava 了吧</p></blockquote><a id="more"></a><p>网上关于 Rxjava 的文章已经非常多了， 如果你没有了解过 Rxjava；</p><p>那么请直接到文章最后看一些资料和教程；</p><p>这里就主要来讲讲一些 Rxjava2 的坑点。</p><h2 id="1-observable-和-flowable"><a class="markdownIt-Anchor" href="#1-observable-和-flowable"></a> 1. <code>Observable</code> 和 <code>Flowable</code></h2><p>Rxjava2 新增了一个 <code>Flowable</code>，看起来 API 调用和 <code>Observable</code> 类似，而且官方的 README 上都是 <code>Flowable</code> 的示例教程；</p><p>那么很自然的就会联想到 <code>Flowable</code> 是 <code>Obserable</code> 的替代用品；</p><p>它们的 API 调用没有什么区别；</p><p>如果你这么想那就是 <strong>大错特错</strong>！</p><p>它们俩存在一个很大的区别就是关于背压问题的处理。</p><h3 id="11-什么是背压backpressure"><a class="markdownIt-Anchor" href="#11-什么是背压backpressure"></a> 1.1 什么是背压(backpressure)</h3><p>在异步任务中，经常会出现一种情况：生产者生产产品过快，而消费者消费速率不同；</p><p>如果不做处理，那么接收端就会被发送端淹没，或者发送端堆积一大堆事件无法处理，最终导致内存爆炸。</p><p>在计算机网络中，对于这种情况的最简单处理就是采用停等模型，直到收到接收端的回报之后，才发送下一个数据。</p><p>而背压，指的就是这样一种处理策略：</p><p>通过将默认的被动接受事件的模式变成 <strong>主动请求事件</strong> ，从而避免接收端处理不及而被淹没或者 OOM 的问题。</p><h3 id="12-关于背压的不同处理"><a class="markdownIt-Anchor" href="#12-关于背压的不同处理"></a> 1.2 关于背压的不同处理</h3><p>那么两者具体的区别就是：</p><ol><li><p><code>Flowable</code> 是有背压策略的，需要<strong>主动请求事件发送</strong></p></li><li><p>而 <code>Observable</code> 是没有背压策略的，事件会自动发送，多了就会 OOM</p></li></ol><h3 id="13-具体的例子"><a class="markdownIt-Anchor" href="#13-具体的例子"></a> 1.3 具体的例子</h3><p>Observable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">          .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// Disposable 用来取消订阅</span></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure><p><code>Observable</code> 对应的是 <code>Observer</code>；</p><p>这个写法是没有背压控制的，如果事件过多会 OOM</p><p>Flowable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    Subscription sub;</span><br><span class="line">    <span class="comment">//当订阅后，会首先调用这个方法，其实就相当于onStart()，</span></span><br><span class="line">    <span class="comment">//传入的Subscription s参数可以用于请求数据或者取消订阅</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onsubscribe start"</span>);</span><br><span class="line">        sub=s;</span><br><span class="line">        sub.request(<span class="number">1</span>);</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onsubscribe end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer o)</span> </span>&#123;</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onNext---&gt;"</span>+o);</span><br><span class="line">        sub.request(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.w(<span class="string">"TAG"</span>,<span class="string">"onComplete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Flowable</code> 对应的是 <code>Subscriber</code></p><p>可以看到，在具体的回调方法中，我们需要使用 <code>request()</code> 来指示上游的数据传输。</p><p>否则， <strong>数据是不会自动传输的</strong>。</p><p>还有一个有趣的地方在于上面代码的输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onsubscribe start</span><br><span class="line">onNext---&gt;0</span><br><span class="line">onNext---&gt;1</span><br><span class="line">onNext---&gt;2</span><br><span class="line">...</span><br><span class="line">onNext---&gt;10</span><br><span class="line">onComplete</span><br><span class="line">onsubscribe end</span><br></pre></td></tr></table></figure><p>可以看到，<code>onNext</code> 在 <code>onSubscribe</code> 方法 <strong>并没有执行完毕</strong> 就开始调用了。</p><p>具体来说，是在 <code>request()</code> 之后，<code>onNext</code> 方法就立即被执行了；</p><blockquote><p>不过在实践中也不一定是这样的结果</p></blockquote><p>所以千万要注意，在 <code>request()</code> 之前就要将所有的初始化工作做好。</p><h2 id="2-线程调度"><a class="markdownIt-Anchor" href="#2-线程调度"></a> 2. 线程调度</h2><p>能够对线程进行自由调度是 Rxjava 的一大优势；</p><p>但是，由于 Rxjava 的 API 是流式调用，所以很可能会出现线程调度的坑。</p><p>具体来说，Rxjava 通过 <code>subscribeOn()</code> 和 <code>observeOn()</code> 来实现对线程的调度；</p><p>其中，<code>subscribeOn()</code> 指定的是数据的生产线程；</p><p><code>observeOn()</code> 指定的是数据的消费线程。</p><p>但是，一个很重要的区别在于：</p><ol><li><p><code>subscribeOn()</code> 只能指定一次</p><blockquote><p>如果多次指定，则以第一次为准</p></blockquote></li><li><p><code>observeOn()</code> 可以指定多次</p><blockquote><p>每指定一次，其之后流式操作所在的线程就会是指定的线程</p></blockquote></li></ol><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(getFilePath())</span><br><span class="line">           <span class="comment">//指定在新线程中创建被观察者</span></span><br><span class="line">          .subscribeOn(Schedulers.newThread())</span><br><span class="line">          <span class="comment">//将接下来执行的线程环境指定为io线程</span></span><br><span class="line">          .observeOn(Schedulers.io())</span><br><span class="line">            <span class="comment">//map就处在io线程</span></span><br><span class="line">          .map(mMapOperater)</span><br><span class="line">            <span class="comment">//将后面执行的线程环境切换为主线程，</span></span><br><span class="line">            <span class="comment">//但是这一句依然执行在io线程</span></span><br><span class="line">          .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">          <span class="comment">//指定线程无效，但这句代码本身执行在主线程</span></span><br><span class="line">          .subscribeOn(Schedulers.io())</span><br><span class="line">          <span class="comment">//执行在主线程</span></span><br><span class="line">          .subscribe(mSubscriber)</span><br></pre></td></tr></table></figure><h2 id="3-参考资料"><a class="markdownIt-Anchor" href="#3-参考资料"></a> 3. 参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9nYW5rLmlvL3Bvc3QvNTYwZTE1YmUyZGNhOTMwZTAwZGExMDgz" title="https://gank.io/post/560e15be2dca930e00da1083">给 Android 开发者的 RxJava 详解<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzZmZDg2NDAwNDZmMQ==" title="http://www.jianshu.com/p/6fd8640046f1">关于RxJava最友好的文章<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wL2U2MWUxMzA3ZTUzOA==" title="http://www.jianshu.com/p/e61e1307e538">关于RxJava最友好的文章（进阶）<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzJjNDc5OWZhOTFhNA==" title="http://www.jianshu.com/p/2c4799fa91a4">关于RxJava最友好的文章——背压（Backpressure）<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzIyMDk1NWVlZmMxZg==" title="http://www.jianshu.com/p/220955eefc1f">关于 RxJava 最友好的文章—— RxJava 2.0 全新来袭<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Rxjava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rxjava2 </tag>
            
            <tag> Rxjava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Scoping 函数</title>
      <link href="//Kotlin/Kotlin%20Scoping%20%E5%87%BD%E6%95%B0/"/>
      <url>//Kotlin/Kotlin%20Scoping%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在 Kotlin 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pldEJyYWlucy9rb3RsaW4vYmxvYi9tYXN0ZXIvbGlicmFyaWVzL3N0ZGxpYi9zcmMva290bGluL3V0aWwvU3RhbmRhcmQua3Q=" title="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt">Standard.kt<i class="fa fa-external-link"></i></span> 中提供了一些特殊的高阶函数；</p><p>它们被称作 <strong>Scoping 函数</strong>，此类函数通过使用一个函数 <code>block</code>，将你需要对某对象进行的一系列操作限制在 lambda 作用域内；</p><p>这样，对于该对象操作的代码就不会泄露到外层作用域，使得代码更为干净整洁。</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DbConnection.getConnection().let &#123; connection -&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connection is no longer visible here</span></span><br></pre></td></tr></table></figure><p>可以看到，对于 <code>connection</code> 的操作就仅局限于 <code>let</code> 的 lambda 区域，而在 lambda 区域外是不可见的；</p><p>这就可以保证对 <code>connection</code> 的操作，不会影响到接下来的作用域。</p><a id="more"></a><h2 id="1-let"><a class="markdownIt-Anchor" href="#1-let"></a> 1. <code>let</code></h2><h3 id="11-定义"><a class="markdownIt-Anchor" href="#11-定义"></a> 1.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(f: (<span class="type">T</span>)</span></span> -&gt; R): R = f(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><h3 id="12-例子"><a class="markdownIt-Anchor" href="#12-例子"></a> 1.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.let &#123; it.toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; HOGE</span></span><br></pre></td></tr></table></figure><p>从定义之中我们可以看到，<code>let</code> 是所有类型都具有的扩展函数；</p><p>它的 <code>lambda</code> 的参数就是 <code>let</code> 的调用者。</p><h3 id="13-主要用途"><a class="markdownIt-Anchor" href="#13-主要用途"></a> 1.3 主要用途</h3><p><code>let</code> 的主要用途在 Kotlin 的 <span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy9kb2NzL3JlZmVyZW5jZS9pZGlvbXMuaHRtbCNleGVjdXRlLWlmLW5vdC1udWxs" title="https://kotlinlang.org/docs/reference/idioms.html#execute-if-not-null">Idioms<i class="fa fa-external-link"></i></span> 中有介绍；</p><p>主要就是用于在对象 <code>nullable</code> 的时候，对对象进行操作；</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span>?.let &#123;</span><br><span class="line">    ... <span class="comment">// execute this block if not null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>data</code> 为 <code>null</code> 时，<code>let</code> 就不执行，而直接返回 <code>null</code>；</p><p>否则就执行 <code>let</code> 的 lambda。</p><p>此时，它与 Java <code>Optional</code> 的以下三个函数的功能类似：</p><ul><li><code>map</code></li><li><code>flatMap</code></li><li><code>ifPresent</code></li></ul><p>可以看到，<code>let</code> 实际上就相当于集合中的 <code>map</code>，作用就是进行元素的变换功能；</p><p><img alt data-src="https://ww2.sinaimg.cn/large/006tNbRwgy1fevs5lulszj30ho08k74u.jpg"></p><p>注意，不能在 <code>let</code> 中调用 <code>it</code> 的修改方法；</p><p>否则，就会对原有对象进行改变。</p><h2 id="2-with"><a class="markdownIt-Anchor" href="#2-with"></a> 2. <code>with</code></h2><h3 id="21-定义"><a class="markdownIt-Anchor" href="#21-定义"></a> 2.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> <span class="title">with</span><span class="params">(receiver: <span class="type">T</span>, f: <span class="type">T</span>.()</span></span> -&gt; R): R = receiver.f()</span><br></pre></td></tr></table></figure><h3 id="22-例子"><a class="markdownIt-Anchor" href="#22-例子"></a> 2.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> w = Window()</span><br><span class="line">with(w) &#123;</span><br><span class="line">  setWidth(<span class="number">100</span>)</span><br><span class="line">  setHeight(<span class="number">200</span>)</span><br><span class="line">  setBackground(RED)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 <code>let</code> 不同，<code>with</code> <strong>并不是扩展函数</strong>；</p><p>它的第一个参数，是任意类型的对象，如上面的 <code>x</code>；</p><p>需要注意的是它的 lambda 部分，它的 lambda 要求接收者（调用者）必须是第一个参数的类型；</p><p>也就是说，我们可以在它的 lambda 中调用第一个参数的方法；</p><p>正如上面的例子，其中的几个 <code>set</code> 方法都隐含了调用者是 <code>w</code></p><h3 id="23-主要用途"><a class="markdownIt-Anchor" href="#23-主要用途"></a> 2.3 主要用途</h3><p>由于指定了接收者类型，所以 <code>with</code> 函数主要用于对复杂对象的一系列配置操作。</p><p>如上面的设置 <code>Window</code> 的宽度和高度，以及背景颜色等。</p><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNbRwgy1fevsj7j8fij30e60agjrw.jpg"></p><p>可以看到，<code>with</code> 的调用 <strong>会改变传入的对象</strong></p><p>实际上，这里也可以使用 <code>let</code> 函数进行这种操作；</p><p>不过由于 <code>let</code> 函数是将对象当做 <strong>参数</strong> 传入，所以如果要获得和 <code>with</code> 一样的效果，就必须在前面加 <code>it</code>：</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNbRwly1fevslr0wr7j30iu0aijrz.jpg"></p><p>所以，<code>let</code> 并不适合这里所说的这个用途，利用 <code>let</code> 进行元素变换即可。</p><h2 id="3-run"><a class="markdownIt-Anchor" href="#3-run"></a> 3. <code>run</code></h2><h3 id="31-定义"><a class="markdownIt-Anchor" href="#31-定义"></a> 3.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">run</span><span class="params">(f: <span class="type">T</span>.()</span></span> -&gt; R): R = f()</span><br></pre></td></tr></table></figure><h3 id="32-例子"><a class="markdownIt-Anchor" href="#32-例子"></a> 3.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.run &#123; toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; HOGE</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>run</code> 实际上就是 <code>let</code> 和 <code>with</code> 的结合；</p><p>可以让 <code>with</code> 不需要指定 <code>receiver</code> 参数就进行对象内部属性的配置；</p><p>同时，<code>run</code> 也是一个扩展函数，可以通过任何的类进行调用。</p><h3 id="33-主要用途"><a class="markdownIt-Anchor" href="#33-主要用途"></a> 3.3 主要用途</h3><p>作为 <code>let</code> 和 <code>with</code> 的合体方法，那么最主要的用途当然还是进行某个对象的配置。</p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNbRwgy1fevw96ztszj30go0843yz.jpg"></p><p>需要注意的是，<code>run</code> 也会对对象进行改变。</p><h2 id="4-apply"><a class="markdownIt-Anchor" href="#4-apply"></a> 4. <code>apply</code></h2><h3 id="41-定义"><a class="markdownIt-Anchor" href="#41-定义"></a> 4.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">apply</span><span class="params">(f: <span class="type">T</span>.()</span></span> -&gt; <span class="built_in">Unit</span>): T &#123; f(); <span class="keyword">return</span> <span class="keyword">this</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="42-例子"><a class="markdownIt-Anchor" href="#42-例子"></a> 4.2 例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.apply &#123; toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; hoge</span></span><br></pre></td></tr></table></figure><p>相比之前的结果，返回的依旧是小写字符；</p><p>这是由于 <code>apply</code> 返回的是 <code>apply</code> 的调用者的缘故。</p><h3 id="43-主要用途"><a class="markdownIt-Anchor" href="#43-主要用途"></a> 4.3 主要用途</h3><p>由于 <code>apply</code> 的返回类型为调用者自身，所以可以利用 <code>apply</code> 实现一个 <strong>流式 API 调用</strong>。</p><p>实际上就是 <code>with</code> 最后返回 <code>this</code> 的简略版本。</p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNbRwgy1fevwr9abcuj30va062q3m.jpg"></p><h2 id="5-also"><a class="markdownIt-Anchor" href="#5-also"></a> 5. <code>also</code></h2><p>这是 Kotlin 1.1 新增的 scoping 函数</p><h3 id="51-定义"><a class="markdownIt-Anchor" href="#51-定义"></a> 5.1 定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">also</span><span class="params">(block: (<span class="type">T</span>)</span></span> -&gt; <span class="built_in">Unit</span>): T &#123; block(<span class="keyword">this</span>); <span class="keyword">return</span> <span class="keyword">this</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="52-使用例子"><a class="markdownIt-Anchor" href="#52-使用例子"></a> 5.2 使用例子</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"hoge"</span>.also &#123; it.toUpperCase() &#125;</span><br><span class="line">println(s) <span class="comment">//=&gt; hoge</span></span><br></pre></td></tr></table></figure><p>可以看到，其作用和 <code>apply</code> 一样；</p><p>但是和 <code>apply</code> 的区别在于，<code>also</code> 的函数参数并非指定接收者；</p><p>而是将调用者 <code>T</code> 当做其参数传入 lambda；</p><p>类似于 <code>let</code> 的 <code>apply</code> 版本。</p><h3 id="53-主要用途"><a class="markdownIt-Anchor" href="#53-主要用途"></a> 5.3 主要用途</h3><p>那么这样做有什么好处呢？</p><p>首先，由于 <strong>没有指定接收者</strong>，所以 lambda 内外的 <code>this</code> 的含义没有改变：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// applyを使用</span></span><br><span class="line"><span class="keyword">val</span> button = Button(<span class="keyword">this</span>).apply &#123;</span><br><span class="line">  text = <span class="string">"Click me"</span></span><br><span class="line">  setOnClickListener &#123;</span><br><span class="line">    startActivity(Intent(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, NextActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">    <span class="comment">// 単なる「this」ではNG   ^</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// alsoを使用</span></span><br><span class="line"><span class="keyword">val</span> button = Button(<span class="keyword">this</span>).also &#123; button -&gt;</span><br><span class="line">  button.text = <span class="string">"Click me"</span></span><br><span class="line">  button.setOnClickListener &#123;</span><br><span class="line">    startActivity(Intent(<span class="keyword">this</span>, NextActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，可以通过赋予 lambda 参数名字，例如上面的 <code>button</code> ，增强可读性。</p><h3 id="54-和-let-的区别"><a class="markdownIt-Anchor" href="#54-和-let-的区别"></a> 5.4 和 <code>let</code> 的区别</h3><p><code>also</code> 和 <code>let</code> 都是通过将调用者作为 lambda 的参数传入函数的形式进行调用；</p><p>其区别就在于 <code>also</code> 最终返回值为其自身的调用者，即 <code>this</code>；</p><p>而 <code>let</code> 的最终返回值由它的 lambda 的最后一个表达式的返回值决定。</p><p>类似于 <code>apply</code> 和 <code>with</code> 的区别；</p><p>同理，也可以利用 <code>let</code> 来实现上面的 <code>also</code> 实现的功能：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> button = Button(<span class="keyword">this</span>).let &#123; button -&gt;</span><br><span class="line">  button.text = <span class="string">"Click me"</span></span><br><span class="line">  button.setOnClickListener &#123;</span><br><span class="line">    startActivity(Intent(<span class="keyword">this</span>, NextActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">  &#125;</span><br><span class="line">  button <span class="comment">// letの場合はこれが必要になる</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-总结"><a class="markdownIt-Anchor" href="#6-总结"></a> 6. 总结</h2><ol><li><code>let</code> 用于进行元素变换操作，类似于 <code>map</code></li><li><code>with</code> 用于对复杂对象的配置，需要提供具体的对象</li><li><code>run</code> 是 <code>with</code> 的 <code>let</code> 版本，配置对象属性，不需要提供具体对象</li><li><code>apply</code> 是 <code>with</code> 的流式 API 版本</li><li><code>also</code> 是 <code>let</code> 的 <code>apply</code> 版本，用于对象配置，同时保留流式 API 和 当前 <code>this</code> 的含义</li></ol><h2 id="7-参考资料"><a class="markdownIt-Anchor" href="#7-参考资料"></a> 7. 参考资料</h2><p><span class="exturl" data-url="aHR0cDovL3FpaXRhLmNvbS9uZ3N3X3Rhcm8vaXRlbXMvZDI5ZTMwODBkOWZjOGEzODY5MWUjJUU1JUFFJTlBJUU3JUJFJUE5LTI=" title="http://qiita.com/ngsw_taro/items/d29e3080d9fc8a38691e#%E5%AE%9A%E7%BE%A9-2">Kotlin スコープ関数 用途まとめ<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2JldXN0LmNvbS93ZWJsb2cvMjAxNS8xMC8zMC9leHBsb3JpbmctdGhlLWtvdGxpbi1zdGFuZGFyZC1saWJyYXJ5Lw==" title="http://beust.com/weblog/2015/10/30/exploring-the-kotlin-standard-library/">Exploring the Kotlin standard library<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala for-comprehension</title>
      <link href="//Scala/Scala%20for-comprehension/"/>
      <url>//Scala/Scala%20for-comprehension/</url>
      
        <content type="html"><![CDATA[<p>Scala 作为函数式语言，提供了很多用于高阶函数来解决一类范式问题；</p><p>但是，使用过多的高阶函数就会让代码的可读性变差；</p><p>所以，对此 Scala 提供了一种类 Python 的简便的语法糖，用来解决代码的可读性问题。</p><a id="more"></a><h2 id="1-问题背景"><a class="markdownIt-Anchor" href="#1-问题背景"></a> 1. 问题背景</h2><p>在这里举一个 <em>Effective Scala</em> 中的例子：</p><p>比如说，我要列出所有不同字母组成的 <code>pair</code>，那么该怎么办呢？</p><p>如果用 Java 的话，就会有两层 <code>for</code>，那么在 Scala 下，我们就应该用到 <code>flatMap</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> chars = 'a' to 'z'</span><br><span class="line"></span><br><span class="line">chars flatMap &#123; a =&gt;</span><br><span class="line">    chars flatMap &#123; b =&gt;</span><br><span class="line">        <span class="type">Vector</span>(<span class="string">"%c%c"</span>.format(a, b))</span><br><span class="line">    &#125;</span><br><span class="line">&#125; filter &#123; s =&gt; s.head != s.last &#125;</span><br></pre></td></tr></table></figure><p>这里用到了两个 <code>flatMap</code>，为什么？</p><p>首先，如果都使用 <code>map</code>，那么内部的 <code>map</code> 将元素转变为了 <code>Vector</code>；</p><p>而 <code>char</code> 作为 <code>Range</code>，会默认选择 <code>Vector</code> 作为 <code>map</code> 的选项；</p><p>此时， <code>a</code> 转换成的东西就变成了 <code>Vector[Vector[String]]</code>；</p><p>而 <code>chars</code> 又会默认生成一层 <code>Vector</code>；</p><p>所以，最后生成的东西就会有三层 <code>Vector</code>，即 <code>Vector[Vector[Vector(String)]]</code>；</p><p>所以，我们需要两次 <code>flatten</code> 进行展平，才能最终得到 <code>Vector(String)</code>；</p><p>这也是为什么需要两次 <code>flatMap</code> 的原因。</p><p>可以看到，如果采用 <code>flatMap</code>，那么操作就会变得十分难以理解。</p><h2 id="2-for-comprehension"><a class="markdownIt-Anchor" href="#2-for-comprehension"></a> 2. <code>for-comprehension</code></h2><p>对此，Scala 提供了一种简便的，用于生成 <code>Seq</code> 的 <code>for</code> 表达式；</p><p>通常称为 <code>for-comprehension</code>，也称为 <code>Sequence Comprehension</code>，或者 <code>for expression</code>。</p><p>它的语法结构如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (s) <span class="keyword">yield</span> e</span><br></pre></td></tr></table></figure><p>其中，<code>s</code> 被称作 <code>enumerators</code>，<code>e</code> 则是遍历生成的元素；</p><p>表达式对于 <code>s</code> 有以下几点要求：</p><ol><li><p><code>s</code> 是 <code>generator</code> 和 <code>filter</code> 组成的，以分号间隔的语句序列。</p></li><li><p><code>genrator</code> 的形式为： <code>p &lt;- c</code>。</p><blockquote><p>其中 <code>p</code> 是一个模式(pattern)，<code>c</code> 则是一个集合</p></blockquote></li><li><p><code>filter</code> 的形式为 <code>if condition</code>，其中 <code>condition</code> 是个布尔表达式</p></li><li><p>允许多个 <code>generator</code>，但是在下面的 <code>generator</code> 必须比在上面的要变化的快。</p><blockquote><p>换成指令性语言的话，就是在下面的 <code>generator</code> 必须在更内部的 <code>for</code> 循环中。</p></blockquote></li></ol><p>经过执行之后，这个表达式会返回一个由 <code>e</code> 组成的集合；</p><p>具体返回的集合类型，例如 <code>List</code> 和 <code>Vector</code>，则由 <code>s</code> 来决定；</p><p>如果类型不能满足，则会向类型结构的上一层回溯，直到找到一个最接近的满足要求的类型为止。</p><p>同时，<code>for-comprehension</code> 可以使用花括号代替圆括号，此时，就不需要用分号来分隔语句了。</p><h2 id="3-使用-for-comprehension-解决问题"><a class="markdownIt-Anchor" href="#3-使用-for-comprehension-解决问题"></a> 3. 使用 <code>for-comprehension</code> 解决问题</h2><p>那么，对于上面的问题，我们试着使用 <code>for-comprehension</code> 来解决：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> chars = 'a' to 'z'</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    a &lt;- chars</span><br><span class="line">    b &lt;- chars</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">&#125; <span class="keyword">yield</span> <span class="string">"%c%c"</span>.format(a, b)</span><br></pre></td></tr></table></figure><p>可以看到，使用 <code>for-comprehension</code> 来解决，写出来的代码会比 <code>flatMap</code> 简单得多。</p><h2 id="4-关于返回类型"><a class="markdownIt-Anchor" href="#4-关于返回类型"></a> 4. 关于返回类型</h2><p>对于上面的表达式，它的返回类型是什么呢？</p><p>实际上，是一个 <code>Vector</code>。</p><p>为什么是一个 <code>Vector</code> ？</p><p>这是因为，<code>chars</code> 实际上是一个 <code>Range</code> 对象；</p><p>而对于 <code>Range</code> 对象，它不能拥有一堆 <code>String</code>；</p><p>此时，Scala 编译器会在类型结构中向上寻找最近的满足条件的类型；</p><p>此时，寻找到的是 <code>IndexedSeq</code>，而这个类型的默认 <code>Seq</code> 实现就是 <code>Vector</code></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala List 高阶函数</title>
      <link href="//Scala/Scala%20List%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>//Scala/Scala%20List%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>高阶函数是函数式编程的一个很大的特性；</p><p>同时，其中集合类的高阶函数在日常的开发和使用中，占了一个很重要的位置；</p><p>但是，这些函数有可能会在刚接触的时候搞不懂它们的具体作用；</p><p>那么今天就以 <code>List</code> 来说一说常用的高阶函数具体的作用。</p><a id="more"></a><h2 id="1-子集操作"><a class="markdownIt-Anchor" href="#1-子集操作"></a> 1. 子集操作</h2><p>在一个集合中选取一些特定的元素作为子集；</p><p>我们在指令性语言中，通常选用 <code>for</code> 语句来实现这个需求；</p><p>而在函数式语言中，我们有对应的高阶函数来解决这个问题。</p><h3 id="11-filterp-t-boolean"><a class="markdownIt-Anchor" href="#11-filterp-t-boolean"></a> 1.1 <code>filter(p: (T) =&gt; Boolean)</code></h3><p>顾名思义， <strong>过滤器</strong>，用来 <strong>选取符合条件的元素</strong>， 并将其作为返回值；</p><p>这里的 <strong>符合条件</strong> 指的是 使得函数 <code>p</code> 的返回值为 <code>true</code> 的元素。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.filter((x) =&gt; x &gt; <span class="number">2</span>) <span class="comment">// List(3, 4)</span></span><br></pre></td></tr></table></figure><h3 id="12-filternotp-t-boolean"><a class="markdownIt-Anchor" href="#12-filternotp-t-boolean"></a> 1.2 <code>filterNot(p: (T) =&gt; Boolean)</code></h3><p>同理，这个函数是上面的反面，也就是用来 <strong>过滤掉</strong> 符合条件的元素；</p><p>返回的是， <strong>不包含符合元素的子集</strong>；</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">list.filterNot((x) =&gt; x == <span class="number">2</span>) <span class="comment">// List(1, 3)</span></span><br></pre></td></tr></table></figure><h3 id="13-partitionp-t-boolean"><a class="markdownIt-Anchor" href="#13-partitionp-t-boolean"></a> 1.3 <code>partition(p: (T) =&gt; Boolean)</code></h3><p>这个函数是上面两个函数的集合体，返回的是一个 <code>Turple</code>，包含的元素为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(list.filter, list.filterNot)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: (List(1, 2, 3), List(4, 5, 6, 7))</span></span><br><span class="line">list.partition((x) =&gt; x &lt; <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="14-takewhilep-t-boolean"><a class="markdownIt-Anchor" href="#14-takewhilep-t-boolean"></a> 1.4 <code>takeWhile(p: (T) =&gt; Boolean)</code></h3><p>这个函数会一直选取元素， <strong>直到 <code>p</code> 的返回值为 <code>false</code></strong>，然后将元素作为新的集合返回。</p><p>可以看到，这个函数返回的就是 <strong>符合条件的集合前缀</strong></p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意最后一个 1 并没有拿走</span></span><br><span class="line">list.takeWhile((x) =&gt; x == <span class="number">1</span>) <span class="comment">// List(1, 1, 1, 1)</span></span><br></pre></td></tr></table></figure><h3 id="15-dropwhilep-t-boolean"><a class="markdownIt-Anchor" href="#15-dropwhilep-t-boolean"></a> 1.5 <code>dropWhile(p: (T) =&gt; Boolean)</code></h3><p>和上面的方法相反，这个方法会一直 <strong>丢弃</strong> 元素，直到 <code>p</code> 的返回值为 <code>false</code>；</p><p>那么可以看到，这个函数返回的就是 <strong>不符合条件的集合后缀</strong>；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">list.dropWhile((x) x != <span class="number">4</span>) <span class="comment">// List(4, 2, 1)</span></span><br></pre></td></tr></table></figure><h3 id="16-spanp-t-boolean"><a class="markdownIt-Anchor" href="#16-spanp-t-boolean"></a> 1.6 <code>span(p: (T) =&gt; Boolean)</code></h3><p>这个函数是上两个函数的结合，它返回的是如下的一个 <code>Turple</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(list.takeWhile, list.dropWhile)</span><br></pre></td></tr></table></figure><h3 id="17-partition-span-和它们的基本方法的区别"><a class="markdownIt-Anchor" href="#17-partition-span-和它们的基本方法的区别"></a> 1.7 <code>partition</code>、<code>span</code> 和它们的基本方法的区别</h3><p>既然 <code>partition</code> 和 <code>span</code> 都可以用基本的 <code>filter</code>、<code>filterNot</code> 和 <code>takeWhile</code>、<code>dropWhile</code> 来解决，那为什么还要专门实现一次这两个方法呢？</p><p>其实，<code>span</code> 和 <code>partition</code> 只需要扫描一次集合；</p><p>但是如果使用 <code>filter</code>、<code>filterNot</code> 和 <code>takeWhile</code>、<code>dropWhile</code> 来实现的话，就需要扫描两次集合了。</p><p>所以，如果同时需要两者的数据的话，那么使用 <code>span</code> 和 <code>partition</code> 显然是更经济的。</p><h3 id="18-withfilter"><a class="markdownIt-Anchor" href="#18-withfilter"></a> 1.8 <code>withFilter</code></h3><p>Scala 除了 <code>filter</code> 之外，还提供了一个 <code>withFilter</code> 函数；</p><p>那么，这两者有什么区别呢？</p><p>根据文档：</p><blockquote><p>Note: the difference between <code>c filter p</code> and <code>c withFilter p</code> is that the former creates a new collection, whereas the latter only restricts the domain of subsequent map, flatMap, foreach, and withFilter operations.</p></blockquote><p>也就是说，<code>filter</code> 会返回一个 <strong>新的 <code>List</code></strong>；</p><p>但是 <code>withFilter</code> 不会返回新的 <code>List</code>；</p><p>它只会提供一个过滤器的作用，让符合条件的元素通过，以方便接下来的 <code>map</code> 等其他高阶函数的使用；</p><p>而就效率而言，<code>withFilter</code> 比 <code>filter</code> 要快。</p><p>如果你需要返回一个新的集合，就使用 <code>filter</code>；</p><p>如果你只是需要一个元素过滤器，而接下来，还需要进行其他操作，那么就使用 <code>withFilter</code></p><h2 id="2-元素检查"><a class="markdownIt-Anchor" href="#2-元素检查"></a> 2. 元素检查</h2><p>有时候，我们会希望检查集合内部的元素状态；</p><p>比如说， <strong>是否所有的元素都满足某个特定条件</strong>；</p><p>或者， <strong>是否有元素满足特定条件</strong>。</p><p>在 Scala 中，我们有高阶函数来进行这个操作。</p><h3 id="21-forallp-t-boolean-boolean"><a class="markdownIt-Anchor" href="#21-forallp-t-boolean-boolean"></a> 2.1 <code>forAll(p: (T) =&gt; Boolean): Boolean</code></h3><p>顾名思义，检查 <strong>是否所有的元素都满足特定条件</strong></p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.forAll(c =&gt; c &gt; <span class="number">0</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="22-existsp-t-boolean-boolean"><a class="markdownIt-Anchor" href="#22-existsp-t-boolean-boolean"></a> 2.2 <code>exists(p: (T) =&gt; Boolean): Boolean</code></h3><p>同理，检查 <strong>是否存在满足条件的元素</strong></p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.exists(c =&gt; c &lt; <span class="number">0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="3-变换"><a class="markdownIt-Anchor" href="#3-变换"></a> 3. 变换</h2><h3 id="31-mapf-t-u"><a class="markdownIt-Anchor" href="#31-mapf-t-u"></a> 3.1 <code>map(f: (T) =&gt; U)</code></h3><p><code>map</code> 函数，可以说是这里面用的最多的高阶函数了；</p><p><code>map</code> 函数的真正作用，实际上是一种变换功能，而且不仅可以变换成和现元素类型相同的类型，也可以变换成不同的类型；</p><p>也就是说，可以通过 <code>map</code> 函数，将一种元素的集合，变成另一种元素的集合。</p><p>例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有元素都乘以 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.map((x) =&gt; x * <span class="number">2</span>)  <span class="comment">// List(2, 4, 6, 8)</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Int 变成 String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list.map((x) =&gt; x.toString())   <span class="comment">// List("1", "2", "3", "4")</span></span><br></pre></td></tr></table></figure><h3 id="32-flatten"><a class="markdownIt-Anchor" href="#32-flatten"></a> 3.2 <code>flatten</code></h3><p>这个函数可以将嵌套的 <code>List</code> 展平，就像它的名字一样。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listOfLists = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">listOfLists.flatten = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="33-flatmap"><a class="markdownIt-Anchor" href="#33-flatmap"></a> 3.3 <code>flatMap</code></h3><p>它是 <code>map</code> 和 <code>flatten</code> 的集合体，相当于先进行 <code>map</code> 然后 <code>flatten</code>。</p><p>例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listOfLists = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">listOfLists.flatMap((x) =&gt; x.map(_ * <span class="number">2</span>)) <span class="comment">// List(2, 4, 6, 8)</span></span><br></pre></td></tr></table></figure><p>也就是说，<code>flatMap</code> 先将元素 <code>map</code> 成 <strong>嵌套的</strong> <code>List</code>；</p><p>随后，再调用 <code>flatten</code>，将嵌套的 <code>List</code> 展平</p><blockquote><p><code>flatMap</code> 的作用过于强大，使用时需要小心谨慎<br>在 Twitter 的 <em>Effective Scala</em> 中，推荐使用 <em>for-comprehention</em> 来代替 <code>flatMap</code> 的使用</p></blockquote><h3 id="34-ziptxs-listu-listt-u"><a class="markdownIt-Anchor" href="#34-ziptxs-listu-listt-u"></a> 3.4 <code>zip[T](xs: List[U]): List[(T, U)]</code></h3><p>压缩，它的左右两个操作数分别是 <strong>两个 <code>List</code></strong>；</p><p>然后返回一个分别包含两个 <code>List</code> 元素的二元组的 <code>List</code>。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// List((1, "a"), (2, "b"), (3, "c"), (4, "d"))</span></span><br><span class="line">list1 zip list2</span><br></pre></td></tr></table></figure><h3 id="35-unzip"><a class="markdownIt-Anchor" href="#35-unzip"></a> 3.5 <code>unzip</code></h3><p>有压缩就有解压；</p><p>这个函数的作用就是将上面压缩后的结果解压出来；</p><p>具体来说就是接受一个二元组的 <code>List</code>， 返回一个 <code>List</code> 的二元组。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (List(1, 2, 3, 4), List("a", "b", "c", "d"))</span></span><br><span class="line">(list1 zip list2) unzip</span><br></pre></td></tr></table></figure><h3 id="36-collect"><a class="markdownIt-Anchor" href="#36-collect"></a> 3.6 <code>collect</code></h3><p>根据文档，<code>collect</code> 接受一个 <code>PartialFunction</code>，然后对集合中的每个元素都 apply 这个函数，返回一个新的集合。</p><p>听起来，这个方法和 <code>map</code> 很像，不过其区别就是在于 <code>collect</code> 接受的是一个 <code>PartialFnction</code> ；</p><p>这具体是什么意思呢？</p><p>我们来举个例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> convertFn: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; i;</span><br><span class="line">  <span class="keyword">case</span> s: <span class="type">String</span> =&gt; s.toInt;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Some</span>(s: <span class="type">String</span>) =&gt; s.toInt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="type">Some</span>(<span class="number">4</span>), <span class="type">Some</span>(<span class="string">"5"</span>)).</span><br><span class="line">  collect(convertFn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// List[Int] = List(0, 1, 2, 3, 5)</span></span><br></pre></td></tr></table></figure><p>注意到， <code>collect</code> 的 lambda 中，并没有对所有的 <code>case</code> 都进行处理；</p><p>上面的 <code>List</code> 除了含有 <code>String</code> 、 <code>Int</code> 和 <code>Some[String]</code> 之外，还含有 <code>Some[Int]</code>；</p><p>这就是所谓的 <code>PartialFunction</code> ，它并没有对所有的情形都进行处理，也没有提供一个默认的选项。</p><p>如果上面的 <code>collect</code> 替换为 <code>map</code>，则第四个 <code>Some(4)</code> 就会导致 <code>MatchError</code>；</p><p>而 <code>collect</code> 则避开了这个错误。</p><p>理论上，<code>collect</code> 进行了 <code>map</code> 和 <code>filter</code> 的两重功能。</p><p>虽然，<code>collect</code> 不会造成 <code>MatchError</code>；</p><p>但是 <code>collect</code> 不是使用 <code>try...catch</code> 实现的。</p><p><code>collect</code> 是通过检查函数中提供的 <code>case</code> 检查；</p><p>如果 <code>case</code> 不匹配，则跳过该元素，不调用函数；</p><p>如果 <code>case</code> 中存在 <code>???</code>，那么同样也会抛出异常：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="string">""</span>).collect(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; i;</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; ???</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">scala.<span class="type">NotImplementedError</span>: an implementation is missing</span><br><span class="line">  at scala.<span class="type">Predef</span>$.$qmark$qmark$qmark(<span class="type">Predef</span>.scala:<span class="number">225</span>)</span><br><span class="line">  at $anonfun$<span class="number">1.</span>applyOrElse(&lt;console&gt;:<span class="number">8</span>)</span><br><span class="line">  at scala.collection.immutable.<span class="type">List</span>.collect(<span class="type">List</span>.scala:<span class="number">303</span>)</span><br><span class="line">  ... <span class="number">33</span> elided</span><br></pre></td></tr></table></figure><h3 id="37-collectfirst"><a class="markdownIt-Anchor" href="#37-collectfirst"></a> 3.7 <code>collectFirst</code></h3><p>这是 <code>collect</code> 的简化版本；</p><p>它只会将函数应用在 <strong>第一个满足</strong> 其 <code>case</code> 的元素中，并返回一个包含该元素的 <code>Option</code> 对象。</p><p>如果不存在这样的函数，那么就返回 <code>None</code></p><h3 id="38-groupbyaf-a-k-mapk-seqa"><a class="markdownIt-Anchor" href="#38-groupbyaf-a-k-mapk-seqa"></a> 3.8 <code>groupBy[A](f: (A) =&gt; K): Map[K, Seq[A]]</code></h3><p><code>groupBy</code> 通过函数 <code>f</code>，将 <code>List</code> 分成不同的部分；</p><p>每一个部分由一个键值 <code>K</code> 来进行映射，最终返回结果为一个 <code>Map</code> 对象。</p><p>例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fruit = <span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"peer"</span>, <span class="string">"orange"</span>, <span class="string">"pineapple"</span>)</span><br><span class="line"></span><br><span class="line">fruit groupBy (_.head)</span><br><span class="line"></span><br><span class="line"><span class="comment">//&gt; Map(p -&gt; List("peer", "pineapple"),</span></span><br><span class="line"><span class="comment">//      a -&gt; List("apple"),</span></span><br><span class="line"><span class="comment">//      o -&gt; List("orange"))</span></span><br></pre></td></tr></table></figure><h2 id="4-规约"><a class="markdownIt-Anchor" href="#4-规约"></a> 4. 规约</h2><p>在一个集合中，我们通常还会进行规约操作；</p><p>例如求一个 1 到 100 的和；</p><p>那么，此时，我们就是将一个 1 到 100 的集合规约到一个 <code>Int</code>，它是这个集合所有元素的和。</p><p>下面介绍的就是一系列规约函数。</p><h3 id="41-reduceleftop-b-t-b"><a class="markdownIt-Anchor" href="#41-reduceleftop-b-t-b"></a> 4.1 <code>reduceLeft(op: (B, T) =&gt; B)</code></h3><p>顾名思义，从左到右进行规约操作；</p><p>该函数会从左到右地使用操作符 <code>op</code> 将元素连接起来。</p><p>注意 <code>op</code> 是个二元操作，它接受两个参数，返回一个值。</p><p>那么产生的结果就是一个 <strong>左斜的树</strong>：</p><img data-src="https://www.plantuml.com/plantuml/svg/RO_12i8m44Jl-OhyW8Ucnn3fpOye7bPsQGin6v8LMyH_DwqIMd1lCs-MOReiaEHnzmgd8K4SzKM_b2uN64dtUOH8BdgOWj0iLxinmg4mI8cV8m6wm84AsXZ7HlSURkGTnr-Ue_dZjGUlFf_EUcxiGPgApQgBRVTwRYjllxpKPLayEMGHmbtb6WzMlLL70Slk3m00"><p>需要注意的是，<code>reduceLeft</code> 不仅能返回和原有元素相同类型的值，也能返回不同类型的值；</p><p>基于这样的树结构，那么对 <code>op</code> 的类型就有了要求；</p><p>可以看到，在上面，下方的 <code>op</code> 的返回值是作为上方 <code>op</code> 的左节点；</p><p>也就是说，<code>reduceLeft</code> 要求， <strong><code>op</code> 的左边参数的类型，必须和其返回值的类型相同。</strong></p><h3 id="42-foldleftz-bop-b-t-b"><a class="markdownIt-Anchor" href="#42-foldleftz-bop-b-t-b"></a> 4.2 <code>foldLeft(z: B)(op: (B, T) =&gt; B)</code></h3><p><code>foldLeft</code> 则是对 <code>reduceLeft</code> 的进一步泛化；</p><p><code>reduceLeft</code> 是不允许在 <strong>空列表</strong> 中执行的；</p><p>对此，<code>foldLeft</code> 提供了一个 <strong>初始值</strong> <code>z</code>；</p><p>如果列表为空，那么就返回 <code>z</code>；</p><p>它生成的树如下：</p><img data-src="https://www.plantuml.com/plantuml/svg/RO_12i8m44Jl-OhyW8Usnn3fpOye7bPsQGen6z8LMyL_DwqI8hYtcJVBCFqiaEHszGgdCK5q-gIVIkSBZAI7sK4a6prCGMYHizaPuPWPfCHtHu0sSA2CTiQnqOE72tdByPldsFxnkX-lF1-E-c5gjJI5jflEjgdrqXRUVNXkcsNrP9552Al6BHwCUgcU0kRPRm00"><p>这里比较有意思的就是 <code>foldLeft</code> 实际上是一个 <strong>柯里化函数</strong>；</p><p>可以先提供初始值，然后在 <code>op</code> 操作确定之后，再进行规约运算。</p><h3 id="43-reducerightop-t-b-b"><a class="markdownIt-Anchor" href="#43-reducerightop-t-b-b"></a> 4.3 <code>reduceRight(op: (T, B) =&gt; B)</code></h3><p>我们既然能从左边规约，当然也可以从右边规约；</p><p><code>reduceRight</code> 的作用就是， <strong>从右到左</strong> 执行规约操作；</p><p>那么，它所生成的树就是 <strong>右斜的</strong>：</p><img data-src="https://www.plantuml.com/plantuml/svg/RP312eCm44JlVaNmN0_giQHuwqU4KhPaKI7DXcIBbj9_RunjLN1FOLvcTjWcC7X-t4sc-zQ3wyHPl38Hnv965JfmA9s1tZAEV3acXBf51TxJq25eQSbY90cHAuKoS4CZoNs_awjsj7gZ9N6ysf-OntTHvfSbjJY9iLGClN7aMORXdvHONBA2gpvLSbQxpcfsnYehwq44VXgKcfXHBq5r2fegxaNDT0Ed4k-iGQlZVJy0"><p>同理，<code>reduceRight</code> 要求，它的右操作数的类型必须和它的返回值类型相同。</p><h3 id="44-foldrightz-bop-t-b-b"><a class="markdownIt-Anchor" href="#44-foldrightz-bop-t-b-b"></a> 4.4 <code>foldRight(z: B)(op: (T, B) =&gt; B)</code></h3><p>同样的，我们也具有一个 <code>foldRight</code> 函数，在集合为空时，返回初始值 <code>z</code>；</p><p>它生成的树如下：</p><img data-src="https://www.plantuml.com/plantuml/svg/RP0n3i8m34Ntdi87WA7fY8AwSOY8mIXMMod4KMBK0kBkX81AGVNev_TjkKs2KIvdLzcXYnXwEC2zWboUBPdKOo0T70vUQ9BZhY2o7HcCaSUUq6hFdZ8fY4CDnk69dERm6UUWLdhDJs-MjtkOQYCukC1HT1fdeR2SjO2BjQgOQjLKRpDlNAWRI79rf2sBaFq6DQ_X6wm65JPv-3lXKRNaRNxY4m00"><h3 id="45-left-和-right-的区别"><a class="markdownIt-Anchor" href="#45-left-和-right-的区别"></a> 4.5 <code>left</code> 和 <code>right</code> 的区别</h3><p>那么 <code>left</code> 和 <code>right</code> 有什么区别呢？</p><p>实际上，高阶函数的作用范围都是 <strong>整个列表</strong>；</p><p>所以，对于满足 <strong>交换律</strong> 和 <strong>结合律</strong> 的运算，从左边执行和从右边执行的结果是 <strong>一样的</strong>，例如 <strong>加法操作</strong>；</p><p>但是，对于不满足交换律和结合律的运算，例如 <strong>减法操作</strong>；</p><p>那么这两个函数的执行结果就不一样。</p><h3 id="46-其他规约函数"><a class="markdownIt-Anchor" href="#46-其他规约函数"></a> 4.6 其他规约函数</h3><p>Scala 还提供了一些其他的针对数字类型的规约函数；</p><p>例如：<code>sum</code>， <code>product</code>，<code>max</code> 和 <code>min</code>；</p><p>不过，<code>sum</code> 和 <code>product</code> 只能用于数字类型，否则会报错。</p><h2 id="5-其他高阶函数"><a class="markdownIt-Anchor" href="#5-其他高阶函数"></a> 5. 其他高阶函数</h2><p>Scala 集合中还拥有其他的高阶函数，诸如：<code>count</code>、<code>find</code>、<code>sortWith</code> 等；</p><p>这些函数的作用比较明显，可以从它的命名中推测出其作用，在这里就不多做解释了。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ofo 使用体验</title>
      <link href="//Talk/ofo%20%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
      <url>//Talk/ofo%20%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>最近因为和舍友出去看电影，终于第一次体验了一下著名的小黄车 ofo；</p><p>ofo 的确是很方便，同时也解决了所谓「最后一公里」的这个需求痛点；</p><p>但是，我不得不说，ofo 的运营团队还很年轻，一些很基本的流程问题都没搞清楚就胡乱上线功能。</p><a id="more"></a><h2 id="1-校园认证"><a class="markdownIt-Anchor" href="#1-校园认证"></a> 1. 校园认证</h2><p>就比如说 ofo 的校园认证，的确对我等大学生有很大的优惠；</p><p>但是，当你校园认证不通过，而你急着用车，去进行了普通认证，那么：</p><p><strong>你就再也不能进行校园认证了!</strong></p><p>明明就是一个很容易考虑到的 Corner Case，可是 ofo 却没有处理好；</p><p>看来 ofo 还需要多招几个测试大牛。</p><h2 id="2-客服电话"><a class="markdownIt-Anchor" href="#2-客服电话"></a> 2. 客服电话</h2><p>APP 上解决不了的问题，一般的用户就会想着去联系客服解决；</p><p>在这里我不得不说一声 MMP，ofo 的客服电话三天两头打不通；</p><p>在半个小时之内，我连续向其拨打了 12 通电话；但是，只有 3 通是能接通的。</p><p>第一通电话接通之后，首先是让我退押金，然后再打电话；</p><blockquote><p>这也无可厚非，毕竟银行信用卡激活就是这么要求的</p></blockquote><p>第二通电话，就有点莫名其妙了，首先接话员连普通话也说不标准；</p><p>然后说没有权限恢复我的认证状态，在经过多次撕逼之后，让我去找一个微信号去解决；</p><p>结果这个微信号居然是个 <strong>异常号！</strong></p><p>第三通电话之后，告诉我，你还有余额没有退，所以不能给你恢复认证状态。</p><p>结果呢？帮我申请了余额退款，说要到账之后才能进行下一步的操作。</p><p>所以就导致我现在，没有押金，余额还在银行流转，所以小黄车就不关我什么事了。</p><h2 id="3-总结"><a class="markdownIt-Anchor" href="#3-总结"></a> 3. 总结</h2><p>可以看出，就是因为一个没有考虑到的 Corner Case ，现在我只能去骑 mobike;</p><p>想到当年即使是写小学期项目，也要跟队员讨论个大半天的 Corner Case 才开始着手编码；</p><p>可能这就是互联网 APP 泡沫生态的现状吧：</p><p>大家都去抢功能，让功能尽早上线，剩下的维护啊支持啊，都可以往后边放一放。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ofo </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coursera 作业之函数集合</title>
      <link href="//Coursera/Scala/Coursera%20%E4%BD%9C%E4%B8%9A%E4%B9%8B%E5%87%BD%E6%95%B0%E9%9B%86%E5%90%88/"/>
      <url>//Coursera/Scala/Coursera%20%E4%BD%9C%E4%B8%9A%E4%B9%8B%E5%87%BD%E6%95%B0%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文源码：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL3NjYWxhLWNvdXJzZXJhL3RyZWUvbWFzdGVyL2Z1bnNldHM=" title="https://github.com/wafer-li/scala-coursera/tree/master/funsets">https://github.com/wafer-li/scala-coursera/tree/master/funsets<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="1-背景知识"><a class="markdownIt-Anchor" href="#1-背景知识"></a> 1. 背景知识</h2><p>该作业是实现一个函数集合的相关内容。</p><p>何为函数集合？</p><p>一般来说，编程语言中的集合(Collection)都是有限集合；</p><p>但是，在数学上，还有很多的集合是无限集合，比如说 <strong>负数集</strong>；</p><p>我们有没有一种办法去表示这个集合呢？</p><a id="more"></a><p>当然有的，对于上面的负数集来说，我们如何知道一个数字是不是负数集中的元素呢？</p><p>将它与 0 进行比较，如果 x &lt; 0，那么它就是负数集的元素。</p><p>此时，<code>(x) =&gt; x == 0</code> 就成为了负数集的判断标准，我们将其作为负数集的 <strong>特征函数</strong>，通过特征函数来指代特定的集合。</p><p>于是，我们得到了函数集合的定义：<code>type Set = (Int) =&gt; Boolean</code></p><p>和它的一个基本方法 <code>contains()</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(set: <span class="type">Set</span>, x : <span class="type">Int</span>) = set(x)</span><br></pre></td></tr></table></figure><h2 id="2-基本方法"><a class="markdownIt-Anchor" href="#2-基本方法"></a> 2. 基本方法</h2><p>接下来，题目要求我们实现一些集合的基本方法。</p><h3 id="21-singletonset"><a class="markdownIt-Anchor" href="#21-singletonset"></a> 2.1 <code>singletonSet()</code></h3><p>如何返回一个只有一个元素的函数集合呢？</p><p>对于我们的特征函数来说，也就是只有给定的元素才能满足这个特征函数，这样的集合就是只存在给定元素的集合。</p><p>所以，定义如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singletonSet</span></span>(elem: <span class="type">Int</span>): <span class="type">Set</span> = (x) =&gt; x == elem</span><br></pre></td></tr></table></figure><h3 id="22-交-并-补"><a class="markdownIt-Anchor" href="#22-交-并-补"></a> 2.2 交、并、补</h3><p>这几个基本的数学集合操作并不难，只需要抓住我们特征函数就是 <code>contains()</code> 这一点就行了。</p><h3 id="23-filter"><a class="markdownIt-Anchor" href="#23-filter"></a> 2.3 <code>filter()</code></h3><p>这个方法算是在 JVM 函数式语言中经常出现的集合方法；</p><p>作用就是返回满足条件的集合内的元素；</p><p>其中，一个很有趣的地方在于，<code>filter(s, p)</code> 的两个参数，虽然其表面上的类型不一样；</p><p>但是实际上他们的类型是一样的，也就是说，<code>s</code> 和 <code>p</code> 都是集合！</p><p>所以，我们只需要返回 <code>s</code> 和 <code>p</code> 的交集就行了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>) = intersect(s, p)</span><br></pre></td></tr></table></figure><h2 id="3-forall"><a class="markdownIt-Anchor" href="#3-forall"></a> 3. <code>forAll()</code></h2><p>然后，有趣的地方来了，题目要求我们实现一个 <code>forAll()</code> 方法，用来检测是否 <strong>所有的</strong> 元素都满足给定的条件。</p><p>当然，我们不能遍历全部的无限集元素；</p><p>所以，我们就采取一个区间的办法，如果在这个区间内的所有的元素都满足条件，那么我们有信心认为所有的元素都满足了条件。</p><p>在这里，同样要注意， <code>s</code> 和 <code>p</code> 的类型实际上是一样的！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forall</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">iter</span></span>(a: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; bound) <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (diff(s, p)(a)) <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span> iter(a + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  iter(-bound)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-exists"><a class="markdownIt-Anchor" href="#4-exists"></a> 4. <code>exists()</code></h2><p>本题第二难的地方来了，题目要求实现一个 <code>exists()</code> 函数，用于检测 <strong>是否存在</strong> 一个元素满足给定的条件。</p><p>按说这个还不是很难，但是，题目要求使用 <code>forAll()</code> 进行实现。</p><p>按照我的早就丢给高中老师的逻辑关系知识，『所有』和 『存在』好像并无什么联系。</p><p>不过，在论坛上有人提醒了我，可以使用 <strong>间接法</strong>；</p><p>也就是说，我们可以考虑一下 <strong>不存在</strong> 的情况；</p><p>也就是说，对于 <strong>所有的</strong> 元素，都 <strong>不满足</strong> 给定的条件；</p><p>到此，我们就可以利用上之前实现的 <code>forAll()</code> 了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exists</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>) =</span><br><span class="line">    !forAll(s, (elem) =&gt; !p(elem))</span><br></pre></td></tr></table></figure><p>但是，这显得太长了，能不能缩短到只有一行代码呢？</p><p>之前提到，<code>s</code> 和 <code>p</code> 的类型实际上是一样的，也就是说，我们可以重用上面的方法来对 <code>s</code> 和 <code>p</code> 进行处理。</p><p>那么，<code>s</code> 和 <code>p</code> 在不存在的情况下，是什么样的关系呢？</p><p>我们可以从上面的结论出发继续思考：</p><p>对于所有的元素，都不满足给定条件 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">⇒</span></span></span></span> 对于 <code>s</code> 的所有元素，都位于「在 <code>s</code> 且不在 <code>p</code> 中」这个集合内</p><p>所以，我们得到了一个简便的写法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exists</span></span>(s: <span class="type">Set</span>, p: <span class="type">Int</span> =&gt; <span class="type">Boolean</span>) = !forAll(s, diff(s, p))</span><br></pre></td></tr></table></figure><h2 id="5-map"><a class="markdownIt-Anchor" href="#5-map"></a> 5. <code>map()</code></h2><p>本题最难的部分来了，<code>map()</code> 函数，用于对集合中的元素进行变换操作，返回一个变换过后的新集合。</p><p>鉴于我们的集合是一个 <strong>函数</strong>，那么 <code>map()</code> 方法也就是返回一个 <strong>新函数</strong>，用来检测参数是否满足新变换过后的条件。</p><p>因为 <code>map()</code> 函数是针对原有集合进行变换，所以，我们应该基于原有集合生成上面的新函数。</p><p>也就是说，对于原有集合来说，是否存在一个元素，它变换过后的数值和传入的参数相等：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(s: <span class="type">Set</span>, f: <span class="type">Int</span> =&gt; <span class="type">Int</span>) =</span><br><span class="line">    x =&gt; exists(s, elem =&gt; x==f(elem))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coursera </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Coursera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 模式匹配</title>
      <link href="//Scala/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>//Scala/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>模式匹配，是 Scala 相比 Java 在类型上的一个很好地改进；</p><p>通过引入模式匹配，消除了 Java 中常见的类型检测和强制转换(cast)；</p><p>拥有更高的安全性</p><a id="more"></a><h2 id="1-问题背景"><a class="markdownIt-Anchor" href="#1-问题背景"></a> 1. 问题背景</h2><p>模式匹配主要解决的问题就是一个树状的类型依赖图；</p><p>比如算数表达式，由文法可知，它是具有树状依赖关系的：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>E</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>→</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mo>+</mo><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mo>−</mo><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mo>∗</mo><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>E</mi><mi mathvariant="normal">/</mi><mi>E</mi><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} E &amp; \rightarrow \\ &amp; E+E \ | \\ &amp; E-E \ | \\ &amp; E*E \ | \\ &amp; E/E \ | \\ &amp; (E) \ | \\ &amp; i \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.500000000000004em;vertical-align:-5.000000000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.500000000000001em"><span style="top:-7.660000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span><span style="top:-6.16em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-4.659999999999999em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-3.1599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-1.6599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-.15999999999999837em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:1.3400000000000016em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.000000000000002em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.500000000000001em"><span style="top:-7.660000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span></span></span><span style="top:-6.16em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-4.659999999999999em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-3.1599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-1.6599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:-.15999999999999837em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">∣</span></span></span><span style="top:1.3400000000000016em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.000000000000002em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，我们可以使用如下的类来表示一个算术表达式：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Sum</span>(<span class="params">leftOp: <span class="type">Expr</span>, rightOp: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br></pre></td></tr></table></figure><p>那么当我们需要使用类似 <code>eval()</code> 的方法时，该如何实现这个方法呢？</p><h2 id="2-各有缺陷的解法"><a class="markdownIt-Anchor" href="#2-各有缺陷的解法"></a> 2. 各有缺陷的解法</h2><h3 id="21-使用类型说明"><a class="markdownIt-Anchor" href="#21-使用类型说明"></a> 2.1 使用类型说明</h3><p>一个暴力解决的思路就是为 <code>Expr</code> 添加上一个类型的说明，即：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span></span>: <span class="type">Boolean</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSum</span></span>: <span class="type">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，随着以后算术表达式的种类越来越多，比如加入了乘法和除法；</p><p>那么，这个实现会导致方法数的平方级别爆炸。</p><blockquote><p>每增加一个种类，都需要对现有的所有类进行方法的增加</p></blockquote><p>显然，使用类型说明(classification) 是不行的。</p><h3 id="22-类型检测和造型"><a class="markdownIt-Anchor" href="#22-类型检测和造型"></a> 2.2 类型检测和造型</h3><p>Java 这门面向对象语言对此则有比较好的解法：</p><p>通过对对象进行类型检测和强制转换(cast)；</p><p>由于强制转换后类型得到限定，所以就可以分别进行检测工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eval</span><span class="params">(Expr e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Sum) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对的，Scala 也具有这种语法特性：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>(e: <span class="type">Expr</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.isInstanceOf[<span class="type">Number</span>]) &#123;</span><br><span class="line">        e.asInstanceOf[<span class="type">Number</span>].numberValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.isInstanceOf[<span class="type">Sum</span>]) &#123;</span><br><span class="line">        <span class="keyword">val</span> sum = e.asInstanceOf[<span class="type">Sum</span>]</span><br><span class="line">        eval(sum.leftOp) + eval(sum.rightOp)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，这种方法由于是比较低层级的，具有指令性特征；</p><p>同时，过多的类型检测和强制转换也造成了诸多不安全因素：</p><p>如果运行时类型改变了，那么很可能会出现异常。</p><h3 id="23-面向对象的解法"><a class="markdownIt-Anchor" href="#23-面向对象的解法"></a> 2.3 面向对象的解法</h3><p>现在我们来选择一个更高级的解决办法，通过利用多态特性，来解决此类问题。</p><p>相比将 <code>eval()</code> 作为一个外部的函数，不如将其作为类的一个内部方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>(<span class="params">leftOp: <span class="type">Expr</span>, rightOp: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = leftOp.eval + rightOp.eval</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过语言自带的多态特性，我们可以使用到具体的 <code>eval()</code>；</p><p>这样就能很优雅的解决上面的问题；</p><p>不过，这种写法有个缺陷；</p><p>如果我们需要添加一个新的方法，例如 <code>show()</code>，则需要更改所有的现存类；</p><p>而且，如果我们需要一个化简操作，它不能仅仅只考虑一个节点，而需要多个节点综合考虑；</p><p>这样，我们可以发现，即使使用多态，也没能解决我们所有的问题</p><h2 id="3-模式匹配"><a class="markdownIt-Anchor" href="#3-模式匹配"></a> 3. 模式匹配</h2><p>在 Scala 中，具有一个很常用的语法用于解决这类问题，即 <strong>模式匹配</strong>；</p><p>模式匹配使用 <code>match</code> 定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sum</span>(left, right) =&gt; left.eval + right.eval</span><br><span class="line">    <span class="keyword">case</span> anotherE =&gt; anotherE.eval</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="comment">//Ignore</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>match</code> 语句块中，包含多个 <code>case</code> 语句；</p><p>每个 <code>case</code> 语句包括：<code>case</code> 关键字，模式和表达式，模式和表达式使用 <code>=&gt;</code> 分隔。</p><p>乍一看，这个语法和 C++/Java 中的 <code>switch</code> 很像；</p><p>不过，它进行了大幅度的强化，主要就是放宽了对选择器的限制：</p><p>现在 <code>case</code> 语句可以是：</p><ol><li>构造器</li><li>变量</li><li>常量</li><li>通配符 <code>_</code></li></ol><p>其中：</p><ul><li>构造器必须是 <code>case class</code></li><li>变量必须以小写字母开头</li><li>常量必须以大写字母开头</li></ul><h2 id="4-匹配处理"><a class="markdownIt-Anchor" href="#4-匹配处理"></a> 4. 匹配处理</h2><p>首先，如果没有 <code>case</code> 能够匹配选择器，则会抛出异常。</p><p>然后，如果匹配成功，会将 <strong>整个 <code>match</code> 语句</strong> 替换为 <code>case</code> 的 right-hand side。</p><p>对于不同的情况，则是：</p><ul><li>构造器，将参数绑定 <code>case</code> 中的形参</li><li>变量，对变量进行赋值</li><li>常量，检测和常量的相等性</li></ul><h2 id="5-case-class"><a class="markdownIt-Anchor" href="#5-case-class"></a> 5. Case Class</h2><p>Case Class 是一种特殊的类，通常用于进行模式匹配；</p><p>但是，它还具有一些其他的有用特性：</p><p>它不需要 <code>new</code> 关键字进行构建：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">Person</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"hehe"</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>它的主要构造器参数直接可以作为类的字段：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = person.name</span><br></pre></td></tr></table></figure><p>它的相等性判断是结构化的，当它所有的成员都相等时，它就相等，和引用无关；</p><p>同时还提供了 <code>toString()</code> 方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> firstSms = <span class="type">SMS</span>(<span class="string">"12345"</span>, <span class="string">"Hello!"</span>)</span><br><span class="line"><span class="keyword">val</span> secondSms = <span class="type">SMS</span>(<span class="string">"12345"</span>, <span class="string">"Hello!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstSms == secondSms) &#123;</span><br><span class="line">  println(<span class="string">"They are equal!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">"SMS is: "</span> + firstSms)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">They are equal!</span><br><span class="line">SMS is: SMS(12345, Hello!)</span><br></pre></td></tr></table></figure><h2 id="6-模式匹配的解决办法"><a class="markdownIt-Anchor" href="#6-模式匹配的解决办法"></a> 6. 模式匹配的解决办法</h2><p>使用模式匹配，我们不仅可以对单个节点进行解析工作；</p><p>同时，我们还可以查看节点之间的关系：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sum</span>(left, right) =&gt; left.eval + right.eval</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>: <span class="type">String</span> = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n.toString</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sum</span>(left, right) =&gt; left.show + <span class="string">"+"</span> + right.show</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Prod</span>(left, right) =&gt;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(e: <span class="type">Expr</span>): <span class="type">String</span> = e <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Sum</span>(l, r) =&gt; <span class="string">"("</span> + l.show + <span class="string">"+"</span> + r.show + <span class="string">")"</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; e.show</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      f(left) + <span class="string">"*"</span> + f(right)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Var</span>(x) =&gt; x</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Sum</span>(<span class="params">left: <span class="type">Expr</span>, right: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Var</span>(<span class="params">x: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Prod</span>(<span class="params">left: <span class="type">Expr</span>, right: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br></pre></td></tr></table></figure><p>上面的 <code>show</code> 方法通过查看子节点情况，实现了优先级区分:</p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79ly1fenynuh6prj316g09g763.jpg"></p><h2 id="7-和多态方法的区别"><a class="markdownIt-Anchor" href="#7-和多态方法的区别"></a> 7. 和多态方法的区别</h2><p>那么模式匹配相比面向对象方法有什么优势呢？</p><p>如果你倾向于在现有的类架构上添加 <strong>通用的方法</strong>，那么采用模式匹配会更好；</p><p>因为模式匹配只需要修改匹配代码，而不需要在各个子类重新实现方法。</p><p>但是，如果你倾向于增加子类，而不是增加通用的处理方法，那么采用多态方法会更好；</p><p>原因是采用多态架构只需要建立一个子类，而重载方法这些繁琐工作 IDE 会帮你做好；</p><p>而模式匹配还需要在顶层代码中进行修改</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打字训练网站</title>
      <link href="//Talk/%E6%89%93%E5%AD%97%E8%AE%AD%E7%BB%83%E7%BD%91%E7%AB%99/"/>
      <url>//Talk/%E6%89%93%E5%AD%97%E8%AE%AD%E7%BB%83%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>买了新键盘之后就想试一试它的威力，所以就找了一个打字训练网站来打字；</p><p>在知乎上找了一圈，结果就找到了 <span class="exturl" data-url="aHR0cDovL3d3dy5rZXlici5jb20vcHJhY3RpY2U=" title="http://www.keybr.com/practice">这个<i class="fa fa-external-link"></i></span>；</p><p>练了一圈的感受就是： <strong>左手好累啊！！！</strong></p><p>基本上单词表里面最长的 S 和 T 都在左手了，而我又习惯使用左手来按空格键；</p><p>结果就是我的左手现在累得不成样子了；</p><p>不过最后成绩也不怎么样，大概也就 50 多 wpm 吧，相信大家一定会比我打字快的。</p><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79ly1fenqgox6a5j317a0jejtu.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 打字 </tag>
            
            <tag> Typing training </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Realforce 87u</title>
      <link href="//Buying/Realforce%2087u/"/>
      <url>//Buying/Realforce%2087u/</url>
      
        <content type="html"><![CDATA[<p>最近终于下定决心来买这个键盘了。</p><p>主要说说使用感受吧</p><p>2018/1/8 更新部分内容</p><a id="more"></a><h2 id="1-手感"><a class="markdownIt-Anchor" href="#1-手感"></a> 1. 手感</h2><p>我买的这个是静音版，手感介于红轴和茶轴之间，就是稍微软一点的茶轴，按起来有种噗噗的感觉；</p><p>显然，打击感是一点也没有了，不过真的有种揉胸的感觉。</p><p>不过这个键盘的优点在于：由于是分区压力，所以能极大地缓解小拇指的压力；</p><p>之前我用的 filco 青轴，最后有 40% 的概率用小拇指打不出 shift 按键；</p><p>这也是为什么我要买一个新键盘的原因。</p><h2 id="2-特色功能"><a class="markdownIt-Anchor" href="#2-特色功能"></a> 2. 特色功能</h2><p>Realforce 87u 有个特色功能，就是把没有什么卵用的 Scroll Lock 变成了 NumLock；</p><p>也就是说，这个键盘有 <strong>小键盘</strong> 的功能！</p><p>这是我在 87 键盘上从来没有见到过的。</p><p>不过在 Mac 上，这个 NumLock 就失效了；</p><blockquote><p>2018/1/8 补充：<br><strong>可惜的是，自从升级到 High Sierra 之后下面的方法就不管用了</strong><br><strong>不过吧，反正我也不怎么用这个小键盘，先就这样吧。</strong></p></blockquote><p>需要使用 Karabiner 进行键位修改。</p><p>首先下载 Karabiner，这里有个小问题就是 <code>brew cask</code> 会报 <code>Operation not permitted</code> 的错误；</p><p>所以最好还是自己下载镜像安装为好。</p><p>随后点击 <code>Open private.xml</code>：</p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNbRwly1feindhtm6kj318g0zoagn.jpg"></p><p>然后加上一条自定义配置<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Map Realforce Numlock to OSX Numlock function<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>private.pc_numlock_to_mac_numlock<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">autogen</span>&gt;</span>__KeyToKey__ KeyCode::KEYPAD_CLEAR, KeyCode::VK_IOHIKEYBOARD_TOGGLE_NUMLOCK<span class="tag">&lt;/<span class="name">autogen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后再到 <code>Change Key</code> 启用就可以了。</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNbRwly1feingd0pg8j30ts06qabi.jpg"></p><h2 id="3-缺点"><a class="markdownIt-Anchor" href="#3-缺点"></a> 3. 缺点</h2><p>目前遇到的缺点只有一个：</p><p>就是它的导线槽太紧了，几乎是死死卡住键盘的线缆；</p><p>结果我摆弄的时候需要用很大的力气才能把线弄出来，希望以后不要弄烂为好；</p><blockquote><p>小贴士：弄的时候长痛不如短痛，直接一个猛劲可以更快的减轻线缆的损伤</p></blockquote><p>其次就是居然不配理线用的尼龙扎带，差评！</p><h2 id="4-为什么不买-hhkb"><a class="markdownIt-Anchor" href="#4-为什么不买-hhkb"></a> 4. 为什么不买 HHKB</h2><p>不喜欢 HHKB 的配列。</p><p>我就爱用 <code>Caps Lock</code> 🙃</p><h2 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5. 总结</h2><p>如果你很喜欢用青轴，很享受用青轴的打击感，请直接买青轴，静电容不适合你；</p><p>如果你用青轴感觉到力不从心，但是钱不够，请买茶轴或者红轴；</p><p>如果你有点闲钱，而且比较有意向打造一个良好的打字环境，那么可以考虑买一个静电容；</p><p>最后来一张玉照：</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNbRwly1feinxuuro5j31kw23ve83.jpg"></p><h2 id="6-补充"><a class="markdownIt-Anchor" href="#6-补充"></a> 6. 补充</h2><p>上传一张 Switch 的说明书，说不定以后会用到。</p><p><img alt data-src="https://ws3.sinaimg.cn/large/006tNc79ly1fn953gfiazj31kw2t5h2v.jpg"></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM5NTIyNDMxL2Fuc3dlci84MTc1MzcyMw==" title="https://www.zhihu.com/question/39522431/answer/81753723">https://www.zhihu.com/question/39522431/answer/81753723<i class="fa fa-external-link"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 买买买 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 买买买 </tag>
            
            <tag> 键盘 </tag>
            
            <tag> Realforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Experience</title>
      <link href="//Hexo/Hexo%20Experience/"/>
      <url>//Hexo/Hexo%20Experience/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>这是我折腾 Hexo 博客框架的经验；</p><p>希望能给后来者以启迪。</p><a id="more"></a><h2 id="2-我所需要的功能"><a class="markdownIt-Anchor" href="#2-我所需要的功能"></a> 2. 我所需要的功能</h2><p>虽然，现今，网上已经很多教你如何一步一步地搭建 Hexo 博客，也有很多人踩过很多坑；</p><p>不过，对于我的一些要求，仍然有很多的方面未能解决。</p><p>我主要需要的功能一共有四个：</p><ol><li>数学公式渲染</li><li>PlantUML 图</li><li>TODO List</li><li>Footnotes</li></ol><h2 id="3-数学公式渲染"><a class="markdownIt-Anchor" href="#3-数学公式渲染"></a> 3. 数学公式渲染</h2><p>这个倒是有很多人发了很多博客，然后也解决了一些问题。</p><p>主要就是 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZWQ=" title="https://www.npmjs.com/package/hexo-renderer-marked"><code>hexo-renderer-marked</code><i class="fa fa-external-link"></i></span> 中，把 MathJax 中的 <code>_</code> 解析渲染成了斜体；</p><p>这样，就造成了解析错误；</p><p>同时，对于多行的数学公式，也存在很多问题。</p><p>经过一番倒腾，我的最终决定是使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1rcmFtZWQ=" title="https://www.npmjs.com/package/hexo-renderer-kramed"><code>hexo-renderer-karmed</code><i class="fa fa-external-link"></i></span> 代替原先官方自带的 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZWQ=" title="https://www.npmjs.com/package/hexo-renderer-marked"><code>hexo-renderer-marked</code><i class="fa fa-external-link"></i></span></p><p>对于另外的渲染器，它们主要的缺点有：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1wYW5kb2M=" title="https://www.npmjs.com/package/hexo-renderer-pandoc"><code>hexo-renderer-pandoc</code><i class="fa fa-external-link"></i></span> 过于沉重</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZG93bi1pdA==" title="https://www.npmjs.com/package/hexo-renderer-markdown-it"><code>hexo-renderer-markdown-it</code><i class="fa fa-external-link"></i></span> 不支持 NexT 主题的 『Read More』</li></ul><p>所以，最后选择使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tYXJrZG93bi1pdA==" title="https://www.npmjs.com/package/hexo-renderer-markdown-it"><code>hexo-renderer-karmed</code><i class="fa fa-external-link"></i></span>；</p><p>不过这个插件在某些时候也存在问题；</p><p>在<span class="exturl" data-url="aHR0cDovL3h1ZG9uZ3lhbmcuY29kaW5nLm1lL21hdGgtaW4taGV4by8=" title="http://xudongyang.coding.me/math-in-hexo/">这里<i class="fa fa-external-link"></i></span>有一个 workaround</p><h2 id="4-plantuml"><a class="markdownIt-Anchor" href="#4-plantuml"></a> 4. PlantUML</h2><p>平时我主要使用的 UML 绘图工具就是这个；</p><p>主要是因为我用 Atom 上面的 <code>markdown-preview-enhanced</code> 能够实时展现 PlantUML 图。</p><p>Hexo 插件列表中，也存在一个 PlantUML 的插件，<code>hexo-tag-plantuml</code>；</p><p>不过这个是 <code>tag</code> 插件，如果使用这个的话，我就需要使用标签来定义 UML；</p><p>而不能使用 markdown 原生的 code fence；</p><p>此时，我的 <code>markdown-preview-enhanced</code> 也会不起作用；</p><p>所以就只能自造轮子：自己实现了一个 <code>filter</code> 插件，用来将 code fence 转换成 PlantUML 图。</p><p>插件源码在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL2hleG8tZmlsdGVyLXBsYW50dW1s" title="https://github.com/wafer-li/hexo-filter-plantuml">这里<i class="fa fa-external-link"></i></span></p><h2 id="5-todo-list"><a class="markdownIt-Anchor" href="#5-todo-list"></a> 5. TODO List</h2><p>这个是比较神奇的：</p><p>之前选择的 <code>kramed</code> 没有这个功能，而 <code>marked</code> 有这个功能；</p><p>不过幸好代码量不多，可以直接将 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXJlbmRlcmVyLW1hcmtlZC9wdWxsLzMy" title="https://github.com/hexojs/hexo-renderer-marked/pull/32">PR<i class="fa fa-external-link"></i></span> 中的改动合并到 <code>kramed</code> 中。</p><h2 id="6-footnotes"><a class="markdownIt-Anchor" href="#6-footnotes"></a> 6. Footnotes</h2><p>这个实际上是一个 Reference 的功能；</p><p>这个是目前最容易而且也没有坑的；</p><p>直接安装 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZWZlcmVuY2U=" title="https://www.npmjs.com/package/hexo-reference"><code>hexo-reference</code><i class="fa fa-external-link"></i></span> 插件即可。</p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><p><span class="exturl" data-url="aHR0cDovL2lqaWFvYmVyLmdpdGh1Yi5pby9jYXRlZ29yaWVzL2hleG8v" title="http://ijiaober.github.io/categories/hexo/">Goon X 的 Hexo 合集<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovLzJ3aWxka2lkcy5jb20vMjAxNi8xMC8wNi8lRTUlQTYlODIlRTQlQkQlOTUlRTUlQTQlODQlRTclOTAlODZIZXhvJUU1JTkyJThDTWF0aEpheCVFNyU5QSU4NCVFNSU4NSVCQyVFNSVBRSVCOSVFOSU5NyVBRSVFOSVBMiU5OC8=" title="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/">如何处理Hexo和MathJax的兼容问题<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 泛型和变形</title>
      <link href="//Scala/Scala%20%E6%B3%9B%E5%9E%8B%E5%92%8C%E5%8F%98%E5%BD%A2/"/>
      <url>//Scala/Scala%20%E6%B3%9B%E5%9E%8B%E5%92%8C%E5%8F%98%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>泛型是多态的一个重要组成部分，通过运行时确定的类型来加载对应的类代码；</p><p>作为一个面向对象语言，Scala 同样具有泛型功能。</p><a id="more"></a><h2 id="2-定义"><a class="markdownIt-Anchor" href="#2-定义"></a> 2. 定义</h2><p>与 Java 不同，Scala 的泛型是使用方括号 <code>[]</code> 定义的：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>同样，在泛型方法的定义中，泛型参数的位置也和 Java 不一样：</p><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; listOf()</span><br></pre></td></tr></table></figure><p>Scala:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listOf</span></span>[<span class="type">T</span>]()</span><br></pre></td></tr></table></figure><h2 id="3-上界和下界"><a class="markdownIt-Anchor" href="#3-上界和下界"></a> 3. 上界和下界</h2><p>这个方面，Scala 和 Java 有些许不同；</p><p>首先，在定义方面，Scala 使用两个特殊的符号表示上下界：</p><p><code>A &lt;: B</code> 表示 A 是 B 的子类，也就是 B 是 A 的上界；</p><p><code>A &gt;: B</code> 表示 A 是 B 的超类，也就是 B 是 A 的下界。</p><p>而 Java 使用 <code>extends</code> 关键字来说明。</p><p>其次，Scala 中，可以使用超类限定类型参数；</p><p>而 Java 只能使用 <code>extends</code> 即子类限定类型参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Scala</span><br><span class="line">[U &gt;: T]</span><br><span class="line"></span><br><span class="line">// Java</span><br><span class="line">U super T // ERROR!</span><br></pre></td></tr></table></figure><h2 id="4-逆变和协变"><a class="markdownIt-Anchor" href="#4-逆变和协变"></a> 4. 逆变和协变</h2><p>关于逆变和协变，Scala 相比于 Java 中的 <strong>使用声明</strong>，还可以在定义中指明协变和逆变。</p><h3 id="41-名词解释"><a class="markdownIt-Anchor" href="#41-名词解释"></a> 4.1 名词解释</h3><p>如果 <code>A &lt;: B</code> (A 是 B 的子类)，那么对于类 <code>C</code> 来说：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mo>:</mo><mi>C</mi><mo stretchy="false">[</mo><mi>B</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[A] &lt;: C[B]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault">A</span><span class="mclose">]</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">]</span></span></span></span> =&gt; C 是协变(covariant)的</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mo>:</mo><mi>C</mi><mo stretchy="false">[</mo><mi>B</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[A] &gt;: C[B]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault">A</span><span class="mclose">]</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">]</span></span></span></span> =&gt; C 是逆变(contravariant)的</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[A]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault">A</span><span class="mclose">]</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">[</mo><mi>B</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">C[B]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">]</span></span></span></span> 没有继承关系 =&gt; C 是不变(nonvariant) 的</li></ol><p>对 Java 而言，<code>? extends T</code> 提供了协变特性；</p><p><code>? super T</code> 提供了逆变特性</p><h3 id="42-定义中指明可变性"><a class="markdownIt-Anchor" href="#42-定义中指明可变性"></a> 4.2 定义中指明可变性</h3><p>这是 Scala 和 Kotlin 中相对于 Java 的一个改进，可以在 <strong>类定义</strong> 中指明泛型可变性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Scala</span><br><span class="line">class List[+T]</span><br><span class="line"></span><br><span class="line">// Kotlin</span><br><span class="line">class List&lt;out T&gt;</span><br></pre></td></tr></table></figure><p>此时，指明了 <code>List</code> 是 <strong>协变的</strong>，也就是说，<code>List[String]</code> 是 <code>List[Object]</code> 的子类。</p><p>同理，下面的写法指明了逆变性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Scala</span><br><span class="line">class List[-T]</span><br><span class="line"></span><br><span class="line">// Kotlin</span><br><span class="line">class List&lt;in T&gt;</span><br></pre></td></tr></table></figure><p>当不使用 <code>+</code>、<code>-</code> 号修饰时，就是不变(nonvariant)的</p><h3 id="43-函数"><a class="markdownIt-Anchor" href="#43-函数"></a> 4.3 函数</h3><p>事实上，在 Scala 中，函数也是一个对象；</p><p><code>def</code> 语句声明的函数会被转化成一个 <code>FunctionN&lt;-T, +U&gt;</code> 类：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Function1</span>[-<span class="type">T</span>, +<span class="type">U</span>] </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(param: <span class="type">T</span>): <span class="type">U</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>apply</code> 函数来进行函数的调用。</p><p>我们可以看到，函数参数是逆变的，但是返回类型是协变的；</p><p>这是为什么呢？</p><p>实际上，这是里氏法则的应用：</p><p>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>&lt;</mo><mo>:</mo><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_2 &lt;: A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo>&lt;</mo><mo>:</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_1 &lt;: B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，那么对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1 \Rightarrow B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2 \Rightarrow B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 来说：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 所接受的范围比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 广，所以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 作为参数，可以接受 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 要更加严格，所以返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 就相当于肯定能返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>；</p><p>此时，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1 \Rightarrow B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 的形参和返回值都满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2 \Rightarrow B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 的要求；</p><p>我们就可以使用前者替代后者，也就是说，此时：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>1</mn></msub><mo>&lt;</mo><mo>:</mo><msub><mi>A</mi><mn>2</mn></msub><mo>⇒</mo><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_1 \Rightarrow B_1 &lt;: A_2 \Rightarrow B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mrel">:</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></span></p><p>那么说明， <strong>函数形参是逆变的，而返回值是协变的</strong></p><p>Scala 会自动检查函数的泛型变形，以满足上面的要求。</p><h3 id="44-协变的函数形参"><a class="markdownIt-Anchor" href="#44-协变的函数形参"></a> 4.4 协变的函数形参</h3><p>函数上面的变形要求是为了保证数据的一致性；</p><p>如果你的函数不进行数据的更改操作，那么事实上是可以将形参声明为协变的；</p><p>不过，鉴于 Scala 的泛型检查，它禁止了这种方法的出现；</p><p>此时，我们可以使用泛型下界，来让我们的变形满足 Scala 的要求：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat</span></span>[<span class="type">U</span> &gt;: <span class="type">T</span>](elem: <span class="type">U</span>): <span class="type">List</span>[<span class="type">U</span>] = <span class="keyword">new</span> <span class="type">Cons</span>(elem, <span class="type">Empty</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 集合框架 Collection</title>
      <link href="//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%20Collection/"/>
      <url>//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%20Collection/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p><code>Collection</code> 接口是 Java 集合框架最基本的接口；</p><p>它提供了基本的元素操作方法和遍历使用的迭代器；</p><p>同时，它还提供了关于 <code>Collection</code> 的批量操作方法。</p><a id="more"></a><h2 id="2-基本操作"><a class="markdownIt-Anchor" href="#2-基本操作"></a> 2. 基本操作</h2><p>基本的元素操作包括 <code>add()</code> 和 <code>remove()</code>，同时也包括 <code>size()</code> 和 <code>isEmpty()</code> 等一系列的集合基本操作。</p><p>其中 <code>add()</code> 和 <code>remove()</code> 的返回值是 <code>boolean</code>；</p><p>这个布尔值用于表示增加和删除是否成功。（是否对集合本身进行了操作）</p><h2 id="3-遍历操作"><a class="markdownIt-Anchor" href="#3-遍历操作"></a> 3. 遍历操作</h2><p>Java 的 Collection 遍历操作有三种：</p><ol><li>使用迭代器 <code>Iterator</code></li><li>使用 <em>for each</em> 循环</li><li>使用 <code>Stream</code> 的聚合操作(Java 8)</li></ol><p>实际上，使用 <em>for each</em> 循环和使用迭代器是一样的；</p><p><em>for each</em> 可以应用于任何实现了 <code>Iterable</code> 接口的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ineterface Iterable&lt;E&gt; &#123;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>for each</em> 实际上就是应用它返回的迭代器进行遍历操作。</p><p>关于 <code>Stream</code> 用单独的一篇文章介绍，这里主要解析迭代器的工作。</p><h2 id="4-迭代器的遍历"><a class="markdownIt-Anchor" href="#4-迭代器的遍历"></a> 4. 迭代器的遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>next()</code> 方法返回下一个元素，<code>hasNext()</code> 方法用于检测是否到达了集合末尾。</p><p>当到达了集合末尾时，调用 <code>next()</code> 会抛出 <code>NoSuchElementException</code>，所以，正确的写法是在循环时使用 <code>hasNext()</code> 作为判断条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    element = iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>Collection</code> 接口已经扩展(extends)了 <code>Iterable</code> 接口，所以自带 <code>iterator()</code> 方法。</p><p>元素被访问的顺序取决于集合类的具体实现。</p><p>比较特别的是，Java 中的迭代器和 C++ 中的迭代器不一样；</p><p>C++ 中的迭代器是基于索引的，可以不执行查找操作就将迭代器进行移动；</p><p>相反，Java 中的迭代器更类似于 <code>read()</code> 方法，迭代器的查找操作和移动操作紧密相连；</p><p>Java 中的迭代器更类似于是 <strong>位于两个元素之间</strong>，调用 <code>next()</code> 将越过一个元素，并返回这个元素的引用。</p><h2 id="5-迭代器的删除"><a class="markdownIt-Anchor" href="#5-迭代器的删除"></a> 5. 迭代器的删除</h2><p>比较特别的是，<code>Iterator</code> 接口还提供了一个 <code>remove()</code> 方法；</p><p>它会删除 <strong>上次</strong> 调用 <code>next()</code> 的元素；</p><p>也就是说，如果你想删除某个位置上的元素，你的迭代器就必须 <strong>先越过</strong> 这个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"></span><br><span class="line">iter.next();    <span class="comment">//skip over the first</span></span><br><span class="line">iter.remove();  <span class="comment">// delete the first</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>next()</code> 和 <code>remove()</code> 是具有依赖性的；</p><p><strong>不能连续调用两次 <code>remove()</code></strong>，否则，将会抛出 <code>IllegalStateException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iter.remove();</span><br><span class="line">iter.remove();</span><br></pre></td></tr></table></figure><p>必须先调用 <code>next()</code> 来越过将要删除的元素。</p><h2 id="6-批量操作"><a class="markdownIt-Anchor" href="#6-批量操作"></a> 6. 批量操作</h2><p>Collection 同时提供了一套批量操作方法，用于对另一个集合进行操作，主要的方法有：</p><ol><li><p><code>containsAll()</code></p><blockquote><p>判断另一集合是否为本集合的子集<br>（本集合是否完全包含了另一集合）</p></blockquote></li><li><p><code>addAll()</code></p><blockquote><p>将另一集合的所有元素加入到本集合中</p></blockquote></li><li><p><code>removeAll()</code></p><blockquote><p>将本集合中含有的 另一集合中的所有元素 从本集合中删除</p></blockquote></li><li><p><code>retainAll()</code></p><blockquote><p>将本集合中 <strong>不属于</strong> 另一集合的所有元素从本集合中删除<br>即，将本集合改造成两个集合的 <strong>交集</strong></p></blockquote></li><li><p><code>clear()</code></p><blockquote><p>删除本集合中的所有元素</p></blockquote></li></ol><h2 id="7-和数组的转换操作"><a class="markdownIt-Anchor" href="#7-和数组的转换操作"></a> 7. 和数组的转换操作</h2><p><code>Collection</code> 存在一个 <code>toArray()</code> 方法；</p><p>但是，比较坑爹的是，这个方法仅仅只返回一个 <code>Object[]</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] a = c.toArray();</span><br></pre></td></tr></table></figure><p>这显然没有什么卵用，因为 <code>Object[]</code> 是 <strong>新构建的</strong>，它不能强制转换成更为具体的数组。</p><p>所以，我们需要采用另一个 <code>toArray(T[] a)</code> 方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">String[] stringArray = c.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>实际上，我们可以直接向 <code>toArray()</code> 提供一个足够大的数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">String[] stringArray = c.toArray(<span class="keyword">new</span> String[c.size()]);</span><br></pre></td></tr></table></figure><p>那么这两种写法有什么区别呢？</p><p>根据 JDK 文档，当数组参数的空间不够大时，它会自动重新构建一个足够大的数组进行元素转存；</p><p>当数组空间足够大时，<code>toArray()</code> 就不自己构建数组了，而是直接将元素储存到数组中。</p><p>这样看来，写法一好像没有什么必要，毕竟都要创建数组，不如直接创建了事，何必要多出一个无用的数组呢？</p><p>实际上，写法二具有线程安全问题；</p><p>即使你使用线程安全的 <code>Collection</code>，但是当有元素在 <code>size()</code> 和 <code>toArray()</code> 之间被删除了，那么最终生成的数组就会包含 <code>null</code>。</p><p>而，写法一就可以直接避免这个问题。</p><blockquote><p>线程安全的 <code>Collection</code> 只保证每个方法是线程安全的，当你调用两个以上的方法联合使用时，就不具备线程安全了。</p></blockquote><p>Reference: <span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMjkzOTQ2L3RoZS1lYXNpZXN0LXdheS10by10cmFuc2Zvcm0tY29sbGVjdGlvbi10by1hcnJheSNjb21tZW50NjY3MzAxNzhfMzI5Mzk3MA==" title="http://stackoverflow.com/questions/3293946/the-easiest-way-to-transform-collection-to-array#comment66730178_3293970">The easiest way to transform collection to array?<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 集合框架</title>
      <link href="//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>//Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>任何语言都会提供一套基础的数据结构的库；</p><p>Java 也不例外，而且提供了一个庞大的数据结构库，有时对于它们之间的选择让人很困惑。</p><p>这里就来简单说明一下 Java 的 Collection 和基本的 Collection 数据结构</p><a id="more"></a><h2 id="2-接口关系图"><a class="markdownIt-Anchor" href="#2-接口关系图"></a> 2. 接口关系图</h2><p>和现代的数据结构类库一样，Java 采用了 Collection 接口和实现相分离的策略。</p><p>通过这样，来做到使用一个统一的接口，对某种数据结构的不同实现进行多态调用。</p><p>基本的 <code>Collection</code> 接口继承关系如下：</p><img data-src="https://www.plantuml.com/plantuml/svg/RP1D2i8m48NtSufSe3TmKT2bBiGJXEQL1l9Jqyb2yF2cgP0XkXduFfZtXXatrecpTsG38yrwWZf7vp2nZO64VO05NUqcyPwH8VY2Ps6v7HF3x1dKujNfFGmrk7SrlfT7IM-Fgd-XLCQNMdixwQRNdmDtHsN8jUeMQw3WLtuf3rwYaMQsS8P615CU-G40"><p>需要注意的是，<code>Map</code> 并非 <code>Collection</code> 的子类，而是自成一派。</p><p>同时，这些接口都是 <strong>泛型接口</strong>，可以使用它们定义泛型方法。</p><h2 id="3-接口具体含义"><a class="markdownIt-Anchor" href="#3-接口具体含义"></a> 3. 接口具体含义</h2><p>这些接口的具体含义如下：</p><ul><li><p><code>Collection</code></p><blockquote><p>Collection 类结构的根，一个 Collection 代表了一堆对象的集合体，对象通常被称作 <em>元素</em></p></blockquote></li><li><p><code>Set</code></p><blockquote><p>一个 <strong>不能拥有重复元素</strong> 的 Collection，类似数学意义上的集合</p></blockquote></li><li><p><code>List</code></p><blockquote><p>一个 <strong>有序的</strong> Collection，有时也被称作 <strong>序列</strong>(sequence)<br>一般来说，<code>List</code> 的用户对于 <code>List</code> 有着比较精确地控制<br>用户可以使用索引来进行元素的查找和插入操作</p></blockquote></li><li><p><code>Queue</code></p><blockquote><p>一个存储着即将进行处理的元素的 Collection<br>相比 Collection，它提供了特别的加入、删除和查找操作</p><p>比较特别的是，队列一般来说具有 <strong>先进先出</strong>(FIFO) 的插入和删除次序<br>队列的新元素位于队列末尾，旧元素位于队列头部</p></blockquote></li><li><p><code>Deque</code></p><blockquote><p>双端队列，在队列两头都可以进行插入和删除操作<br>同时，双端队列也同时支持 <strong>先进先出</strong>(FIFO) 和 <strong>后进先出</strong>(LIFO) 的插入和删除策略</p></blockquote></li><li><p><code>Map</code></p><blockquote><p>一个存储键值对的对象<br><code>Map</code> 不能包含重复键，每个键可以被映射到最多一个值上</p></blockquote></li><li><p><code>SortedSet</code></p><blockquote><p>一个它的元素按照 <strong>升序排列</strong> 的 <code>Set</code></p></blockquote></li><li><p><code>SortedMap</code></p><blockquote><p>一个它的键按照 <strong>升序排列</strong> 的 <code>Map</code></p></blockquote></li></ul><h2 id="4-abstract-类"><a class="markdownIt-Anchor" href="#4-abstract-类"></a> 4. Abstract 类</h2><p>集合框架中，除了接口和具体实现，还提供了一系列的 <code>Abstract*</code> 类；</p><p>它是 <code>Collection</code> 和 <code>Map</code> 以及其子接口的简单实现形式，利用泛型来提供了一些通用的方法；</p><p>比如 <code>contains()</code> 方法，就是利用了泛型的 <code>Iterator</code> 实现的。</p><p><code>Abstract</code> 类是用于进行具体集合类实现的，通过继承 <code>Abstract</code> 类，可以极大减轻</p><h2 id="5-视图"><a class="markdownIt-Anchor" href="#5-视图"></a> 5. 视图</h2><p>在通常情况下，我们需要将一个具体的 <code>Collection</code> 或者 <code>Map</code> 对象转换成另一种集合框架内的具体对象进行操作；</p><p>所以，集合框架提供了一种很有用的视图技术；</p><p>视图(views) 指的就是返回一个实现了 <strong>其他接口</strong> 的 <strong>引用</strong>，通过这个引用，来进行 <strong>原有集合</strong> 的操作，这个对象引用就是视图。</p><h3 id="51-arrayaslist"><a class="markdownIt-Anchor" href="#51-arrayaslist"></a> 5.1 <code>Array.asList()</code></h3><p>不仅集合框架中存在包装器，<code>Array</code> 类中也存在可以包装成一个 <code>List</code> 的方法；</p><p>它返回一个 <code>List</code> 的视图，可以通过它来使用 <code>List</code> 中的访问方法（包括 <code>get</code> 和 <code>set</code>）对 <strong>原数组</strong> 进行访问和元素的修改；</p><p>但是，不能调用 <code>add()</code> 和 <code>remove()</code> 这种能够对数组大小产生影响的方法；</p><p>注意，视图对象始终是在 <strong>原对象</strong> 进行操作的。</p><blockquote><p>有趣的是，<code>asList()</code> 返回的也是 <code>ArrayList</code> 对象<br>不过，不是 <code>java.util.ArrayList</code>，而是 <code>java.util.Arrays.ArrayList</code>，是其自身的一个子类</p></blockquote><p>Java 5 之后，<code>asList()</code> 方法声明为了不定参数，可以直接传入元素进行转换操作。</p><h3 id="52-子范围"><a class="markdownIt-Anchor" href="#52-子范围"></a> 5.2 子范围</h3><p>可以使用诸如 <code>subXXX()</code> 和 <code>headXXX()</code> 和 <code>tailXXX()</code> 方法返回 Collection 的一个子范围；</p><p>可以通过这个子范围视图对集合的一部分进行操作。</p><h3 id="53-不可变的视图"><a class="markdownIt-Anchor" href="#53-不可变的视图"></a> 5.3 不可变的视图</h3><p>通过 <code>unmodifiableXXX()</code> 可以获取一个不可修改的视图；</p><p>这个视图中的所有的更改器方法都会返回 <code>UnsupportedOperationException</code>；</p><p>当然，这不意味着其原始集合不能被更改，只是视图对象不能更改原有集合，但是通过原始集合的引用，同样可以更改原始的集合。</p><p>需要注意的是，<code>unmodifiableCollection()</code> 返回的集合是通过原始的 <code>Object.equals()</code> 方法进行相等性判断的；</p><p>也就是说，不能通过 <code>Collection</code> 视图进行相等性判定。</p><h3 id="54-同步视图"><a class="markdownIt-Anchor" href="#54-同步视图"></a> 5.4 同步视图</h3><p>集合框架还提供了一个同步视图，用来进行一系列的多线程同步工作。</p><p>通过 <code>synchronizedXXX()</code> 可以获取到一个线程安全的 <code>Collection</code> 或者 <code>Map</code>；</p><p>不过，这个线程安全仅限于一些基本的方法；</p><p>对于遍历方法，包括使用迭代器和 <code>Stream</code>，都需要 <strong>手动进行同步</strong></p><h3 id="55-检查视图"><a class="markdownIt-Anchor" href="#55-检查视图"></a> 5.5 检查视图</h3><p>在 Java 5 引入泛型之后，集合框架提供了一个检查视图；</p><p>它专门用于检查是否有其他类型的对象混入了集合之中。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList a = strings;</span><br><span class="line">a.add(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><p>由于使用了原始类型，编译器无法发现这一泛型错误。</p><p>使用检查视图，我们就可以发现这一错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; checkedStrings = Colllections.checkedList(strings, String.class);</span><br></pre></td></tr></table></figure><p>当发现类型不符合时，它会立即抛出一个 <code>ClassCastException</code>；</p><p>不过，它也有缺陷，它是依赖于虚拟机的泛型安全机制；</p><p>当向 <code>ArrayList&lt;Pair&lt;String&gt;&gt;</code> 中插入 <code>Pair&lt;Date&gt;</code> 时，就不能检测出这种错误。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala Hello World</title>
      <link href="//Scala/Scala%20Hello%20World/"/>
      <url>//Scala/Scala%20Hello%20World/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>Scala 既可以使用交互式命令行来编程，也可以将其写成一个独立的程序；</p><p>其中，关于构建独立程序的写法一共有两种。</p><a id="more"></a><h2 id="2-main-方法"><a class="markdownIt-Anchor" href="#2-main-方法"></a> 2. <code>main()</code> 方法</h2><p>使用 <code>main()</code> 方法是通常各种语言的程序入口，Scala 也不例外：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用-application-特质"><a class="markdownIt-Anchor" href="#3-使用-application-特质"></a> 3. 使用 <code>Application</code> 特质</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 简介</title>
      <link href="//Scala/Scala%20%E7%AE%80%E4%BB%8B/"/>
      <url>//Scala/Scala%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Scala 是高层级的，函数式，基于 JVM，完美调用 Java 的编程语言。<br>其主要特点就是它是一门函数式语言。</p><p>语法上，Kotlin 借鉴了其大部分的语法，所以体现出和 Kotlin 非常相似的特征。</p><p>同时，由于基于 JVM，所以类型系统和 Java 没有多大区别。</p><a id="more"></a><h2 id="2-什么是函数式语言"><a class="markdownIt-Anchor" href="#2-什么是函数式语言"></a> 2. 什么是函数式语言</h2><p>函数式语言的两大理念：</p><ol><li>函数也是值，可以作为参数，也可以保存在变量中，与其他类型同级</li><li>函数只应该接受参数输入，并输出返回值，不应该具有其他副作用</li></ol><h2 id="3-没有分号"><a class="markdownIt-Anchor" href="#3-没有分号"></a> 3. 没有分号</h2><p>这里需要说的一个问题是，虽然 Scala 没有分号；</p><p>但是当你写长表达式的时候可能会有问题：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someLongExpression</span><br><span class="line">+ someOtherExpression</span><br></pre></td></tr></table></figure><p>上面的语句会被隐式加上分号：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someLongExpression;</span><br><span class="line">+ someOtherExpression</span><br></pre></td></tr></table></figure><p>这样显然是不符合我们的实际意图的，解决办法有两个：</p><ol><li><p>使用括号</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(someLongExpression</span><br><span class="line">    + someOtherLongExpression)</span><br></pre></td></tr></table></figure></li><li><p>将操作符放在行尾</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someLongExpression +</span><br><span class="line">someOtherExpression</span><br></pre></td></tr></table></figure></li></ol><p>分号推断的规则为，除非以下情况，否则行尾将会被认为是一个分号：</p><ol><li><p>行尾由一个不能合法作为行尾的字符结束，如句点(<code>.</code>) 和中缀操作符 (<code>+</code>、<code>-</code>)</p></li><li><p>下一行开始于不能作为语句开始的字</p></li><li><p>行结束于括号(<code>()</code>) 和 方括号 (<code>[]</code>) 之中</p><blockquote><p>由于括号中不能容纳多个语句，所以，它之中的行不可能是一个逻辑行</p></blockquote></li></ol><h2 id="4-面向对象"><a class="markdownIt-Anchor" href="#4-面向对象"></a> 4. 面向对象</h2><p>Scala 中所有东西都是 <strong>对象</strong>；</p><p>操作符实际上是对象的 <strong>方法</strong></p><h2 id="5-变量定义"><a class="markdownIt-Anchor" href="#5-变量定义"></a> 5. 变量定义</h2><p>语法上和 Kotlin 无多大差别</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="6-函数定义"><a class="markdownIt-Anchor" href="#6-函数定义"></a> 6. 函数定义</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) x</span><br><span class="line">    <span class="keyword">else</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有趣的是，Scala 中，函数定义需要一个<strong>等号</strong>；</p><p>这意味着，函数实际上是一个 <strong>变量</strong>，而函数体实际上是一个 <strong>返回值的表达式</strong>。</p><p>同时，函数体 <strong>没有 <code>return</code></strong>，这主要是因为函数体是一个 <strong>表达式</strong>，而一个表达式理应返回其计算得到的值。</p><p>这正好体现了函数式编程的思想，函数是一个值，函数体是一个表达式。</p><h2 id="7-使用函数式风格"><a class="markdownIt-Anchor" href="#7-使用函数式风格"></a> 7. 使用函数式风格</h2><p>Scala 程序员在解决问题时，应该优先考虑函数式风格而非指令式风格。</p><p>简单的判断标准有：</p><ol><li><p>尽量使用 <code>val</code> 解决问题</p><blockquote><p>使用 <code>var</code> 会让你的 编码层级变低，而函数式编程的一个重要作用就是使你的视野聚焦在高层级中。</p></blockquote></li><li><p>尽量避免定义返回 <code>Unit</code> 的函数</p><blockquote><p>函数式编程一个理念就是函数体是表达式，而返回 <code>Unit</code> (Java 中的 <code>void</code>) 的函数一般来说都具有 <strong>副作用</strong> (即函数做了不是生成返回值的工作)</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 类和对象基础</title>
      <link href="//Scala/Scala%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
      <url>//Scala/Scala%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>Scala 除了是一门函数式语言外，还同时具有面向对象的特征；</p><p>在 Scala 中，一样具有类和对象以及多态的支持。</p><a id="more"></a><h2 id="2-构造器"><a class="markdownIt-Anchor" href="#2-构造器"></a> 2. 构造器</h2><p>类具有一个默认的 primary 构造器，它的参数直接位于 <code>class</code> 头中；</p><p>而且，更加神奇的是，<code>class</code> 中可以直接执行另外的函数；</p><p>也就是说， <strong>整个类</strong> 都是 primary 构造器。</p><p>对于多个构造器，我们采用如下的声明来实现：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name:<span class="type">String</span>, val age: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>) = <span class="keyword">this</span>(name, <span class="number">17</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过直接定义 <code>this</code> 来定义一个新的构造器</p><h2 id="3-定义和创建"><a class="markdownIt-Anchor" href="#3-定义和创建"></a> 3. 定义和创建</h2><p>和 Java 一样，Scala 中，类使用 <code>class</code> 关键字进行定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChecksumAccumulator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过和 Java 不同的，对象的构建，类没有参数，则不需要括号：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">ChecksumAccumulator</span></span><br></pre></td></tr></table></figure><h2 id="4-字段和方法"><a class="markdownIt-Anchor" href="#4-字段和方法"></a> 4. 字段和方法</h2><p>类中，字段使用 <code>val</code> 和 <code>var</code> 定义，方法使用 <code>def</code> 定义。</p><p>注意 <code>def</code> 同样要使用等于号 <code>=</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChecksumAccumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSum</span></span>(): <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">return</span> ~(sum + <span class="number">0XFF</span>) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，如果方法需要有副作用，则将其返回值声明为 <code>Unit</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(b: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    sum += b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，方法会忽略函数体最后的值类型，转而将其转换为 <code>Unit</code></p><p>如果需要返回 <code>Unit</code>，我们也可以直接省略等于号，使用 Java 中常用的方法声明形式：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(b: <span class="type">Int</span>) &#123;</span><br><span class="line">    sum += b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个函数或者方法的定义没有等于号，那么默认其返回值类型为 <code>Unit</code>。</p><p>如果需要函数或者方法来推断返回值类型，则需要加上等于号</p><h2 id="5-getter-和-setter"><a class="markdownIt-Anchor" href="#5-getter-和-setter"></a> 5. Getter 和 Setter</h2><p>很遗憾，Scala 的类成员是字段形式的，所以，不能像 Kotlin 那样采用语法糖式的 getter 和 setter 的写法；</p><p>相比 Java，Scala 在定义字段时，会自动生成字段的 getter 和 setter，他们的命名为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span></span>:<span class="type">T</span>                      <span class="comment">// getter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_=</span> </span>: (y: <span class="type">T</span>): <span class="type">Unit</span>       <span class="comment">// setter</span></span><br></pre></td></tr></table></figure><p>注意，方法名为 <code>x</code> 和 <code>x_=</code></p><p>那么如何提供自定义的 getter 和 setter 呢？</p><p>我们只能采用后备字段，同时，将我们自定义的 getter 和 setter 满足上面的命名公约：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">private var _name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span> </span>= _name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name_=</span> </span>(thatName: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        _name = thatName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就能够像使用属性一样使用 <code>name</code> 了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"hehe"</span>)</span><br><span class="line"></span><br><span class="line">p.name = <span class="string">"nihao"</span></span><br></pre></td></tr></table></figure><h2 id="6-可见性简述"><a class="markdownIt-Anchor" href="#6-可见性简述"></a> 6. 可见性简述</h2><p>Scala 中，默认的可见性是 <code>public</code>；</p><p>其余的可见性修饰符和 Java 一致。</p><h2 id="7-伴生对象"><a class="markdownIt-Anchor" href="#7-伴生对象"></a> 7. 伴生对象</h2><p>Scala 没有静态成员，但是具有伴生对象(companion object)，是对象(object) 的一种。</p><p>对象是一个 <strong>单例</strong>，当对象和类在同一个文件中定义，具有同样的名称时，称对象是类的伴生对象。</p><p>对象不带参数，不能通过 <code>new</code> 关键字进行构建。</p><p>方法的调用形式和 Java 的静态方法调用相同。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ChecksumAccumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cache = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span></span>(s: <span class="type">String</span>): <span class="type">Int</span> =</span><br><span class="line">    <span class="keyword">if</span> (cache.contains(s))</span><br><span class="line">        cache(s)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> acc = <span class="keyword">new</span> <span class="type">ChecksumAccumulator</span></span><br><span class="line">        <span class="keyword">for</span> (c &lt;- s)</span><br><span class="line">            acc.add(c.toByte)</span><br><span class="line">        <span class="keyword">val</span> cs = acc.checksum()</span><br><span class="line">        cache += (s -&gt; cs)</span><br><span class="line">        cs</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>没有伴生类的对象称为 <strong>孤立对象</strong>，实际上就是一个简单的单例。</p><h2 id="8-类的解析过程"><a class="markdownIt-Anchor" href="#8-类的解析过程"></a> 8. 类的解析过程</h2><p>Scala 采用代换模型对表达式进行解析，那么它是如何解析类的定义和声明调用的呢？</p><p>对此，有如下的几个步骤：</p><ol><li><p>将 <code>new</code> 关键字当成普通方法进行代换，最终为值</p></li><li><p>解析类定义中的方法形参</p></li><li><p>解析构造器形参</p></li><li><p>将 <code>this</code> 关键字替换成 <code>new</code> 的表达式</p></li><li><p>将上述解析到的所有值进行代入，函数解析为字面量</p></li><li><p>继续代换，最终得到结果</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 函数式特征</title>
      <link href="//Scala/Scala%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%89%B9%E5%BE%81/"/>
      <url>//Scala/Scala%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%89%B9%E5%BE%81/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数类型"><a class="markdownIt-Anchor" href="#1-函数类型"></a> 1. 函数类型</h2><p>函数类型是函数式语言的特征之一；</p><p>其原因在于，函数是语言中的一等公民，可以作为变量，而变量是具有类型的。</p><p>Scala 的函数类型定义如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f: <span class="type">Int</span>, <span class="type">Int</span> =&gt; <span class="type">Int</span></span><br></pre></td></tr></table></figure><p>使用箭头将参数类型和返回值类型相间隔；</p><p>上面的例子表示函数 <code>f</code> 接受两个 <code>Int</code> 参数，返回值类型为 <code>Int</code></p><a id="more"></a><h2 id="2-高阶函数"><a class="markdownIt-Anchor" href="#2-高阶函数"></a> 2. 高阶函数</h2><p>高阶函数指的是接受 函数作为参数 的函数，它的参数是函数类型。</p><p>Scala 中的高阶函数如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, a: <span class="type">Int</span>, b: <span class="type">Int</span>) =</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span> f(a) + sum(a + <span class="number">1</span>, b)</span><br></pre></td></tr></table></figure><p>其中，<code>f</code> 是函数类型的参数，它接受一个 <code>Int</code> 作为参数，返回值是一个 <code>Int</code>；</p><p>上面的例子如下数学公式的求法：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mi>a</mi><mi>b</mi></munderover><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\sum_a^b{f(a)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.086118em;vertical-align:-1.250005em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.836113em"><span style="top:-1.8999949999999999em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.250005em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span></span></span></p><h2 id="3-匿名函数函数字面量-lambda"><a class="markdownIt-Anchor" href="#3-匿名函数函数字面量-lambda"></a> 3. 匿名函数(函数字面量, lambda)</h2><p>作为语言的基本类型，如字符串，我们可以使用字面量表示它，如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"abc"</span></span><br><span class="line">println(s)</span><br></pre></td></tr></table></figure><p>上面可以直接写成</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">"abc"</span>)</span><br></pre></td></tr></table></figure><p>在 Scala 中，函数也具有这种特性，我们可以直接定义一个函数字面量：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f = (x: <span class="type">Int</span>) =&gt; x * x</span><br><span class="line">sum(f, <span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>如上，<code>f</code> 是一个函数，具有参数 <code>x</code>，返回 <code>x</code> 的平方</p><p>也可以将字面量直接传入</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(x =&gt; x * x, <span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>大部分情况都不需要显式指定参数的类型，编译器会进行自动推断；<br>同时，无法在函数字面量中显式指定函数的返回值类型<br>只能通过定义函数变量的类型来进行显示指定</p></blockquote><p>实际上，Scala 中的匿名函数就是其他语言中的 <strong>lambda</strong> 表达式；</p><p>就函数式上来说，Scala 提供了一种更轻便的语法</p><h2 id="4-柯里化"><a class="markdownIt-Anchor" href="#4-柯里化"></a> 4. 柯里化</h2><h3 id="41-定义"><a class="markdownIt-Anchor" href="#41-定义"></a> 4.1 定义</h3><p>柯里化是函数式范式的一个特有现象；</p><p>它指的是，一个函数，通过接受部分参数，可以返回接受剩余参数的 <strong>嵌套函数</strong>；</p><p>事实上，对于一个函数</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>f</mi><mtext> </mtext><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mi>r</mi><msub><mi>g</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>…</mo><mo stretchy="false">(</mo><mi>a</mi><mi>r</mi><msub><mi>g</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">def \ f(arg_1)\ldots(arg_n) = E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n \gt 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.5782em;vertical-align:-.0391em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 时，以下的写法和上面是等价的：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>f</mi><mtext> </mtext><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mi>r</mi><msub><mi>g</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>…</mo><mo stretchy="false">(</mo><mi>a</mi><mi>r</mi><msub><mi>g</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>d</mi><mi>e</mi><mi>f</mi><mtext> </mtext><mi>g</mi><mo stretchy="false">(</mo><mi>a</mi><mi>r</mi><msub><mi>g</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo separator="true">;</mo><mtext> </mtext><mi>g</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">def \ f(arg_1)\ldots(arg_n) = \{def \ g(arg_n) = E; \ g\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mpunct">;</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mclose">}</span></span></span></span></span></p><p>所以，我们可以通过编写嵌套的接受部分参数的函数，并返回它，来达到柯里化的目的；</p><p>实际上，这个过程就叫做柯里化。</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲f(arg_1)(arg_2…">\begin{align} f(arg_1)(arg_2)\ldots(arg_n) \\ &amp;= arg_1 \Rightarrow \{f(arg_2)\ldots(arg_n)\} \\ &amp;= arg_1 \Rightarrow \{arg_2 \Rightarrow \{f(arg_3)\ldots(arg_n)\}\} \\ &amp;= \cdots \\ &amp;= arg_1 \Rightarrow arg_2 \Rightarrow arg_3 \Rightarrow \ldots \Rightarrow f \end{align}</p><h3 id="42-显式柯里化"><a class="markdownIt-Anchor" href="#42-显式柯里化"></a> 4.2 显式柯里化</h3><p><code>sum</code> 函数可以使用如下的方法进行重写：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>): (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumF</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = &#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span> f(a) + sumF(a + <span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    sumF</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法被称作 <strong>显式柯里化</strong>，就是将一个接受多个参数的函数通过显式编写一个内部的嵌套函数，并返回这个函数来达到柯里化。</p><p>在调用时，我们可以直接如下调用：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(x =&gt; x * x) (<span class="number">1</span>, <span class="number">10</span>) <span class="comment">// 1^2 + 2^2 + ... + 10^2</span></span><br></pre></td></tr></table></figure><p>第一个括号，调用了外部函数，返回值是内部的 <code>sumF</code> 函数；</p><p>这使得我们可以 <strong>继续使用括号</strong> 进行 <code>sumF</code> 的调用</p><h3 id="43-隐式柯里化"><a class="markdownIt-Anchor" href="#43-隐式柯里化"></a> 4.3 隐式柯里化</h3><p>许多函数式编程语言都提供柯里化的语法糖，这被称作 <strong>隐式柯里化</strong>；</p><p>Scala 也提供了这样的语法糖：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>)(a: <span class="type">Int</span>, b: <span class="type">Int</span>) =</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span> f(a) + sum(f)(a + <span class="number">1</span>, b)</span><br></pre></td></tr></table></figure><p>通过使用两个括号，就可以直接定义最内部的函数体，而不需要再定义一个内部的嵌套函数；</p><p>这可以让我们像进行柯里化函数调用一样，定义柯里化函数</p><h3 id="44-柯里化的目的"><a class="markdownIt-Anchor" href="#44-柯里化的目的"></a> 4.4 柯里化的目的</h3><p>柯里化相比我们定义一个多参数函数来说，要稍显复杂；</p><p>那么为什么不直接定义一个多参数函数呢？</p><p>实际上，使用柯里化的目的在于可以动态确定参数；</p><p>当函数的某些参数不确定时，我们可以先保存一个存根；</p><p>剩余的参数确定之后，可以通过存根直接调用剩下的参数。</p><p>柯里化的另一个用处类似建造者模式(Builder Pattern)，可以通过柯里化来减少参数和函数重载的爆炸。</p><h2 id="5-部分应用partially-application"><a class="markdownIt-Anchor" href="#5-部分应用partially-application"></a> 5. 部分应用(partially application)</h2><p>部分应用指的是， <strong>固定</strong> 函数的某些参数，可以获取一个接受剩下参数的函数；</p><p>有点类似于在运行时给予函数默认值。</p><p>Scala 的部分应用写法如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>, c: <span class="type">Int</span>) = a + b + c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addA5</span> </span>= add(<span class="number">5</span>, _:<span class="type">Int</span>, _:<span class="type">Int</span>)</span><br><span class="line"></span><br><span class="line">addA5(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 5 + 2 + 3</span></span><br></pre></td></tr></table></figure><p>可以看到，我们通过将参数 <code>a</code> 的值固定为 <code>5</code> 得到了一个新的函数；</p><p>它接受 <code>b</code> 和 <code>c</code>，返回 <code>5 + b + c</code></p><h2 id="6-柯里化和部分应用的区别"><a class="markdownIt-Anchor" href="#6-柯里化和部分应用的区别"></a> 6. 柯里化和部分应用的区别</h2><p>这两个概念经常被混淆，但是实际上有着一些差别：</p><ol><li>柯里化指的是将多参数函数 <strong>分解为</strong> 多个单参数（组）函数的特性</li><li>部分应用指的是通过 <strong>固定</strong> 某个参数，得到接受剩余参数函数的特性</li></ol><p>虽然它们调用的效果都是返回一个函数，但是，两者一次调用返回的函数具有显著的不同：</p><ol><li><p>柯里化返回的函数只接受一个参数（组）</p><blockquote><p>由于返回的是层层嵌套的函数，所以会出现函数的连续调用<br><code>add(1)(1)(1)(1)(1)</code> 中，<br>对于一个 <code>(1)</code>，返回的函数是接受另一个 <code>1</code>，同时将剩下的内部嵌套闭包返回</p></blockquote></li><li><p>部分应用返回的函数可以接受多个参数</p><blockquote><p>相比柯里化，部分应用返回的函数可以直接接受多个参数，如<br><code>add_1(1,1,1,1)</code><br>固定了第一个 <code>1</code> 之后，剩下的 <code>1</code> 可以直接传入，而不需要连续调用</p></blockquote></li></ol><p>柯里化通过将函数分解嵌套来减少函数的参数；</p><p>函数的部分应用通过给予参数默认值来减少函数的参数。</p><p>柯里化函数的调用是函数的连续调用，而函数的部分应用是函数的一次调用。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现阶段</title>
      <link href="//Reviews/TSPi/%E5%AE%9E%E7%8E%B0%E9%98%B6%E6%AE%B5/"/>
      <url>//Reviews/TSPi/%E5%AE%9E%E7%8E%B0%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-实现标准"><a class="markdownIt-Anchor" href="#1-实现标准"></a> 1. 实现标准</h2><p>扩展了设计标准</p><ol><li><p>Standards Review</p><blockquote><p>审查了世界标准</p></blockquote></li><li><p>Naming, interfae and message standards</p></li><li><p>Coding Standards</p><ol><li><blockquote><p>编码规范</p></blockquote></li></ol></li><li><p>Size Standards</p></li></ol><a id="more"></a><h2 id="2-表格"><a class="markdownIt-Anchor" href="#2-表格"></a> 2. 表格</h2><ol><li>INS</li><li>LOGT</li><li>LOGD</li></ol><h2 id="3-策略"><a class="markdownIt-Anchor" href="#3-策略"></a> 3. 策略</h2><ol><li>复查</li><li>复用</li><li>测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> SPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> SPI </tag>
            
            <tag> TSPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计阶段</title>
      <link href="//Reviews/TSPi/%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5/"/>
      <url>//Reviews/TSPi/%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-hld作业"><a class="markdownIt-Anchor" href="#1-hld作业"></a> 1. HLD(作业)</h2><p>设计阶段要完成高层设计，出 SDS，软件设计规格说明（体系结构文档）</p><p>包含：</p><ol><li><p>软件层次架构设计</p></li><li><p>功能模块设计</p><blockquote><p>要根据需求分析书来</p></blockquote></li><li><p>数据库设计</p><blockquote><p>就是数据库设计，包括 E-R 图和数据库表设计</p></blockquote></li><li><p>接口和界面设计</p></li></ol><a id="more"></a><h2 id="2-设计标准"><a class="markdownIt-Anchor" href="#2-设计标准"></a> 2. 设计标准</h2><ol><li><p>Naming Conventions</p><blockquote><p>命名公约，各项命名的规定</p></blockquote></li><li><p>Interface formats</p><blockquote><p>内部的 API 接口设计和外部的 UI 设计<br>界面设计线图（界面区域划分）</p></blockquote></li><li><p>System and Error Messages</p><blockquote><p>就是 LOG 和 Exception 界面</p></blockquote></li><li><p>Defect Standars</p><blockquote><p>缺陷标准，使用 PSPi 的就行</p></blockquote></li><li><p>LOC counting</p><blockquote><p>只计算新增的和修改过的代码</p></blockquote></li><li><p>Design Representation Standards</p><blockquote><p>就是 SDS 的内容</p></blockquote></li></ol><h2 id="3-设计复用库"><a class="markdownIt-Anchor" href="#3-设计复用库"></a> 3. 设计复用库</h2><ol><li><p>复用的接口标准</p></li><li><p>复用的文档标准</p></li><li><p>复用部分的质量标准</p></li><li><p>应用复用库的技术支持</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> SPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> SPI </tag>
            
            <tag> TSPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="//DesignPattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>//DesignPattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>命令模式将『请求』封装成对象，以便使用不同的请求，队列或者日志系统。</p><p>命令模式也可以支持可撤销和回滚操作。</p><p>命令模式通过将请求进行封装，成功地将客户和具体的低层组件进行解耦；</p><p>客户只需要知道要加载命令，而不需要知道如何进行命令的具体执行操作。</p><a id="more"></a><h2 id="2-类图结构"><a class="markdownIt-Anchor" href="#2-类图结构"></a> 2. 类图结构</h2><img data-src="https://www.plantuml.com/plantuml/svg/PL4nRiCm3Dpv2euf2kS16Oe0dhhs1uf4rq8bCP1e8q7YlrUk5TjGkUbul3jIvoGgok0TQATImjPP2WBbzHb6_g683y1SxvX8MlPU1NDuW-d5-Y9DTjpHb1RBOQ7O81GxfGdBvCfwg4kIcBaJqetq89Gd_hM6O7XlrdBGaOHgjLfYcrjMmgRvM9FkiKeGuBNqqbp0shLfdbiJ0WjXjD-z87UruEbKelq5kmuNPpMERCqMkImnLom9Z-iDPtG2ogQp3K1l3I7vgzpHa_HiqXxgBBcCd3C_V-el"><p>可以看到，<code>Client</code> 处于最高层，它不需要知道 <code>Command</code> 的执行过程；</p><p>这就达到了客户和低层组件的解耦目的。</p><h2 id="3-封装请求调用者"><a class="markdownIt-Anchor" href="#3-封装请求调用者"></a> 3. 封装请求调用者</h2><p>一个很重要的地方就是我们的请求接收者 <code>Receiver</code> 和我们的命令对象 <code>Command</code> 是组合关系</p><p>也就是说，<code>Command</code> 具有一个接收者的内部对象；</p><p>否则，它无法真正地成为一个可以执行的命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-支持撤销和回滚"><a class="markdownIt-Anchor" href="#4-支持撤销和回滚"></a> 4. 支持撤销和回滚</h2><p>通常的命令都会具有可撤销的属性要求；</p><p>那么我们如何实现这个可撤销的需求呢？</p><p>撤销实际上就是返回到命令执行前的一个状态中；</p><p>所以在实际的命令对象类中，我们通过记住 <strong>上一个</strong> 命令时的状态，就能实现撤销功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CeilingFanHighCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    CeilingFan ceilingFan;</span><br><span class="line">    <span class="keyword">int</span> prevSpeed;  <span class="comment">// 前一个命令后风扇的转速</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CeilingFanHighCommand</span><span class="params">(CeilingFan ceilingFan)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ceilingFan = ceilingFan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prevSpeed = ceilingFan.getSpeed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prevSpeed == CeilingFan.HIGH) &#123;</span><br><span class="line">            ceilingFan.high();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (prevSpeed == CeilingFan.MEDIUM) &#123;</span><br><span class="line">            ceilingFan.medium();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (prevSpeed == CeilingFan.LOW) &#123;</span><br><span class="line">            ceilingFan.low();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (prevSpeed == CeilingFan.OFF) &#123;</span><br><span class="line">            ceilingFan.off();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用空对象替代-null"><a class="markdownIt-Anchor" href="#5-使用空对象替代-null"></a> 5. 使用空对象替代 <code>null</code></h2><p>对于命令模式来说，它的客户类还是有一些细微的要求；</p><p>我们可以使用一个队列或者数组来代表需要执行的命令插槽；</p><p>当插槽没有加载命令时候，我们普通的做法是使用一个 <code>null</code> 来进行替代；</p><p>但是，此时我们就需要对命令对象进行空检测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (onCommand[slot] != <span class="keyword">null</span>) &#123;</span><br><span class="line">        onCommand[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对此，我们可以使用一个 <code>NoCommand</code> 对象，它是一个命令对象，只不过什么都不做；</p><p>这样，即使插槽没有加载命令，我们也可以直接使用 <code>NoCommand</code> 来替代，这样就不需要进行空检测了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Command noCommand = <span class="keyword">new</span> NoCommand();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    onCommands[i] = noCommand;</span><br><span class="line">    offCommands[i] = noCommand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-宏命令"><a class="markdownIt-Anchor" href="#6-宏命令"></a> 6. 宏命令</h2><p>命令模式的一个最大的优点就是能使用宏命令；</p><p>也就是一次调用，执行多个命令；</p><p>实际上，我们只需要将命令对象中包装的接收者变成命令对象数组即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> clas MacroCommand implements Command &#123;</span><br><span class="line">    Command[] commands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MacroCommand</span><span class="params">(Command[] commands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.commands = commands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commands.length; i++) &#123;</span><br><span class="line">            commands[i].execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-队列请求"><a class="markdownIt-Anchor" href="#7-队列请求"></a> 7. 队列请求</h2><p>除此之外，命令模式还可以使用于工作队列；</p><p>也就是说我们可以构建一个接受命令对象的队列，它只是按照顺序进行命令的执行操作；</p><p>当线程可用时，它就会将命令分配给线程，然后执行 <code>execute()</code>；</p><p>队列并不需要关心命令究竟是什么，是如何完成的，只需要对命令进行调度即可。</p><h2 id="8-日志和恢复"><a class="markdownIt-Anchor" href="#8-日志和恢复"></a> 8. 日志和恢复</h2><p>除了队列以外，我们另一个应用范围就是日志系统和崩溃恢复；</p><p>为了完成这个功能，我们可以在命令接口中添加 <code>store()</code> 和 <code>load()</code> 方法；</p><p>当调用者调用命令时候，同时调用 <code>store()</code> 将命令对象序列化到服务器中进行存储；</p><p>当崩溃发生，需要恢复时，我们就可以将存储服务器中的命令对象进行反序列化，然后调用 <code>load()</code> 方法；</p><h2 id="9-优缺点"><a class="markdownIt-Anchor" href="#9-优缺点"></a> 9. 优缺点</h2><p>命令模式的优点非常明显，就是可以完全实现客户类和低层组件的解耦；</p><p>高层的调用者不需要知道命令执行的具体细节，只需要调用接口的方法就可以执行命令的调用。</p><p>但是缺点是它需要创建不同的命令对象来进行不同的命令接收者的包装；</p><p>这就会让我们的代码中出现很多的小型类。</p>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 函数解析</title>
      <link href="//Scala/Scala%20%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
      <url>//Scala/Scala%20%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-代换模型"><a class="markdownIt-Anchor" href="#1-代换模型"></a> 1. 代换模型</h2><p>Scala 使用代换模型对函数和表达式进行解析工作；</p><p>所谓的代换模型就是类似平常算术的过程；</p><p>从左到右地将函数和表达式一步一步转换，最终转换成值。</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span> * <span class="number">2</span>) + (<span class="number">4</span> * <span class="number">5</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>对于上面的式子 Scala 是如何解析的呢？</p><p>我们从左到右地解析，首先，我们解析 <code>(2 * 2)</code> 的内容，将其替换成值 <code>4</code>；</p><p>此时，式子变为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> + (<span class="number">4</span> * <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>由于有括号，和乘法的算术等级较高，所以我们接下来对 <code>(4 * 5)</code> 进行解析；</p><p>此时，式子变为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> + <span class="number">20</span></span><br></pre></td></tr></table></figure><p>此时，我们计算上面的值，最后得到 24。</p><p>可以看到，Scala 的解析是符合我们通常的算术解析规律的。</p><h2 id="2-代换模型的缺陷"><a class="markdownIt-Anchor" href="#2-代换模型的缺陷"></a> 2. 代换模型的缺陷</h2><p>使用代换模型最重要的一个要求就是，我们的表达式最终 <strong>能够</strong> 规约到一个 <strong>值</strong>；</p><p>如果它最终不能够规约到一个值(无限循环，Non-Terminate)；</p><p>或者表达式对其外部的变量产生了影响(副作用)；</p><p>都会对代换模型造成污染。</p><h2 id="3-副作用"><a class="markdownIt-Anchor" href="#3-副作用"></a> 3. 副作用</h2><p>所谓的副作用就是指的是，函数和表达式的执行过程修改了外部的变量。</p><p>例如，<code>c++</code> 这个表达式就具有很明显的副作用；</p><p>因为我们不能够直接将这个表达式规约为一个值；</p><p>在执行的过程中，我们需要对 <code>c</code> 这个外部传入的变量进行修改；</p><p>这就让这个表达式显得不够纯粹，这时候我们就说它具有 <strong>副作用</strong></p><h2 id="4-不能终结的解析"><a class="markdownIt-Anchor" href="#4-不能终结的解析"></a> 4. 不能终结的解析</h2><p>所谓的不能终结的解析就是指的一个函数返回它自身；</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>(x: <span class="type">Int</span>) = loop</span><br></pre></td></tr></table></figure><p>这个函数的解析永远也不会完成，这是因为我们如果使用代换模型对其进行解析的话，会发现，它的解析结果一直是其自身；</p><p>所以，对它的解析会一直进行下去，无法完成。</p><h2 id="5-参数解析"><a class="markdownIt-Anchor" href="#5-参数解析"></a> 5. 参数解析</h2><p>Scala 有两种参数解析方式，不像其他的指令性语言只有一种解析方式；</p><p>其中的一种叫传值调用(call-by-value)，另一种叫传名调用(call-by-name)。</p><h3 id="51-传值调用call-by-value"><a class="markdownIt-Anchor" href="#51-传值调用call-by-value"></a> 5.1 传值调用(call-by-value)</h3><p>这是 Scala 的默认的参数解析方式，也是其他指令性语言常用的参数解析方式。</p><p>主要的解析步骤如下：</p><ol><li>将传入参数的表达式解析为值</li><li>将函数使用函数体进行替换</li><li>将函数的形参替换为第一步中得到的实参</li></ol><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span></span>(x: <span class="type">Int</span>) = x * x</span><br><span class="line"></span><br><span class="line">square(<span class="number">2</span> + <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>对于上面的代码，解析步骤如下：</p><ol><li>将 <code>2 + 2</code> 进行计算，得到它的值 <code>4</code></li><li>将 <code>square</code> 使用它的函数体进行替换，得到 <code>x * x</code></li><li>将 <code>x</code> 代换为 <code>4</code></li><li>计算出结果 <code>16</code></li></ol><h3 id="52-传名调用call-by-name"><a class="markdownIt-Anchor" href="#52-传名调用call-by-name"></a> 5.2 传名调用(call-by-name)</h3><p>这是 Scala 的另一种参数解析方式，也是其他指令性语言不具备的。</p><p>只要在定义参数时，使用 <code>=&gt;</code> 就可以定义传名调用的参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span></span>(x: =&gt; <span class="type">Int</span>) = x * x</span><br></pre></td></tr></table></figure><p>主要的解析步骤如下：</p><ol><li>将函数名替换为函数体</li><li>直接将参数的表达式代入形参</li><li>对得到的表达式进行解析和计算，得出结果</li></ol><p>还是使用上面的例子，解析步骤如下：</p><ol><li>将 <code>square</code> 替换为 <code>x * x</code></li><li>将 <code>2 + 2</code> 代入 <code>x</code> 中</li><li>对得到的式子 <code>(2 + 2) * (2 + 2)</code> 进行代换模型的计算</li><li>得到结果 <code>16</code></li></ol><h3 id="53-区别"><a class="markdownIt-Anchor" href="#53-区别"></a> 5.3 区别</h3><p>那么这两种计算结果有什么区别呢？</p><p>首先，传名调用具有懒加载的功能，直到参数 <strong>被使用</strong> 的时候，才进行参数表达式的解析；</p><p>例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span></span>(x: =&gt; <span class="type">Int</span>, y: =&gt; <span class="type">Int</span>) = x</span><br><span class="line"></span><br><span class="line">first(<span class="number">2</span> * <span class="number">2</span>, <span class="number">4</span> * <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>此时，我们忽略了第二个参数，对于传名调用来说，它不需要解析 <code>y</code> 这个参数，只需要将它传入函数体即可；</p><p>而对于传值调用，则需要先解析出 <code>x</code> 和 <code>y</code> 的值，即使 <code>y</code> 的值不会在函数体内使用到。</p><p>其次，传名调用可以避免无限循环问题；</p><p>对于上面的例子来说，我们可以这么调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first(1, loop)</span><br></pre></td></tr></table></figure><p>对于传名调用来说，由于它是直接传入函数体，然后，函数体并没有使用 <code>y</code> 这个参数；</p><p>此时，我们就避免了对 <code>loop</code> 的解析工作；</p><p>但是对于传值调用则不然，我们还是要对 <code>loop</code> 进行解析，从而出现无限循环问题。</p><h3 id="54-默认传值调用的原因"><a class="markdownIt-Anchor" href="#54-默认传值调用的原因"></a> 5.4 默认传值调用的原因</h3><p>既然传名调用具有那么多的好处，但是为什么还要默认使用传值调用呢？</p><p>这是因为传值调用在具体实践过程中，比传名调用的执行要快；</p><p>其次，由于 Scala 并不是纯函数式语言，实际上，它的函数还是允许有副作用的；</p><p>并且同时还要支持和 Java 的互调用，而 Java 是指令式语言，采用传值调用显然会更好些。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰者模式(Decorator Pattern)</title>
      <link href="//DesignPattern/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F(Decorator%20Pattern)/"/>
      <url>//DesignPattern/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F(Decorator%20Pattern)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>装饰者模式 <strong>动态的</strong> 将责任附加到对象上。</p><p>若要扩展功能，装饰者提供了比继承更有弹性的解决方案</p><a id="more"></a><h2 id="2-新的设计原则"><a class="markdownIt-Anchor" href="#2-新的设计原则"></a> 2. 新的设计原则</h2><p><strong>类应当对扩展开放，对修改关闭</strong></p><p>这乍看上去很矛盾，如何做到“既开放又关闭” 呢？</p><p>实际上，我们可以采用 <strong>组合</strong> 和 <strong>委托</strong> 来达到扩展的目的；</p><p>而 <strong>避免因为扩展而需要修改代码</strong></p><blockquote><p>Bug 总是在修改、新增代码时引入的；<br>如果能够尽量减少对代码的反复更改，那么就可以更有效的减少和避免 Bug</p></blockquote><p>装饰者模式就很好的体现了 “开放——关闭” 原则。</p><h2 id="3-原理"><a class="markdownIt-Anchor" href="#3-原理"></a> 3. 原理</h2><p>使用不同的 <strong>装饰者对象</strong> 来对 <strong>主体对象</strong> 进行装饰；</p><p><img alt data-src="https://i48.tinypic.com/2jabxva.jpg"></p><p>通过 <strong>委托</strong> 来进行组合工作。</p><p><img alt data-src="https://i50.tinypic.com/2zrg968.jpg"></p><p>这里有一个很重要的地方就是，为什么能实现上面图示的 <strong>包装</strong> 和 <strong>方法委托</strong></p><p>其使用到的技巧就是， <strong>装饰者对象实际上也是主体对象</strong>，即它们有相同的超类。</p><p>如果不具备相同超类的话，最多只能做到一层包装，而无法做到动态的，多层包装。</p><p>注意，这里采用相同的超类，实际上只是为了做到 <strong>类型匹配</strong>，而装饰者并没有从超类中继承它的 <strong>行为</strong>。</p><blockquote><p>继承的原罪在于， <strong>在运行时，行为需要改变！</strong> 如果行为从继承中得到，那么它在编译时就会被确定，也就是所谓的 <strong>与具体实现绑定</strong>。</p><p>但是，如果<strong>行为不从继承中得到</strong>，那么继承反而成了优点，因为继承可以实现多态，为我们的动态扩展提供合适的条件</p></blockquote><h2 id="4-特点"><a class="markdownIt-Anchor" href="#4-特点"></a> 4. 特点</h2><ol><li>装饰者和被装饰对象有 <strong>相同的超类型</strong></li><li>可以使用一个或者 <strong>多个</strong> 装饰者来包装对象</li><li>由于有相同的超类型，所以在需要被装饰对象的场合时，可以使用装饰过后的对象来替代</li><li><strong>装饰者可以在所委托被装饰者的行为之前、之后，加上自己的行为，以达到特定的目的</strong></li><li>对象可以在任何时候被装饰，可以在运行时，动态地、不限量地对对象进行装饰</li></ol><h2 id="5-uml-图解"><a class="markdownIt-Anchor" href="#5-uml-图解"></a> 5. UML 图解</h2><p><img alt data-src="https://ww2.sinaimg.cn/large/65e4f1e6jw1faice8oa2nj20bq0aqwfr.jpg"></p><p>可以看到，装饰者和主体对象有一个 <strong>共同的超类</strong></p><p>同时， <code>Decorator</code> 和 <code>Component</code> 都是 <strong>抽象类</strong></p><p>对于实际的装饰者，他们都包含了一个 <code>Component</code> 实例，这就是被其装饰的对象，通过多态来进行方法委托。</p><p>图中的 <code>wrappedObject</code> 需要从外部获得，一般来说，是通过 <strong>构造函数</strong> 传入的。</p><h2 id="6-例子图解"><a class="markdownIt-Anchor" href="#6-例子图解"></a> 6. 例子图解</h2><p><img alt data-src="https://ww1.sinaimg.cn/large/006tKfTcly1fdsfoe6vu5j30nn0amgm6.jpg"></p><h2 id="7-真实的装饰者模式java-io"><a class="markdownIt-Anchor" href="#7-真实的装饰者模式java-io"></a> 7. 真实的装饰者模式——Java IO</h2><p>Java IO 库中大量使用了装饰者模式，这也就是为什么会出现如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStream in =</span><br><span class="line">    <span class="keyword">new</span> BufferdInpuStream(<span class="keyword">new</span> FileInputSteram());</span><br></pre></td></tr></table></figure><p>可以看到 <code>FileInputSteram</code> 是被装饰的主体对象，而 <code>BufferdInpuStream</code> 是装饰对象。</p><h2 id="8-缺陷"><a class="markdownIt-Anchor" href="#8-缺陷"></a> 8. 缺陷</h2><p>装饰者对象的缺陷很明显，就是会 <strong>增加大量的小对象</strong>。</p><p>同时，由于装饰者模式是通过 <strong>层层委托</strong> 来实现扩展的；</p><p>所以，当装饰者需要改变的时候，就需要将改变应用到 <strong>所有的装饰者</strong>；</p><p>此时，当装饰者数量较多时，更改难度大。</p>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 使用 Gradle</title>
      <link href="//Kotlin/Kotlin%20%E4%BD%BF%E7%94%A8%20Gradle/"/>
      <url>//Kotlin/Kotlin%20%E4%BD%BF%E7%94%A8%20Gradle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>一般来说，IntilliJ 会自动的给我们配置 Kotlin 的 Gradle 设置；</p><p>但是，有时候我们也想自己进行一些自定义的 Gradle 配置；</p><p>下面就来总结几个常用的配置方法</p><a id="more"></a><h2 id="2-去除-src-中的-java-目录"><a class="markdownIt-Anchor" href="#2-去除-src-中的-java-目录"></a> 2. 去除 <code>src</code> 中的 <code>java</code> 目录</h2><p>虽然说 Kotlin 经常和 Java 混着写，但是，有时候我们想写一个纯 Kotlin 程序的时候，却发现 <code>src</code> 目录中一直存在着一个 <code>java</code> 目录；</p><p>这着实激起了我的强迫症，解决方法如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main.java.srcDirs = [<span class="string">'src/main/kotlin'</span>]</span><br><span class="line">    test.java.srcDirs = [<span class="string">'src/test/kotlin'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 gradle java 插件中常用的指定源文件位置的方法；</p><p>不过需要注意的是，即使我们使用的是 kotlin 插件，也要使用 <code>main.java</code>；</p><p>而不能使用 <code>main.kotlin</code></p><p>这应该是因为 kotlin 插件继承了 java 插件的源文件位置设定的结果。</p><h2 id="2-指定字节码版本"><a class="markdownIt-Anchor" href="#2-指定字节码版本"></a> 2. 指定字节码版本</h2><p>有时候我们想使用一些高级的语言特性，不想为低级的 JVM 编写代码；</p><p>这个时候就需要指定字节码版本；</p><p>在 java 插件中，我们可以通过 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 来解决这个问题；</p><p>不过在 Kotlin 中，我们还有对应的 JVM 版本和语言和 API 版本可以设定（注意，仅在 Kotlin 1.1 之后可以使用）；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">compileKotlin &#123;</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_1_8</span><br><span class="line"></span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">"1.8"</span></span><br><span class="line">        apiVersion = <span class="string">"1.1"</span></span><br><span class="line">        languageVersion = <span class="string">"1.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一定要在 <code>compileKotiln</code> 中，因为这个是编译 Kotlin 时候的选项。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java to Kotlin</title>
      <link href="//Kotlin/Java%20to%20Kotlin/"/>
      <url>//Kotlin/Java%20to%20Kotlin/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>下面总结一些代码段，用于帮助从 Java 迁移到 Kotlin</p><a id="more"></a><h2 id="2-lazy-initialization"><a class="markdownIt-Anchor" href="#2-lazy-initialization"></a> 2. Lazy Initialization</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> A a = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> A <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>) &#123;</span><br><span class="line">        a = initA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> A <span class="title">initA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Kotlin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a: A <span class="keyword">by</span> lazy &#123; initA() &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initA</span><span class="params">()</span></span>: A &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-appgetcontext"><a class="markdownIt-Anchor" href="#3-appgetcontext"></a> 3. App.getContext()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        context = getAppContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        retrun context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Kotlin</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> : <span class="type">Application</span></span>() &#123;</span><br><span class="line">    conpanion <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span> context: Context</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        context = applicationContext</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者也可以直接扩展 <code>Context</code> 类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> Context.myApp: MyApp</span><br><span class="line">        <span class="keyword">get</span>() = applicationContext <span class="keyword">as</span> MyApp</span><br></pre></td></tr></table></figure><h2 id="4-it-in-lambda"><a class="markdownIt-Anchor" href="#4-it-in-lambda"></a> 4. <code>it</code> in lambda</h2><p>当实现的接口是单方法接口时，Kotlin 会自动使用 lambda 来代替；<br>这时候很容易出现不知道怎么写的问题。</p><p>此时，放心大胆的用 <code>it</code> 这个内置的 lambda 表达式参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"></span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Perform action on click</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Kotlin</span></span><br><span class="line"></span><br><span class="line">button.setOnClickListener &#123; it -&gt; <span class="comment">// it is a view</span></span><br><span class="line">    <span class="comment">// Perform action on click</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是 lambda 是表达式，默认返回值为最后执行函数的返回值或者字面量；<br>不需要 <code>return</code> 关键字。</p></blockquote><h2 id="5-functional-read-from-stdin"><a class="markdownIt-Anchor" href="#5-functional-read-from-stdin"></a> 5. Functional Read From StdIn</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> reader = BufferedReader(InputStreamReader(System.`<span class="keyword">in</span>`))</span><br><span class="line"></span><br><span class="line">    reader.lines().forEach(::println)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Android Extension</title>
      <link href="//Kotlin/Kotlin%20Android%20Extension/"/>
      <url>//Kotlin/Kotlin%20Android%20Extension/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Kotlin 对于 Android 开发，还提供了一些扩展特性，有助于提高 Android 开发的效率。</p><a id="more"></a><h2 id="2-findviewbyid"><a class="markdownIt-Anchor" href="#2-findviewbyid"></a> 2. findViewById</h2><p>任何一个 Android 开发者都会对这个方法非常熟悉，我们通过它来获取视图中组件的对象实例，随后进行操作。</p><p>当然，一堆 <code>findViewById()</code> 势必降低了代码可读性，所以也出现了一些库（如 <code>ButterKnife</code>）用于简化这个方法的调用和造型，但由于它们都是运行期间的库，所以也就要求使用注解，这实际上并没有根本解决问题。</p><p>Kotlin 则将简化一步到位，只需要 <code>import</code> 视图对应的包，你就可以简单轻松的获取到对象的实例。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Using R.layout.activity_main from the main source set</span></span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> : <span class="type">Activity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        textView.setText(<span class="string">"Hello, world!"</span>)</span><br><span class="line">        <span class="comment">// Instead of findView(R.id.textView) as TextView</span></span><br><span class="line">        <span class="comment">// The name of instance is the name of its id</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-如何使用"><a class="markdownIt-Anchor" href="#3-如何使用"></a> 3. 如何使用</h2><p>很简单，只需要在 <code>app/build.gradle</code> 文件添加上下面这一行即可：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'kotlin-android-extensions'</span></span><br></pre></td></tr></table></figure><h2 id="4-使用场景"><a class="markdownIt-Anchor" href="#4-使用场景"></a> 4. 使用场景</h2><p>配置好 Kotlin Android Extension 之后，就可以使用 <code>import</code> 语句来导入对应的 xml 视图组件了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kotlinx.android.synthetic.main.activity_main.*</span><br></pre></td></tr></table></figure><p>这样你就能在 <code>Activity</code> 中直接通过 <code>id</code> 来使用这些组件了。</p><p>假如你需要在 Fragment 中使用这些组件怎么办呢？<br>Fragment 不像 Activity 拥有自带的 <code>findViewById()</code> 方法，它通常要使用一个 <code>rootView</code> 来进行组件获取。</p><p>很简单，只需要在上面的基础上加一个 <code>view</code> 即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kotlinx.android.synthetic.main.activity_main.view.*</span><br></pre></td></tr></table></figure><p>这个功能也可以用在 Adapter 上；<br>如果引入了这个语句，那么我们可以使用如下语法来进行组件获取和调用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/hello"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello World, MyActivity"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activity.hello.setText(<span class="string">"Hi!"</span>)</span><br></pre></td></tr></table></figure><h2 id="5-android-flavors"><a class="markdownIt-Anchor" href="#5-android-flavors"></a> 5. Android Flavors</h2><p>有些时候，我们的 APP 会被分成付费版和免费版；<br>这个特性通常是通过在 <code>build.gradle</code> 划定 Android Flavors 来实现的。</p><p>那么对于不同的 Flavor，我们需要不同的布局组件怎么办呢？</p><p>很简单，只需要把上面的 <code>main</code> 改成相应的包名就行了；<br>对于 <code>free/res/layout/activity_free.xml</code>，我们可以写如下语句</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.free.activity_free.*</span><br></pre></td></tr></table></figure><h2 id="6-实现原理"><a class="markdownIt-Anchor" href="#6-实现原理"></a> 6. 实现原理</h2><p>通过扩展方法，来给每个类提供相应的扩展属性和扩展方法；<br>然后通过不同的包来引入这些扩展。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 基本类型</title>
      <link href="//Kotlin/Kotlin%20%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
      <url>//Kotlin/Kotlin%20%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>Kotlin 中，任何事物都是对象。</strong></p><h2 id="1-数字类型"><a class="markdownIt-Anchor" href="#1-数字类型"></a> 1. 数字类型</h2><p>Kotlin 中的数字类型有 <code>Double</code>、<code>Float</code>、<code>Long</code>、<code>Int</code>、<code>Short</code>、<code>Byte</code></p><a id="more"></a><h3 id="11-位宽"><a class="markdownIt-Anchor" href="#11-位宽"></a> 1.1 位宽</h3><table><thead><tr><th style="text-align:center">Type</th><th style="text-align:center">BitWidth</th></tr></thead><tbody><tr><td style="text-align:center">Double</td><td style="text-align:center">64</td></tr><tr><td style="text-align:center">Float</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">Long</td><td style="text-align:center">64</td></tr><tr><td style="text-align:center">Int</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">Short</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">Byte</td><td style="text-align:center">8</td></tr></tbody></table><blockquote><p>注意，在 Kotlin 中，<strong>字符不是一种数字类型</strong></p></blockquote><h3 id="12-字面常量"><a class="markdownIt-Anchor" href="#12-字面常量"></a> 1.2 字面常量</h3><p>数字类型可以有多种字面表示形式。</p><ol><li>整数</li></ol><ul><li>十进制数字 <code>123</code><ul><li><code>Long</code> 类型通过加 <code>L</code> 后缀实现: <code>123L</code></li></ul></li><li>十六进制 <code>0x0F</code></li><li>二进制 <code>0b00001011</code></li></ul><ol start="2"><li>浮点数<ul><li>默认为 <code>Double</code> 类型: <code>123.5</code>, <code>123.5e10</code></li><li>使用 <code>f</code> 或者 <code>F</code> 后缀来表示 <code>Float</code>: <code>123.5f</code></li></ul></li></ol><h3 id="13-表示法"><a class="markdownIt-Anchor" href="#13-表示法"></a> 1.3 表示法</h3><p>Kotlin 中，任何数字都会被<strong>自动装箱</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">10000</span></span><br><span class="line">print(a === a) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">val</span> boxedA: <span class="built_in">Int</span>? = a <span class="comment">// 在类型后加 ? 表示一个 Nullable 对象</span></span><br><span class="line"><span class="keyword">val</span> anotherBoxedA: <span class="built_in">Int</span>? = a</span><br><span class="line">print(boxedA === anotherBoxedA) <span class="comment">// false</span></span><br><span class="line">print(boxedA == anotherBoxedA) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>上面是一个很好的例子，由于所有的数字都会被自动装箱，所以 <strong><code>boxedA</code> 与 <code>anotherBoxedA</code> 不一致</strong>。<br>但是由于两者均指向 <code>a</code>，所以保持了相等性。</p></blockquote><blockquote><p>这里的 <code>Int</code> 与 Java 的 <code>Integer</code> 相同</p></blockquote><h3 id="14-转换"><a class="markdownIt-Anchor" href="#14-转换"></a> 1.4 转换</h3><p>Kotlin 的原则之一就是尽量让事务明显化。<br>所以，Kotlin <strong>禁止隐式转换</strong>，就算是隐式向上转换也是不允许的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span>? = <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Long</span>? = a</span><br><span class="line">print(a == b) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>由于 <code>Int</code> 不是 <code>Long</code> 的子类，而且禁止隐式转换，所以即使 <code>b</code> 指向了 <code>a</code>，它们也不相等。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b: <span class="built_in">Byte</span> = <span class="number">1</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> i: <span class="built_in">Int</span> = b <span class="comment">// ERROR</span></span><br></pre></td></tr></table></figure><blockquote><p>字面值会经编译器静态检查赋值给整数形式的变量，但是由于禁止隐式转换，第二个语句会产生 ERROR。</p></blockquote><p>需要转换时，应采用内置的转换方法</p><ul><li><code>toByte()</code></li><li><code>toShort()</code></li><li><code>toInt()</code></li><li><code>toLong()</code></li><li><code>toFloat()</code></li><li><code>toDouble()</code></li><li><code>toChar()</code></li></ul><h3 id="15-位运算符"><a class="markdownIt-Anchor" href="#15-位运算符"></a> 1.5 位运算符</h3><p>Kotlin 支持全套 Java 的普通数字运算符。<br>但关于位运算符则稍有不同，Kotlin 采用<strong>单词型</strong>而非 Java 的<strong>符号型</strong>位运算符。</p><p>下面是 Kotlin 的位运算符列表</p><ul><li><code>shl(bits)</code> =&gt; 位左移，相当于 Java 的 <code>&lt;&lt;</code></li><li><code>shr(bits)</code> =&gt; 位右移，相当于 Java 的 <code>&gt;&gt;</code></li><li><code>ushr(bits)</code> =&gt; 无符号数右移，相当于 Java 的 <code>&gt;&gt;&gt;</code></li><li><code>and(bits)</code> =&gt; 按位取与操作，相当于 Java 的 <code>&amp;</code></li><li><code>or(bits)</code> =&gt; 按位取或操作，相当于 Java 的 <code>|</code></li><li><code>xor(bits)</code> =&gt; 按位取异或操作，相当于 Java 的 <code>^</code></li><li><code>inv()</code> =&gt; 按位取反操作，相当于 Java 的 <code>~</code></li></ul><h2 id="2-字符类型"><a class="markdownIt-Anchor" href="#2-字符类型"></a> 2. 字符类型</h2><p>字符类型使用 <code>Char</code> 来表示，<strong>字符不是数字</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">check</span><span class="params">(c: <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) <span class="comment">// ERROR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符使用单引号括起来<code>'1'</code>，反斜杠 <code>\</code> 表示转义，转义字符和 Java 相同。</p><p>和数字类型一样，字符类型也被自动装箱，保持相等性，而不保持一致性。</p><h2 id="3-布尔类型"><a class="markdownIt-Anchor" href="#3-布尔类型"></a> 3. 布尔类型</h2><p>使用 <code>Boolean</code> 来表示布尔类型，布尔类型有两个值，<code>true</code> 和 <code>false</code>。</p><p>内置的逻辑布尔操作与 Java 相同。</p><h2 id="4-数组"><a class="markdownIt-Anchor" href="#4-数组"></a> 4. 数组</h2><p>使用 <code>Array</code> 表示数组，这是一个泛型类，类似于 Java 中的 <code>ArrayList&lt;T&gt;</code>，但并不完全相同。</p><p>数组是 <strong>invariant</strong> 的，也就是说不能把 <code>Array&lt;String&gt;</code> 的数组赋予 <code>Array&lt;Any&gt;</code> 的实例，这会产生一个<strong>runtime failure</strong></p><blockquote><p>Kotlin 同样拥有 <code>List</code> 和 <code>ArrayList</code> 类型，在 JVM 上，<code>Array</code> 会被替换成 Java array。</p></blockquote><blockquote><p>所以，事实上 <code>Array</code> 只是</p></blockquote><h3 id="41-创建数组"><a class="markdownIt-Anchor" href="#41-创建数组"></a> 4.1 创建数组</h3><p>使用 <code>arrayOf()</code> 创建数组。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> nullArray = arrayOfNulls(<span class="number">5</span>) <span class="comment">// Array with 5 null elements</span></span><br></pre></td></tr></table></figure><blockquote><p>注意变量具有自动推断功能，类似 C++ 中的 <code>auto</code></p></blockquote><p>也可以使用 <code>Array()</code> 创建数组。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Crates an Array&lt;String&gt; with values</span></span><br><span class="line"><span class="comment">// ["0", "1", "4", "9", "16"]</span></span><br><span class="line"><span class="keyword">val</span> asc = Array(<span class="number">5</span>, &#123;i -&gt; (i * i).toString()&#125;)</span><br></pre></td></tr></table></figure><p>Kotlin 内置了一些特定的数组类型，如 <code>IntArray</code>, <code>ByteArray</code> 等。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="42-访问数组"><a class="markdownIt-Anchor" href="#42-访问数组"></a> 4.2 访问数组</h3><p><code>Array</code> 内置了 <code>get()</code> 和 <code>set()</code> 方法和 <code>size</code> 属性。<br>但是也支持使用方括号进行访问的操作 <code>[]</code></p><h3 id="43-多维数组"><a class="markdownIt-Anchor" href="#43-多维数组"></a> 4.3 多维数组</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> int2d: Array&lt;IntArray&gt;</span><br><span class="line">int2d = arrayOf(intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), intArrayOf(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), intArrayOf(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure><h2 id="5-字符串"><a class="markdownIt-Anchor" href="#5-字符串"></a> 5. 字符串</h2><p>使用 <code>String</code> 来表示字符串。与 Java 一样，字符串是一个不可变对象。</p><h3 id="51-相对-java-增加的新特性"><a class="markdownIt-Anchor" href="#51-相对-java-增加的新特性"></a> 5.1 相对 Java 增加的新特性</h3><p>与 Java 不同的是，Kotlin 支持使用方括号 <code>[]</code> 来获取字符串中的字符，同时也支持对字符串字符进行遍历。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> str) &#123;</span><br><span class="line">    println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-raw-string"><a class="markdownIt-Anchor" href="#52-raw-string"></a> 5.2 raw string</h3><p>此外，Kotlin 还吸收了 Python 的多行字符串特性，使用三个双引号来表示一个 <strong>raw string</strong>，raw string 不接受转义，其中任何的字符都是字面字符。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rawString = <span class="string">"""</span></span><br><span class="line"><span class="string">    This is a raw string.</span></span><br><span class="line"><span class="string">    \n and \t will be displayed as</span></span><br><span class="line"><span class="string">    its literal stirng.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="53-字符串模板"><a class="markdownIt-Anchor" href="#53-字符串模板"></a> 5.3 字符串模板</h3><p>Kotlin 字符串具有模板功能，使用 <code>$</code> 来指定参数<br>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> s = <span class="string">"i = <span class="variable">$i</span>"</span> <span class="comment">// evaluates to "i = 10"</span></span><br></pre></td></tr></table></figure><p>也可以使用花括号 <code>{}</code> 来获取<strong>对象的属性</strong>填充到字符串中。<br>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">val</span> str = <span class="string">"<span class="variable">$s</span>.lenth is <span class="subst">$&#123;s.lenth&#125;</span>"</span> <span class="comment">//  evaluates to "abc.length is 3"</span></span><br></pre></td></tr></table></figure><p>需要注意的是，字符串的模板功能不仅可以在普通字符串中使用，同时<strong>也可以在 raw string 中使用。</strong></p><p>此时，如果需要表示 <code>$</code> 美元符号，必须使用以下表达式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> price = <span class="string">"""</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;<span class="string">'$'</span>&#125;</span>9.99</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><blockquote><p>这里使用双引号<code>${&quot;$&quot;}</code>也是可以的，模板引用一个字面量时，结果就是它本身。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 基础</title>
      <link href="//Kotlin/Kotlin%20%E5%9F%BA%E7%A1%80/"/>
      <url>//Kotlin/Kotlin%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本语法"><a class="markdownIt-Anchor" href="#1-基本语法"></a> 1. 基本语法</h2><h3 id="11-变量定义"><a class="markdownIt-Anchor" href="#11-变量定义"></a> 1.1 变量定义</h3><ol><li><p>使用 <code>val</code> 定义<strong>常量</strong>（只读）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">1</span>   <span class="comment">// 类型可以被自动推断</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>  <span class="comment">// 如果没有进行变量初始化，则需要指定变量类型</span></span><br><span class="line">c = <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，kotlin 取消了分号</p></blockquote></li></ol><a id="more"></a><ol start="2"><li><p>使用 <code>var</code> 定义变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line">x += <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="12-注释"><a class="markdownIt-Anchor" href="#12-注释"></a> 1.2 注释</h3><p>与 Java 相同，单行注释使用 <code>//</code> ，多行注释使用 <code>/* */</code></p><p>不同的是，kotlin 中允许注释块嵌套。</p><h2 id="2-编码规范"><a class="markdownIt-Anchor" href="#2-编码规范"></a> 2. 编码规范</h2><h3 id="21-命名风格"><a class="markdownIt-Anchor" href="#21-命名风格"></a> 2.1 命名风格</h3><p>命名风格和 Java 相同。</p><ul><li>类名采用大驼峰</li><li>函数、方法、变量采用小驼峰</li><li>使用 4 空格缩进</li><li>公有方法和函数必须加上 KDoc</li></ul><h3 id="22-关于冒号"><a class="markdownIt-Anchor" href="#22-关于冒号"></a> 2.2 关于冒号</h3><p>冒号在分隔两个类型的时候，<strong>前后都要有空格</strong></p><p>其余情况，只需后有空格即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Foo</span>&lt;<span class="type">out T : Any</span>&gt; : <span class="type">Bar &#123;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(a: <span class="type">Int</span>)</span></span>: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-lambda-表达式"><a class="markdownIt-Anchor" href="#23-lambda-表达式"></a> 2.3 Lambda 表达式</h3><p>在使用 lambda 表达式时，lambda 表达式应与花括号有空格分隔。</p><p>lambda 表达式应尽量的短。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.filter &#123; it &gt; <span class="number">10</span> &#125;.map &#123; element -&gt; element * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="24-关于-unit"><a class="markdownIt-Anchor" href="#24-关于-unit"></a> 2.4 关于 Unit</h3><p>当一个函数返回 <code>Unit</code> 类型时，应将其省略。</p><p>类似于 Java 中的返回值为 <code>void</code></p><h2 id="3-包和导入"><a class="markdownIt-Anchor" href="#3-包和导入"></a> 3. 包和导入</h2><p>Kotlin 中的包和导入与 Java 区别不大。</p><p>另外增加了 <code>as</code> 关键字用于赋予别名给类和函数，以防出现名称冲突。<br>同时，Kotlin 中没有 Java 中的 <code>import static</code> 语句，所有的导入均使用 <code>import</code> 进行。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 对象</title>
      <link href="//Kotlin/Kotlin%20%E5%AF%B9%E8%B1%A1/"/>
      <url>//Kotlin/Kotlin%20%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Kotlin 提供了一个 Object 属性用来实现在 Java 中很常见的三个功能：</p><ul><li>匿名类对象</li><li>单例模式(Singleton)</li><li>静态类成员</li></ul><p>它们分别被称为 <strong>对象表达式</strong>，<strong>对象声明</strong>，<strong>companion object</strong></p><a id="more"></a><h2 id="2-对象表达式"><a class="markdownIt-Anchor" href="#2-对象表达式"></a> 2. 对象表达式</h2><p>Kotlin 使用 对象表达式 来实现 Java 中常用的匿名类对象功能。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.addMouseListener(<span class="keyword">object</span> : MouseAdapter() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseEntered</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果类拥有一个构造器，那么就必须传入相应的参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>(x: <span class="built_in">Int</span>) &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">val</span> y: <span class="built_in">Int</span> = x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> ab: A = <span class="keyword">object</span> : A(<span class="number">1</span>), B &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> y = <span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以<strong>只声明一个 object</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> adHoc = <span class="keyword">object</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> x: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> y: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">print(adHoc.x + adHoc.y)</span><br></pre></td></tr></table></figure><p>和 Java 的匿名类一样，对象表达式 也可以访问外部的变量，但和 Java 不同的是，变量<strong>并没有要求必须是 <code>final</code></strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">countClicks</span><span class="params">(window: <span class="type">JComponent</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> clickCount = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> enterCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  window.addMouseListener(<span class="keyword">object</span> : MouseAdapter() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">      clickCount++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseEntered</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">      enterCount++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-对象声明"><a class="markdownIt-Anchor" href="#3-对象声明"></a> 3. 对象声明</h2><p>Kotlin 使用 对象声明 来实现 Java 中常用的<strong>单例模式</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> DataProviderManager &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">registerDataProvider</span><span class="params">(provider: <span class="type">DataProvider</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> allDataProviders: Collection&lt;DataProvider&gt;</span><br><span class="line">    <span class="keyword">get</span>() = <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这虽然和 对象表达式 很相似，但是要注意的是 object 关键字后面跟一个名字后，我们不能再叫它表达式，也不能给他赋值，但是可以通过它的名字访问它。</p><p>调用 object</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataProviderManager.registerDataProvider(...)</span><br></pre></td></tr></table></figure><p>对象声明 可以拥有超类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> DefaultListener : MouseAdapter() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseEntered</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时， 对象声明 不能是局部变量，比如直接嵌套在一个方法里，但是可以嵌套在其他的对象声明或者非内部类里面。</p><h2 id="4-伴生对象companion-object"><a class="markdownIt-Anchor" href="#4-伴生对象companion-object"></a> 4. 伴生对象(companion object)</h2><p>这个在类的章节中也有所介绍，用于实现 Java 的静态成员功能。</p><p>使用 <code>companion</code> 关键字来声明一个伴生对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> Factory &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: MyClass = MyClass()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伴生对象的成员可以直接使用其名字来调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> instance = MyClass.create()</span><br></pre></td></tr></table></figure><p>我们也可以调用伴生对象本身，通过使用 <code>Companion</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x = MyClass.Companion</span><br></pre></td></tr></table></figure><blockquote><p>由于没有名字区分，一个类<strong>只能拥有一个伴生对象</strong></p></blockquote><p>虽然说伴生对象看起来是静态的，但是在实际执行过程中，它依旧会实例化，所以它也可以拥有超类和重载方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> : Factory&lt;MyClass&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: MyClass = MyClass()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然，你也可以让 JVM 将伴生对象真正的<strong>静态化</strong>，使用 <code>@JvmStatic</code> 注解即可。</p></blockquote><h2 id="5-对象表达式-和-对象声明-的不同点"><a class="markdownIt-Anchor" href="#5-对象表达式-和-对象声明-的不同点"></a> 5. 对象表达式 和 对象声明 的不同点</h2><ul><li>当 对象表达式 被声明时，它将会被立即执行。</li><li>而 对象声明 会被延迟初始化，它将会在第一次调用它的时候进行初始化，而不是声明它的时候。</li><li>伴生对象会在对应的类第一次被加载之后使用 java 的静态初始化器生成</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 接口</title>
      <link href="//Kotlin/Kotlin%20%E6%8E%A5%E5%8F%A3/"/>
      <url>//Kotlin/Kotlin%20%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本形式"><a class="markdownIt-Anchor" href="#1-基本形式"></a> 1. 基本形式</h2><p>Kotlin 的接口和 Java 8 中很相似。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="comment">// optional body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-实现接口"><a class="markdownIt-Anchor" href="#2-实现接口"></a> 2. 实现接口</h2><p>和类继承一样，使用同样的语法进行接口的实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="comment">// body</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-声明属性"><a class="markdownIt-Anchor" href="#3-声明属性"></a> 3. 声明属性</h2><p>在接口中可以声明属性。<br>需要注意的是，接口中的属性不具备 <strong>backing field</strong>，所以<strong>不能进行初始化</strong>。</p><p>接口中的属性可以是 <code>abstract</code> 的，或者提供一个自定义 getter。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> property: <span class="built_in">Int</span> <span class="comment">// abstract</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> propertyWithImplementation: String</span><br><span class="line">        <span class="keyword">get</span>() = <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        print(property)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> property: <span class="built_in">Int</span> = <span class="number">29</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-解决冲突"><a class="markdownIt-Anchor" href="#4-解决冲突"></a> 4. 解决冲突</h2><p>和类继承一样，如果实现的多个接口方法出现冲突，就必须赋予 <code>override</code> 属性进行重载。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A &#123;</span></span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> : <span class="type">A</span>, <span class="type">B &#123;</span></span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>&lt;A&gt;.foo()</span><br><span class="line">    <span class="keyword">super</span>&lt;B&gt;.foo()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，D 不需要 override <code>bar()</code>，<br>这是因为 D 同时实现了 A，B，<br>而 B 中对 <code>bar()</code> 方法进行了实现，同时 <code>bar()</code> 的实现中没有冲突。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 控制流程</title>
      <link href="//Kotlin/Kotlin%20%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
      <url>//Kotlin/Kotlin%20%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-if"><a class="markdownIt-Anchor" href="#1-if"></a> 1. If</h2><p>Kotlin 中 <code>if</code> 语句是一个表达式，<strong>有返回值</strong>，功能和 C++ 和 Java 中的<strong>条件表达式</strong>相同。</p><p>所以，Kotlin 中不支持条件表达式，因为 <code>if</code> 语句已经具备了这个功能。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Traditional usage</span></span><br><span class="line"><span class="keyword">var</span> max = a <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">max = b</span><br><span class="line"><span class="comment">// With else</span></span><br><span class="line"><span class="keyword">var</span> max: <span class="built_in">Int</span> <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">max = a</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">max = b</span><br><span class="line"><span class="comment">// As expression</span></span><br><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><a id="more"></a><p>同时，<code>if</code> 表达式也支持<strong>语句块</strong>，语句块中的<strong>最后一个</strong>变量或常量的值就是语句块的返回值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) &#123; print(<span class="string">"Choose a"</span>) a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    print(<span class="string">"Choose b"</span>)</span><br><span class="line">b &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>如果 <code>if</code> 作为一个表达式（需要其返回值），那么 <code>else</code> 语句就必须存在</strong>。</p><h2 id="2-when"><a class="markdownIt-Anchor" href="#2-when"></a> 2. When</h2><p>Kotlin 用 <code>when</code> 表达式替代了 Java 和 C++ 中的 <code>switch</code> 语句的功能。</p><p>一个简单的 <code>when</code> 语句如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line"><span class="number">1</span> -&gt; print(<span class="string">"x == 1"</span>)</span><br><span class="line"><span class="number">2</span> -&gt; print(<span class="string">"x == 2"</span>)</span><br><span class="line"><span class="keyword">else</span> -&gt; &#123; <span class="comment">// Note the block</span></span><br><span class="line">    print(<span class="string">"x is neither 1 nor 2"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 <code>if</code> 语句一样，<code>when</code> 语句也可以作为表达式；当 <code>when</code> 作为表达式时，它的返回值是与其 case 相符的值。</p><p>同样，<code>when</code> 作为表达式时，也可以使用<strong>块语句。</strong></p><p>与 Java 不同的是，<code>when</code> 语句可以对于一些不同的 case 进行一些相同的相应，而使用较少的代码量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span> -&gt; print(<span class="string">"x == 0 or x == 1"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"otherwise"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时， <code>when</code> 语句的 case 可以使用<strong>随意的表达式</strong>，而不是 Java 中的仅能使用常量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    parseInt(s) -&gt; print(<span class="string">"s encodes x"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"s does not encode x"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，也可以使用 <code>in</code>、<code>!in</code>、<code>is</code>、<code>!is</code> 进行<strong>范围</strong>和<strong>类型</strong>检测。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> -&gt; print(<span class="string">"x is in the range"</span>)</span><br><span class="line">    <span class="keyword">in</span> validNumbers -&gt; print(<span class="string">"x is valid"</span>)</span><br><span class="line">    !<span class="keyword">in</span> <span class="number">10</span>..<span class="number">20</span> -&gt; print(<span class="string">"x is outside the range"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt;     print(<span class="string">"none of the above"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> hasPrefix = <span class="keyword">when</span>(x) &#123;</span><br><span class="line">    <span class="keyword">is</span> String -&gt; x.startsWith(<span class="string">"prefix"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 在这里拥有一个非常好的特性叫 <strong>smart casts</strong>，<br>当一个 <code>is</code> 表达式满足时，变量 <code>x</code> 将被**自动 cast 到相应的类型，**调用相应类型的方法。</p><p>最后，<code>when</code> 也可以不接受参数使用，此时，<code>when</code> 的各个分支条件就变成了简单的<strong>布尔表达式</strong>，可以用于替代 <code>if-else-if</code> 结构。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line">    x.isOdd() -&gt; print(<span class="string">"x is odd"</span>)</span><br><span class="line">    x.isEven() -&gt; print(<span class="string">"x is even"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"x is funny"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-for"><a class="markdownIt-Anchor" href="#3-for"></a> 3. For</h2><p>Kotlin 中的 <code>for</code> 类似 Python 和 Java 中的 <code>for-each</code> 结构，使用 <code>in</code> 标识符来分隔 <code>item</code> 和 <code>collection</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> collection) [&#125;</span><br><span class="line">    print(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要使用一个索引值，则可以使用 <code>indices</code>，它内置在 Kotlin 中的所有 <code>collection</code> 中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> array.indices)</span><br><span class="line">    print(array[i]);</span><br></pre></td></tr></table></figure><p>同时也可以使用 <code>withIndex()</code> 方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex())</span><br><span class="line">    print(<span class="string">"<span class="variable">$index</span>, <span class="variable">$value</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="4-while-和-do-while"><a class="markdownIt-Anchor" href="#4-while-和-do-while"></a> 4. While 和 do-while</h2><p>这两者和 Java 没有区别。</p><h2 id="5-跳转"><a class="markdownIt-Anchor" href="#5-跳转"></a> 5. 跳转</h2><p>Kotlin 支持三种形式的跳转：</p><ul><li><code>return</code>：在最近的函数（包括匿名函数）返回</li><li><code>break</code>：跳出当前最近的循环</li><li><code>continue</code>：结束当前最近循环内工作，并从下一次最近循环开始</li></ul><p>与 Java 一样，Kotlin 也支持<strong>带标签的跳转</strong>，标签使用 <code>@</code> 符号来指定。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">loop@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (...) <span class="keyword">break</span><span class="symbol">@loop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带标签的 <code>break</code> 用于跳出指定的循环结构，而带标签的 <code>continue</code> 则用于开始下一次指定的循环。</p><h2 id="6-带标签的-return"><a class="markdownIt-Anchor" href="#6-带标签的-return"></a> 6. 带标签的 return</h2><p>不仅如此，Kotlin 还支持带标签的 <code>return</code>，这主要是因为 Kotlin 允许<strong>函数的嵌套。</strong></p><p>一个比较普遍的使用场景是在 Lamda 表达式上。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">        print(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似如上的语句，<code>return</code> 的作用对象是其最近的<strong>函数</strong>，在这里是 <code>foo()</code>。</p><p>但是如果我们要只从 Lambda 函数中返回(<code>forEach</code>)，则需要指定一个标签。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints.forEach <span class="symbol">lit@</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) re <span class="symbol">turn@</span>lit</span><br><span class="line">        print(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个更为常用的形式是<strong>直接使用 Lambda 表达式的名字</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line">        print(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外的，我们也可以使用传统的匿名函数，来实现这个功能。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints.forEach(<span class="function"><span class="title">fun</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">        print(value)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要返回某个值时，标签的解析具有更高优先权。</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span><span class="symbol">@a</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>表示在 <code>a</code> 标签中返回 <code>1</code>，而不是返回 <code>@a 1</code></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 空安全</title>
      <link href="//Kotlin/Kotlin%20%E7%A9%BA%E5%AE%89%E5%85%A8/"/>
      <url>//Kotlin/Kotlin%20%E7%A9%BA%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Kotlin 对于 Java 的一个很大的改进在于，Kotlin 的类型系统目标在于要**消除 <code>NullPointerException</code>**或者 NPE。</p><p>所以 Kotlin 提供了一个健壮的 Null 检查系统。</p><a id="more"></a><h2 id="2-产生-npe-的原因"><a class="markdownIt-Anchor" href="#2-产生-npe-的原因"></a> 2. 产生 NPE 的原因</h2><p>可能产生 NPE 的原因如下：</p><ul><li>显式调用 <code>throw NullPointerException()</code></li><li>使用 <code>!!</code> 操作符</li><li>Java 代码造成的</li><li>一些前后矛盾的初始化（在构造函数中没有初始化的 <code>this</code> 在其他地方使用）</li></ul><h2 id="3-kotlin-类型系统"><a class="markdownIt-Anchor" href="#3-kotlin-类型系统"></a> 3. Kotlin 类型系统</h2><p>在 Kotlin 中，类型系统将变量引用分成了<strong>两种类型</strong>：可以为 <code>null</code> 的类型（nullable），和不能为 <code>null</code> 的类型（non-null）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: String = <span class="string">"abc"</span></span><br><span class="line">a = <span class="literal">null</span> <span class="comment">// compilation error</span></span><br></pre></td></tr></table></figure><p>在类型后添加一个问号(<code>?</code>)来表明它是可以为空的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b: String? = <span class="string">"abc"</span></span><br><span class="line">b = <span class="literal">null</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>此时，对于 <code>a</code>，由于它不会产生 NPE，你可以安全的访问它的成员。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l = a.length</span><br></pre></td></tr></table></figure><p>但是对于 <code>b</code>，由于它可能为空，所以直接访问它，编译器会报错</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l = b.length <span class="comment">// error: variable 'b' can be null</span></span><br></pre></td></tr></table></figure><p>但是我们依旧需要访问 <code>b</code> 啊！</p><h2 id="4-访问可能为空变量的方法"><a class="markdownIt-Anchor" href="#4-访问可能为空变量的方法"></a> 4. 访问可能为空变量的方法</h2><p>下面就介绍几种方法来进行 <code>b</code> 的安全访问。</p><h3 id="41-显式检查"><a class="markdownIt-Anchor" href="#41-显式检查"></a> 4.1 显式检查</h3><p>首先你可以直接对 <code>b</code> 进行空检查</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l = <span class="keyword">if</span> (b != <span class="literal">null</span>) b.length <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>由于 Kotlin 具有智能造型特性，还可以直接在 <code>if</code> 语句中访问 <code>b</code> 的成员。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (b != <span class="literal">null</span> &amp;&amp; b.length &gt; <span class="number">0</span>)</span><br><span class="line">  print(<span class="string">"String of length <span class="subst">$&#123;b.length&#125;</span>"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  print(<span class="string">"Empty string"</span>)</span><br></pre></td></tr></table></figure><p>当然，这只适用于当 <code>b</code> 符合智能造型条件的情景，否则，<code>b</code> 有可能在检查之后再次变为空。</p><h3 id="42-使用安全访问"><a class="markdownIt-Anchor" href="#42-使用安全访问"></a> 4.2 使用安全访问</h3><p>第二个方法是采用安全访问操作符(<code>?.</code>)，即在点号(<code>.</code>)前加一个问号(<code>?</code>)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b?.length</span><br></pre></td></tr></table></figure><p>这个表达式当 <code>b</code> 不为空时返回 <code>b.length</code>；<br>当 <code>b</code> 为空时，返回 <code>null</code>。</p><p>表达式的返回结果是 <code>Int?</code></p><p>安全访问在链式操作中很有用。<br>比如说，<code>bob</code> 是一个 <code>Employee</code>，他有可能被派往一个 <code>Department</code>，这个部门也许会存在一个主管。<br>那么我们通过以下调用链来获取 <code>bob</code> 所在部门主管的名字。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bob?.department?.head?.name</span><br></pre></td></tr></table></figure><p>当调用链上的任何一个值为 <code>null</code> 时，表达式的返回值都为 <code>null</code>。</p><p>如果你想对集合中的非空元素进行某种操作，可以结合安全访问和 <code>let()</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listWithNulls: List&lt;String?&gt; = listOf(<span class="string">"A"</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> listWithNulls) &#123;</span><br><span class="line">     item?.let &#123; println(it) &#125; <span class="comment">// prints A and ignores null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>let</code> 操作接受一个 lambda 表达式，并返回 lambda 表达式的值。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pldEJyYWlucy9rb3RsaW4vYmxvYi8xLjAuMy9saWJyYXJpZXMvc3RkbGliL3NyYy9rb3RsaW4vdXRpbC9TdGFuZGFyZC5rdCNMNTU=" title="https://github.com/JetBrains/kotlin/blob/1.0.3/libraries/stdlib/src/kotlin/util/Standard.kt#L55">源代码<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="43-elvis-表达式"><a class="markdownIt-Anchor" href="#43-elvis-表达式"></a> 4.3 Elvis 表达式</h3><p>如果对于一个引用 <code>r</code>，我们需要：<br>当 <code>r</code> 不为空时，使用它；否则我们就使用一个其他的值(<code>x</code>)</p><p>我们可以使用如下的语句：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l: <span class="built_in">Int</span> = <span class="keyword">if</span> (b != <span class="literal">null</span>) b.length <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>一个更为简单的方法是使用 Elvis 表达式(<code>?:</code>)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l = b?.length ?: -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果在 <code>?:</code> 的左边的值不为空，那么 Elvis 操作符就返回这个值，否则就返回右边的值。</p><p>与 Java 中的条件操作符不同的是，只有当 <code>?:</code> 的左边的值<strong>为空</strong>时，才会执行右边的语句；<br>所以这个操作符不能像条件操作符一样执行一般的判断。</p><blockquote><p>想要实现条件操作符的功能，请使用单行的 <code>if-else</code> 表达式。</p></blockquote><h3 id="44-操作符"><a class="markdownIt-Anchor" href="#44-操作符"></a> 4.4 <code>!!</code> 操作符</h3><p>第三个方法是给 NPE 爱好者们使用的，我们可以使用 <code>b!!</code>，使用它来进行调用，结果就会和 Java 一样，会抛出 NPE。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l = b!!.length</span><br></pre></td></tr></table></figure><p>也就是说，如果你需要 NPE，就使用这个操作符。</p><h2 id="5-安全的造型"><a class="markdownIt-Anchor" href="#5-安全的造型"></a> 5. 安全的造型</h2><p>一般的造型 <code>as</code> 在对象不相符的时候，会产生一个 <code>ClassCastException</code>。</p><p>一个更好的选择是使用 <code>as?</code>，一种更为安全的造型，当造型失败时，将会返回 <code>null</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> aInt: <span class="built_in">Int</span>? = a <span class="keyword">as</span>? <span class="built_in">Int</span>  <span class="comment">// return null if failure</span></span><br></pre></td></tr></table></figure><h2 id="6-空类型的集合"><a class="markdownIt-Anchor" href="#6-空类型的集合"></a> 6. 空类型的集合</h2><p>如果你拥有一个可空类型的集合，想要过滤出非空类型。只需要写如下语句：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> nullableList: List&lt;<span class="built_in">Int</span>?&gt; = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> intList: List&lt;<span class="built_in">Int</span>&gt; = nullableList.filterNotNull() <span class="comment">// non-null</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 类基础</title>
      <link href="//Kotlin/Kotlin%20%E7%B1%BB%E5%9F%BA%E7%A1%80/"/>
      <url>//Kotlin/Kotlin%20%E7%B1%BB%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-声明"><a class="markdownIt-Anchor" href="#1-声明"></a> 1. 声明</h2><p>使用 <code>class</code> 来声明一个类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoice</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类是空的，那么大括号可以省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-创建"><a class="markdownIt-Anchor" href="#2-创建"></a> 2. 创建</h2><p>Kotlin 类使用 <code>constructor</code> 来指定构建方法。</p><h3 id="21-primary-constructor"><a class="markdownIt-Anchor" href="#21-primary-constructor"></a> 2.1 primary constructor</h3><p><strong>一个类必须拥有一个 primary constructor。</strong><br><strong>primary constructor 是类头的一部分。</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span></span>(name: String) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个 primary constructor 没有任何的可见性或者注解来修饰，则 <code>constructor</code> 可以省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(name: String) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 primary constructor 不能包含任何代码，对应的，使用 <code>init</code> 块来进行初始化构建。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(name: String) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"Person construction."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类头的参数可以在 <code>init</code> 块中使用，而且，也可以在声明类域时使用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(name: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> customerKey = name.toUpperCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，也可以直接在 primary constructor 中进行类域的初始化。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> firstName: String, <span class="keyword">val</span> lastName: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过添加 <code>val</code> 或者 <code>var</code>，primary constructor 中的参数就可以自动成为类的域。</p><p>当如果 primary constructor 中存在<strong>可见性修饰符</strong>或者<strong>注解</strong>时，<code>constructor</code> 标识符<strong>必须存在</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">public</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(name: String) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="22-secondary-constructor"><a class="markdownIt-Anchor" href="#22-secondary-constructor"></a> 2.2 secondary constructor</h3><p>类也可以声明一个次要的构造器，相当于 Java 的重载构造函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(parent: Person) &#123;</span><br><span class="line">        parent.children.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类拥有 primary constructor，则每一个 secondary 都需要包含 primary constructor 的参数。</p><p>语法类似于 C++ 的 <code>super</code> 继承，使用 <code>this</code>，通过参数来表示不同的所继承的 constructor。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(firstName: String) &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(firstName: String,lastName: String) : <span class="keyword">this</span>(firstName) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(firstName: String, lastName: String, middleName: String) : <span class="keyword">this</span>(firstName, lastName) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，不是每个 constructor 都要<strong>直接继承</strong> primary constructor，只需要包含其参数即可。</p><h3 id="23-默认参数"><a class="markdownIt-Anchor" href="#23-默认参数"></a> 2.3 默认参数</h3><p>一个类的构造器可以拥有默认参数，默认参数使用 <code>=</code> 来指定。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(name: String = <span class="string">""</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当 primary constructor 中的参数都有默认值后，编译器会自动生成一个没有参数的 constructor。</p></blockquote><h2 id="3-实例化"><a class="markdownIt-Anchor" href="#3-实例化"></a> 3. 实例化</h2><p>将一个类实例化很简单，只需要像一个方法去调用即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> customer = Customer(<span class="string">"hehe"</span>)</span><br></pre></td></tr></table></figure><p>注意，Kotlin 中没有 <code>new</code> 标识符。</p><h2 id="4-继承"><a class="markdownIt-Anchor" href="#4-继承"></a> 4. 继承</h2><p>任何的类都有一个默认的超类 <code>Any</code>，但 <code>Any</code> 不是 Java 中的 <code>java.lang.Object</code>。</p><p>实际上，<code>Any</code> 只含有 <code>Object</code> 中的 <code>equals()</code> <code>toString()</code> <code>hashCode()</code> 方法。</p><h3 id="41-声明超类"><a class="markdownIt-Anchor" href="#41-声明超类"></a> 4.1 声明超类</h3><p>Kotlin 中使用冒号用于声明超类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>(p: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>(p: <span class="built_in">Int</span>) : Base(p)</span><br></pre></td></tr></table></figure><p>如果子类拥有 primary constructor，那么超类就必须在 primary constructor 中立即进行实例化。</p><blockquote><p>所谓的立即实例化就是在冒号之后<strong>构建出基类的实例</strong></p></blockquote><p>如果子类中没有 primary constructor，那么需要在其他 constructor 中使用 <code>super</code> 关键字进行基类构建。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span> : <span class="type">View &#123;</span></span></span><br><span class="line">    <span class="keyword">constructor</span>(ctx: Context) : <span class="keyword">super</span>(ctx) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(ctx: Context, attrs: AttributeSet) : <span class="keyword">super</span>(ctx, attrs) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，对于不同的 constructor，也可以使用<strong>不同的基类 constructor</strong> 进行构建。</p><p>注意到，Kotlin 在基类前使用了 <code>open</code> 关键字，这是用来指明 <code>Base</code> 类是<strong>可以被继承的</strong>。</p><p>默认情况下，<strong>Kotlin 中的类全部都是 final 类，不允许被继承。</strong><br>需要被继承的类使用 <code>open</code> 来指定。</p><blockquote><p>这主要基于 《Effective Java》中的第 17 条：设计并为你的继承写文档，否则就禁止它。</p></blockquote><h3 id="42-override-成员"><a class="markdownIt-Anchor" href="#42-override-成员"></a> 4.2 Override 成员</h3><p>Kotlin 的一个主要原则是尽量将操作显式化。<br>所以，如果一个成员是 override 基类成员而来的，则需要显式指明 <code>override</code> 。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">nv</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>() : Base() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<strong>不仅类是 final 的，成员也是 final 的</strong>。<br>被 override 成员在基类中的 <code>open</code> 和在子类中的 <code>override</code> 标识符**<span style="font-size:25px">缺一不可</span>**</p><p>如果一个成员被指定了 <code>override</code>，那么它**默认不再带有 final 属性。**如果不允许再次 override，那么就需要给它指定 <code>final</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherDerived</span></span>() : Base() &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Override 一个变量和 override 方法一样，不过比较有趣的是，你可以在 primary constructor 中使用 <code>override</code> 关键字。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">val</span> x: <span class="built_in">Int</span> <span class="keyword">get</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar1</span></span>(<span class="keyword">override</span> <span class="keyword">val</span> x: <span class="built_in">Int</span>) : Foo() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，可以将 <code>val</code> 常量使用 <code>var</code> 进行 override，但<strong>反之不行</strong>。</p><p>这主要是因为 <code>val</code> 只拥有 getter，当使用 <code>var</code> 时，相当于给它赋上了 setter，但是反过来则不行了，<code>val</code> 不具备 setter。</p><h3 id="43-关于-override-的规则"><a class="markdownIt-Anchor" href="#43-关于-override-的规则"></a> 4.3 关于 override 的规则</h3><p>如果一个类继承了具有同一个域的不同基类和接口，那么，这个类就必须 override 这个域。</p><blockquote><p>域指的是变量、常量、方法等类成员</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">()</span></span> &#123; print(<span class="string">"a"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125; <span class="comment">// interface members are 'open' by default</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">b</span><span class="params">()</span></span> &#123; print(<span class="string">"b"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>() : A(), B &#123;</span><br><span class="line">  <span class="comment">// The compiler requires f() to be overridden:</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>&lt;A&gt;.f() <span class="comment">// call to A.f()</span></span><br><span class="line">    <span class="keyword">super</span>&lt;B&gt;.f() <span class="comment">// call to B.f()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-抽象类"><a class="markdownIt-Anchor" href="#5-抽象类"></a> 5. 抽象类</h2><p>一个声明了 <code>abstract</code> 的类是一个抽象类。</p><p>一个抽象类，<strong>其本身和其所有的方法都必须声明 <code>abstract</code></strong></p><p><code>abstract</code> 类中不允许存在没有声明 <code>abstract</code> 的方法。</p><p>声明了 <code>abstract</code> 的方法不能存在于没有声明 <code>abstract</code> 的类中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> : <span class="type">Base</span></span>() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-伴生对象companion-objects"><a class="markdownIt-Anchor" href="#6-伴生对象companion-objects"></a> 6. 伴生对象(Companion Objects)</h2><p>Kotlin 不像 Java，没有静态成员对象。</p><p><strong>Kotlin 推荐使用包级别的函数来实现工具类。</strong></p><p>但是，缺少静态成员也有缺点，其一就是无法实现静态工厂。</p><p>为了实现这一特性，Kotlin 通过所谓的伴生对象(Companion Objects)来实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> Factory &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: MyClass = MyClass()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伴生对象是<strong>对象声明</strong>的一种，在另一篇文章会有所介绍。</p><h2 id="7-封闭类sealed-class"><a class="markdownIt-Anchor" href="#7-封闭类sealed-class"></a> 7. 封闭类(Sealed Class)</h2><p>封闭类(Sealed class)用来表示对类阶层的限制, 可以限定一个值只允许是某些指定的类型之一, 而不允许是其他类型. 感觉上, 封闭类是枚举类(enum class)的一种扩展: 枚举类的值也是有限的, 但每一个枚举值常数都只存在唯一的一个实例, 封闭类则不同, 它允许的子类类型是有限的, 但子类可以有多个实例, 每个实例都可以包含它自己的状态数据.</p><p>要声明一个封闭类, 需要将 sealed 修饰符放在类名之前. 封闭类可以有子类, 但所有的子类声明都必须嵌套在封闭类的声明部分之内.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Const</span></span>(<span class="keyword">val</span> number: <span class="built_in">Double</span>) : Expr()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Sum</span></span>(<span class="keyword">val</span> e1: Expr, <span class="keyword">val</span> e2: Expr) : Expr()</span><br><span class="line">    <span class="keyword">object</span> NotANumber : Expr()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：从封闭类的子类再继承的子类(间接继承者)可以放在任何地方, 不必在封闭类的声明部分之内.</p></blockquote><p>使用封闭类的主要好处在于, 当使用 when expression 时, 可以验证分支语句覆盖了所有的可能情况, 因此就不必通过 else 分支来处理例外情况.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: <span class="built_in">Double</span> = <span class="keyword">when</span>(expr) &#123;</span><br><span class="line">    <span class="keyword">is</span> Expr.Const -&gt; expr.number</span><br><span class="line">    <span class="keyword">is</span> Expr.Sum -&gt; eval(expr.e1) + eval(expr.e2)</span><br><span class="line">    Expr.NotANumber -&gt; <span class="built_in">Double</span>.NaN</span><br><span class="line">    <span class="comment">// 不需要 `else` 分支, 因为我们已经覆盖了所有的可能情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 类属性和域</title>
      <link href="//Kotlin/Kotlin%20%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E5%9F%9F/"/>
      <url>//Kotlin/Kotlin%20%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-声明和调用"><a class="markdownIt-Anchor" href="#1-声明和调用"></a> 1. 声明和调用</h2><p>声明类中的属性和值很简单，类似 Java，使用 <code>var</code> 声明变量，使用 <code>val</code> 声明常量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> name: String = ...</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> street: String = ...</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> city: String = ...</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> state: String? = ...</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> zip: String = ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>注意，变量默认为 <code>public</code> 属性。</p></blockquote><p>由于变量默认为 <code>public</code>，所以直接使用类成员运算符(<code>.</code>)，即可调用其属性和方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">copyAddress</span><span class="params">(address: <span class="type">Address</span>)</span></span>: Address &#123;</span><br><span class="line">  <span class="keyword">val</span> result = Address() <span class="comment">// there's no 'new' keyword in Kotlin</span></span><br><span class="line">  result.name = address.name <span class="comment">// accessors are called</span></span><br><span class="line">  result.street = address.street</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要说明的是，在编译时，系统会<strong>自动生成默认的 Getter 和 Setter</strong>。</p><p>下面的写法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bar: <span class="built_in">Int</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和以下 Java 代码是<strong>等同的。</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> int bar = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int getBar() &#123;</span><br><span class="line">        <span class="keyword">return</span> bar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setBar(int value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bar = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，在访问和修改时，系统会调用变量的 getter 和 setter 来进行，<strong>而不是直接取值和改值。</strong></p><p>除此之外，Kotlin 的变量在使用前必须被初始化，否则编译器将报错。</p><h2 id="2-getter-和-setter"><a class="markdownIt-Anchor" href="#2-getter-和-setter"></a> 2. Getter 和 Setter</h2><p>定义一个类属性的完整语法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &lt;propertyName&gt;: &lt;PropertyType&gt; [= &lt;property_initializer&gt;]</span><br><span class="line">  [&lt;getter&gt;]</span><br><span class="line">  [&lt;setter&gt;]</span><br></pre></td></tr></table></figure><p>可以看到，初始化，Getter 和 Setter 都是可选项。</p><p>需要注意的是，虽然在这里，初始化是可选项，但是这并不意味着变量不需要被初始化。</p><p>实际上，Kotlin 中的变量在被使用前<strong>必须被初始化！</strong><br>特别的，一个类中的属性无论何时都要被初始化。</p><blockquote><p>这实际上是 Kotlin 的主旨之一，即，尽量使得过程显式化。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allByDefault: <span class="built_in">Int</span>? <span class="comment">// error: explicit initializer required, default getter and setter implied</span></span><br><span class="line"><span class="keyword">var</span> initialized = <span class="number">1</span> <span class="comment">// has type Int, default getter and setter</span></span><br></pre></td></tr></table></figure><h3 id="21-改变-getter-和-setter-的可见性"><a class="markdownIt-Anchor" href="#21-改变-getter-和-setter-的可见性"></a> 2.1 改变 Getter 和 Setter 的可见性</h3><p>如果只需要改变可见性而不需要改变默认的 getter 和 setter，只需要在 <code>get</code> 或者 <code>set</code> 之前加上可见性修饰符即可，<br>而不需要定义其主体。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setterVisibility: String = <span class="string">"abc"</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">set</span> <span class="comment">// the setter is private and has the default implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setterWithAnnotation: Any? = <span class="literal">null</span></span><br><span class="line">  <span class="meta">@Inject</span> <span class="keyword">set</span> <span class="comment">// annotate the setter with Inject</span></span><br></pre></td></tr></table></figure><h3 id="22-自定义-getter-和-setter"><a class="markdownIt-Anchor" href="#22-自定义-getter-和-setter"></a> 2.2 自定义 Getter 和 Setter</h3><p>自定义 getter 和 setter 很简单，只需要在变量下方使用 <code>get</code> 和 <code>set</code> 即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringRepresentation: String</span><br><span class="line">  <span class="keyword">get</span>() = <span class="keyword">this</span>.toString()</span><br><span class="line">  <span class="keyword">set</span>(value) &#123;</span><br><span class="line">    setDataFromString(value) <span class="comment">// parses the string and assigns values to other properties</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>事实上， Kotlin 没有<strong>域</strong>这一属性，即<strong>不允许直接取值和赋值。</strong></p><p>但为了自定义 getter 和 setter，又必须提供一个直接的取值和赋值的途径，<br>对此，Kotlin 采用了一个名为 <strong>backing field</strong> 的特性，<br>即，只允许在 getter 和 setter 中使用 <code>field</code> 这一变量作为直接取值和赋值的途径。</p><p>backing field 会在如下条件下生成：</p><ul><li>变量进行了初始化</li><li>使用了 <code>field</code> 变量</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span> <span class="comment">// the initializer value is written directly to the backing field</span></span><br><span class="line">  <span class="keyword">set</span>(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt;= <span class="number">0</span>)</span><br><span class="line">      field = value</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 backing field 不能满足需求，Kotlin 还提供了 <strong>backing property</strong> 特性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> _table: Map&lt;String, <span class="built_in">Int</span>&gt;? = <span class="literal">null</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">val</span> table: Map&lt;String, <span class="built_in">Int</span>&gt;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_table == <span class="literal">null</span>)</span><br><span class="line">      _table = HashMap() <span class="comment">// Type parameters are inferred</span></span><br><span class="line">    <span class="keyword">return</span> _table ?: <span class="keyword">throw</span> AssertionError(<span class="string">"Set to null by another thread"</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>实际上就是使用另一个 <code>private</code> 变量来帮助实现自定义的 getter 和 setter。</p><h2 id="3-编译时常量"><a class="markdownIt-Anchor" href="#3-编译时常量"></a> 3. 编译时常量</h2><blockquote><p>编译时常量指的是，<strong>在编译时就能确定的常量</strong>，也就是<strong>不需要依赖其他类的常量</strong></p></blockquote><blockquote><p>以Java为例， <code>static final int a = 1</code> 将是一个编译时常量，编译后的符号表中将找不到 <code>a</code> ，所有对 <code>a</code>的引用都被替换成了 <code>1</code>。<br>而 <code>static final int b = &quot;test&quot;.length()</code> 将是一个运行时常量。</p></blockquote><p>Kotlin 中使用 <code>const</code> 标识符来指定编译时常量，JVM 将对这些变量进行优化，提高它们的运行速度。</p><p>编译时常量必须满足如下条件：</p><ul><li>声明在 Top-level，或者是一个 object 的成员</li><li>使用原始类型或者 <code>String</code> 进行初始化</li><li>没有自定义的 getter</li></ul><p>编译时常量可以使用在注解中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> SUBSYSTEM_DEPRECATED: String = <span class="string">"This subsystem is deprecated"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated(SUBSYSTEM_DEPRECATED)</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><h2 id="4-延迟初始化"><a class="markdownIt-Anchor" href="#4-延迟初始化"></a> 4. 延迟初始化</h2><p>一般来说，类中的属性必须被初始化，但是也有时需要通过注入或者 <code>@SetUp</code> 在 JUnit 中进行初始化。</p><p>对此 Kotlin 提供一种特性称作<strong>延迟初始化</strong>，使用 <code>lateinit</code> 标识符可以指明一个变量需要延迟初始化。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> subject: TestSubject</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SetUp</span> <span class="function"><span class="keyword">fun</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        subject = TestSubject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        subject.method()  <span class="comment">// dereference directly</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>延迟初始化只能应用在 <code>var</code> 中（而不能在 primary constructor 中）。<br>延迟初始化的变量不能拥有自定义的 getter 和 setter，同时，它的类型也不能是原始类型。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 语言和本地化</title>
      <link href="//Android/Android%20%E8%AF%AD%E8%A8%80%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
      <url>//Android/Android%20%E8%AF%AD%E8%A8%80%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>虽然 Android 已经内置了 <code>string.xml</code> 来进行本地化和国际化的功能；</p><p>但是，由于在 7.0 以前，<code>string.xml</code> 的 fallback 存在较大问题；</p><p>所以，即使拥有了一个 i18n 的机制，也还是需要谨慎规划 Locale 的 fallback 问题。</p><p>本文就来提出一些最佳实践。</p><a id="more"></a><h2 id="2-默认-stringxml-设置为英语"><a class="markdownIt-Anchor" href="#2-默认-stringxml-设置为英语"></a> 2. 默认 <code>string.xml</code> 设置为英语</h2><p>英语作为世界使用范围最广的语言，是名副其实的通用语。</p><p>当应用没有为地区提供本地化内容时，系统就会自动 fallback 到默认的 <code>string.xml</code>；</p><p>只要有些文化的人就能看懂大部分的英语；</p><p>所以，<code>string.xml</code> 设置为英语是最为妥当的。</p><h2 id="3-地区语言-默认覆盖范围最广的语种"><a class="markdownIt-Anchor" href="#3-地区语言-默认覆盖范围最广的语种"></a> 3. 地区语言-默认覆盖范围最广的语种</h2><p>对于地区语言，则应该使用覆盖范围最广的语种作为此 Language 的默认本地化内容。</p><p>例如，对于中文地区(zh)，香港、澳门、台湾采用繁体中文，中国和新加坡采用简体中文；</p><p>那么，就应该采用覆盖范围最广的 <strong>繁体中文</strong> 作为地区默认语言；</p><p>而 <strong>单独</strong> 给 中国和新加坡 设置简体中文内容。</p><p>整体设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res/value-zh: 繁体中文</span><br><span class="line">res/value-zh-rCN: 简体中文</span><br><span class="line">res/value-zh-rSG: 简体中文</span><br></pre></td></tr></table></figure><p>原因自然是 Android 的 Buggy 语言 fallback 机制；</p><p>在 7.0 以前，如果用户语言区域和内置的本地化内容匹配失败；</p><p>那么就会直接 fallback 到 <strong>默认配置</strong>(<code>/res/value/string.xml</code>)；</p><p>如果我们上面只提供 <code>zh-rCN</code> 的话，那么港澳台地区的同胞就只能看英语界面了。</p><blockquote><p>7.0 以后，Android 修复了这一问题；<br>API 24 之后可以匹配到和语言最为接近的本地化内容；<br>例如上面的例子，在没有繁体的应用，在 7.0 上，港澳台地区就可以看到简体中文。</p><p>但是由于 7.0 目前使用人数过于低下，还是得进行上面所讲的 workaround</p></blockquote><h2 id="4-android-studio-设置语言地区"><a class="markdownIt-Anchor" href="#4-android-studio-设置语言地区"></a> 4. Android Studio 设置语言地区</h2><p>虽然目前 Android Studio 中内置了 Translation Editor；</p><p>但是，目前这个好用的工具还不能实现对语言地区(region) 的设定。</p><p>例如，对于中文，有简体中文(zh-CN) 和 繁体中文(zh-{HK, TW})；</p><p>但是， Translation Editor 目前并不能指定语言的 Region；</p><p>只能选择默认的 <code>value-zh</code>。</p><p>对于这种情况，我们不得不暂时抛弃这个好用的工具；</p><p>自行在 Project Window (就是最左边的窗口):</p><p>New -&gt; Value Resource -&gt; Choose Locale -&gt; Select Region；</p><p>例如选择 <code>zh</code>，然后地区选择 <code>CN</code>，创建 <code>strings.xml</code>；</p><p>此时，Android Studio 就创建了 <code>value-zh-rCN/strings.xml</code>；</p><p>然后，我们把默认的 <code>string.xml</code> 复制到 <code>string.xml(zh-rCN)</code> 中；</p><p>这样，我们就能够在 Translation Editor 中编辑简体中文了。</p><h2 id="5-获取当前使用的语言"><a class="markdownIt-Anchor" href="#5-获取当前使用的语言"></a> 5. 获取当前使用的语言</h2><p>一般来说，这个需求可以通过直接取 <code>Preference</code> 的值来实现；</p><p>但是，对于应用第一次安装时，则不能通过直接取 <code>Preference</code>；</p><p>因为应用可能会在多个国家和地区使用，在提供了本地化资源的情况下，Android 会自动匹配到这些本地化资源；</p><p>那么，我们如何能确保设置里面的语言和应用第一次启动时默认显示的语言是一致的呢？</p><p>首先，不能通过 <code>Configuration</code> 取到的 <code>Locale</code> 来实现；</p><blockquote><p>应用可以通过 <code>Resource.getConfiguration()</code> 来获取到 <code>Configuration</code>；<br>在这里就可以查看和修改应用的各项设置，包括 <code>Locale</code></p></blockquote><p>原因有两个：</p><ol><li><p>不适用于多地区，少语言的情况</p><blockquote><p>例如大陆和新加坡使用简体中文，港澳台使用繁体中文；<br>使用 <code>getDisplayLanguageTag()</code> 则会得到 『中文（香港）』、『中文（台湾）』之类的内容；<br>但是，我们只需要提供 <strong>两门语言选项</strong> 就足够了</p></blockquote></li><li><p><code>getDisplayLanguageTag()</code> 在 API 24 (6.0) 以上才被引入，不能兼容老版本</p></li></ol><p>真正的做法，是在每个本地化资源 <code>strings.xml</code> 里面，写上该资源的 <code>locale_code</code>，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- filename: value-zh-rCN/strings.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"locale_code"</span>&gt;</span>zh-CN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 剩下的资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过利用 Android 自身的适配机制，获取到 <strong>真正显示的</strong> 语言类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String localeCode = getString(R.string.locale_code);</span><br></pre></td></tr></table></figure><p>也就是说，<code>locale_code</code> 实际上就 <strong>对应了</strong> 语言类型；</p><p>这样，我们只要在 <code>zh-HK</code> 和 <code>zh-TW</code> 都写入同一个 <code>locale-code</code>；</p><p>然后通过 <code>locale-code</code> 来进行设置页面的语言类型显示；</p><p>这样就实现了显示语言和设置中的语言的同步。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础</title>
      <link href="//Java/Java%20%E5%9F%BA%E7%A1%80/"/>
      <url>//Java/Java%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-变量和数据类型"><a class="markdownIt-Anchor" href="#1-变量和数据类型"></a> 1. 变量和数据类型</h2><ol><li><p>boolean【Java】 = bool【C ++】</p></li><li><p>所有的变量都要被初始化，最好在声明的时候就对其赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> n = <span class="number">0.0</span>;<span class="comment">//Recommended</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>final</code> 关键字指定常量</p></li><li><p>Java 有 <strong>原始类型</strong> 和 <strong>引用类型</strong></p><ul><li>原始类型保存的是值，而引用类型实际上是指向内存块的指针</li><li>数组和对象名都是对于真正的数组或者对象的引用，而不是其自身</li><li>【这里的“引用”类似于指针，而不是对象的别名】</li></ul></li><li><p><strong>数组和对象都要使用new来声明构建，Java会自动进行垃圾处理，因而不需要显式delete</strong></p><blockquote><p>数组的声明：<code>int[] a = new int[100];</code><br>类的构建：<code>Class a = new Class(...);</code></p></blockquote><blockquote><p>注意只有使用了 <code>new</code> 才会分配空间和构建对象，单纯的声明 <code>int[] a</code>类似于声明一个指向数组的指针</p><p>Java对于大型数据类型只有通过 <code>new</code> 来构建，<code>int a [100]</code> 这种语法将不被接受，对于数组还可以使用列表初始化的语法<br><code>int[] a = {1,2,3,4,6};</code></p></blockquote></li><li><p>Java允许数组长度为0 <strong>（注意这里和null并不同）</strong></p></li></ol><a id="more"></a><h2 id="2-作用域"><a class="markdownIt-Anchor" href="#2-作用域"></a> 2. 作用域</h2><ol><li><p>Java不允许在嵌套的代码块内声明同名变量</p><blockquote><p>所以尽量保证变量的名称不重复【在同一个包(package)内】</p></blockquote></li></ol><h2 id="3-控制流程"><a class="markdownIt-Anchor" href="#3-控制流程"></a> 3. 控制流程</h2><ol><li><p>for循环中，Java要求在三个部分对同一计数器变量进行初始化，检测和更新</p></li><li><p>可以使用break label的形式来跳出多重嵌套循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">label:</span><br><span class="line"><span class="keyword">for</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">for</span>()</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">for</span>()</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">break</span> label;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//break语句使得程序跳转到带标签的语句块末尾</span></span><br><span class="line"><span class="comment">//即最外层的for循环的末尾</span></span><br></pre></td></tr></table></figure></li><li><p><strong>for each循环，可以依此处理数组（或其他形式的集合）的每个元素，而不需要在意下标值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//语法</span></span><br><span class="line">   <span class="keyword">for</span>(variable : colletion)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">//statement</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//依次打印数组内字符</span></span><br><span class="line">   a[]  = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">100</span>];</span><br><span class="line">   ....</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> element : a)</span><br><span class="line">   &#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程同步</title>
      <link href="//Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>//Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>由于每句代码只能在一个线程中执行，当多个线程试图访问同一个对象域时，就会出现<strong>竞争</strong>，导致对象的数据最终出现错误。<br>特别是当线程中的操作<strong>不是原子操作</strong>的时候，当线程切换的时候。</p><p>为了消除竞争的危害，对于多个线程<strong>有可能</strong>同时操作同一个对象的情况，我们就要实现<strong>线程同步</strong></p><a id="more"></a><p>实现线程同步的方法主要有三种：</p><ol><li>使用 <code>Lock/Condition</code> 即显式的锁</li><li>使用 <code>synchronized</code> 关键字</li><li>使用并发库和阻塞类来实现线程管理</li></ol><blockquote><p><strong>Executor 和 Task 优先于线程</strong><br><strong>并发工具优先于 <code>wait()</code> 和 <code>notify()</code></strong><br>—— <em>Effective Java Second Edition</em></p></blockquote><p>注意，线程同步不仅要求<strong>互斥性</strong>，也要求<strong>可见性</strong>，即只有一个线程能对同步代码块进行操作，同时，<strong>该代码块对所有线程应是可见的</strong></p><h2 id="2-使用-reentrantlock-实现同步"><a class="markdownIt-Anchor" href="#2-使用-reentrantlock-实现同步"></a> 2. 使用 ReentrantLock 实现同步</h2><h3 id="21-锁的初级使用"><a class="markdownIt-Anchor" href="#21-锁的初级使用"></a> 2.1 锁的初级使用</h3><p><code>ReentrantLock</code> 是一个锁对象，在有可能出现竞争的方法中使用锁，就可以<strong>保护</strong>一段代码块<strong>同一时间只能由一个线程进行读写操作</strong></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock myLock;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        myLock.lock();</span><br><span class="line">        <span class="comment">// ----------- 临界区</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// some works</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            myLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ---------- 临界区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在临界区之间的代码是受锁对象保护的，当其他线程试图执行临界区代码（试图获取锁）时，就会导致线程阻塞，直到当前执行的线程解开锁为止。</p><p>注意要将解锁代码放置在 <code>finally</code> 中，否则可能会由于异常的抛出而无法解锁。<br>此时，不能使用<strong>带资源的try块</strong>。<br>因为要在 <code>finally</code> 中释放锁，而释放锁的方法不是 <code>close()</code></p><p>锁是<strong>可重入</strong>的，锁对象自身维护一个<strong>持有计数</strong>，如果在临界区中调用了另一个被锁保护的方法，那么，计数器增加，解锁后，计数器减少，直到持有计数为 0 时，线程才会释放锁。</p><p>当由于<strong>异常而跳出临界区</strong>时，应进行相应的清理操作，保证对象的完整性。<br>因为在 <code>finally</code> 中，锁会被释放。</p><h3 id="22-公平锁"><a class="markdownIt-Anchor" href="#22-公平锁"></a> 2.2 公平锁</h3><p>使用 <code>ReentrantLock(boolean fair)</code> 可以指定构造一个<strong>公平锁</strong>。<br>它倾向于让阻塞队列中等待时间最长的线程获取到锁，但是额外的检测成本可能会造成性能损失。</p><h3 id="23-条件对象"><a class="markdownIt-Anchor" href="#23-条件对象"></a> 2.3 条件对象</h3><p>条件对象 <code>Condition</code> 用于确保临界区中的代码符合执行条件。</p><h4 id="231-使用条件对象的原因"><a class="markdownIt-Anchor" href="#231-使用条件对象的原因"></a> 2.3.1 使用条件对象的原因</h4><ol><li><p>不能使用一般的 <code>if</code> 语句进行检查</p><blockquote><p>因为 <code>if</code> 是非原子性的，线程可能在通过检查之后被剥夺，再次进入时却又不满足执行条件。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DON'T DO THAT!!</span></span><br><span class="line"><span class="keyword">if</span> (bank.getBalance(form) &gt;= amount) &#123;</span><br><span class="line">    <span class="comment">// transfer() was protected by Lock object.</span></span><br><span class="line">    bank.transfer(from, to, amount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能在临界区内检查条件</p><blockquote><p>有可能在条件不满足的情况下，需要其他线程的协助才能满足条件。<br>例如，当前线程操作的账户对象不满足转出余额，那么就需要<strong>等待另一线程向当前账户注资</strong>。<br>此时，由于当前线程<strong>占有锁</strong>，其他线程无法操作这一账户。</p></blockquote></li></ol><h4 id="232-使用条件对象"><a class="markdownIt-Anchor" href="#232-使用条件对象"></a> 2.3.2 使用条件对象</h4><ol><li><p>通过锁对象的 <code>newCondition()</code> 来获得一个条件对象。</p></li><li><p>当条件不满足时， 调用<strong>条件对象的</strong> <code>await()</code> 方法</p><blockquote><p>该方法会使当前线程阻塞，加入条件对象等待队列，并<strong>放弃锁</strong></p></blockquote></li><li><p>当<strong>条件有可能满足时</strong>，调用<strong>条件对象的</strong> <code>singalAll()</code> 方法</p><blockquote><p>这一方法会激活<strong>所有的</strong>等待该条件对象的线程，并尝试重新获取锁，从被阻塞的地方<strong>继续执行</strong><br>此时，线程应<strong>再次测试条件</strong>，因为此时无法确保条件是否被满足。</p></blockquote><blockquote><p>之所以不能确保，是因为线程在 <code>await()</code> 之后，<strong>不具备将自己唤醒的能力</strong>，必须由另一线程执行 <code>singalAll()</code> 方法。<br>如果没有一个线程能够调用 <code>singnal</code>，那么此时系统就<strong>死锁</strong>了。<br>所以就应在<strong>对象的状态有利于等待线程的改变时</strong>调用 <code>singalAll()</code> 方法。</p></blockquote><blockquote><p>另外，也有一个 <code>singal()</code> 方法，这个方法会随机选择一个等待线程进行唤醒。</p></blockquote></li></ol><p>综上，以下是使用条件对象的基本框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Condition sufficientFunds;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock bankLock;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Using the Lock object to</span></span><br><span class="line">        <span class="comment">// get the condition object reference</span></span><br><span class="line">        sufficientFunds = bankLock.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Lock the code</span></span><br><span class="line">        bankLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(accounts[from] &lt; amount) &#123;</span><br><span class="line">                <span class="comment">// Don't have sufficient funds, await</span></span><br><span class="line">                sufficientFunds.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Have sufficient funds</span></span><br><span class="line">            <span class="comment">// Transfer funds..</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// Transfer complete, singnal all</span></span><br><span class="line">            sufficientFund.singnalAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Unlock the code</span></span><br><span class="line">            bankLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-synchronized-关键字"><a class="markdownIt-Anchor" href="#3-synchronized-关键字"></a> 3. <code>synchronized</code> 关键字</h2><h3 id="31-内部锁"><a class="markdownIt-Anchor" href="#31-内部锁"></a> 3.1 内部锁</h3><p>这里比 8.5.1 更 “高级” 和傻瓜性了；<br>其实从 jdk 1.0 开始，任何 Java 对象都拥有一个<strong>内部锁</strong>；<br>我们不需要再显式实现一个锁和条件对象的架构了。</p><p>如果一个方法用 <code>synchronized</code> 声明，那么对象的锁将保护整个方法;</p><p>也就是说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Both of these method is equivalent</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// method body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.intrinsicLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.intrinsicLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-唯一的条件对象"><a class="markdownIt-Anchor" href="#32-唯一的条件对象"></a> 3.2 唯一的条件对象</h3><p>对象的内部锁拥有唯一一个条件对象；<br>通过 <code>wait()</code> 方法将线程添加到条件的等待队列；<br>通过 <code>notifyAll()</code> <code>notify()</code> 方法解除等待线程的阻塞</p><p>也就是说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wait(); == intrinsicCondition.await();</span><br><span class="line">notify()All == intrinsicCondition.singnalAll();</span><br></pre></td></tr></table></figure><h3 id="33-例子"><a class="markdownIt-Anchor" href="#33-例子"></a> 3.3 例子</h3><p>使用 <code>synchronized</code> 重写的 <code>Bank</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> form, <span class="keyword">int</span> to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (accounts[from] &lt; amount) &#123;</span><br><span class="line">            <span class="comment">// Do not have suffient funds</span></span><br><span class="line">            <span class="comment">// Using wait() method instead of await()</span></span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Do have suffient funds</span></span><br><span class="line">        <span class="comment">// Transfering..</span></span><br><span class="line">        accounts[from] -= amount;</span><br><span class="line">        accounts[to] += amount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Transfer done</span></span><br><span class="line">        <span class="comment">// Using notifyAll() method instead of singnalAll()</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-局限性"><a class="markdownIt-Anchor" href="#34-局限性"></a> 3.4 局限性</h3><p>可以看到，使用 <code>synchronized</code> 关键字大大减少了代码量，使代码更为整洁；<br>但是对应的，也存在一些缺点：</p><ol><li><p>不能中断一个正在试图获得锁的进程</p><blockquote><p>因为锁在对象内部，开发者无法操作，2 同</p></blockquote></li><li><p>试图获得锁时，不能设定超时</p></li><li><p>每个锁仅有单一的条件，可能是不够的</p></li></ol><h3 id="35-总结"><a class="markdownIt-Anchor" href="#35-总结"></a> 3.5 总结</h3><p>那么，究竟是使用 <code>synchronized</code> 关键字还是 <code>Lock/Condition</code> 机制呢？</p><ol><li><p><strong>最好两者都不使用</strong>，使用 Java 自带或一些第三方的并发工具来处理同步问题。</p><blockquote><p><em>Effective Java</em> 中提到 “并发工具优先” 的概念，即，成套的并发库和并发工具，要优先于使用 <code>wait()</code>, <code>notify()</code> 方法</p></blockquote></li><li><p>如果不想采用并发库，并且 <code>synchronized</code> 的缺点并没有对程序造成影响，那么<strong>尽量使用它</strong></p><blockquote><p>这样可以减少编写的代码，减少出错的几率</p></blockquote></li><li><p>如果特别需要 <code>Lock/Condition</code> 的独有特性时，那么才使用 <code>Lock/Condition</code></p><blockquote><p>比如说即时中断，特定的等待超时等。</p></blockquote></li></ol><h2 id="4-同步阻塞"><a class="markdownIt-Anchor" href="#4-同步阻塞"></a> 4. 同步阻塞</h2><p>同步阻塞允许客户使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    <span class="comment">// method body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到内部的锁</p><p>这也叫做<strong>客户端锁定</strong>，这个方法是很脆弱的，通常不推荐使用</p><h2 id="5-监视器"><a class="markdownIt-Anchor" href="#5-监视器"></a> 5. 监视器</h2><p>监视器是 <em>Per Brinch Hansen</em> 提出的面向对象的线程安全实现方式。</p><p>使用 Java 语言来表述就是：</p><ol><li>监视器是只包含<strong>私有域</strong>的类</li><li>每个监视器类的对象有一个相关的锁</li><li>使用该锁对所有的方法进行加锁</li><li>该锁可以有任意多个相关条件</li></ol><p><strong>Java 的 <code>synchronized</code> 关键字使用一种不严谨的方法实现了监视器</strong></p><blockquote><p>但是这也导致了 <em>Per Brinch Hansen</em> 本人的批评</p></blockquote><h2 id="6-volatile-域"><a class="markdownIt-Anchor" href="#6-volatile-域"></a> 6. Volatile 域</h2><p><code>volatile</code> 可以被看做是一种 <strong>程度较轻的 <code>synchronized</code></strong>;<br>它只具有 <code>synchronized</code> 提供的<strong>可见性</strong>，而不具备<strong>原子性</strong><br>同时， <code>volatile</code> 变量<strong>不会造成阻塞</strong></p><p>这说明了，当我们需要同步的写入操作时，<code>volatile</code> 就不适用了；<br>但是如果该变量仅用于读取，那么 <code>volatile</code> 能提供优于 <code>synchronized</code> 的性能。</p><h3 id="61-正确使用-volatile-变量的条件"><a class="markdownIt-Anchor" href="#61-正确使用-volatile-变量的条件"></a> 6.1 正确使用 <code>volatile</code> 变量的条件</h3><ol><li><p>对该变量的写操作<strong>不依赖于</strong>当前值</p><blockquote><p>比如说，用 <code>volatile</code> 变量做计数器是不行的，因为计数器的增加要先读取当前值</p></blockquote></li><li><p>该变量没有包含在具有其他变量的不变式中</p></li></ol><p>大多数的编程情形都会和这两个条件的其中之一冲突，使得 <code>volatile</code> 不能如 <code>synchronized</code> 一样普遍实现线程安全</p><h3 id="62-性能考虑"><a class="markdownIt-Anchor" href="#62-性能考虑"></a> 6.2 性能考虑</h3><p>一般情况下， <code>volatile</code> 的性能要比使用 <code>synchronized</code> 要高；<br>所以在符合使用 <code>volatile</code> 的情形下应该尽量使用。</p><h3 id="63-正确使用的情形"><a class="markdownIt-Anchor" href="#63-正确使用的情形"></a> 6.3 正确使用的情形</h3><ol><li><p>状态标志</p><blockquote><p>这是 <code>volatile</code> 的最常使用情形，作为一个布尔状态标志，用于指示发生了一个重要的一次性事件，或监视线程状态（是否被终止）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> shutdownRequested;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123; shutdownRequested = <span class="keyword">true</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!shutdownRequested) &#123;</span><br><span class="line">        <span class="comment">// do stuff</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时，很可能需要从外部（另一线程）调用 <code>shutdown()</code> 方法，那么就需要保证 <code>shutdownRequested</code> 的可见性。<br>此时，显然使用 <code>volatile</code> 关键字会更好</p></blockquote></li><li><p>一次性安全发布</p><blockquote><p>当缺乏同步可见性时，可能会出现一个线程获取到了一个<strong>不完全构建的对象</strong>，从而出现<strong>更新值</strong>和<strong>旧值</strong>同时存在。<br>此时，可以将该对象的引用定义为 <code>volatile</code> 类型，然后在使用前通过检查该引用就可以知道对象是否安全发布了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundFloobleLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> Flooble theFlooble;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initInBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do lots of stuff</span></span><br><span class="line">        theFlooble = <span class="keyword">new</span> Flooble();  <span class="comment">// this is the only write to theFlooble</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeOtherClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// do some stuff...</span></span><br><span class="line">            <span class="comment">// use the Flooble, but only if it is ready</span></span><br><span class="line">            <span class="keyword">if</span> (floobleLoader.theFlooble != <span class="keyword">null</span>)</span><br><span class="line">                doSomething(floobleLoader.theFlooble);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意使用的条件在于，<strong>该对象一经发布就不可修改，或者是线程安全对象</strong><br>如果需要对该对象进行异步更改，那么就需要 <code>synchronized</code> 等进行额外的同步操作。</p></blockquote></li><li><p>独立观察</p><blockquote><p><code>volatile</code> 变量可以定期的发布一些观察结果供程序内部使用，或者收集必要的统计信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Record the last login user's account</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> String lastUser;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">authenticate</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> valid = passwordIsValid(user, password);</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            User u = <span class="keyword">new</span> User();</span><br><span class="line">            activeUsers.add(u);</span><br><span class="line">            lastUser = user;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个模式和上述的模式稍有不同，使用该值的代码需要清除该值可能会随时变化。</p></blockquote></li><li><p>volatile bean 模式</p><blockquote><p>这是 Java Bean 模式的一种。<br>它要求，所有的数据成员都是 <code>volatile</code> 的，同时， getter &amp; setter 必须非常简单，不包含其他复杂代码<br>该模式为一些易变数据提供了容器，但是要求<strong>放入这些容器的对象必须是线程安全的</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ThreadSafe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> String firstName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> String lastName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> firstName; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> lastName; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>高级应用——开销较低的读——写锁策略</p><blockquote><p>当对于一个变量的读操作远远超过写操作时，我们就可以使用 <code>volatile</code> 关键字修饰该变量，用于保证可见性，同时对 setter 方法采取 <code>synchronized</code> 修饰保证同步性，实现较低开销的读和写锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesyCounter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Employs the cheap read-write lock trick</span></span><br><span class="line">    <span class="comment">// All mutative operations MUST be done with the 'this' lock held</span></span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"this"</span>) <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-final-变量"><a class="markdownIt-Anchor" href="#7-final-变量"></a> 7. <code>final</code> 变量</h2><p>如果一个域被声明为 <code>final</code>，那么对于该<strong>变量</strong>将不会出现线程安全问题。<br>其他线程将在 <code>final</code> 变量被赋值成功后才能见到此变量。</p><p>注意，只有<strong>变量</strong>是线程安全的，其指向的数组、对象等仍然需要同步操作。</p><h2 id="8-死锁"><a class="markdownIt-Anchor" href="#8-死锁"></a> 8. 死锁</h2><p>Java 并不能在语言层次上避免或打破死锁的发生，这是程序设计的工作。</p><h2 id="9-线程局部变量"><a class="markdownIt-Anchor" href="#9-线程局部变量"></a> 9. 线程局部变量</h2><p>如果要避免线程间共享变量，那么可以使用 ThreadLocal 辅助类为各个线程提供各自的实例。</p><p>例如，如果要让每个线程都拥有自己的 <code>SimpleDateFormat</code> 变量，那么只需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormat =</span><br><span class="line">    <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> SimpleDateFormat <span class="title">initalValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>如果要访问具体线程的格式化方法，可以调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String dateStamp = dateFormat.get().format(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><p>在一个<strong>给定线程</strong>中<strong>首次调用</strong> <code>get()</code> 方法时，会调用 <code>initialValue()</code> 方法。<br>在此之后， <code>get()</code> 会返回属于当前线程的那个实例</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Δ</span></span></span></span> 对于随机数生成器，如果需要线程独享的随机数生成器，那么可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> random = ThreadLocalRandom.current().nextInt(upperBound);</span><br></pre></td></tr></table></figure><p><code>current()</code> 会返回特定于当前线程的 <code>Random</code> 类实例。</p><p>另外还有个 <code>set()</code> 和 <code>remove()</code> 方法，分别用于为当前线程设置新值和删除当前线程的值。</p><h2 id="10-锁测试与超时"><a class="markdownIt-Anchor" href="#10-锁测试与超时"></a> 10. 锁测试与超时</h2><p>如果要使用这一特性，就要使用 <code>Lock/Condition</code> 架构。</p><p>由于尝试获取锁会导致阻塞，使用 <code>tryLock</code> 可以试图申请一个锁，成功则返回 <code>true</code>, 失败返回 <code>false</code>，同时，线程可以<strong>立即离开</strong>做其他事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (myLock.tryLock()) &#123;</span><br><span class="line">    <span class="comment">// now the thread owns the lock</span></span><br><span class="line">    <span class="keyword">try</span> &#123;...&#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        myLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，还可以设置<strong>超时参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (myLock.tryLock(<span class="number">100</span>, TimeUnit.MILLSECONDS));</span><br></pre></td></tr></table></figure><p>注意， <code>tryLock()</code> 会<strong>忽略</strong>锁的公平性</p><p><code>lock()</code> 方法不能被中断，如果一个线程在等待获取锁时被中断，<strong>那么就有可能会造成死锁</strong></p><p>但是，如果采用 <code>tryLock()</code>，如果线程在等待期间被中断，将抛出 <code>InterruptedException</code> ，此时就可以用这个特性来跳出死锁问题。</p><p>同时，<code>await()</code> 方法也可以设定超时。</p><h2 id="11-读写锁"><a class="markdownIt-Anchor" href="#11-读写锁"></a> 11. 读/写锁</h2><p>如果很多线程从一个数据结构读取数据而很少修改其中数据的话，那么我们使用另一种锁 <code>ReentrantReadWriteLock</code> 来提高性能</p><p>此时，允许读线程<strong>共享访问</strong>，写线程为<strong>互斥访问</strong></p><blockquote><p>这里有点像 <code>volatile</code> 的高级应用；<br>不同的点在于，<code>volatile</code> 用于一个变量，而 <code>ReentrantReadWriteLock</code> 用于一个<strong>数据结构</strong></p></blockquote><h3 id="111-使用步骤"><a class="markdownIt-Anchor" href="#111-使用步骤"></a> 11.1 使用步骤</h3><ol><li><p>构建 <code>ReentrantReadWriteLock</code> 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br></pre></td></tr></table></figure></li><li><p>抽取读锁和写锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Lock readLock = rwl.readLock();</span><br><span class="line"><span class="keyword">private</span> Lock writeLock = rwl.writeLock();<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>对所有的 getter 加读锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    readLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;...&#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        readLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对所有 setter 加写锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    writeLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;...&#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程基础</title>
      <link href="//Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>//Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建线程"><a class="markdownIt-Anchor" href="#1-创建线程"></a> 1. 创建线程</h2><h3 id="11-通过-runnable-接口创建"><a class="markdownIt-Anchor" href="#11-通过-runnable-接口创建"></a> 1.1 通过 <code>Runnable</code> 接口创建</h3><ol><li><p>实现 <code>Runnable</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myrunnable</span> <span class="title">implement</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>创建 <code>Runnable</code> 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = <span class="keyword">new</span> Myrunnable();</span><br></pre></td></tr></table></figure></li><li><p>由 Runnable 对象创建 Thread 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(r);</span><br></pre></td></tr></table></figure></li><li><p>启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.start();</span><br></pre></td></tr></table></figure><blockquote><p>不能直接调用 <code>run()</code> 方法，应调用 <code>Thread.start()</code> 方法来间接调用 run 方法</p></blockquote></li></ol><h3 id="12-通过继承-thread-类实现"><a class="markdownIt-Anchor" href="#12-通过继承-thread-类实现"></a> 1.2 通过继承 <code>Thread</code> 类实现</h3><ol><li><p>实现继承类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do works</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造类实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(Sting [] args)</span> </span>&#123;</span><br><span class="line">    MyThread my = <span class="keyword">new</span> MyThread();</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(my);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>start()</code> 方法开启线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.start();</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-中断线程"><a class="markdownIt-Anchor" href="#2-中断线程"></a> 2. 中断线程</h2><p>Java 使用<strong>中断</strong>来执行<strong>终止线程</strong>的作用；<br>但是，当一个线程接收到终止信号时，它可以选择对于中断信号的响应方式，这就带来了很好的扩展性。<br>但同时也带来了一些疑惑的地方。</p><h3 id="21-中断置位和检测"><a class="markdownIt-Anchor" href="#21-中断置位和检测"></a> 2.1 中断置位和检测</h3><ol><li><p>使用 <code>Thread.currentThread()</code> 方法获取到当前运行的线程</p><blockquote><p>关于 <code>Thread.currentThread()</code> 方法：<br>此方法的官方解释是：Return the current executing Thread reference.<br>所谓的<strong>当前线程</strong>指的是：<strong>运行当前代码段的线程</strong>，由于<strong>一段代码只能在一个线程中运行</strong>，如果使用多个线程同时执行同一段代码时，那么这个方法获取到的就是<strong>执行当前代码段的线程</strong>，叫做当前线程。<br>注意，这个方法如果<strong>不在子线程中</strong>（即 <code>run()</code> 方法中），那么获取到的<strong>就一直是主线程（main）</strong><br>需要特别注意的是，不同线程不允许访问同一个变量，否则会引起<strong>竞争冒险</strong></p></blockquote></li><li><p>使用 <code>interrupt()</code> 将中断布尔值置为 <code>true</code></p><blockquote><p>Java 的中断线程实际上是将线程内置的一个 <code>boolean</code> 值置为 <code>true</code>，以此来表示该线程已被中断。<br>当我们需要中断一个线程时，就调用该方法将线程内部的中断布尔值置为 <code>true</code>。<br>线程会在适当时候轮询这个布尔值，同时响应中断操作。注意这个动作是 <code>Thread</code> 官方类库中自带的。</p></blockquote></li><li><p>使用 <code>isInterrupted()</code> 来查询当前线程的中断布尔值</p><blockquote><p>一个好的 <code>run()</code> 方法应该包含对中断的检测，如果检测到中断，那么就应该进行响应。<br>一般来说，应该放弃当前正在进行的工作，进行清理后将线程终止。</p></blockquote><blockquote><p>但是如果需要在 <code>run()</code> 中执行 <code>sleep()</code> 方法，那么就没有必要检测中断状态，因为 <code>sleep()</code> 方法在被中断时，会抛出 <code>InterruptedException</code>，那么只需捕获这个异常进行处理即可。</p></blockquote></li><li><p>关于 <code>interrupted()</code> 和 <code>isInterrupted()</code></p><blockquote><p><code>isInterrupted()</code> 方法检测中断状态，但是不会影响中断状态的值。<br><code>interrupted()</code> 方法检测中断状态，同时将中断状态清除。<br>需要注意的是，<code>sleep()</code> <code>wait()</code> 方法在抛出 <code>InterruptedException</code> 之后，<strong>都会将中断状态清除</strong>。<br>对于这种状况，我们就需要对其进行一些处理。</p></blockquote></li></ol><h3 id="22-关于-interruptedexception-异常"><a class="markdownIt-Anchor" href="#22-关于-interruptedexception-异常"></a> 2.2 关于 <code>InterruptedException</code> 异常</h3><h4 id="221-抛出时机"><a class="markdownIt-Anchor" href="#221-抛出时机"></a> 2.2.1 抛出时机</h4><p>当线程同时位于<strong>阻塞</strong>和<strong>中断</strong>状态时，抛出。<br>即，当线程调用 <code>sleep()</code> <code>wait()</code> <code>join()</code> 等方法时被中断，那么抛出异常。</p><p>一般来说，如果一个方法可以抛出 <code>InterruptedException</code>，那么说明这个方法的当前线程是可以被中断（取消）的。</p><h4 id="222-interruptedexception-的处理"><a class="markdownIt-Anchor" href="#222-interruptedexception-的处理"></a> 2.2.2 <code>InterruptedException</code> 的处理</h4><ol><li><p>不捕捉该异常，改为向上层抛出。</p><blockquote><p>这在很多基础类库的方法中很常见，比如 <code>sleep()</code>.<br>通过将这个方法传送给更高级的调用者，让高层面的调用方法对其进行处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putTask</span><span class="params">(Task r)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    queue.put(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行清理后，将该异常抛出。</p><blockquote><p>这种逻辑常常在一些第三方的并发库中，为了避免由于异常导致的数据缺失，进行一些必要的清理、保存操作后，将异常传给调用者。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchPlayers</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         Player playerOne, playerTwo;</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">             playerOne = playerTwo = <span class="keyword">null</span>;</span><br><span class="line">             <span class="comment">// Wait for two players to arrive and start a new game</span></span><br><span class="line">             playerOne = players.waitForPlayer(); <span class="comment">// could throw IE</span></span><br><span class="line">             playerTwo = players.waitForPlayer(); <span class="comment">// could throw IE</span></span><br><span class="line">             startNewGame(playerOne, playerTwo);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         <span class="comment">// If we got one player and were interrupted, put that player back</span></span><br><span class="line">         <span class="keyword">if</span> (playerOne != <span class="keyword">null</span>)</span><br><span class="line">             players.addFirst(playerOne);</span><br><span class="line">         <span class="comment">// Then propagate the exception</span></span><br><span class="line">         <span class="keyword">throw</span> e;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>捕捉中断后，重新将中断置位</p><blockquote><p>当不便抛出中断时，比如通过实现 <code>Runnable</code> 接口定义的任务。<br>此时，就要<strong>重新将中断置位</strong>，以便高层代码能了解到中断的发生。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Task&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaskRunner</span><span class="params">(BlockingQueue&lt;Task&gt; queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Task task = queue.take(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">                 task.execute();</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             <span class="comment">// Restore the interrupted status</span></span><br><span class="line">             Thread.currentThread().interrupt();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当且仅当已知线程即将退出时，才能<strong>生吞</strong>线程</p><blockquote><p>这种线程首先必须是由继承 <code>Thread</code> 实现的，而不是 <code>Runnable</code> 实现的，或者其他通用代码库中的方法。<br>应在两处轮询中断状态，确保其一定会退出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeProducer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;BigInteger&gt; queue;</span><br><span class="line"></span><br><span class="line">    PrimeProducer(BlockingQueue&lt;BigInteger&gt; queue) &#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BigInteger p = BigInteger.ONE;</span><br><span class="line">            <span class="comment">// 两处轮询中断状态</span></span><br><span class="line">            <span class="keyword">while</span> (!Thread.currentThread().isInterrupted())</span><br><span class="line">                queue.put(p = p.nextProbablePrime());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException consumed) &#123;</span><br><span class="line">            <span class="comment">/* Allow thread to exit */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123; interrupt(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-线程的生命周期"><a class="markdownIt-Anchor" href="#3-线程的生命周期"></a> 3. 线程的生命周期</h2><p><img alt="Thread Life Cycle" data-src="https://ww2.sinaimg.cn/large/8c1fca6bjw1f0lm5o2cp2j20fx0csdgk.jpg"></p><ol><li><p>新建</p><blockquote><p>当线程被 <code>new</code> 的时候</p></blockquote></li><li><p>可运行</p><blockquote><p>当调用 <code>start()</code> 方法后，进入可运行状态</p></blockquote></li><li><p>运行</p><blockquote><p>当线程经调度器获得资源时，进入运行状态</p></blockquote></li><li><p>阻塞状态</p><blockquote><p>当 <code>sleep()</code> <code>wait()</code> <code>join()</code> 方法调用，和<strong>等待锁</strong>或者等待 <strong>IO 输入</strong> 时，进入阻塞状态。<br>注意，<code>join()</code> 方法会导致<strong>调用这个方法的线程</strong>阻塞，如果线程 <code>t1</code> 调用 <code>t2.join()</code>，那么 <code>t1</code> 将进入阻塞状态，直到 <code>t2</code> 执行完毕。<br>使用 <code>yeild()</code> 方法不会使线程被阻塞，它只是让当前运行的线程放弃资源，重新进入<strong>可运行</strong>状态，接受调度器的重新调度。</p></blockquote></li><li><p>终止状态</p><blockquote><p>仅有两种情况会使得线程终止。<br>一是 <code>run()</code> 方法执行完毕。<br>一是由于未捕获的异常造成的线程终止。</p></blockquote></li></ol><h3 id="31-java-如何终止一个线程"><a class="markdownIt-Anchor" href="#31-java-如何终止一个线程"></a> 3.1 Java 如何终止一个线程</h3><ol><li><p>对于会引起 <code>InterruptedException</code> 的方法</p><blockquote><p>对于这种方法，直接对 <code>InterruptedException</code> 进行捕获即可。<br>注意如果产生异常的方法在一个循环之中，那么就要 <code>break</code> 出来。<br>注意要将中断状态再次置位，否则如果在一个嵌套循环里面发生中断的话，那么将得不到正确处理。</p></blockquote></li><li><p>对于不会引起 <code>InterruptedException</code> 的方法</p><blockquote><p>对于这种方法，我们可以通过在执行真正的工作前，先轮询中断状态的布尔变量。如果中断状态已经被置位了，那么就执行退出。<br>但是这样会造成一定程度的延时性，所以最好还是通过异常进行处理。<br>例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">             <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException consumed) &#123;</span><br><span class="line">        <span class="comment">/* Allow thread to exit */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123; interrupt(); &#125;</span><br></pre></td></tr></table></figure></li><li><p>对于被 <code>IO</code> 阻塞的方法</p><blockquote><p>对于这种方法，当中断发生时，它会产生 <code>InterruptedIOException</code>。<br>通过类似捕获 <code>InterruptedException</code> 的方法来捕获 <code>InterruptedIOException</code>。<br>但是要注意，由于中断的发生，我们需要同时关闭这个线程所占有的 IO 流，此时，我们要重载 <code>interrupt()</code> 方法，使其能够关闭 IO 流，同时引起 <code>IOException</code> 的发生。<br>所以对于 <code>IOException</code>，我们就需要判断是否是由于中断引起的 <code>IOException</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.InputStream;</span><br><span class="line">    <span class="keyword">import</span> java.io.InterruptedIOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockedOnIO</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> InputStream in;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BlockedOnIO</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.in = in;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125; <span class="comment">// quietly close</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Reading from input stream"</span>);</span><br><span class="line">                in.read();</span><br><span class="line">                System.out.println(<span class="string">"Finished reading"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedIOException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                System.out.println(<span class="string">"Interrupted via InterruptedIOException"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isInterrupted()) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Interrupted"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Shutting down thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-线程属性"><a class="markdownIt-Anchor" href="#4-线程属性"></a> 4. 线程属性</h2><h3 id="41-优先级"><a class="markdownIt-Anchor" href="#41-优先级"></a> 4.1 优先级</h3><ol><li>系统会优先调用高优先级的线程</li><li>线程优先级高度依赖系统实现，由系统线程优先级映射到 Java 虚拟机上</li></ol><h3 id="42-守护线程"><a class="markdownIt-Anchor" href="#42-守护线程"></a> 4.2 守护线程</h3><ol><li>守护线程用于给其他线程提供服务，例如发送定时信号等。</li><li>守护线程由于很容易中断，<strong>不应访问固有资源</strong>（例如文件、数据库等）</li><li><code>setDaemon()</code> 方法必须在线程开始前调用</li><li>当程序中<strong>只存在守护线程时</strong>，JVM 退出，守护线程一并终止</li><li>典型应用：GC（垃圾回收），保持长连接等。</li></ol><h3 id="43-uncaughtexceptionhandler"><a class="markdownIt-Anchor" href="#43-uncaughtexceptionhandler"></a> 4.3 <code>uncaughtExceptionHandler</code></h3><ol><li><p>线程的 <code>run()</code> 方法不能抛出任何被检测的异常</p></li><li><p>未捕获的异常会被 <code>uncaughtExceptionHandler</code> 捕获</p></li><li><p>可以使用特定的方法设置处理器，如果未设置，则为<strong>空</strong></p></li><li><p>任何线程默认情况同属于一个线程组</p></li><li><p>线程组（<code>ThreadGroup</code>）默认实现了一个处理器，其对应方法按照如下逻辑进行工作</p><ol><li><p>如果有父线程组，那么就采用父线程组的处理器</p></li><li><p>否则，如果 <code>getDefaultExceptionHandler()</code> 方法部位空，那么则调用该处理器。</p></li><li><p>否则，如果线程已经死亡，则什么都不做</p></li><li><p>否则，将线程的名字和对应的栈轨迹输出到 <code>System.err</code> 上。</p><blockquote><p>这也是我们通常见到的情景。</p></blockquote></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程工具</title>
      <link href="//Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
      <url>//Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-并发工具"><a class="markdownIt-Anchor" href="#1-并发工具"></a> 1. 并发工具</h2><p>对于很多的多线程问题，我们不需要再去实现一遍底层的锁和同步机制了。<br>对于一般的应用向问题，应<strong>优先采用并发工具</strong></p><blockquote><p>Executor 和 Task 优先于线程(<code>Runnable</code>)<br>并发工具优先于 <code>wait()</code> 和 <code>notify()</code><br>—— <em>Effective Java Second Edition</em></p></blockquote><a id="more"></a><h3 id="11-阻塞队列"><a class="markdownIt-Anchor" href="#11-阻塞队列"></a> 1.1 阻塞队列</h3><p>对于许多线程问题，可以通过使用一个或者多个队列来将其形式化。可以通过 <code>Producesor</code> 将任务加入队列，然后由 <code>Comsumor</code> 来将任务取出然后进行处理的方式来实现。</p><p>Java 的阻塞队列自带了阻塞特性，<strong>不再需要显式的同步</strong></p><h4 id="111-api"><a class="markdownIt-Anchor" href="#111-api"></a> 1.1.1 API</h4><p>这里只介绍阻塞队列的阻塞方法，实际上阻塞队列也包含一些非阻塞的方法</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">正常动作</th><th style="text-align:center">特殊情况下的动作</th></tr></thead><tbody><tr><td style="text-align:center">put</td><td style="text-align:center">添加一个元素</td><td style="text-align:center">如果队列满，则阻塞</td></tr><tr><td style="text-align:center">take</td><td style="text-align:center">移出并返回头元素</td><td style="text-align:center">如果队列空，则阻塞</td></tr><tr><td style="text-align:center">offer</td><td style="text-align:center">添加一个元素，并返回 true</td><td style="text-align:center">如果队列满，则返回 false</td></tr><tr><td style="text-align:center">poll</td><td style="text-align:center">移出并返回队列的头元素</td><td style="text-align:center">如果队列空，则返回 null</td></tr><tr><td style="text-align:center">peek</td><td style="text-align:center">返回队列的头元素（<strong>不移出</strong>）</td><td style="text-align:center">如果队列空，则返回 null</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><blockquote><ol><li>offer 、peek、poll <strong>在特殊情况下并不阻塞</strong>，但是它们有对应的<strong>超时版本</strong></li></ol></blockquote><ol start="2"><li>由于 peak poll 带有 <strong>返回 <code>null</code></strong> 的属性，所以<strong>不能往这样的队列插入 <code>null</code> 值</strong></li><li>这个队列还具有 <code>add()</code> 和 <code>remove</code> 方法，但是它们在特殊情况下会<strong>抛出异常</strong>，所以在多线程程序中不要使用这样的方法。</li></ol><p>Java 准备了多种实现形式的阻塞队列，包括链表、双端链表、数组等实现，甚至包括优先队列。</p><p>同时，Java 1.7 还提供了 <code>TransferQueue</code> 接口，这个接口允许生产者线程等待，直到消费者线程准备就绪。</p><h4 id="112-例子"><a class="markdownIt-Anchor" href="#112-例子"></a> 1.1.2 例子</h4><p>下面是一个使用阻塞队列来管理多线程关系的例子：<br>即，<strong>生产者线程将元素加入到队列中，消费者线程将元素取出进行处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BlockingQueue bq = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">1000</span>);</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(bq);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(bq);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(consumer).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Producer generate the sum.</span></span><br><span class="line"><span class="comment">* And add it into the queue</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue bq = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setBlockingQueue(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The blocking queue has a internal synchronize</span></span><br><span class="line">    <span class="comment">// The delay of each end of the addition will show this</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            res = Addition(rand.nextInt(<span class="number">100</span>), rand.nextInt(<span class="number">50</span>));</span><br><span class="line">            System.out.println(<span class="string">"Produced: "</span> + res);</span><br><span class="line">            bq.put(res);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            res = Addition(rand.nextInt(<span class="number">100</span>), rand.nextInt(<span class="number">50</span>));</span><br><span class="line">            System.out.println(<span class="string">"Produced: "</span> + res);</span><br><span class="line">            bq.put(res);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            res = Addition(rand.nextInt(<span class="number">100</span>), rand.nextInt(<span class="number">50</span>));</span><br><span class="line">            System.out.println(<span class="string">"Produced: "</span> + res);</span><br><span class="line">            bq.put(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlockingQueue</span><span class="params">(BlockingQueue bq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bq = bq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Addition</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        result = x + y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Comsumer take the result from the queue.</span></span><br><span class="line"><span class="comment">* And print it out to the output</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> BlockingQueue queue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Consumed: "</span> + queue.take());</span><br><span class="line">            System.out.println(<span class="string">"Consumed: "</span> + queue.take());</span><br><span class="line">            System.out.println(<span class="string">"Consumed: "</span> + queue.take());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Produced: 93</span><br><span class="line">Consumed: 93</span><br><span class="line">Produced: 69</span><br><span class="line">Consumed: 69</span><br><span class="line">Produced: 76</span><br><span class="line">Consumed: 76</span><br></pre></td></tr></table></figure><h3 id="12-线程安全的集合"><a class="markdownIt-Anchor" href="#12-线程安全的集合"></a> 1.2 线程安全的集合</h3><p>在 <code>java.util.concurrent</code> 包提供了许多线程安全的集合。<br>主要用于<strong>多线程并发修改一个数据结构</strong>的并发问题。<br>包括 哈希表、有序集和队列等</p><p>一般来说，线程安全的集合要比一般的集合<strong>更高效</strong></p><p>在较早的 Java 版本，曾有“同步包装器”使得一般的集合类型变为同步的，但是现在已经不推荐使用了，<strong>最好使用 <code>java.util.concurrent</code> 包中的集合</strong></p><h2 id="2-callable-和-future"><a class="markdownIt-Anchor" href="#2-callable-和-future"></a> 2. <code>Callable</code> 和 <code>Future</code></h2><h3 id="21-callable"><a class="markdownIt-Anchor" href="#21-callable"></a> 2.1 <code>Callable</code></h3><p><code>Callable</code> 是一个<strong>带返回值</strong>的 <code>Runnable</code>，具有泛型特性。<br>例如 <code>Callable&lt;Integer&gt;</code> 表示一个最终返回 <code>Interger</code> 的异步计算</p><h3 id="22-future"><a class="markdownIt-Anchor" href="#22-future"></a> 2.2 <code>Future</code></h3><p><code>Future</code> 保存异步任务的结果，可以将其启动然后交给一个线程。<br>所有者在任务执行完毕后，可以通过 <code>get()</code> 方法获得结果。</p><p><code>Future</code> 具有以下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ...</span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> ...</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterrupt)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个 <code>get()</code> 调用直到计算完成前会被<strong>阻塞</strong>；<br>如果任务完成前第二个 <code>get()</code> 超时，则抛出 <code>TimeoutException</code><br>如果线程被中断，则都抛出 <code>InterruptedException</code><br>如果任务已经完成，那么 <code>get()</code> 立即返回</p><p>可以使用 <code>cancel()</code> 方法来<strong>中断</strong>任务，<br>如果任务没有开始，则它将被取消而不会再运行，<br>如果任务已经在运行，那么则由 <code>mayInterrupt</code> 参数来决定是否<strong>中断</strong>任务<br>如果任务<strong>已经被取消</strong>或者<strong>已经完成</strong>，那么返回 <code>false</code>，其他情况返回 <code>true</code></p><blockquote><p>注意，<strong>此方法一旦返回，则 <code>isDone()</code> 永远返回 <code>true</code></strong></p></blockquote><h3 id="23-futuretask"><a class="markdownIt-Anchor" href="#23-futuretask"></a> 2.3 <code>FutureTask</code></h3><p>Java 实现了 <code>FutureTask</code> 包装器，它是一个类，同时实现了 <code>Runnable</code> 和 <code>Future</code> 接口<br>它接受一个 <code>Callable</code> 接口作为构建器参数，主要用于将 <code>Callable</code> 转换为 <code>Runnalbe</code> 和 <code>Future</code></p><p>可以如下使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Callable&lt;Integer&gt; myComputation = ...;</span><br><span class="line">FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(myComputation);</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(task)     <span class="comment">// It's a Runnale</span></span><br><span class="line">t.start();</span><br><span class="line">...</span><br><span class="line">Integer result = task.get();    <span class="comment">// It's a Future</span></span><br></pre></td></tr></table></figure><h2 id="3-执行器executor"><a class="markdownIt-Anchor" href="#3-执行器executor"></a> 3. 执行器(Executor)</h2><p>如果你需要做一些重复性较高的异步任务，或者创建大量的生命期很短的线程，那么就应该用线程池来管理。<br>实际上，为了提高效率，执行任何的并发任务，都应该优先考虑 Execulator 和 Task</p><blockquote><p>Execulator 和 Task 优先于线程(Thread)<br>—— <em>Effective Java Second Edition</em></p></blockquote><p>在这里，并发的最小单位升级为 <code>Executor</code> 和 <code>Task</code>。<br>所谓的 <code>Task</code> 就是用户构建的 <code>Runnable</code> 或者 <code>Callable</code> 对象；<br>这也是为什么要优先采用 <code>Runnable</code> 的原因</p><h3 id="31-基本使用"><a class="markdownIt-Anchor" href="#31-基本使用"></a> 3.1 基本使用</h3><p>基本的使用步骤如下：</p><ol><li>使用 <code>Executors</code> 的静态方法构建线程池，或者叫 <code>ExecutorService</code></li><li>调用 <code>execute()</code> 或 <code>submit()</code> 提交 <code>Runnable</code> 或 <code>Callable</code> 对象</li><li>当不在提交任务时，调用 <code>shutdown()</code></li></ol><blockquote><p>注意，还有一个 <code>execute()</code> 方法执行 <code>submit()</code> 的效果。<br>它们的主要区别在于，<br><code>execute()</code> 会触发<strong>未捕获处理器</strong>，从而向 <code>System.err</code> 输出错误信息;<br><code>submit()</code> 会抛出 <code>ExecutionException</code>，可以使用 <code>getCause()</code> 获取出错信息</p></blockquote><blockquote><p>另外， <code>submit()</code> 返回的是 <code>Future</code> 对象，可以通过它取消特定任务。<br>由此，如果使用 <code>Callable</code> 那么使用 <code>submit()</code>；<br>如果使用 <code>Runnable</code> 那么使用 <code>execute()</code></p></blockquote><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Asynchronous task"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure><h3 id="32-scheduledexecutorservice-预定执行"><a class="markdownIt-Anchor" href="#32-scheduledexecutorservice-预定执行"></a> 3.2 <code>ScheduledExecutorService</code> 预定执行</h3><p>该类是 <code>ExecutorService</code> 的子类，用于构建<strong>预订性</strong>和<strong>重复性、周期性</strong> 的任务</p><p>可以指定任务只运行一次，也可以指定任务的运行周期</p><h3 id="33-控制任务组"><a class="markdownIt-Anchor" href="#33-控制任务组"></a> 3.3 控制任务组</h3><p>使用 <code>ExecutorService</code> 的另一个重要原因就是可以实现控制一组相关任务。<br>特别是在采用<strong>分治策略</strong>的算法中常常能用到。</p><p>例如，使用对一个大整数进行因式分解，那么我们可以将整个过程分成很多很小的过程，当小任务全部解决完毕时，整数的因式分解也就完毕了。</p><p>或者，我们可以用它来提交很多对于同一个问题的不同解决方案，如果有任何一个解决方案得出答案，那整个任务就可以停止了。</p><p>对于以上两种情况，使用 <code>ExecutorService</code> 分别有两种方法进行对应：</p><ol><li><code>invokeAll()</code>，这个方法<strong>提交所有的 <code>Callable</code> 到一个集合中</strong>，并返回一个 <code>Future</code> 对象，代表<strong>所有任务解决结果</strong></li><li><code>invokeAny()</code>，这个方法<strong>提交所有的 <code>Callable</code> 到一个集合中</strong>，并返回一个 <code>Future</code> 对象，代表<strong>某一个任务的解决结果</strong></li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// invokeAll -- Return a List of Future</span></span><br><span class="line">List&lt;Callable&lt;T&gt;&gt; task = ...;</span><br><span class="line">List&lt;Future&lt;T&gt;&gt; results = executor.invokeAll(task);</span><br><span class="line"></span><br><span class="line"><span class="comment">// invokeAny -- Return only one Future</span></span><br><span class="line">Future&lt;T&gt; resultOfInvokeAny = executor.invokeAny(task);</span><br></pre></td></tr></table></figure><p>可以使用 <code>ExecutorCompletionService</code> 来对 <code>invokeAll()</code> 得到的结果集进行排列处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// executor is a ExecutorService</span></span><br><span class="line">ExecutorCompletionService service = <span class="keyword">new</span> ExecutroCompletionService(executor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Callable&lt;T&gt; task : tasks) &#123;</span><br><span class="line">    service.submit(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tasks.size(); i++) &#123;</span><br><span class="line">    processFurther(service.take().get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-fork-join-框架"><a class="markdownIt-Anchor" href="#34-fork-join-框架"></a> 3.4 Fork-Join 框架</h3><p>对于多线程处理的<strong>分治策略</strong>的任务， Java 实现了一种 Fork-Join 框架来更好的实现这种任务流程。</p><p>分治的很常见的实现方式是<strong>递归实现</strong>，这个框架也使用了<strong>递归</strong>的思路</p><p>使用步骤：</p><ol><li>提供一个扩展了 <code>RecursiveTask&lt;T&gt;</code> 或者 <code>RecursiveAction</code> 的类</li><li>Override <code>compute()</code> 方法，在其中调用子任务并将其合并</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (to - from &lt; THRESHOLD) &#123;</span><br><span class="line">            <span class="comment">// solve problem directly</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = from + (to - from) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// Recursive solve left</span></span><br><span class="line">            Counter first = <span class="keyword">new</span> Counter(values, form, mid, filter);</span><br><span class="line">            <span class="comment">// Recursive solve right</span></span><br><span class="line">            Counter second = <span class="keyword">new</span> Counter(values, mid, to, filter);</span><br><span class="line">            invokeAll(first, second);   <span class="comment">// Add both to executor</span></span><br><span class="line">            <span class="keyword">return</span> first.join() + second.join(); <span class="comment">// bind the solution</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-同步器synchronizer"><a class="markdownIt-Anchor" href="#4-同步器synchronizer"></a> 4. 同步器(Synchronizer)</h2><p>同步器是并发工具的一种，一些使线程能够等待另一个线程的对象，允许它们协调动作。</p><table><th colspan="3" style="text-align:center">同步器</th><tr style="text-align:center"><td style="text-align:center">类</td><td style="text-align:center">作用</td><td style="text-align:center">何时使用</td></tr><tr style="text-align:center"><td style="text-align:center">CyclicBarrier (不常用)</td><td style="text-align:center">允许线程集等待直到其中预定数目的线程到达一个公共障栅(barrier)，然后可以选择执行一个处理 barrier 的动作</td><td style="text-align:center">当大量的线程需要在它们的结果可用之前完成时</td></tr><tr style="text-align:center"><td style="text-align:center">CountDownLatch (常用)</td><td style="text-align:center">允许线程集等待直到计数器为 0</td><td style="text-align:center">当线程需要等待事件发生（才允许执行时）</td></tr><tr style="text-align:center"><td style="text-align:center">Exchanger（不常用）</td><td style="text-align:center">允许两个线程在要交换的对象准备好时交换对象</td><td style="text-align:center">当两个线程工作在同一个数据结构的<b>两个实例</b>上时</td></tr><tr style="text-align:center"><td style="text-align:center">Semaphore（常用）</td><td style="text-align:center">允许线程集等待知道它被允许继续执行为止</td><td style="text-align:center">限制访问资源的线程总数</td></tr><tr style="text-align:center"><td style="text-align:center">SynchronousQueue</td><td style="text-align:center">允许一个线程将对象交给另一个线程</td><td style="text-align:center">在没有显式同步的情况下，当两个线程准备好将一个对象传递到另一个时</td></tr></table><blockquote><p>注意 <code>CountDownLatch</code>，这个类用于<strong>让某些线程等待其他线程</strong>。<br>它是唯一一个带有 <code>int</code> 构造参数的同步器，用于<strong>指定等待的并发线程的个数</strong></p></blockquote><blockquote><p>形象来说，就是一个红绿灯，直到倒计时完毕，线程才可以运行<br>下面是一个简单的多线程计时的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* A simple timing concurrent execution.</span></span><br><span class="line"><span class="comment">* The timer will not start until all the worker thread are ready.</span></span><br><span class="line"><span class="comment">* And when the last worker thread done, the timer stop</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">time</span><span class="params">(Executor executor, <span class="keyword">int</span> concurrency, <span class="keyword">final</span> Runnalbe action)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch ready = <span class="keyword">new</span> CounDownLatch(concurrency);</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch start = <span class="keyword">new</span> CounDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch done = <span class="keyword">new</span> CounDownLatch(concurrency);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; concurrency; i++) &#123;</span><br><span class="line">        executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="comment">// This is the worker thread</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ready.countDown(); <span class="comment">// Tell the timer worker is ready</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    start.await(); <span class="comment">// Worker stuck at start point</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Because of blocking,</span></span><br><span class="line">                    <span class="comment">// this statement will not run</span></span><br><span class="line">                    <span class="comment">// until the start count down reach 0</span></span><br><span class="line">                    action.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    done.countDown();   <span class="comment">// Tell the timer worker is done</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the timer thread</span></span><br><span class="line">    ready.await();  <span class="comment">// Wait for all the workers are done</span></span><br><span class="line">    <span class="keyword">long</span> startNanos = System.nanoTime();</span><br><span class="line">    start.countDown();  <span class="comment">// Let worker thread off!!</span></span><br><span class="line">    done.await();   <span class="comment">// Wait for worker done.</span></span><br><span class="line">    <span class="keyword">return</span> System.nanoTime() - startNanos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<strong>线程</strong>中调用锁存器的 <code>await()</code> 方法<strong>可以阻塞当前线程</strong><br>当锁存器的计数器为 0 时，<strong>所有的被该锁存器阻塞的线程即刻执行</strong></p></blockquote><blockquote><p>锁存器是共享的，在任何线程中都可被更改<br>一旦归 0，障碍即刻被放弃</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 异常</title>
      <link href="//Java/Java%20%E5%BC%82%E5%B8%B8/"/>
      <url>//Java/Java%20%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-异常分类"><a class="markdownIt-Anchor" href="#1-异常分类"></a> 1. 异常分类</h2><p>※具体的结构层次如图<br><img alt data-src="https://img.my.csdn.net/uploads/201310/29/1383051170_4167.jpeg"></p><a id="more"></a><ul><li><p>Throwable</p><ul><li><p>Error</p><blockquote><p>※Java运行时系统的内部错误和资源耗尽错误，应用程序不该抛出这类异常;<br>该异常出现时，只能终止程序</p></blockquote></li><li><p>Exception</p><ul><li><p>IOException 及其他</p><blockquote><p>※包含<br>试图在文件尾部后面读取数据（IO）<br>试图打开一个不存在的文件（IO）<br>试图根据给定的字符串查找Class，而这个类并不存在</p></blockquote></li><li><p>Runtime Exception</p><blockquote><p>※包含<br>错误的类型转换<br>数组访问越界<br>访问空指针</p></blockquote></li></ul></li></ul></li><li><p>注意要点</p><ul><li>如果出现 <code>RuntimeException</code>，那么就一定是你的问题，需要从程序设计方面进行改进</li><li>所有派生于 <code>Error</code> 和 <code>RuntimeException</code> 的异常称为未检查异常</li><li>注意 <code>IOException</code> 并不包含用户输入的部分，此类通过一般检查可以避免的异常不应作为异常抛出并处理，应该由流程控制语句（<code>if</code> <code>else</code> <code>while</code> <code>continue</code>）处理</li></ul></li></ul><h2 id="2-声明异常"><a class="markdownIt-Anchor" href="#2-声明异常"></a> 2. 声明异常</h2><p>类似于C++98的异常规范</p><ul><li><p>在方法的首部声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure></li><li><p><strong>声明多个时 ，使用逗号隔开</strong></p></li><li><p>必须声明所有可能抛出的已检查异常</p><blockquote><p>如果未声明，则表明方法不会抛出（已检查）异常</p></blockquote></li><li><p>不必声明未检查异常</p></li><li><p>子类方法的声明异常不能比超类方法更为通用</p><blockquote><p>即子类声明的异常层次不能高于超类方法<br>超类没有声明异常时，子类也不能声明异常</p></blockquote></li></ul><h2 id="3抛出异常"><a class="markdownIt-Anchor" href="#3抛出异常"></a> 3.抛出异常</h2><ul><li><p>使用 <code>throw</code> 关键字表明抛出异常</p><blockquote><p>注意与声明异常的关键字（<code>throws</code>）区分开<br>只能抛出 <code>Throwable</code> 子类的对象<br>而 C++ 能抛出任何类型的值</p></blockquote></li><li><p>抛出异常与捕获异常不同，如果没有异常处理器（<code>try</code> <code>catch</code>）捕获异常，则程序将会终止</p></li><li><p>自定义异常</p><ul><li>通常包含一个默认构造器和一个带有详细描述信息的构造器</li><li>必须派生于 <code>Exception</code> 及其子类</li></ul></li></ul><h2 id="4捕获异常"><a class="markdownIt-Anchor" href="#4捕获异常"></a> 4.捕获异常</h2><h3 id="41-使用trycatch语句块来捕获异常"><a class="markdownIt-Anchor" href="#41-使用trycatch语句块来捕获异常"></a> 4.1 使用try/catch语句块来捕获异常</h3><p>如果调用一个抛出已检查异常的方法，则必须对其处理（<code>try/catch</code>），或继续将其传递（<code>throws</code>）</p><p>一个catch语句里面可以捕获多个异常类型，使用 <code>|</code> 间隔开</p><p>此时，异常变量为 <code>final</code></p><p>可以在 <code>catch</code> 语句中再次抛出异常</p><p>与 C++ 不同的是，不能只写 <code>throw</code> 关键字，而需要将整个抛出异常都写上</p><h3 id="42-finally-子句"><a class="markdownIt-Anchor" href="#42-finally-子句"></a> 4.2 <code>finally</code> 子句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="421-概述"><a class="markdownIt-Anchor" href="#421-概述"></a> 4.2.1 概述</h4><ul><li><p>不管是否有异常被捕获，<code>finally</code> 子句都将被执行</p></li><li><p>抛出异常并被捕获时，先执行 <code>catch</code> 语句，后执行 <code>finally</code> 语句</p></li><li><p>抛出异常未被捕获时，先执行 <code>finally</code> 语句，后将异常返回给调用者</p><blockquote><p><code>try</code> 可以只有 <code>finally</code>，而没有<code>catch</code></p></blockquote></li><li><p><strong>当finally语句抛出异常时，会覆盖掉原有异常（此时建议使用带资源的try语句）</strong></p><ul><li><p>※如果此异常必须返回给调用者的话，则需要进行一些处理才能返回给调用者</p></li><li><p>※如果原异常具有异常处理器（被捕获）则不需要这种解决办法</p><ul><li><p>常规解决办法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = ....;</span><br><span class="line">Excepiton ex = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">catch</span>(Exception e)</span><br><span class="line"> &#123;</span><br><span class="line">  ex = e;</span><br><span class="line">  <span class="keyword">throw</span> e;<span class="comment">//这里重新抛出了e，为的就是将这个异常返回给调用者</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">  in.close();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">catch</span>(Exception e)<span class="comment">//在这里捕获（抑制）了close方法的异常，</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span>(ex == <span class="keyword">null</span>)<span class="keyword">throw</span> e;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="422-带资源的try语句"><a class="markdownIt-Anchor" href="#422-带资源的try语句"></a> 4.2.2 带资源的try语句</h4><ul><li><p><strong>只要需要关闭资源，就要尽可能使用带资源的try语句</strong></p></li><li><p><strong>资源必须属于一个实现了AutoCloseable的类，否则应使用常规方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(Resource res = ...)</span><br><span class="line">&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>资源：特指文件和输入输出流等，和<strong>申请的内存无关</strong></p><blockquote><p>当 <code>try</code> 块退出时，将会自动调用 <code>res.close()</code></p></blockquote></li><li><p>可以指定多个资源<br>当出现异常时，<code>close</code> 异常会被自动捕获（抑制），原有异常将会重新抛出<br><code>close</code> 的异常将会被增加到原有异常中，可以使用 <code>getSuppressed</code> 方法获取到被抑制的异常列表</p></li></ul><p>此 <code>try</code> 块也可以有 <code>catch</code> 和 <code>finally</code> 子句，会在关闭资源之后执行</p><h2 id="5-使用异常的技巧"><a class="markdownIt-Anchor" href="#5-使用异常的技巧"></a> 5. 使用异常的技巧</h2><h3 id="51-异常处理不能代替简单的测试"><a class="markdownIt-Anchor" href="#51-异常处理不能代替简单的测试"></a> 5.1 异常处理不能代替简单的测试</h3><ul><li>异常处理会比简单的测试花费更多的时间</li><li>应该仅在异常状况下使用异常机制</li><li><strong>资源的IO错误，设备错误，物理限制等等</strong></li><li><strong>而对于用户的输入错误，应该使用流程控制来进行处理</strong></li></ul><h3 id="52-不要过分细化异常"><a class="markdownIt-Anchor" href="#52-不要过分细化异常"></a> 5.2 不要过分细化异常</h3><p><strong>应该将整个任务包装在一个try语句内</strong></p><h3 id="53-利用异常层次结构"><a class="markdownIt-Anchor" href="#53-利用异常层次结构"></a> 5.3 利用异常层次结构</h3><p>※应该尽量的抛出更为恰当的子类，而不是仅仅抛出较为高层次的异常类对象<br>※捕获时同理</p><h3 id="54-应该关闭不重要的异常"><a class="markdownIt-Anchor" href="#54-应该关闭不重要的异常"></a> 5.4 应该关闭不重要的异常</h3><p>※在方法多重调用时使用</p><h3 id="55-早抛出晚捕获"><a class="markdownIt-Anchor" href="#55-早抛出晚捕获"></a> 5.5 早抛出，晚捕获</h3><h2 id="6-断言"><a class="markdownIt-Anchor" href="#6-断言"></a> 6. 断言</h2><p>断言就是增加一个编译检查项，如果结果与断言不符，那么就抛出异常</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 接口和内部类</title>
      <link href="//Java/Java%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>//Java/Java%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-接口"><a class="markdownIt-Anchor" href="#1-接口"></a> 1. 接口</h2><p>这是 Java 中的专有名词，指代的是 <strong>interface</strong> 关键字</p><h3 id="11-接口"><a class="markdownIt-Anchor" href="#11-接口"></a> 1.1 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>接口不是类，而是对类的一组需求描述</p></li><li><p>接口中的所有方法自动为public</p></li><li><p>实现接口</p><ul><li><p>将类声明为实现给定的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;....&#125;</span><br></pre></td></tr></table></figure></li><li><p>对接口中的所有方法进行定义</p><blockquote><p><strong>接口实现必须声明为public</strong></p></blockquote></li></ul></li><li><p>特性</p><ul><li><p>不是类，不能使用new来实例化</p></li><li><p>不能包含实例域和静态方法</p></li><li><p>可以包含常量，接口中的域被自动设为public static final</p></li><li><p>可以声明接口的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparable x;</span><br></pre></td></tr></table></figure></li><li><p>必须引用实现了接口的类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">new</span> Employee();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可以使用instanceof来检查一个对象是否实现了某个特定接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(anObject <span class="keyword">instanceof</span> Comparable)</span><br></pre></td></tr></table></figure></li><li><p>可以扩展（<strong>继承</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Powered</span> <span class="keyword">extends</span> <span class="title">Moveable</span></span></span><br></pre></td></tr></table></figure></li><li><p>每个类只能拥有一个超类，但是可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Persons</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="12-对象克隆"><a class="markdownIt-Anchor" href="#12-对象克隆"></a> 1.2 对象克隆</h3><ul><li>默认克隆（<code>Object.clone()</code>）</li><li>浅拷贝</li><li>protected方法</li><li>实现克隆<ul><li>必须实现 <code>Cloneable</code> 接口</li><li>使用 <code>public</code> 重新定义 <code>clone()</code> 方法</li><li>即使浅拷贝能满足要求，也要进行上述两条操作</li><li>需要声明 <code>CloneNotSupportedException</code> 异常</li></ul></li></ul><h2 id="2-内部类"><a class="markdownIt-Anchor" href="#2-内部类"></a> 2. 内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TalkingClock</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimePrinter</span> <span class="keyword">implements</span> <span class="title">ActionListenner</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21-概述"><a class="markdownIt-Anchor" href="#21-概述"></a> 2.1 概述</h3><ul><li>在类的内部直接定义，类似于C++的嵌套类</li><li>可以访问作用域内的数据，包括私有的</li><li>可以隐藏内部类</li><li>可以便捷实现回调</li></ul><h3 id="22-普通内部类"><a class="markdownIt-Anchor" href="#22-普通内部类"></a> 2.2 普通内部类</h3><ul><li>可以访问外围类对象数据（包括私有的）</li><li>通过 <code>OuterClass.this</code> 访问外围类</li><li>在外围类的作用域之外，使用 <code>OuterClass.InnerClass</code> 引用内部类</li></ul><h3 id="23-局部内部类"><a class="markdownIt-Anchor" href="#23-局部内部类"></a> 2.3 局部内部类</h3><ul><li><p>简称局部类，在一个方法内进行定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">TinmePrinter</span> <span class="keyword">implements</span> <span class="title">ActionListenner</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部类可以访问局部变量（必须声明为 <code>final</code>）</p></li><li><p>更新封闭作用域内的计数器时，使用 <code>final</code> 的长度为 1 的数组</p></li></ul><h3 id="24-匿名内部类"><a class="markdownIt-Anchor" href="#24-匿名内部类"></a> 2.4 匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> SuperType(cosntruction parameters)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果只创建局部类的一个对象的时候才使用</span></span><br></pre></td></tr></table></figure><ul><li>SuperType可以是类或者接口</li><li>如果用于实现接口时，不能有任何构造参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> InterfaceType()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-静态内部类"><a class="markdownIt-Anchor" href="#25-静态内部类"></a> 2.5 静态内部类</h3><ul><li>用于将一个类隐藏在另一个类之中，通常用于防止名称的冲突</li><li>只有内部类可以声明为 <code>static</code></li><li>特别的，通过静态方法构造的内部类必须声明为 <code>static</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 泛型基础</title>
      <link href="//Java/Java%20%E6%B3%9B%E5%9E%8B%E5%9F%BA%E7%A1%80/"/>
      <url>//Java/Java%20%E6%B3%9B%E5%9E%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>泛型类似于 C++ 中的模板，使得编写的代码可以被多种不同的对象所使用。</p><p>在 Java 增加泛型类之前，泛型实际上是以<strong>继承</strong>方式实现的</p><p>泛型使用类型参数来指示元素的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; files = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java SE 7 之后可以省略构造函数中的泛型类型</span></span><br><span class="line">ArrayList&lt;String&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-泛型类"><a class="markdownIt-Anchor" href="#2-泛型类"></a> 2. 泛型类</h2><ol><li><p>单个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其中 T 为类型参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个类型参数用逗号隔开</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Piar</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-泛型方法"><a class="markdownIt-Anchor" href="#3-泛型方法"></a> 3. 泛型方法</h2><p>泛型方法不仅只存在于泛型类中，也可以在非泛型类中定义泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrarAlg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这是一个泛型方法，</span></span><br><span class="line"><span class="comment">    * &lt;T&gt; 表示其为泛型方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMiddle</span><span class="params">(T... a)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用泛型方法时，通过在<strong>方法名前</strong>的尖括号中放入具体的类型来将其实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String middle = ArrayAlg.&lt;String&gt;getMiddle(<span class="string">"John"</span>, <span class="string">"Q."</span>, <span class="string">"Public"</span>);</span><br></pre></td></tr></table></figure><p>其实大多数情况下，编译器都能推断出正确的类型，所以方括号可以省略</p><h2 id="4-类型变量的限定"><a class="markdownIt-Anchor" href="#4-类型变量的限定"></a> 4. 类型变量的限定</h2><p>有时候我们需要对类型变量进行一定的约束:</p><p>比如，当我们需要对变量进行比较操作时，我们需要确保变量都实现了 <code>Comparable</code> 接口。</p><p>对于类型变量的限定有两种方式</p><ol><li><p>限定上界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comarable&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] a)</span> ...</span></span><br></pre></td></tr></table></figure><blockquote><p>这里我们限定了 T 必须是实现了 Comarable 接口的变量。<br>如果 Comarable 是一个类，那么 T 必须是它，或者它的子类</p></blockquote></li><li><p>限定下界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">super</span> Child&gt; <span class="function">T <span class="title">doSomeThings</span><span class="params">(T[] a)</span> ...</span></span><br></pre></td></tr></table></figure><blockquote><p>这里限定了 T 必须是 Child 的超类，或者它本身。</p></blockquote></li></ol><p>使用 <code>&amp;</code> 分隔限定类型，使用逗号来分隔 类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T extends Comparable &amp; Serializable</span><br></pre></td></tr></table></figure><h2 id="5泛型类的实例化"><a class="markdownIt-Anchor" href="#5泛型类的实例化"></a> 5.泛型类的实例化</h2><h3 id="51-类型擦除"><a class="markdownIt-Anchor" href="#51-类型擦除"></a> 5.1 类型擦除</h3><p>Java 中的泛型类采用 <strong>类型擦除</strong> 方式来进行实例化。</p><blockquote><p>类型擦除即为，擦除类型参数，并将其替换为限定的类型。<br>例如上面的 <code>T extends Comparable</code> 则在类中的 <code>T</code> 会被替换为 <code>Comparable</code></p><p>如果类型没有被限定，则替换为 <code>Object</code></p></blockquote><p>需要注意的是，虚拟机中没有泛型类型变量，任何的泛型类在需要实例化的时候，都会先进行<strong>类型擦除</strong>，然后替换为实例化的类型。</p><p>例如， <code>Pair&lt;T&gt;</code> 的原始类型如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object first;</span><br><span class="line">    <span class="keyword">private</span> Object second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        second = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过类型擦除的方法，Java 使得泛型类就好像一个普通的类，从而避免了 C++ 模板实例化所造成的代码膨胀。</p><h3 id="52-翻译泛型表达式"><a class="markdownIt-Anchor" href="#52-翻译泛型表达式"></a> 5.2 翻译泛型表达式</h3><p>当程序调用泛型方法时， Java 采用强制类型转换（Cast）来返回或调用正确的类型</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;Employee&gt; buddies = ...;</span><br><span class="line">Employee buddy = buddies.getFirst();</span><br></pre></td></tr></table></figure><p>此时，编译器自动插入强制类型转换使得 <code>getFirst()</code> 方法返回 <code>Employee</code> 类型</p><h3 id="53-泛型方法的实例化和桥方法"><a class="markdownIt-Anchor" href="#53-泛型方法的实例化和桥方法"></a> 5.3 泛型方法的实例化和桥方法</h3><p>泛型方法在实例化过程中也使用 <strong>类型擦除</strong><br>但是这在继承中会导致方法的冲突。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateInterval</span> <span class="keyword">extends</span> <span class="title">Pair</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(Date second)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经过类型擦除之后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateInterval</span> <span class="keyword">extends</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(Date second)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用基类指针实现多态性的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;Date&gt; pair = interval;</span><br><span class="line">pair.setSecond(aDate);</span><br></pre></td></tr></table></figure><p>此时，存在一个从 <code>Pair</code> 继承而来的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(Object second)</span></span></span><br></pre></td></tr></table></figure><p>由于<strong>形式参数的改变</strong>，使得这是一个不同的方法；<br>但是我们对 <code>pair</code> 的多态性描述显然是要调用 <code>setSecond(Date second)</code> 方法；<br>此时，编译器就会自动生成一个桥方法，用来保证多态的正确使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 桥方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(Objedt second)</span> </span>&#123;</span><br><span class="line">    setSecond((Date) second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-约束和局限性"><a class="markdownIt-Anchor" href="#6-约束和局限性"></a> 6. 约束和局限性</h2><h3 id="61-不能用基本类型实例化类型参数"><a class="markdownIt-Anchor" href="#61-不能用基本类型实例化类型参数"></a> 6.1 不能用基本类型实例化类型参数</h3><p>由于泛型使用<strong>类型擦除</strong>来实现，所有的未限定类型均会被替换成 <code>Object</code>；</p><p>而 <code>Object</code> 不能储存基本类型</p><p>此时一般使用对象包装器来实现基本类型的实例化</p><h3 id="62-运行时的类型查询只适用于原始类型"><a class="markdownIt-Anchor" href="#62-运行时的类型查询只适用于原始类型"></a> 6.2 运行时的类型查询只适用于原始类型</h3><p>由于使用了类型擦除，所有的类型查询都只对泛型类的<strong>原始类型</strong>适用，而对泛型版本不适用。</p><p><code>instanceof</code> 和 <code>getClass()</code> 返回的都是原始类型</p><h3 id="63-不能创建参数化类型的数组"><a class="markdownIt-Anchor" href="#63-不能创建参数化类型的数组"></a> 6.3 不能创建参数化类型的数组</h3><p>创建泛型类的<strong>数组</strong>是不合法的。</p><p>由于类型擦除的存在，所有的未限定泛型类都会被替换成 <code>Object</code>。</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt;[] table = <span class="keyword">new</span> Pair&lt;String&gt; [<span class="number">10</span>];   <span class="comment">// ERROR</span></span><br><span class="line"><span class="comment">// After erase</span></span><br><span class="line">Pair[] table = <span class="keyword">new</span> Pair[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>此时，如果有下面的一条语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object[] objects = table;   <span class="comment">// OK, Pair is a type of Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// But, if edit one of the elements</span></span><br><span class="line">objects[<span class="number">0</span>] = <span class="string">"Hello"</span>;   <span class="comment">// ERROR, because the objects[0] is Pair, not String</span></span><br></pre></td></tr></table></figure><p>当需要收集参数化类型对象时，使用 <code>ArrayList</code> 来代替数组实现</p><p>如果实在需要创建泛型类的数组，那么就必须使用 <strong>强制转换</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt; p = (Pair&lt;String&gt;[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="64-varargs-警告"><a class="markdownIt-Anchor" href="#64-varargs-警告"></a> 6.4 Varargs 警告</h3><p>当使用可变参数的泛型类作为形参时，由于可变类型是一个数组，此时违反了上面一条规则。</p><p>但是对于这种情况，规则有所放松，使用这个会得到一个<strong>警告</strong>，可以用 <code>@SafeVarargs</code> 注解来压制这个警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(Collection&lt;T&gt; coll, T... ts)</span></span></span><br></pre></td></tr></table></figure><h3 id="65-不能实例化类型变量"><a class="markdownIt-Anchor" href="#65-不能实例化类型变量"></a> 6.5 不能实例化类型变量</h3><p>所谓的类型变量指的是 <code>T</code></p><p>不能使用 <code>new T(...)</code> 类似这样的表达式</p><p>而是通过反射调用 <code>Class.newInstance</code> 来构造新的 <code>T</code> 对象；</p><p>不过，很遗憾的是，不能通过 <code>T.class.newInstance()</code> 来实现；</p><p>调用 <code>newInstance()</code> 的 <code>Class</code> 对象必须由 <strong>外部传入</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Pair&lt;T&gt; <span class="title">makePair</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;&gt;(clazz.newInstance(), clazz.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="66-不能构造泛型数组"><a class="markdownIt-Anchor" href="#66-不能构造泛型数组"></a> 6.6 不能构造泛型数组</h3><p>指的是不能构造 <code>T[]</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T[] array = <span class="keyword">new</span> T[<span class="number">2</span>];   <span class="comment">// ERROR!</span></span><br></pre></td></tr></table></figure><p>如果一定要使用数组，则必须进行强制转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T[] array = (T[]) <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>需要注意的是，这种数组不能作为返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] minmax(T... a) &#123;</span><br><span class="line">    Object[] mm = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (T[]) mm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用的时候，会出现 <code>ClassCastException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exception！</span></span><br><span class="line">String[] ss = minmax(<span class="string">"Tom"</span>, <span class="string">"Dick"</span>, <span class="string">"Harry"</span>);</span><br></pre></td></tr></table></figure><p>这是因为类型擦除的问题；</p><p>对于虚拟机而言，虚拟机知道每个元素的具体类型，所以做元素层次的强制转换是没有问题的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// T[] items</span></span><br><span class="line">    <span class="keyword">return</span> items[index]; <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是对于数组本身而言，由于类型擦除导致实际上的数组的 <strong>声明</strong> 是 <code>Object[]</code>，可以接受任何的类型，所以无法将其强制转换为特定类型的数组。</p><p>也就是说，对于一个 <code>String</code> 数组，可以将其转换为 <code>Object</code> 数组再转换回去；</p><p>但是由于类型擦除导致 <strong>一开始</strong> 数组的声明就是 <code>Object[]</code>；</p><p>所以无法将其转换为特定类型。</p><p>对于这种情况，就需要使用泛型的 <code>Array.newInstance()</code>；</p><p>通过 <code>Class.getComponentType()</code> 来获取到元素的真实类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] minmax(T... a) &#123;</span><br><span class="line">    T[] mm = (T[]) Array.newInstance(a.getClass().getComponentType(), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="67-泛型类静态成员类型参数无效"><a class="markdownIt-Anchor" href="#67-泛型类静态成员类型参数无效"></a> 6.7 泛型类静态成员类型参数无效</h3><p>在泛型类中，不能在静态域或者方法中引用类型变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T singleInstance; <span class="comment">// ERROR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也是因为类型擦除，<code>Singleton&lt;String&gt;</code> 会恢复为 <code>Singleton</code>；</p><p>而对于一个所有实例都共享的方法或者域，它不能仅仅依赖于某一个类型。</p><h3 id="68-不能抛出或捕获泛型类对象"><a class="markdownIt-Anchor" href="#68-不能抛出或捕获泛型类对象"></a> 6.8 不能抛出或捕获泛型类对象</h3><p>不能抛出和捕获 <strong>泛型类</strong>，同时，也不允许泛型类扩展 <code>Throwable</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ERROR</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，<code>catch</code> 块中也不能使用类型变量 <code>T</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do work</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(T e) &#123;</span><br><span class="line">    <span class="comment">// ERROR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过可以在 <code>throws</code> 中使用类型变量 <code>T</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">throwAs</span><span class="params">(Throwable e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> T</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> (T) e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，编译器会认为 <code>T</code> 是一个 <strong>未检查异常</strong></p><h3 id="69-注意擦除后的冲突"><a class="markdownIt-Anchor" href="#69-注意擦除后的冲突"></a> 6.9 注意擦除后的冲突</h3><p>类型擦除很可能会引发和超类型的冲突；</p><p>例如有这么一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.equals(value) &amp;&amp; second.equals(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法在类型擦除之后，会变成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object value)</span></span></span><br></pre></td></tr></table></figure><p>然而，这个方法和超类继承而来的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object 继承而来的！</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object)</span></span></span><br></pre></td></tr></table></figure><p>出现冲突。</p><p>此时，只能改名解决。</p><p>同时，还必须注意类和它的子类不能实现两个不同 <strong>类型参数 <code>T</code></strong> 的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calendar</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Calendar</span>&gt; </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GregorianCalendar</span> <span class="keyword">extends</span> <span class="title">Calendar</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">CregorianCalendar</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>Calendar</code> 类和它的子类 <code>GregorianCalendar</code> 实现了两个不同类型参数的接口；</p><p>这会导致合成的桥方法出现错误；</p><p>对于实现了 <code>Comparable&lt;X&gt;</code> 的类，可以获得一个桥方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">comparaTo</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> compareTo((X) other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，由于 <code>GregorianCalendar</code> 同时实现了两个类型参数不同的同一个泛型接口；</p><p>所以就会有两个 <strong>相同签名</strong> 的桥方法，而这是不允许的。</p><h2 id="7-泛型类的继承"><a class="markdownIt-Anchor" href="#7-泛型类的继承"></a> 7. 泛型类的继承</h2><p>在使用泛型类时，需要注意的是它的继承规则和直觉不同；</p><p>例如， <code>Employee</code> 和 <code>Manager</code> 是父类和子类；</p><p>但是 <code>Pair&lt;Manager&gt;</code> <strong>不是</strong> <code>Pair&lt;Employee&gt;</code> 的子类</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79ly1fdnqlhl1f9j30ce0ey74h.jpg"></p><blockquote><p>这里体现出来泛型和数组的一个重要区别；<br>对于一个数组来说，可以将 <code>Manager[]</code> 赋给 <code>Employee[]</code>。</p><p>不过如果尝试将一个低级别的 <code>Employee</code> 插入到多态的 <code>Employee[]</code> 中，则会抛出 <code>ArrayStoreException</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 泛型通配符和类型限定</title>
      <link href="//Java/Java%20%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/"/>
      <url>//Java/Java%20%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>对于泛型系统而言，最重要的就是能够领过的使用；</p><p>所以，Java 增加了 <strong>类型通配符(<code>?</code>)</strong>；</p><p>使用 <code>?</code> 来表示 <strong>任何类型</strong>；</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;? extends Employee&gt;</span><br></pre></td></tr></table></figure><p>表示 <strong>任何</strong> 是 <code>Empolyee</code> 的子类；</p><a id="more"></a><h2 id="2-与类型参数-t-的不同"><a class="markdownIt-Anchor" href="#2-与类型参数-t-的不同"></a> 2. 与类型参数 <code>T</code> 的不同</h2><p>类型参数 <code>T</code> 和 通配符 <code>?</code> 似乎都是用于实现泛型灵活性的工具；</p><p>但是，实际上它们有着很大的不同</p><h3 id="21-使用位置不同"><a class="markdownIt-Anchor" href="#21-使用位置不同"></a> 2.1 使用位置不同</h3><p>在泛型中，类型参数 <code>T</code> 是一个 <strong>确定的</strong> 类型，</p><p>通常用于泛型类和泛型方法的 <strong>定义</strong>，不能用于调用代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="keyword">void</span></span><br><span class="line">copy(List&lt;T&gt; dest, List&lt;T&gt; src)</span><br></pre></td></tr></table></figure><p>而通配符是一个 <strong>不确定</strong> 的类型，通常用于泛型方法的 <strong>调用代码</strong> 和形参，不能用于定义类和泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;? Empolyee&gt; wildcardBuddies = managerBuddies;</span><br></pre></td></tr></table></figure><h3 id="22-类型参数保证形参一致性"><a class="markdownIt-Anchor" href="#22-类型参数保证形参一致性"></a> 2.2 类型参数保证形参一致性</h3><p>基于 <code>T</code> 是一个确定的类型，那么就可以通过 <code>T</code> 来 <strong>确保</strong> 泛型参数的一致性；</p><p>例如上面的 <code>copy()</code> 方法，使用泛型参数 <code>T</code> 就 <strong>确保了</strong> 两个 <code>List</code> 的元素类型是 <strong>一致的</strong>；</p><p>但是，如果使用如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">copy(List&lt;? extends Number&gt; dest, List&lt;? extends Number&gt; src)</span><br></pre></td></tr></table></figure><p>由于通配符是 <strong>不确定的</strong>，所以这个方法不能保证两个 <code>List</code> 具有相同的元素类型</p><h3 id="23-类型参数可以多重限定而通配符不行"><a class="markdownIt-Anchor" href="#23-类型参数可以多重限定而通配符不行"></a> 2.3 类型参数可以多重限定而通配符不行</h3><p>类型参数 <code>T</code> 可以进行多重限定，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T extends A &amp; B &amp; C</span><br></pre></td></tr></table></figure><p>但是通配符不能进行多重限定，因为它不是一个确定的类型。</p><h3 id="24-通配符可以使用超类限定而类型参数不行"><a class="markdownIt-Anchor" href="#24-通配符可以使用超类限定而类型参数不行"></a> 2.4 通配符可以使用超类限定而类型参数不行</h3><p>类型参数 <code>T</code> 只具有 <strong>一种</strong> 类型限定方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T extends A</span><br></pre></td></tr></table></figure><p>但是通配符 <code>?</code> 可以进行 <strong>两种限定</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? extends A</span><br><span class="line">? <span class="keyword">super</span> A</span><br></pre></td></tr></table></figure><h2 id="3-通配符类型限定和继承"><a class="markdownIt-Anchor" href="#3-通配符类型限定和继承"></a> 3. 通配符类型限定和继承</h2><p>对于泛型来说，即使它的类型参数具有继承关系，泛型类之间也是 <strong>没有</strong> 任何关联的；</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79ly1fdnt9c7mhsj30it0a6dfw.jpg"></p><p>但是，通过通配符的限定，就让泛型类之间具有了公有的父类；</p><p>例如：</p><p><img alt data-src="https://ww2.sinaimg.cn/large/006tNc79ly1fdntbwn54jj30do0azdft.jpg"></p><p><code>Pair&lt;? extends Empolyee&gt;</code> 是 <code>Pair&lt;Manager&gt;</code> 和 <code>Pair&lt;Empolyee&gt;</code> 的 <strong>公共超类</strong>；</p><p>事实上， <code>Pair&lt;? extends Empolyee&gt;</code> 是 <code>Pair&lt;Empolyee&gt;</code> 和所有以 <code>Empolyee</code> <strong>子类</strong> 为类型参数的泛型类的超类。</p><p>对于超类型限定，同理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? <span class="keyword">super</span> Empolyee</span><br></pre></td></tr></table></figure><p>表示类型参数可能是 <code>Empolyee</code> 的 <strong>某个超类</strong>；</p><p>和子类型限定同理，超类型限定也可以为泛型类建立联系：</p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79ly1fdnusk3uybj30j70h1wek.jpg"></p><p>如上，<code>Pair&lt;? super Manager&gt;</code> 是 <code>Pair&lt;Empolyee&gt;</code> 和 <code>Pair&lt;Object&gt;</code> 的共同超类。</p><p>需要注意的是，在 <code>Pair&lt;? super Manager&gt;</code> 之上，还有一个 <strong>无限定通配符</strong>，指代任何的类型。</p><h2 id="4-pecs-原则"><a class="markdownIt-Anchor" href="#4-pecs-原则"></a> 4. PECS 原则</h2><p>PECS 原则，指的就是 <em><strong>Producer Extends Consumer Super</strong></em></p><p>意思就是，对于生产者，采用 <code>? extends</code>；</p><p>对于消费者，采用 <code>? super</code>；</p><p>对于既可能是生产者有可能是消费者的对象，则 <strong>不做类型限定</strong>。</p><p>首先说明所谓的生产者和消费者的主语都是 <strong>数据结构</strong>；</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? extends Number&gt; producer;</span><br></pre></td></tr></table></figure><p>那么，<code>List</code> 就是 <strong>生产者</strong>，提供数据，调用 <code>get()</code> 方法，外部使用者提取其内部数据。</p><p>反过来，对于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="keyword">super</span> Number&gt; consumer;</span><br></pre></td></tr></table></figure><p>那么此时，<code>List</code> 就是 <strong>消费者</strong>，接收数据，调用 <code>add()</code> 方法，外部使用者将数据注入结构中。</p><p>实际上，这个原则是为了能够在泛型中提供尽可能的类型安全的写法。</p><h3 id="41-生产者的读方法"><a class="markdownIt-Anchor" href="#41-生产者的读方法"></a> 4.1 生产者的读方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? extends Number&gt; numbers;</span><br></pre></td></tr></table></figure><p>这个就是很典型的生产者；</p><p>由于使用了上界限定，那么它 <strong>保证</strong> 其中的元素 <strong>一定</strong> 是 <code>Number</code>；</p><p>所以它可以调用 <code>get()</code> 方法；</p><h3 id="42-生产者的写方法"><a class="markdownIt-Anchor" href="#42-生产者的写方法"></a> 4.2 生产者的写方法</h3><p>但是此时，生产者不可以使用写方法；</p><p>这是因为 <code>? extends Number</code> 只是限定了上界；</p><p>换句话说也就是 <code>Number</code> 的某个 <strong>子类型</strong>；</p><p>由于不知道具体是 <strong>哪个</strong> 子类型，所以，也就无法对其进行写入。</p><p>那么是否可以写入 <code>Number</code> 对象呢？</p><p>很可惜，这也是不可以的，因为 <code>Number</code> 是上界，很可能由于多态的原因变成了它的某个子类；</p><p>所以对于 <code>? extends</code> 来说，禁止所有的写入操作。</p><h3 id="43-消费者的读方法"><a class="markdownIt-Anchor" href="#43-消费者的读方法"></a> 4.3 消费者的读方法</h3><p>根据原则，具有下面类型的是消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="keyword">super</span> Number&gt; numbers;</span><br></pre></td></tr></table></figure><p>对于消费者来说，它接受的是 <code>Number</code> 的某个超类型；</p><p>那么，由于不清楚是 <strong>哪个</strong> 超类型；</p><p>所以，实际上返回的是最终的 <code>Object</code> 对象；</p><p>这显然对于读取没有什么帮助，如果读到一个 <code>Object</code> 类型，用户还需要将其转化为对应的子类型；</p><p>这显然是多此一举的。</p><blockquote><p>注意，消费者 <strong>并非是禁止</strong> 读操作的访问</p></blockquote><h3 id="44-消费者的写操作"><a class="markdownIt-Anchor" href="#44-消费者的写操作"></a> 4.4 消费者的写操作</h3><p>那么对于写操作如何呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="keyword">super</span> Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;;</span><br></pre></td></tr></table></figure><p>此时，对于 <code>numbers</code> 来说，可以使用 <code>add()</code> 方法加入 <code>Integer</code>；</p><p>但是，能否加入 <code>Number</code> 元素呢？(<code>Number</code> 是 <code>Integer</code> 的超类)；</p><p>很遗憾，这是 <strong>不行的！</strong>；</p><p><code>numbers</code> 目前只能写入 <code>Integer</code> 及其子类；</p><blockquote><p>因为 <code>Integer</code> 的子类也是 <code>Integer</code> ，数据结构将子类当成 <code>Integer</code> 来处理</p></blockquote><p>实际上，你 <strong>无法加入任何的超类！</strong></p><p>如果允许加入 <code>Number</code> 甚至是 <code>Object</code>，那会造成什么结果呢？</p><p>就是一个 <code>Integer</code> 的列表中混入了 <code>Object</code>；</p><p>显然这是不合理的。</p><p>那么为什么有必要使用 <code>? super</code> 这种多此一举的声明呢？</p><p>从超类限定的关系图中我们可以看出，它在泛型类关系中，处于 <strong>超类</strong> 的地位；</p><p>所以，我们就可以通过它所提供的 <strong>多态</strong>，来将我们目前存储的数据，加入到一个 <strong>更抽象通用的</strong> 数据结构中。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Integer&gt; ints, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ints.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt;ints = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    count(ints, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">assert</span> ints.toString().equals(<span class="string">"[0, 1, 2, 3, 4]"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Number&gt;nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    count(nums, <span class="number">5</span>); nums.add(<span class="number">5.0</span>);</span><br><span class="line">    <span class="keyword">assert</span> nums.toString().equals(<span class="string">"[0, 1, 2, 3, 4, 5.0]"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Object&gt;objs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    count(objs, <span class="number">5</span>); objs.add(<span class="string">"five"</span>);</span><br><span class="line">    <span class="keyword">assert</span> objs.toString().equals(<span class="string">"[0, 1, 2, 3, 4, five]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然我们的 <code>count()</code> 方法 <strong>只能</strong> 提供 <code>Integer</code> 数据；</p><p>但是，由于使用了 <code>&lt;? super Integer&gt;</code>，所以我们的数据可以被放入到 <code>List&lt;Number&gt;</code> 和 <code>List&lt;Object&gt;</code> 中。</p><p><strong>由 <code>? super</code> 提供的 <strong>多态支持</strong>，正是我们采用 <code>Consumer Super</code> 的关键。</strong></p><h3 id="45-不做限定"><a class="markdownIt-Anchor" href="#45-不做限定"></a> 4.5 不做限定</h3><p>当一个类既可能是生产者，又可能是消费者时；</p><p>就不对它的类型作出限定。</p><p>注意这里所说的 <strong>不是</strong> 无限定的通配符，而是指的是<strong>普通的类型参数形式(<code>T</code>)</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="5-无限定通配符"><a class="markdownIt-Anchor" href="#5-无限定通配符"></a> 5. 无限定通配符</h2><p>有时候我们会使用无限定的通配符。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;?&gt;</span><br></pre></td></tr></table></figure><p>此时，它的 <code>get()</code> 返回值类型只能是 <code>Object</code>；</p><p>同时， <strong>不能</strong> 调用 <code>set()</code>，即使通过 <code>Object</code> 也不能调用。</p><p>那么这时有什么用处呢？</p><p>我们可以用它实现一些与类型 <strong>无关</strong> 的操作；</p><p>如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasNulls</span><span class="params">(Pair&lt;?&gt; piar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p.getFirst() == <span class="keyword">null</span> || p.getSecond() == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>hasNulls()</code> 方法不需要关心类型是什么；</p><p>这个时候我们就可以使用无限定的通配符。</p><h2 id="6-通配符捕获"><a class="markdownIt-Anchor" href="#6-通配符捕获"></a> 6. 通配符捕获</h2><p>有时候，当我们需要实现一个无限定通配符方法的时候；</p><p>有可能遇到需要使用类型参数的问题。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Pair&lt;?&gt; pair)</span></span></span><br></pre></td></tr></table></figure><p>但是，由于 <code>?</code> 不是类型参数，所以我们需要使用一个辅助方法来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">swapHelper</span><span class="params">(Pair&lt;T&gt; pair)</span> </span>&#123;</span><br><span class="line">    T t = pair.getFirst();</span><br><span class="line">    pair.setFirst(p.getSecond());</span><br><span class="line">    pair.setSecond(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们就可以通过下面的方法实现 <code>swap()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Pair&lt;?&gt; pair)</span> </span>&#123;</span><br><span class="line">    swapHelper(pair);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，对于这个例子来说，实现一个辅助方法的确是多此一举；</p><p>我们本来就可以通过辅助方法直接实现需求；</p><p>那么为什么需要这个技巧呢？</p><p>在使用了通配符的时候，不可避免的需要使用到这个技巧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">maxminBonus(Manager[] a, Pair&lt;? <span class="keyword">super</span> Manager&gt; result)</span><br><span class="line">&#123;</span><br><span class="line">    minmaxBonus(a, result);</span><br><span class="line">    PairAlg.swap(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于使用了通配符，那么这个捕获技巧就不可避免的需要了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 类基础</title>
      <link href="//Java/Java%20%E7%B1%BB%E5%9F%BA%E7%A1%80/"/>
      <url>//Java/Java%20%E7%B1%BB%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>△Java语言就是基于类的语言，许多术语与C++稍有区别</p><table><thead><tr><th>C++</th><th>Java</th></tr></thead><tbody><tr><td>函数</td><td>方法</td></tr><tr><td>构造函数</td><td>构造器</td></tr><tr><td>析构函数</td><td>析构器</td></tr><tr><td>类中的数据</td><td>实例域</td></tr><tr><td>静态数据</td><td>静态域</td></tr></tbody></table><blockquote><p>例如 <code>String a;</code><br>C++ 称 <code>String</code> 为类，而 <code>a</code> 为对象，C++ 在此时就分配了内存，构建了对象<br>Java 称 <code>String</code> 为类，<code>a</code> 为引用，而当使用 <code>new</code> 请求，分配了空间，构建出的数据块称为对象</p></blockquote><p>类对象必须使用new来构建，单纯的声明类仅仅只是声明了类的引用，并没有分配空间</p><a id="more"></a><h2 id="2-自定义类"><a class="markdownIt-Anchor" href="#2-自定义类"></a> 2. 自定义类</h2><ol><li><p>一个源文件只能拥有一个 <code>public</code> 类，且必须与文件名一致</p><blockquote><p>通过在类的 <code>class</code> 前缀上 <code>public</code> 获得这一特性</p></blockquote><blockquote><p>包含 <code>main()</code> 方法的类才能成为启动类，每个类都可以拥有 <code>main()</code>方法<br>通常用作类的普通测试</p></blockquote></li><li><p>Java不支持析构函数，反之，会自动进行垃圾回收</p></li><li><p>所有的方法都要在类的内部进行定义</p><blockquote><p>实际上，任何一个Java程序都是从类开始的</p></blockquote></li><li><p>如果需要返回一个可变对象的引用，应该对其进行克隆（clone）</p><blockquote><p>※这是由于变量都是一个指向对象的“类似指针的”引用，有可能会使得数据封装性遭到破坏</p></blockquote></li><li><p><code>final</code> 修饰符在使用时大多应用于不可修改的类，当应用在可变的类的时候，并不意味着类的内容不可修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Date hiredate: <span class="number">2017</span>-<span class="number">03</span>-<span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 此时，name引用和对象都不能被修改【String类是不可变的类】</span></span><br><span class="line"><span class="comment">* hiredate: 2017-03-16</span></span><br><span class="line"><span class="comment">* 这里的hiredate: 2017-03-16</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>通过 <code>static</code> 声明静态域和静态方法</p></li></ol><ul><li><p>静态域和 C++ 类中的静态变量没有什么区别</p></li><li><p>静态公有常量可以通过类名来直接调用，由于有 <code>final</code> 限制，所以不会造成封装性破坏</p><blockquote><p>如Math.PI就是一个静态公有变量</p></blockquote><blockquote><p>其实也可以通过对象引用来调用，不过一般通过类名调用使得易读性更强</p></blockquote><blockquote><p>静态方法可以通过类名和对象引用直接调用，但一般使用类名调用增强易读性<br>如 Math.pow(x,y)</p></blockquote></li><li><p>静态方法只能对对象静态域实施操作，而不能对实例域实施操作</p></li><li><p>通常只有在接受外来参数和调用静态域的时候才使用静态方法</p></li></ul><ol start="7"><li><p>对象的构造</p><ol><li><p>可以直接在构造器内初始化实例域，即使是包含关系</p></li><li><p>通过使用this来实现传参和实例域同名，甚至调用另一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Class</span><span class="params">(String name, <span class="keyword">double</span> salary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Class</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>(<span class="string">"Class * "</span> + nextId, s);</span><br><span class="line"> nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认将所有数值初始化为0，布尔值初始化为false，引用初始化为null</p><blockquote><p>如果没有提供显式构造器，则系统自动生成隐式（无参）构造器完成上述工作</p></blockquote><blockquote><p>如果提供了显式构造器，则系统将不再自动生成无参构造器，上述操作将被视为非法</p></blockquote></li><li><p>初始化块</p><p>※这个不常用，通常使用构造器完成工作<br>可以使用一个代码块对实例域进行初始化操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line">  id  = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化块在所有构造器执行之前执行。<br>通过标记关键字static可以对静态域进行初始化块操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span></span><br><span class="line">&#123;</span><br><span class="line"> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>类的基本结构</p></li></ol><ul><li>数据域</li><li>构造器（constructor）<ul><li>访问器（getter）</li><li>更改器（setter）</li></ul></li></ul><h2 id="3-方法参数"><a class="markdownIt-Anchor" href="#3-方法参数"></a> 3. 方法参数</h2><ol><li><p>Java总是按值传参，对象引用也是一个值</p></li><li><p>方法不能修改传递给它的实参</p></li><li><p>方法可以通过调用传入对象引用的对象的方法，实现对对象的修改</p></li><li><p>方法不能让对象参数引用一个新的对象</p></li><li><p>方法能够<strong>直接访问和修改</strong>相同类作为参数的对象实例的<strong>私有域</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">(Foo f)</span> </span>&#123;</span><br><span class="line">        System.out.println(f.text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-包package"><a class="markdownIt-Anchor" href="#4-包package"></a> 4. 包（<code>package</code>）</h2><p>※类似于C++的名称空间</p><ul><li><p>通过import语句来导入Java包</p></li><li><p>添加static指令可以直接导入静态方法和静态域，使用的时候就无需使用类名来调用【UnRecommended】</p></li><li><p>通过使用包名来具体访问一个类</p></li><li><p>通过package语句来将类放入包中，通常在开头加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myapp.corejava;</span><br></pre></td></tr></table></figure><blockquote><p>注意包名的命名要与目录树相匹配，即上述类文件必须位于 <code>com/myapp/corejava</code> 中，否则，最终的程序将无法运行</p></blockquote></li><li><p>包作用域</p><ul><li><p>如果实例域没有指定访问控制符，则这一个部分可以被同一个包的所有方法访问</p><blockquote><p>在编写类的时候，必须为实例域添加上访问控制符</p></blockquote></li></ul></li><li><p>类路径（※好像只有使用Shell编译才会遇到这个问题？）</p></li><li><p>javadoc文档注释</p><ul><li>以 <code>/**</code> 开头，以 <code>*/</code> 结尾</li><li>可以使用 <code>HTML</code> 修饰符</li><li>还有各种注释，这里不一一说明</li></ul></li></ul><h2 id="5-类设计技巧"><a class="markdownIt-Anchor" href="#5-类设计技巧"></a> 5. 类设计技巧</h2><ol><li><p>保证数据私有</p></li><li><p>一定要对数据初始化，可以直接提供默认值，也可以在构造器中提供</p></li><li><p>不要在类中使用过多的基本类型，可以通过一个封装类来减少使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String street;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line"><span class="keyword">private</span> String state;</span><br></pre></td></tr></table></figure><blockquote><p>这个可以通过一个 <code>Address</code> 类来解决</p></blockquote></li><li><p>并不是所有的数据都需要访问器和更改器</p></li><li><p>将职责过多的类进行分解</p><blockquote><p>如果一个类能被拆分成两个或者多个独立的概念，那就进行拆分<br>注意这里是概念的拆分，而不是单纯将方法拆分</p></blockquote></li><li><p>类名和方法名要能够体现它们的职责</p><blockquote><p>类名常用一个名词或者有定语修饰的名词<br>访问器使用小写的get开头<br>更改器使用小写的set开头</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 类继承</title>
      <link href="//Java/Java%20%E7%B1%BB%E7%BB%A7%E6%89%BF/"/>
      <url>//Java/Java%20%E7%B1%BB%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><table><thead><tr><th>C++</th><th>Java</th></tr></thead><tbody><tr><td>基类</td><td>父类、超类</td></tr><tr><td>派生类</td><td>子类</td></tr></tbody></table><a id="more"></a><h2 id="2-java-只允许一重继承"><a class="markdownIt-Anchor" href="#2-java-只允许一重继承"></a> 2. Java 只允许一重继承</h2><p>※可以有多个继承链，但是不能有多个基类</p><h2 id="3-使用-extends-来表明继承关系"><a class="markdownIt-Anchor" href="#3-使用-extends-来表明继承关系"></a> 3. 使用 <code>extends</code> 来表明继承关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-使用-super-来调用超类方法"><a class="markdownIt-Anchor" href="#4-使用-super-来调用超类方法"></a> 4. 使用 <code>super</code> 来调用超类方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Derived</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-构造器"><a class="markdownIt-Anchor" href="#5-构造器"></a> 5. 构造器</h2><p>可以使用 <code>super</code> 实现对超类构造器的调用</p><p>如果没有显式调用超类构造器，将自动调用超类构造器的隐式版本;</p><p>如果没有隐式版本（即超类构造器只定义了显示版本）则报错</p><h2 id="6-多态"><a class="markdownIt-Anchor" href="#6-多态"></a> 6. 多态</h2><ol><li><p>可以将超类引用指向子类对象，但不能反过来</p><blockquote><p>基类指针可以指向派生类对象</p></blockquote></li><li><p>数组可以进行相反的赋值，所以必须注意元素类型的监督</p></li><li><p><code>public</code> 方法默认为动态绑定，无需添加 <code>vitual</code> 或者类似的关键字</p><blockquote><p>private、static、final方法为静态绑定</p></blockquote></li><li><p>子类方法覆盖超类方法时，其访问权限不能严格于超类方法</p><blockquote><p>※注意不要遗漏public关键字，否则将会被解释成为更严格的访问权限</p></blockquote></li><li><p>覆盖允许返回类型协变（超类可以协变为子类）</p></li></ol><h2 id="7-final-阻止继承"><a class="markdownIt-Anchor" href="#7-final-阻止继承"></a> 7. <code>final</code> 阻止继承</h2><ol><li><p><code>final</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Excutive</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种类型被称为final类，不允许定义子类，即无法继承</p></blockquote></li><li><p><code>final</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方法称为final方法，这种方法不允许子类覆盖它，确保其不会在子类中改变语义</p></blockquote></li></ol><p><strong>注意 <code>final</code> 的位置不同</strong></p><p>值得提到的是， <em>Effective Java</em> 中明确指示，如果不事先设计好一个良好的继承结构模型，那么就 <strong>禁止继承</strong></p><h2 id="8-强制类型转换"><a class="markdownIt-Anchor" href="#8-强制类型转换"></a> 8. 强制类型转换</h2><p>在继承链上不允许进行由上到下的转换（超类不能转换成子类）</p><p>使用 <code>instanceof</code> 进行转换检查，返回布尔值，表示是否能够成功转换</p><p>语法：(要转换的对象) <code>instanceof</code> (转换目标)</p><p>强制转换语法类似 C 语言，执行过程类似 <code>dynamic_cast</code> 操作，不成功则抛出一个异常，而不是生成 <code>null</code> 对象</p><h2 id="9-抽象类"><a class="markdownIt-Anchor" href="#9-抽象类"></a> 9. 抽象类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;...&#125;   <span class="comment">// 抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;   <span class="comment">// 抽象方法</span></span><br></pre></td></tr></table></figure><blockquote><p>抽象类不一定要有抽象方法，但是包含抽象方法的类必须声明为抽象类<br>抽象类可以包含具体数据和具体方法<br>抽象类不能被实例化（即不能创建对象）</p></blockquote><h2 id="10-谨慎的使用protected"><a class="markdownIt-Anchor" href="#10-谨慎的使用protected"></a> 10. 谨慎的使用protected</h2><p><code>protected</code> 的可见性是超类和子类之间</p><h2 id="11-object类"><a class="markdownIt-Anchor" href="#11-object类"></a> 11. Object类</h2><h3 id="111-equals方法"><a class="markdownIt-Anchor" href="#111-equals方法"></a> 11.1 <code>equals()</code>方法</h3><ul><li>特性<ul><li>自反：<code>x.equals(x) return true</code></li><li>对称：<code>y.equals(x) = x.equals(y)</code></li><li>传递：<code>if (x.equals(y) &amp;&amp; y.equals(z)) then x.equals(z);</code></li><li>一致：<code>The return value of x.equals(y) should be stable;</code></li></ul></li></ul><p>对于非空引用 <code>x</code>, <code>x.equals(null) return false;</code></p><p><code>Object</code> 类 <code>equals</code>：<strong>判断两个对象是否具有相同的引用</strong></p><h3 id="112-equals-方法的设计理念"><a class="markdownIt-Anchor" href="#112-equals-方法的设计理念"></a> 11.2 <code>equals()</code> 方法的设计理念</h3><ol><li><p>接受一个Object类参数（为了覆盖Object类的equals方法）</p></li><li><p>检测是否为自身<br><code>this == otherObject</code></p></li><li><p>检测传参是否为null</p></li><li><p>比较是否为同一个类</p><blockquote><p>如果子类有特有的equals概念，则使用getClass方法<br><code>if(getClass() != otherObject.getClass()) return false;</code></p></blockquote><blockquote><p>如果子类没有特有的equals概念，则使用instanceof方法<br><code>if(!(otherObject instanceof ClassName)) return false;</code></p></blockquote></li><li><p>转换为相应的类变量</p><blockquote><p>由于接受的是一个Object变量，所以必须进行强制类型转换才能进行具体实例域的相等判定<br>此时已经判别类型相同了，可以进行转换</p></blockquote></li><li><p>判别实例域</p><blockquote><p>如果在子类中重新定义equals，则先调用超类的equals</p></blockquote></li></ol><h3 id="112-hashcode-方法"><a class="markdownIt-Anchor" href="#112-hashcode-方法"></a> 11.2 <code>hashCode()</code> 方法</h3><p>如果重新定义了 <code>equals()</code> 方法，则必须重新定义 <code>hashCode()</code> 方法</p><p><code>equals()</code> 与 <code>hashCode()</code> 的定义必须一致；</p><p>如果 <code>x.equals(y) return true</code>, 则，<code>x.hashCode()</code> 就必须与 <code>y.hashCode()</code> 返回一样的值</p><h3 id="113-tostring-方法"><a class="markdownIt-Anchor" href="#113-tostring-方法"></a> 11.3 <code>toString()</code> 方法</h3><p>一般形式：类名 + 方括号括起来的阈值<br>调用 <code>x.toString()</code> 可以用 <code>&quot;&quot;+x</code> 代替<br>应该为每一个自定义类提供 <code>toString()</code> 方法。</p><h2 id="12-泛型数组列表arraylist"><a class="markdownIt-Anchor" href="#12-泛型数组列表arraylist"></a> 12. 泛型数组列表（<code>ArrayList&lt;&gt;</code>）</h2><ol><li><p>构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;ClassName&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></li><li><p>优点：可以实现动态更改数组大小</p></li><li><p>使用 <code>add()</code> 方法添加元素，<code>remove()</code> 方法删除元素</p></li><li><p>使用 <code>get()</code> 方法访问元素，<code>set()</code> 方法设置元素【而不是使用[]语法】</p></li></ol><h2 id="13-对象包装器和自动装箱"><a class="markdownIt-Anchor" href="#13-对象包装器和自动装箱"></a> 13. 对象包装器和自动装箱</h2><p>一般用于将基本类型转换成类对象</p><p>首字母大写即为相应的包装器</p><p>包装器的比较应使用 <code>equals()</code>方法，而不是 <code>==</code><br>包装器为 <code>final</code> 类，不可以用来修改基本数据类型的数值<br>应使用 <code>holder</code> 类型来修改基本数据类型的值</p><h2 id="14-不定参数"><a class="markdownIt-Anchor" href="#14-不定参数"></a> 14. 不定参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span>... values)</span></span></span><br></pre></td></tr></table></figure><p>其中的 <code>double...</code> 相同于<code>double[]</code>，其实就是接受了一个 <code>double</code> 数组<br>可以将数组传递给可变参数方法的最后一个参数。</p><h2 id="15-枚举类"><a class="markdownIt-Anchor" href="#15-枚举类"></a> 15. 枚举类</h2><p>这里的枚举类是一个类对象，而不是一种类型</p><h2 id="16-继承设计的技巧"><a class="markdownIt-Anchor" href="#16-继承设计的技巧"></a> 16. 继承设计的技巧</h2><ol><li><p>将公共操作和域放在超类</p></li><li><p>不要使用受保护的域</p></li><li><p>使用继承实现 <strong>“is-a”</strong> 关系</p></li><li><p>覆盖方法时，不要改变预期的行为</p><blockquote><p>这里说的是不要偏离设计，并不是不能改变基类方法的操作</p></blockquote></li><li><p>能使用多态就使用多态</p></li><li><p>不要过多的使用反射</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="//DesignPattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>//DesignPattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>单例模式，顾名思义，它可以保证在系统运行中，整个系统只存在某个类的 <strong>一个对象</strong>；</p><p>该对象在系统中是 <strong>唯一的</strong></p><a id="more"></a><h2 id="2-经典实现"><a class="markdownIt-Anchor" href="#2-经典实现"></a> 2. 经典实现</h2><p>需要注意的是，虽然这个实现很经典，但是它是错误的，在实际中不应该使用；</p><p>但是，由于它较为简单，所以拿这种实现来说明单例的原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存储自身的引用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不允许外界通过构造器构建</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现中，最为核心的就是 <code>getInstance()</code> 方法；</p><p>通过 <code>if</code> 的判断，如果实例为空，那么进行构造；</p><p>当实例构造完毕后，<code>instance</code> 就不为空了，直接返回自身。</p><p>这样就保证了在普通情况下，对象只会有一个。</p><p>但是，这种实现在多线程时不成立！</p><p>当有两个线程同时尝试获取单例实例时，就会造成对象的重复构建：</p><p>这是由于两个线程可能同时进入 <code>if</code> 区域中，导致两个线程分别执行对象的构建，最后就会出现两个单例对象。</p><h2 id="3-懒汉式"><a class="markdownIt-Anchor" href="#3-懒汉式"></a> 3. 懒汉式</h2><p>由于经典实现的缺陷是因为多线程导致的；</p><p>那么我们只要把 <code>getInstance()</code> 设置为同步方法不就完了吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这种实现方法具有很严重的 <strong>性能缺陷</strong>；</p><p>由于每次获取单例实例都需要先获取锁，导致性能低下；</p><p>而实际上，只需要在单例的构建过程进行同步即可；</p><p>没有必要在每次获取对象的时候都进行同步。</p><h2 id="4-饿汉式"><a class="markdownIt-Anchor" href="#4-饿汉式"></a> 4. 饿汉式</h2><p>既然多线程造成的问题是在 <code>getInstance()</code> 时发生的；</p><p>而使用 <code>synchronized</code> 关键字又存在性能缺陷；</p><p>那么，为什么不在类加载的一开始就进行实例构建呢？</p><p>这样，既避免了多线程问题，又没有同步损失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样虽然解决了同步损失，但是，单例的构建很可能是一个耗时操作；</p><p>它并不是一个懒加载操作，同时，如果单例的构建需要外部参数的话，这个方法就用不上了。</p><h2 id="5-双检锁单例"><a class="markdownIt-Anchor" href="#5-双检锁单例"></a> 5. 双检锁单例</h2><p>这种单例实现是目前用的比较多的形式；</p><p>既然单例的多线程同步只需要在对象构建时进行，那么，我们就可以通过对 <code>instance</code> 进行两次检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查对象是否已经构建</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">            <span class="comment">// 防止两个线程同时进入第一个 if 造成的对象重复构建</span></span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里着重解释第二个判断：</p><p>当两个线程通过第一个 <code>if</code> 进入同步区后；</p><p>线程一先获取锁，进行对象构建；</p><p>线程一完毕后，线程二进入同步区；</p><p>如果此时没有第二个 <code>if</code>，那么对象就会进行重复构建。</p><p>当对象构建完毕后，外部的 <code>if</code> 将会跳过，不会再进行同步过程；</p><p>这样就解决了同步的性能损失。</p><p>看起来这个实现已经很完美了，但是还是有问题；</p><p>问题就在于，<code>instance = new Singleton()</code> <strong>不是一个原子操作</strong></p><p>这个操作分为三步：</p><ol><li>给 <code>instance</code> 分配内存</li><li>调用 <code>Singleton</code> 的构造函数进行对象构造</li><li>将 <code>instance</code> 指向分配的内存空间</li></ol><p>而在 JIT 即时编译优化中，会出现指令重排；</p><p>最终的执行顺序很可能不是 1-2-3 而是 1-3-2；</p><p>那么在 3 完成后，线程二抢占锁，此时 <code>instance</code> 不为空，于是线程二返回，报错。</p><p>一个改进则是对于 <code>instance</code> 变量采用 <code>volatile</code> 进行修饰，防止指令重排；</p><p><code>volatile</code> 变量在赋值操作后会存在 <strong>内存屏障</strong>，防止读操作在赋值操作之前进行。</p><p>所以，双检锁单例的正确实现形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-静态内部类"><a class="markdownIt-Anchor" href="#6-静态内部类"></a> 6. 静态内部类</h2><p>可以看到，上面的双检锁单例的实现过于繁琐；</p><p>有没有一种既线程安全，又采用懒加载而且实现简单的实现方法呢？</p><p>有的，我们可以采用静态内部类来实现单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看到，我们把单例的实例放入了它的静态内部类中；</p><p>这种实现方法的难度比双检锁单例下降了许多；</p><p>其原理在于，我们不再 <strong>自行实现</strong> 线程安全；</p><p>通过将实例交给静态内部类，我们可以让 JVM 保证天生的线程安全。</p><p>当 <code>Singleton</code> 被加载时，其内部类并不会初始化；</p><p>而当 <code>getInstance()</code> 调用时，其内部类被 <strong>加载</strong> 入内存中；</p><p>JVM 保证所有对类的读写操作均在类加载 <strong>之后</strong> 进行；</p><p>这样，就保证了线程安全；</p><p>同时，由于 <code>getInstance()</code> 不是同步方法，也不会有同步损失。</p><h2 id="7-序列化和反射攻击"><a class="markdownIt-Anchor" href="#7-序列化和反射攻击"></a> 7. 序列化和反射攻击</h2><p>那么，我们的单例实现是否已经没有问题了呢？</p><p>并不是！</p><p>由于我们都是通过设定 <strong>访问修饰符</strong> 来达到将构造函数封装的目的；</p><p>但是，当其他使用者使用 <strong>反射</strong> 来进行对象构建时，单例模式就会被破坏了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] cons = getDeclaredConstructors();</span><br><span class="line">cons. setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>其中，一个很常见的问题就是单例的序列化；</p><p>当我们采用 <code>Serializable</code> 接口时；</p><p>对象在序列化和反序列化的过程中，会使用 <strong>反射</strong> 调用无参构造方法进行对象构造。</p><p>那么，我们该如何防止对象被反射攻击呢？</p><p>一种方法是采用 <code>flag</code>，如果对象被反射攻击，那么就抛出异常；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Singleton.flag == <span class="keyword">false</span>) &#123;</span><br><span class="line">            Singleton.flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Reflect Attack!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于序列化造成的对象的重复构建，我们可以采用重载 <code>readResolve()</code> 的方法进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-枚举实现best-practice"><a class="markdownIt-Anchor" href="#8-枚举实现best-practice"></a> 8. 枚举实现(Best Practice)</h2><p>可以看到，当我们把所有问题都考虑到之后，单例的实现已经变得非常复杂了。</p><p>所以有没有一种更为简单的方法能满足上面的所有要求呢？</p><p>这就是枚举实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// operations</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Singleton.INSTANCE.doSomeThing();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它满足：</p><ol><li>线程安全</li><li>无性能损失</li><li>防反射攻击</li><li>防止序列化重复构建</li></ol><p>而且是最为简单的一种单例实现方法。</p>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="//DesignPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>//DesignPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>工厂模式，是将构造类的责任从类或者子类本身委托到一个新的类进行的模式；</p><p>通过将类的构建转移到一个新的类，减少了耦合度，在具体的产品需要进行修改时，只需要修改该类即可。</p><p>这个新的类被称为工厂，或者创建者(Creator)</p><p>它分为三种：</p><ol><li>简单工厂</li><li>工厂方法</li><li>抽象工厂</li></ol><a id="more"></a><h2 id="2-简单工厂"><a class="markdownIt-Anchor" href="#2-简单工厂"></a> 2. 简单工厂</h2><p>简单工厂，顾名思义，就是 <strong>简单地</strong> 将构建产品的步骤搬到另一个类中去。</p><p>需要说明的是，简单工厂在 GOF 《设计模式》中不被视为一个独立的设计模式；</p><p>但是，由于实际编程中十分常用，所以依旧有需要说明一下；</p><p>例如，一个比萨店，原来需要做比萨，烤比萨，切比萨和包装比萨：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建比萨</span></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其余剩下工作</span></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们使用一个简单工厂，来承接创建比萨的职能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    SimpleFactory simpleFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimpleFactor simpleFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.simpleFactor = simpleFactor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工厂创建比萨</span></span><br><span class="line">        pizza = simpleFactory.createPizza(type);</span><br><span class="line"></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-静态工厂"><a class="markdownIt-Anchor" href="#3-静态工厂"></a> 3. 静态工厂</h2><p>事实上，如果工厂方法无需改变；</p><p>那么我们可以将其设置为静态的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，静态工厂是 《Effective Java》中推荐使用的对象创建方式；</p><p>由于静态工厂拥有更为语义化的命名方式；</p><p>而且这里可以看出，静态工厂可以根据参数生成相应的子类；</p><p>而如果使用 <code>new</code> 关键字，则不能实例化子类。</p><h2 id="4-工厂方法"><a class="markdownIt-Anchor" href="#4-工厂方法"></a> 4. 工厂方法</h2><p>简单工厂虽然将产品的构建过程从客户中分离了出去；</p><p>但是，并没有解决根本问题；</p><p>比萨店还是依赖于具体的比萨类，当我们需要不同风味的比萨时，会让我们的简单工厂臃肿不堪：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String style, String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (style.equals(<span class="string">"NewYork"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> NYCheesePizza();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> NYPepperoniPizza();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (style.equals(<span class="string">"Chicago"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> ChicagoCheesePizza();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> ChicagoPepperoniPizza();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个更好的方法是，通过派生出不同的工厂子类，让子类来实例化相应的产品：</p><p>首先，我们将 <code>PizzaStore</code> 设置为抽象的，并将 <code>createPizza()</code> 设置为抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza;</span><br><span class="line"></span><br><span class="line">        pizza = createPizza(type);</span><br><span class="line"></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，<code>PizzaStore</code> 类就成为了 <strong>抽象的</strong> 创造者；</p><p>我们就可以通过继承 <code>PizzaStore</code> 来实现不同的比萨创建方式。</p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79ly1fdjc0v569wj308905h0sq.jpg"></p><p>工厂方法模式定义了一个创建对象的接口，然后由子类来决定要实例化的类。</p><p>工厂方法让类把实例化推迟到 <strong>子类</strong></p><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79ly1fdjcj2iu7uj308308e3ym.jpg"></p><h2 id="5-依赖倒置原则"><a class="markdownIt-Anchor" href="#5-依赖倒置原则"></a> 5. 依赖倒置原则</h2><p>工厂方法显著地减少了代码对于具体类的依赖；</p><p>事实上，我们应该尽量减少对具体类的依赖，由此得到新的设计原则：</p><p><strong>要依赖抽象，不要依赖具体类</strong></p><p>这个原则听起来很像 『针对接口编程』，不过与之不同的是，该原则更强调 <strong>抽象</strong>；</p><p>也就是说，不能让高层组件(比萨店)依赖于低层组件(具体的比萨)；</p><p>而是要让高层组件和低层组件 <strong>都依赖于抽象</strong>(抽象的 <code>Pizza</code> 类)</p><p>这里的 <strong>倒置</strong> 指的就是高层和低层组件都依赖于一个抽象类形成的依赖图倒置情况。</p><p>当我们考虑类设计时，可以先从低层组件开始设计，然后考虑抽象层，最后再考虑高层组件。</p><p>由于高层和低层组件都共同依赖于一个抽象类，所以高低层组件得到了解耦。</p><h2 id="6-执行倒置原则的方针"><a class="markdownIt-Anchor" href="#6-执行倒置原则的方针"></a> 6. 执行倒置原则的方针</h2><ol><li><p>变量不可以持有具体类的引用</p><blockquote><p>使用工厂来代替持有的具体类</p></blockquote></li><li><p>不要让类派生自具体类</p><blockquote><p>如果派生自具体类就会产生依赖<br>请派生自一个接口或者抽象类</p></blockquote></li><li><p>不要覆盖基类中已经实现的方法</p><blockquote><p>基类的方法是所有具体子类共享的</p></blockquote></li></ol><p>例外：对于 <strong>不可变类</strong>(immutable)，可以使用 <code>new</code> 来进行具体类的实例化；</p><p>这是因为 <strong>不可变类</strong> 不具备改变的能力。</p><h2 id="7-抽象工厂"><a class="markdownIt-Anchor" href="#7-抽象工厂"></a> 7. 抽象工厂</h2><h3 id="71-定义"><a class="markdownIt-Anchor" href="#71-定义"></a> 7.1 定义</h3><p>抽象工厂模式提供一个 <strong>接口</strong>，用于创建相关或依赖对象的 <strong>家族</strong>，而不需要明确指明具体类。</p><p>简单的来说，抽象工厂就是 <strong>工厂的工厂</strong>；</p><p>通过创造具体的工厂来创建不同的产品家族；</p><p>然后将这个产品家族提供给客户使用。</p><h3 id="72-产品族"><a class="markdownIt-Anchor" href="#72-产品族"></a> 7.2 产品族</h3><p>产品族指的是位于不同的产品等级结构中， <strong>功能相关联</strong> 的产品组成的家族。</p><p>就比萨店的这里例子来说，我们具有 酱汁、面团、芝士和蛤蜊 四种不同的配料；</p><p>这 <strong>四种不同的配料</strong> 共同组成了配料产品族。</p><blockquote><p>对于某一种配料本身，有不同的风味；<br>如芝加哥风味和纽约风味</p></blockquote><h3 id="73-使用条件"><a class="markdownIt-Anchor" href="#73-使用条件"></a> 7.3 使用条件</h3><p>系统或者客户一次只能使用 <strong>一个</strong> 产品族；</p><p>产品之间具有良好的分级和产品族分类</p><h3 id="74-重写比萨店"><a class="markdownIt-Anchor" href="#74-重写比萨店"></a> 7.4 重写比萨店</h3><p>事实上，不同风味的比萨只是使用了不同的原料；</p><p>所以，我们只需要使用某一个地区的原料产品族就可以做出那个地区风味的比萨；</p><p>所以，我们可以使用抽象工厂重写比萨店。</p><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79ly1fdjyygkaizj30yf0ffjsv.jpg"></p><p>首先，重写 <code>Pizza</code> 类，让其采用原料产品族。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原料产品族</span></span><br><span class="line">    Dough dough;</span><br><span class="line">    Sauce sauce;</span><br><span class="line">    Veggies veggies[];</span><br><span class="line">    Cheese cheese;</span><br><span class="line">    Peppperoni pepperoni;</span><br><span class="line">    Clams clam;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不同的比萨品种具有不同的准备方法</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在具体的比萨类中，采用原料工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dough = ingredientFactory.createDough();</span><br><span class="line">        sauce = ingredientFactory.createSause();</span><br><span class="line">        cheese = ingredientFactory.createCheese();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在比萨店客户中，我们只需要指定某个原料工厂，即可制造出不同风味的比萨。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        PizzaIngredientFactory ingredientFactory =</span><br><span class="line">            <span class="keyword">new</span> NYPizzaIngredientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Cheese Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Veggie Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8. 总结</h2><p>工厂模式是常用的对高低层平行组件进行解耦的设计模式；</p><p>通过使用 <strong>工厂</strong> 和 <strong>抽象产品</strong>，使得客户类（高层组件）不再需要依赖于具体的产品（低层组件），而依赖于抽象产品（抽象层）；</p><p>同时，低层组件通过工厂，也依赖于抽象产品，实现高低层组件的解耦。</p><p>其中，工厂方法是通过将 <strong>方法</strong> 视为工厂，将具体产品的创建职责交给子类解决；</p><p>而抽象工厂则是抽象出 <strong>工厂接口</strong>，通过不同的 <strong>具体工厂</strong> 来制作 <strong>产品族</strong>；</p><p>有趣的是，工厂接口和具体工厂之间，也是使用了工厂方法模式。</p>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成器模式(Builder Pattern)</title>
      <link href="//DesignPattern/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F(Builder%20Pattern)/"/>
      <url>//DesignPattern/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F(Builder%20Pattern)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>生成器模式(Builder Pattern) 听起来很像 工厂模式(Factory Pattern)，不过两者有着很大的不同。</p><p>工厂模式的目标是利用多态，减少类之间的耦合度；</p><p>而生成器模式的目标在于， 一步一步地构建一个复杂产品，同时解决由于复杂参数造成的构造器数量爆炸。</p><p>同时，生成器需要一个指导者来一步一步地指定产品构建的参数或者产品构建的步骤；</p><p>而工厂模式不需要指导者。</p><a id="more"></a><h2 id="2-结构类图"><a class="markdownIt-Anchor" href="#2-结构类图"></a> 2. 结构类图</h2><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79ly1fdk1a55zpqj309j0a2wep.jpg"></p><h2 id="3-构造复杂产品"><a class="markdownIt-Anchor" href="#3-构造复杂产品"></a> 3. 构造复杂产品</h2><p>所谓的复杂产品就是一个产品中有很多子类，而且每个子类都有相应的构造流程。</p><p>例如，一个蛤蜊比萨，拥有面饼，酱料，芝士，蛤蜊等其他食材。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClamPizza</span> </span>&#123;</span><br><span class="line">    Dough dough;</span><br><span class="line">    Sauce sauce;</span><br><span class="line">    Cheese cheese;</span><br><span class="line">    Clam clam;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这样一个复杂产品，我们就将其构造的过程委派给一个建造者(Builder)来完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClamPizzaBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">ClamPizzaBuilder <span class="title">prepareDough</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ClamPizzaBuilder <span class="title">prepareSauce</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ClamPizzaBuilder <span class="title">prepareCheese</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ClamPizzaBuilder <span class="title">prepareClam</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ClamPizza <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们对接口进行实现。</p><p>注意，这里有两种具体类的实现方法：</p><ol><li><p>在构建实际建造者时，就 <strong>立即</strong> 创建一个 <strong>默认的产品对象</strong>；</p></li><li><p>由实际建造者储存创建产品的参数，当调用 <code>build()</code> 方法时，才返回产品对象</p></li></ol><p>在这里，需要指明的就是方法二更好；</p><p>因为方法二符合语义，只有调用 <code>build()</code> 才真正的构建了对象；</p><p>而且也适合于不可变对象（构造之后对象的属性不能发生改变）。</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClamPizzaBuilder</span> <span class="keyword">implements</span> <span class="title">ClamPizzaBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ClamPizza clamPizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteClamPizzaBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        clamPizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClamPizzaBuilder <span class="title">prepareDough</span><span class="params">(Dough dough)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备面团，可以直接放入，也可以进行处理后放入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  剩下的 prepare 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClamPizza <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clamPizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClamPizza</span> </span>&#123;</span><br><span class="line">    <span class="comment">// fields</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClamPizza</span><span class="params">(ClamPizzaBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dough = builder.dough;</span><br><span class="line">        <span class="comment">// etc.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClamPizzaBuilder</span> <span class="keyword">implements</span> <span class="title">ClamPizzaBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// fields</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteClamPizzaBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        clamPizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClamPizzaBuilder <span class="title">prepareDough</span><span class="params">(Dough dough)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dough = dough;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  剩下的 prepare 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClamPizza <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ClamPizza(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成器模式和工厂模式最大的不同就是拥有一个指挥者来指挥产品的构建过程；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClamPizzaDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClamPizzaBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指挥者用于指定产品建造的步骤</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClamPizza <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.prepareDough();</span><br><span class="line">        builder.prepareCheese();</span><br><span class="line">        builder.prepareClam();</span><br><span class="line">        builder.prepareSauce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，有些比萨并不需要芝士，这个时候，我们就可以去除掉 <code>prepareCheese()</code> 的这一个步骤。</p><h2 id="4-内部生成器减少构造器"><a class="markdownIt-Anchor" href="#4-内部生成器减少构造器"></a> 4. 内部生成器减少构造器</h2><p>生成器模式除了能构造复杂产品以外，一个很重要的作用就是能解决由于构造参数的组合过多所导致的构造器爆炸。</p><h3 id="41-构造器爆炸"><a class="markdownIt-Anchor" href="#41-构造器爆炸"></a> 4.1 构造器爆炸</h3><p>假如一个类拥有 4 个属性，那么它 <strong>理想状态</strong> 下的构造函数就有 0 个参数，一个参数，两个参数，三个参数和四个参数。</p><p>也就是说，它的构造器数量</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo>=</mo><msubsup><mi>C</mi><mn>4</mn><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mn>4</mn><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mn>4</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mn>4</mn><mn>3</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mn>4</mn><mn>4</mn></msubsup></mrow><annotation encoding="application/x-tex">W = C_4^0 + C_4^1 + C_4^2 + C_4^3 + C_4^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">W</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-.247em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-.247em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-.247em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-.247em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-.247em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span></span></span></span></span></p><p>当类的属性为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 时，有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>W</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mi>n</mi></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} W &amp;= C_n^0 + C_n^1 + C_n^2 + \cdots + C_n^{n-1} + C_n^n \\ &amp;= 2^n \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.024108em;vertical-align:-1.262054em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.762054em"><span style="top:-3.897946em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">W</span></span></span><span style="top:-2.397946em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.262054em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.762054em"><span style="top:-3.897946em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span></span></span><span style="top:-2.397946em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.262054em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，类的属性和理想状态下的构造器数量为 <strong>指数关系</strong></p><h3 id="42-实现"><a class="markdownIt-Anchor" href="#42-实现"></a> 4.2 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    Dough dough;</span><br><span class="line">    Cheese cheese;</span><br><span class="line">    Sauce sauce;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Pizza</span><span class="params">(Pizza.Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dough = builder.dough;</span><br><span class="line">        <span class="keyword">this</span>.cheese = builder.cheese;</span><br><span class="line">        <span class="keyword">this</span>.sauce = builder.sauce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Dough dough = defaultDough;</span><br><span class="line">        <span class="keyword">private</span> Cheese cheese = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Sauce sauce = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">prepareDough</span><span class="params">(Dough dough)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.dough = dough;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">prepareCheese</span><span class="params">(Cheese cheese)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cheese = cheese;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">prepareSauce</span><span class="params">(Sauce sauce)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sauce = sauce;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Pizza <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Pizza(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，即使 <code>Pizza</code> 有三个属性，但是我们通过使用一个内置的 <code>Builder</code>，成功地将构造器限制在了一个；</p><p>同时，由于每个 <code>prepare</code> 方法都会返回 <code>Builder</code>；</p><p>也就是说，我们可以在任何一个准备阶段进行 <code>build()</code>；</p><p>这样，也就满足了不同的参数组合的需求；</p><p>同时，由于 <code>Pizza</code> 的构造函数是 <code>private</code> 的，所以这就限定了只能通过生成器来建造对象。</p><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Pizza Pizza = <span class="keyword">new</span> Pizza.Builder()</span><br><span class="line">                    .prepareDough(dough)</span><br><span class="line">                    .prepareSauce(sauce)</span><br><span class="line">                    .prepareCheese(cheese)</span><br><span class="line">                    .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-模式扩展"><a class="markdownIt-Anchor" href="#5-模式扩展"></a> 5. 模式扩展</h2><p>当只有一个具体建造者时，可以直接省略生成器接口；</p><p>例如上面的静态内部生成器。</p><p>有时候可以直接省略指挥者对象，而由 <strong>客户</strong> 直接充当指导者；</p><p>例如，客户自己冲泡咖啡。</p><h2 id="6-与抽象工厂的不同"><a class="markdownIt-Anchor" href="#6-与抽象工厂的不同"></a> 6. 与抽象工厂的不同</h2><p>抽象工厂模式生产的是一个产品族，而生成器模式所生产的 <strong>一个</strong> 复杂产品；</p><p>形象的说明就是，抽象工厂生产的是 <strong>汽车的零部件</strong>；</p><p>而生成器是将零部件 <strong>组装</strong> 成为一辆汽车。</p><h2 id="7-优缺点"><a class="markdownIt-Anchor" href="#7-优缺点"></a> 7. 优缺点</h2><h3 id="71-优点"><a class="markdownIt-Anchor" href="#71-优点"></a> 7.1 优点</h3><ol><li><p>良好的封装性，客户端不必知道产品的内部细节</p></li><li><p>建造者是独立的，容易扩展</p></li><li><p>可以使用其他的对象进行构造辅助，而普通的产品构造方式不容易获取到</p></li></ol><h3 id="72-缺点"><a class="markdownIt-Anchor" href="#72-缺点"></a> 7.2 缺点</h3><ol><li><p>产生多余的 <code>Builder</code> 对象</p></li><li><p>建造的过程暴露在外</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索算法的应用</title>
      <link href="//Algorithm/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>//Algorithm/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-寻找重复元素"><a class="markdownIt-Anchor" href="#1-寻找重复元素"></a> 1. 寻找重复元素</h2><p>在排序应用中也可以寻找重复元素，但是使用符号表则更为高效（特别是散列实现）。</p><p>将数组遍历一遍，随后查找表内是否存在这一元素，如果不存在则添加进表中，如果存在，则说明找到了重复元素</p><blockquote><p>分析：遍历一遍数组所需要的时间是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span>，由于散列表的查找和插入都是<strong>常数级别</strong>的，所以整体的复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span></p></blockquote><blockquote><p>排序则需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 的时间，在最坏情形下需要遍历一遍整个数组(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span>)，时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N + NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 比符号表稍大。</p></blockquote><a id="more"></a><h2 id="2-字典实现"><a class="markdownIt-Anchor" href="#2-字典实现"></a> 2. 字典实现</h2><p>符号表的<strong>键值对</strong>特性最适合实现的就是一个字典类，其中包括<strong>电话黄页</strong>、<strong>字典</strong>、<strong>账户信息</strong> 等等</p><h2 id="3-过滤器"><a class="markdownIt-Anchor" href="#3-过滤器"></a> 3. 过滤器</h2><p>可以用符号表过滤重复元素，建立黑名单和白名单等。这主要是依赖于符号宝的高效的查找操作。</p><h2 id="4-反向索引"><a class="markdownIt-Anchor" href="#4-反向索引"></a> 4. 反向索引</h2><p>可以将键和值互换，建立反向索引，实现相互搜索。</p><h2 id="5-矩阵乘法"><a class="markdownIt-Anchor" href="#5-矩阵乘法"></a> 5. 矩阵乘法</h2><p>矩阵乘法中的 0 是无用的，所以我们可以通过构建一个 <strong>向量类</strong> ，使用一个符号表， 键值为向量中不为零元素的数组索引和相应的值。</p><p>所以，我们就可以使用一个 <strong>向量数组</strong> 来代表矩阵；</p><p>通过向量点乘的结果，来得到新矩阵的某个元素的值。</p><p>进行点乘时，只需要查找出元素，再依照储存的索引找到相应的值相乘即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseVector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashST&lt;Integer, Double&gt; st;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseVectro</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        st = <span class="keyword">new</span> HashST&lt;Integer, Double&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> st.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        st.put(i, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!st.contains(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> st.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">dot</span><span class="params">(<span class="keyword">double</span>[] that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : st.keys()) &#123;</span><br><span class="line">            sum += that[i] * <span class="keyword">this</span>.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表(Hash Table)</title>
      <link href="//Algorithm/%E6%95%A3%E5%88%97%E8%A1%A8(Hash%20Table)/"/>
      <url>//Algorithm/%E6%95%A3%E5%88%97%E8%A1%A8(Hash%20Table)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>散列表是使用散列函数，将相应的键值对映射到数组的某个位置的数据结构。</p><p>它在一般情况下相对于其他的数据结构要效率更高，你甚至可以实现在<strong>常数时间</strong>内进行查找和插入操作的符号表。</p><p>但是它也有相应的缺点，下面将会详细讲述</p><a id="more"></a><h2 id="2-散列函数"><a class="markdownIt-Anchor" href="#2-散列函数"></a> 2. 散列函数</h2><p>散列表一个重要部分就是<strong>散列函数的计算</strong>，我们使用散列函数将键值转换为数组的索引。</p><p>计算散列值一个很重要的方面就是让键值尽量分布到整个表中去，以避免碰撞的发生。</p><p>如果我们拥有一个大小为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 的数组，那么我们需要返回<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, M - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 的散列值。</p><p>散列值的计算与<strong>类型</strong>相关。</p><h3 id="21-java-的约定"><a class="markdownIt-Anchor" href="#21-java-的约定"></a> 2.1 Java 的约定</h3><p>对于 Java 来说，比较幸运的是，Java 对于内置类型都实现了一个 <code>hashCode()</code> 方法，返回一个 32 位的 <code>int</code> 作为 <code>hashCode</code>；</p><p>我们可以直接使用这个 <code>hashCode</code> 来实现我们自己的散列值计算。</p><p>需要注意的是，Java 要求如果 <code>x</code> 和 <code>y</code> 相等，那么它们两者的 <code>hashCode</code> 也相等。</p><h3 id="22-散列计算方法"><a class="markdownIt-Anchor" href="#22-散列计算方法"></a> 2.2 散列计算方法</h3><p>常用的散列方法是<strong>除留余数法</strong>。</p><p>我们选择大小为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 的数组，对于任意的正整数 k，计算 <code>k % M</code>，这样就能有效的将键分布于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, M - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 最好选择使用<strong>质数</strong>。</p></blockquote><blockquote><p>虽然现在给不出严谨的数学证明，但是工程实践中说明使用质数作为除数可以更好地利用键值的信息。</p></blockquote><h3 id="23-使用-hashcode-的计算问题"><a class="markdownIt-Anchor" href="#23-使用-hashcode-的计算问题"></a> 2.3 使用 <code>hashCode</code> 的计算问题</h3><p>下面是一个实现的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Math.abs(x.hashCode())) % M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，因为 Java 的 <code>hashCode</code> 返回的是一个 <code>int</code> 值；</p><p>这说明 <code>hashCode</code> 的范围是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^{31} \sim 2^{31} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>；</p><p>但是我们需要的散列值要位于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, M - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>；</p><p>所以我们首先要将 <code>hashCode</code> 取绝对值。</p><p>通常来说，取绝对值一般使用 <code>Math.abs()</code>；</p><p>但是，由于 <code>hashCode</code> 可以取到整个 32 位整形的范围；</p><p>当 <code>hashCode</code> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 时，<code>Math.abs()</code> 是使用 <code>-1</code> 与之相乘；</p><p>此时，数值变为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，出现 <strong>上溢</strong>，便会回绕至 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>；</p><p><strong>所以，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 的绝对值是其本身！</strong></p><p>正确的做法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.hashCode() &amp; <span class="number">0x7fffffff</span>) % M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过忽略整形中的符号位来达到取绝对值的作用。</p><h3 id="24-浮点数"><a class="markdownIt-Anchor" href="#24-浮点数"></a> 2.4 浮点数</h3><p>对于 0 到 1 浮点数，我们可以将它乘以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 并四舍五入得到索引。</p><p>但是这种方法下，浮点数的<strong>高位</strong>作用更大，所以我们可以先将浮点数转为二进制数，随后使用除留余数法</p><h3 id="25-字符串"><a class="markdownIt-Anchor" href="#25-字符串"></a> 2.5 字符串</h3><p>对于字符串，我们也可以使用除留余数法。</p><p>通过 <code>chatAt()</code> 来返回一个 <code>char</code> 值。</p><p>以下的代码使用 Horner 算法来生成散列值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.lengh(); i++) &#123;</span><br><span class="line">    hash = (R * hash + s.charAt(i)) % M</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26-组合键"><a class="markdownIt-Anchor" href="#26-组合键"></a> 2.6 组合键</h3><p>如果键的类型含有多个整型变量，那么我们就可以将它们结合起来进行计算。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = (((day * R + month) % M) * R + year) % M;</span><br></pre></td></tr></table></figure><h3 id="27-缓存"><a class="markdownIt-Anchor" href="#27-缓存"></a> 2.7 缓存</h3><p>如果散列值的计算很耗时，那么我们或许可以<strong>将每个键的散列值缓存起来</strong></p><p>Java 内置的 <code>String</code> 就使用了这种方法来减少计算量。</p><h3 id="28-结论"><a class="markdownIt-Anchor" href="#28-结论"></a> 2.8 结论</h3><p>为一个数据类型实现散列函数需要满足三个条件：</p><ol><li>一致性——等价的键必定产生相等的散列值</li><li>高效性</li><li>均匀性</li></ol><h2 id="3-碰撞处理"><a class="markdownIt-Anchor" href="#3-碰撞处理"></a> 3. 碰撞处理</h2><p>散列表的另一个重要部分是<strong>碰撞处理</strong>。</p><p>无论如何设计散列函数，总会出现两个不同的键得到同一个散列值的情况，这就叫做<strong>碰撞</strong>。</p><p>此时，我们就需要对碰撞进行处理。</p><h3 id="31-拉链法"><a class="markdownIt-Anchor" href="#31-拉链法"></a> 3.1 拉链法</h3><p>一种处理碰撞的方法就是拉链法，实际上就是<strong>使用链表储存碰撞的元素</strong>。</p><p>每个数组元素都是一个链表头，随后跟着与其碰撞的元素</p><p>此时，我们的数组大小 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 可以小于键值数量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></p><h4 id="311-实现"><a class="markdownIt-Anchor" href="#311-实现"></a> 3.1.1 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeparateChainingHashST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;                              <span class="comment">// 键值对总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> M;                              <span class="comment">// 散列表的大小</span></span><br><span class="line">    <span class="keyword">private</span> SequentialSearchST&lt;Key, Value&gt;[] st; <span class="comment">// 存放链表的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeparateChainingHashST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">997</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeparateChainingHashST</span><span class="params">(<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create linked list</span></span><br><span class="line">        <span class="keyword">this</span>.M = M;</span><br><span class="line">        st = (SequentialSearchST&lt;Key, Value&gt;[]) <span class="keyword">new</span> SequentialSearchST[M];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            st[i] = <span class="keyword">new</span> SequentialSearchST();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (key.hashCode() &amp; <span class="number">0x7fffffff</span>) % M;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Value) st[hash(key)].get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(key, val)</span> </span>&#123;</span><br><span class="line">        st[hash(key)].put(key, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于删除操作，拉链法的删除操作相对简单，只需要找到 <code>SequentialSearchST</code> 对象，直接调用 <code>delete()</code> 方法即可。<br>实际上就是链表的删除操作。</p></blockquote><h4 id="312-性能"><a class="markdownIt-Anchor" href="#312-性能"></a> 3.1.2 性能</h4><ol><li>在一张含有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 条链表和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个键的散列表中，任意一条链表的键的数量均在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 的常数范围内的概率无限趋向 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></li><li>在一张含有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 条链表和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个键的散列表中，未命中查找和插入操作所需的比较次数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mi>N</mi><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">\sim N/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span></li></ol><blockquote><p>这里可以看到，散列表的效率是很高的，一般情况下只需要<strong>常数级别的</strong>时间即可完成搜索和插入</p></blockquote><h3 id="32-开放地址法"><a class="markdownIt-Anchor" href="#32-开放地址法"></a> 3.2 开放地址法</h3><p>另一种碰撞处理方法啊就是开放地址法，它倾向于利用<strong>数组中的空位</strong>来解决冲突。</p><p>所以如果使用这种方法来进行碰撞处理，那么就要求数组的数量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 大于键值数量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>。</p><h4 id="321-实现"><a class="markdownIt-Anchor" href="#321-实现"></a> 3.2.1 实现</h4><p>开放地址的最简单实现叫做<strong>线性探测法</strong>：当碰撞发生时，直接检查数组的下一个位置。</p><p>这会产生三种结果：</p><ol><li>命中</li><li>未命中（为空）</li><li>未命中（该位置的键与被查找的键不同）</li></ol><blockquote><p>特别重要的一点是，我们要在到达数组结尾时返回开头。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearProbingHashST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> M;</span><br><span class="line">    <span class="keyword">private</span> Key[] keys;</span><br><span class="line">    <span class="keyword">private</span> Value[] vals;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearProbingHashST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keys = (Key[]) <span class="keyword">new</span> Object[M];</span><br><span class="line">        vals = (Value[]) <span class="keyword">new</span> Object[M];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (key.hashCode() &amp; <span class="number">0x7fffffff</span>) % M;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> [</span></span><br><span class="line"><span class="function">        <span class="comment">/* resize method*/</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N &gt;= M / <span class="number">2</span>) resize(<span class="number">2</span> * M);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = hash(key); keys[i] != <span class="keyword">null</span>; i = (i + <span class="number">1</span>) % M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys[i].equals(key)) &#123;</span><br><span class="line">                vals[i] = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        keys[i] = key;</span><br><span class="line">        vals[i] = val;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = hash(key); keys[i] != nul; i = (i + <span class="number">1</span>) % M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys[i].equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> vals[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!contains(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = hash(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!key.equals(keys[i])) &#123;</span><br><span class="line">            i = (i + <span class="number">1</span>) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        keys[i] = <span class="keyword">null</span>;</span><br><span class="line">        vals[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        i = (i + <span class="number">1</span>) % M;</span><br><span class="line">        <span class="keyword">while</span> (keys[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Key keyToRedo = keys[i];</span><br><span class="line">            Value valToRedo = vals[i];</span><br><span class="line">            keys[i] = <span class="keyword">null</span>;</span><br><span class="line">            vals[i] = <span class="keyword">null</span>;</span><br><span class="line">            N--;</span><br><span class="line">            put(keyToRedo, valToRedo);</span><br><span class="line">            i = (i + <span class="number">1</span>) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        N --;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (N &gt; <span class="number">0</span> &amp;&amp; N == M / <span class="number">8</span>) resize(M /<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于删除操作：<br>我们不能直接将键的位置设置为 <code>null</code>，这会导致剩下的键无法被找到，所以我们需要<strong>将被删除键的右侧的键重新插入</strong></p></blockquote><h4 id="322-性能"><a class="markdownIt-Anchor" href="#322-性能"></a> 3.2.2 性能</h4><p>在一张大小为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 并含有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><mi>α</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N = \alpha M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 个键的基于线性探测的散列表中，命中和未命中的查找所需要的探测次数分别为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>a</mi></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sim \frac{1}{2}(1 + \frac{1}{1 - a})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-.7693300000000001em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sim \frac{1}{2}(1 + \frac{1}{(1 - a)^2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-.936em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">a</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.740108em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.936em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p>所以，如果要维护线性探测法的最佳性能；</p><p>应尽量保证数组是<strong>半满</strong>的</p><h2 id="4-结论"><a class="markdownIt-Anchor" href="#4-结论"></a> 4. 结论</h2><ol><li><p>散列表在一般情况下可以实现<strong>常数级别的</strong>查找和插入操作</p></li><li><p>性能保证来自于散列函数的质量</p><blockquote><p>这会导致散列表性能的不稳定，同时容易受到外部攻击。<br>一些特殊的数据在经过散列计算后会映射到同一个位置，此时散列表的性能就会急剧下降。</p></blockquote><blockquote><p><strong>当需要性能保证时，优先考虑平衡二叉树（红黑树）</strong></p></blockquote></li><li><p>散列计算可能复杂而且昂贵</p></li><li><p>难以支持有序性相关的符号表操作</p><blockquote><p>经过散列计算后，键值对会随机地分布于数组中，不能保持其插入顺序。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-3 树</title>
      <link href="//Algorithm/2-3%20%E6%A0%91/"/>
      <url>//Algorithm/2-3%20%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>2-3 树是一种平衡二叉树，具有自动平衡能力</p><p>2-3 树是一种拥有 2 种不同节点的树，称为 2-节点 和 3-节点</p><ol><li>2-节点，拥有<strong>一个键值</strong>和<strong>两个链接</strong>（左子树和右子树），实际上就是普通的二叉搜索树节点</li><li>3-节点，拥有<strong>两个键值</strong>和<strong>三个链接</strong>，左子结点比最小的键值小，右子结点比最大的键值大，中子节点介于两者之间</li></ol><p><img alt="2-3 Tree" data-src="https://algs4.cs.princeton.edu/33balanced/images/23tree-anatomy.png"></p><a id="more"></a><h2 id="2-搜索"><a class="markdownIt-Anchor" href="#2-搜索"></a> 2. 搜索</h2><p>2-3 树的搜索和 BST 一样，根据比较结果来进入子树进行搜索。</p><h2 id="3-插入"><a class="markdownIt-Anchor" href="#3-插入"></a> 3. 插入</h2><p>2-3 树的插入稍微有些复杂，我们分情况来讨论。</p><h3 id="31-在-2-节点-中插入"><a class="markdownIt-Anchor" href="#31-在-2-节点-中插入"></a> 3.1 在 2-节点 中插入</h3><p>这是最简单的一种情况，只需<strong>将 2-节点 变为 3-节点</strong>即可。</p><p><img alt="Insert 2-node" data-src="https://algs4.cs.princeton.edu/33balanced/images/23tree-insert2.png"></p><h3 id="32-在只有-3-节点的树中插入"><a class="markdownIt-Anchor" href="#32-在只有-3-节点的树中插入"></a> 3.2 在只有 3-节点的树中插入</h3><p>在这种情况下，我们可以构建一个暂时的 4-节点，然后将其<strong>分裂</strong>为<strong>三个 2-节点</strong>。</p><p>这个操作会增加树的高度</p><p><img alt="Insert only 3-node" data-src="https://algs4.cs.princeton.edu/33balanced/images/23tree-insert3a.png"></p><h3 id="33-在父节点为-2-节点-的-23-节点-插入"><a class="markdownIt-Anchor" href="#33-在父节点为-2-节点-的-23-节点-插入"></a> 3.3 在父节点为 2-节点 的 23-节点 插入</h3><p>这种情况就更加复杂了，此时，我们 <strong>将 3-节点 变为临时的 4-节点，然后将其分裂。</strong></p><p>分裂 4-节点 时，将中间节点向上传递到父节点中，将剩下的两个节点作为 2-节点</p><p><img alt="Insert 3-node with the 2-node father" data-src="https://algs4.cs.princeton.edu/33balanced/images/23tree-insert3b.png"></p><h3 id="34-在父节点为-3-节点-的-3-节点-插入"><a class="markdownIt-Anchor" href="#34-在父节点为-3-节点-的-3-节点-插入"></a> 3.4 在父节点为 3-节点 的 3-节点 插入</h3><p>这种情况和上一个稍微有点像，我们只需要将 3-节点 替换为临时的 4-节点，然后<strong>将其分裂</strong>。此时<strong>父节点成为 4-节点</strong>，所以我们<strong>递归地</strong>进行分裂操作，直到到达根节点位置。</p><p><strong>如果根节点仍然是 4-节点，那么我们就将根节点分裂，增加树的高度。</strong></p><p><img alt="Insert into 3-node with 3-node father and reach root" data-src="https://algs4.cs.princeton.edu/33balanced/images/23tree-split.png"></p><h2 id="4-性能"><a class="markdownIt-Anchor" href="#4-性能"></a> 4. 性能</h2><p>2-3 树能保证 2-节点 的完美平衡，在 BST 中，操作时间复杂度和树的高度成对数关系，所以：</p><p>2-3 树能保证任何的相关操作均在对数级别；</p><p>在最坏情况下，当所有的节点都是 2-节点 时，2-3 树的性能是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">log_2N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 级别；</p><p>在最好情况下，当所有的节点都是 3-节点时，2-3 树的性能是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>3</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">log_3N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 级别</p><blockquote><p>在一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个节点的 2-3 树，搜索和插入只需要访问不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">logN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个节点。</p></blockquote><h2 id="5-结论"><a class="markdownIt-Anchor" href="#5-结论"></a> 5. 结论</h2><p>2-3 树能保证树在插入时的<strong>完美 2-节点 平衡</strong>，不会出现 BST 的最坏情况。</p><p>然而，2-3 树十分难以实现，在实际工程中，我们需要对代码尽量小的改动，从而达到性能优化的结果。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左斜红黑树</title>
      <link href="//Algorithm/%E5%B7%A6%E6%96%9C%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>//Algorithm/%E5%B7%A6%E6%96%9C%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>红黑树是 2-3 树的一种简易实现方式，它拥有两种链接，红链接和黑链接。</p><p>黑链接是普通的二叉查找树链接，红链接表示了一个 3-节点</p><p><img alt="Red Black Tree" data-src="https://algs4.cs.princeton.edu/33balanced/images/redblack-encoding.png"></p><p>在这里，我们使用的是<strong>左斜的红黑树</strong>，它满足以下条件：</p><ol><li>红链接永远在左边（向左倾斜）</li><li>一个节点不能同时链接两个红链接</li><li>红黑树是<strong>完美黑链接平衡的</strong></li></ol><p>需要注意的是，如果红黑树满足以上条件，那么其和 2-3 树就是等价的。<br>事实上，如果把红链接画平，那么红黑树就是一个 2-3 树。</p><a id="more"></a><h2 id="2-新的节点定义"><a class="markdownIt-Anchor" href="#2-新的节点定义"></a> 2. 新的节点定义</h2><p>为了表示链接的颜色，我们需要定义一个新的节点，或者说向原有节点增加新的属性——颜色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pravite <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Key key;</span><br><span class="line">    Value val;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">boolean</span> color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这里，我们为原有的节点增加一个布尔值来表示<strong>指向它的链接的颜色</strong>，这样定义能省去一些麻烦，具体在下面的内容中会讨论到。</p></blockquote><h2 id="3-变形"><a class="markdownIt-Anchor" href="#3-变形"></a> 3. 变形</h2><p>当我们往红黑树插入节点时，需要进行一些<strong>变形</strong>来让红黑树满足以上条件，就像我们对 2-3 树插入节点时做的处理一样。</p><h3 id="31-旋转"><a class="markdownIt-Anchor" href="#31-旋转"></a> 3.1 旋转</h3><p>第一个重要的变形是<strong>旋转变形</strong>。<br>当我们在插入节点的时候，不可避免的会破坏红黑树的条件，有时会出现<strong>红色的右链接</strong>，或者<strong>两个连续的红链接</strong>等。<br>对于这些情况，我们需要对红黑树做适当的旋转变换来让它重新满足红黑树的条件。</p><h4 id="311-向左旋转"><a class="markdownIt-Anchor" href="#311-向左旋转"></a> 3.1.1 向左旋转</h4><p><img alt="Rotate Left" data-src="https://algs4.cs.princeton.edu/33balanced/images/redblack-left-rotate.png"></p><blockquote><p>由图可以注意到，所谓的<strong>旋转</strong>主要做了两件事：</p></blockquote><blockquote><ol><li>交换根节点</li><li>将中间子树调换父亲</li></ol></blockquote><blockquote><p>剩下就是转换颜色，修改子树节点数目等。<br>抓住这个根本操作，就不会出错。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node <span class="title">rotateLeft</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    Node x = h.right;</span><br><span class="line">    h.right = x.left;   <span class="comment">// Link the middle</span></span><br><span class="line">    x.left = h;         <span class="comment">// x ship to the root</span></span><br><span class="line">    x.color = h.color;  <span class="comment">// Change color</span></span><br><span class="line">    h.color = RED;      <span class="comment">// Change color</span></span><br><span class="line">    x.N = h.N;          <span class="comment">// Ship amount</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate the amount of left subtree</span></span><br><span class="line">    h.N = <span class="number">1</span> + size(h.left) + size(h.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;           <span class="comment">// Return new root</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，我们采用了和二叉查找树一样的<strong>递归返回引用</strong>的方法，这样有利于重用原有代码和维护树的链接性。</p></blockquote><h4 id="312-向右旋转"><a class="markdownIt-Anchor" href="#312-向右旋转"></a> 3.1.2 向右旋转</h4><p>这个方法和向左旋转大同小异，核心的思想就是转换根节点和中间子树。</p><p>关于必要性：有些时候遇到复杂的红链接情况，就首先要将连接向右旋转，随后在进行其他变形操作。</p><p>虽然红黑树条件中不允许红色右链接的存在使得此方法显得无意义，但是此方法的用意在于<strong>构建一个便于处理的中间状态</strong>。</p><p><img alt="Rotate Right" data-src="https://algs4.cs.princeton.edu/33balanced/images/redblack-right-rotate.png"></p><h3 id="32-颜色转换"><a class="markdownIt-Anchor" href="#32-颜色转换"></a> 3.2 颜色转换</h3><p>当我们在进行旋转的过程中，很可能会遇到<strong>两个子节点的链接都是红色</strong>的情况。</p><p>由于红链接代表了 3-节点，显然 2 个红链接就代表了一个 4-节点，在 2-3 树插入中，我们需要将临时的 4-节点 <strong>分裂</strong>，在红黑树中就是第二种变形——颜色转换。</p><p>步骤如下：</p><ol><li>将两个红链接变成黑链接</li><li>将父节点的链接颜色变为<strong>红色</strong></li></ol><p><img alt="Flip Colors" data-src="https://algs4.cs.princeton.edu/33balanced/images/color-flip.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filpColors</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    h.color = RED;</span><br><span class="line">    h.left.color = BLACK;</span><br><span class="line">    h.right.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这很好地体现了 4-节点 的分裂过程。<br>首先，我们将红链接变为黑色，事实上增加了两个新节点，也就是将 4-节点 <strong>分裂了</strong><br>其次，将父节点的链接变为<strong>红色</strong>，此时父节点就会变为上层 3-节点 的一部分，也满足了在分裂过程中，<strong>将中间节点向上传递</strong>的思想。</p></blockquote><blockquote><p>假如父节点是根节点时，由于<strong>没有任何链接指向根节点，所以根节点的颜色变得无关紧要了</strong><br>这也是为什么我们在定义新节点的时候要将其颜色定义为<strong>指向其链接的颜色</strong>的原因</p></blockquote><h2 id="4-插入"><a class="markdownIt-Anchor" href="#4-插入"></a> 4. 插入</h2><p>最后，我们终于进入了真正的插入环节，根据 2-3 树的插入思想，红黑树的插入步骤如下：</p><ol><li><p>新节点的颜色是<strong>红色的</strong></p><blockquote><p>由于 2-3 树在插入之后一定会形成至少一个 3-节点（有时还会有临时的 4-节点）</p></blockquote></li><li><p>如果右子结点是红色，左子结点是黑色，那么向左旋转</p><blockquote><p>右子结点为红色，左子结点为黑色，说明红黑树中存在红色的右链接，将其向左旋转</p></blockquote></li><li><p>如果左子结点和它的左子结点都是红色的，那么将当前节点向右旋转</p><blockquote><p>这种情况说明红黑树中<strong>存在两个连续的红色链接</strong>，说明存在一个内部的 4-节点，此时我们<strong>将其向右旋转</strong>，变为可以进行颜色转换的状态，随后通过颜色转换来将 4-节点 分裂</p></blockquote></li><li><p>如果左子结点和右子结点都是<strong>红色的</strong>，那么进行<strong>颜色转换</strong></p><blockquote><p>此时说明存在 4-节点，通过颜色转换将其分裂</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">    root = put(root, key, val);</span><br><span class="line">    root.color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h, Key key, Value val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>, RED);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入位置的搜寻过程</span></span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(h.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        h.left = put(h.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">        h.right = put(h.right, key, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        h.val = val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转和颜色转换</span></span><br><span class="line">    <span class="comment">// 注意以下顺序不可改变</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left))</span><br><span class="line">        h = rotateLeft(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</span><br><span class="line">        h = rotateRight(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</span><br><span class="line">        flipColors(h);</span><br><span class="line"></span><br><span class="line">    h.N = size(h.left) + size(h.right) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，有可能存在<strong>需要多次变换</strong>的情况，所以上述检测需要<strong>依次进行一遍</strong></p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gy1fcy5n5gp3vj30ia0ec3ze.jpg"></p><p>比如<strong>折线式的红链接（红色的左链接 + 红色的右链接）</strong>，此时就需要先将右链接向左旋转，变为<strong>连续的红链接</strong>，再将上面的链接进行右旋转，变为<strong>两个红色的子链接</strong>，随后进行颜色转换。</p><p>这样做的原因在于，我们可以按照图示那样， <strong>逐步减少需要讨论的情况</strong>，从而节省代码</p><p>同时，为了能让父节点也能进行正确的变形，<strong>变形操作要放置在递归方法之后</strong>，也就是修改值之后再进行变形操作。</p><h2 id="5-删除"><a class="markdownIt-Anchor" href="#5-删除"></a> 5. 删除</h2><p>删除通常来说是符号表实现的一个比较难的部分。</p><p>对于红黑树来说， <strong>我们不能直接删除一个黑节点</strong>，这样会导致黑节点出现不平衡。</p><p>一般的红黑树实现中，通常是对红黑树做一个 BST 的删除操作，随后再进行恢复，不过这样在实践中会导致代码过于冗长。</p><p>在左斜红黑树中，我们以 <strong>删除一个红节点</strong> 作为目标；</p><p>在删除完成后，我们通过递归向上对链接进行修复。</p><h3 id="51-删除最大最小元素"><a class="markdownIt-Anchor" href="#51-删除最大最小元素"></a> 5.1 删除最大最小元素</h3><p>为了能够让我们所删除的元素成为红节点，当出现连续两个子节点都是黑的时，我们就必须通过颜色变换将红链接向下传递；</p><p>否则红链接的特性就会断绝</p><p>但是，这样有可能导致<strong>两个连续的红链接</strong>，如下图所示；</p><p><code>b</code> 节点并不在我们的递归路线中，我们无法对这种非法的 4-节点进行修复；</p><p>所以我们要对这种情况进行处理。</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gy1fcy60inmvwj30hs0nijsu.jpg"></p><p>可以看到，我们首先将 <code>a</code> 节点进行颜色反转，从而将 <code>c</code> 染红；</p><p>但是此时，由于 <code>b</code> 也是红节点，所以造成了两个连续的红链接；</p><p>所以我们通过先将 <code>c</code> 向右旋转，再将 <code>a</code> 向左旋转，将其变为平衡态；</p><p>再通过颜色反转避免了连续的红链接出现。</p><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">moveRedLeft</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//红链接向下传递</span></span><br><span class="line">    colorFlip(h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出现红色后继</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right.left)) &#123;</span><br><span class="line">        h.right = rotateRight(h.right);</span><br><span class="line">        h = rotateLeft(h);</span><br><span class="line">        colorFlip(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的删除最小元素的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果根节点的两个子节点都是黑色的，那么将根节点设为红</span></span><br><span class="line">    <span class="comment">// 以求能够有红链接属性向下传递</span></span><br><span class="line">    <span class="keyword">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</span><br><span class="line">        root.color = RED;</span><br><span class="line"></span><br><span class="line">    root = deleteMin(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归结束，将根节点恢复颜色</span></span><br><span class="line">    <span class="keyword">if</span> (!isEmpty())</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h.left == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果连续两个子节点都是黑链接，那么将红链接性质传递</span></span><br><span class="line">    <span class="keyword">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</span><br><span class="line">        h = moveRedLeft(h);</span><br><span class="line"></span><br><span class="line">    h.left = deleteMin(h.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归向上修复链接性质</span></span><br><span class="line">    <span class="keyword">return</span> balance(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上就是插入时使用的性质修复</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">balance</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right))</span><br><span class="line">        h = rotateLeft(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))</span><br><span class="line">        h = rotateRight(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))</span><br><span class="line">        flipColors(h);</span><br><span class="line"></span><br><span class="line">    h.size = size(h.left) + size(h.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，在删除最大元素和删除通常元素的时候，我们也会出现由于红链接向下传递引起的连续红链接问题，如图所示：</p><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79gy1fcy81e0pw2j30i30dbq3f.jpg"></p><p>其中 <code>d</code> 不处在我们的递归路线上，所以就必须进行处理。</p><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">moveRedRight</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 红链接向下传递</span></span><br><span class="line">    flipColors(h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出现连续左斜红色</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left.left)) &#123;</span><br><span class="line">        h = rotateRight(h);</span><br><span class="line">        flipColors(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保证有红链接存在</span></span><br><span class="line">    <span class="keyword">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</span><br><span class="line">        root.color = RED;</span><br><span class="line"></span><br><span class="line">    root = deleteMax(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复根节点的黑链接</span></span><br><span class="line">    <span class="keyword">if</span> (!isEmpty())</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">deleteMax</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于是左斜红黑树，所以需要将左边的红链接右转</span></span><br><span class="line">    <span class="comment">// 以能够向下传递</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left))</span><br><span class="line">        h = rotateRight(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h.right == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有连续的红链接，那么就将红链接向下传递</span></span><br><span class="line">    <span class="keyword">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</span><br><span class="line">        h = moveRedRight(h);</span><br><span class="line"></span><br><span class="line">    h.right = deleteMax(h.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> balance(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-通常节点的删除"><a class="markdownIt-Anchor" href="#52-通常节点的删除"></a> 5.2 通常节点的删除</h3><p>对于通常内部节点的删除，由于红黑树的特殊特性，我们直接使用 BST 的删除方法需要考虑的问题颇多；</p><p>但除此之外，我们可以使用一个巧妙的方法：</p><ol><li>将节点设置为其后继节点</li><li>将其后继节点删除</li></ol><p>这样既符合 BST 删除原理，同时我们可以重用现有的代码；</p><p>因为一个节点的后记节点，就是 <strong>其右子树的最小节点</strong>(<code>min(h.right)</code>)；</p><p>因为我们已经实现了 <code>deleteMin()</code> 方法；</p><p>所以只需要简单的将节点交换，同时将后继删除即可。</p><p>完整的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span>  IllegalArgumentException(<span class="string">"argument to delete() is null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!contains(key)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保证红链接向下传递</span></span><br><span class="line">    <span class="keyword">if</span> (!isRed(root.left) &amp;&amp; !isRed(root.right))</span><br><span class="line">        root.color = RED;</span><br><span class="line"></span><br><span class="line">    root = delete(root, key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归结束，将根节点恢复</span></span><br><span class="line">    <span class="keyword">if</span> (!isEmpty())</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node h, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key.compareTo(h.key) &lt; <span class="number">0</span>)  &#123;    <span class="comment">// 在左子树</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有连续的红链接，则将红链接向下传递</span></span><br><span class="line">        <span class="keyword">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left))</span><br><span class="line">            h = moveRedLeft(h);</span><br><span class="line"></span><br><span class="line">        h.left = delete(h.left, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;  <span class="comment">// 在右子树或者命中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左斜红黑树</span></span><br><span class="line">        <span class="comment">// 将左边的红链接向右转，以向下传递</span></span><br><span class="line">        <span class="keyword">if</span> (isRed(h.left))</span><br><span class="line">            h = rotateRight(h);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 到达最大节点</span></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo(h.key) == <span class="number">0</span> &amp;&amp; (h.right == <span class="keyword">null</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有连续的红链接，将红链接向下传递</span></span><br><span class="line">        <span class="keyword">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left))</span><br><span class="line">            h = moveRedRight(h);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部节点</span></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo(h.key) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 后继</span></span><br><span class="line">            Node x = min(h.right);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将节点交换为后继</span></span><br><span class="line">            h.key = x.key;</span><br><span class="line">            h.val = x.val;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除后继节点</span></span><br><span class="line">            h.right = deleteMin(h.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h.right = delete(h.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> balance(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉查找树</title>
      <link href="//Algorithm/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
      <url>//Algorithm/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>为了解决线性结构下的二分查找无法支持高效的插入和删除操作的问题，同时提高插入和删除的效率；</p><p>我们采用二叉查找树来进行符号表的实现。</p><p>二叉查找树是一种<strong>树</strong>，它满足：</p><ol><li>每个节点都拥有一个 <code>Comparable</code> 键</li><li>每个节点都<strong>大于它的左子节点，小于它的右子节点</strong></li></ol><p><img alt="Binary Search Tree" data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/300px-Binary_search_tree.svg.png"></p><a id="more"></a><h2 id="2-数据结构的实现"><a class="markdownIt-Anchor" href="#2-数据结构的实现"></a> 2. 数据结构的实现</h2><p>我们使用<strong>链式结构</strong>来实现这个树。一个节点包含了：</p><ol><li>左子结点的链接</li><li>右子结点的链接</li><li>以这个节点为根节点的树的节点总数</li><li>节点的键和值</li></ol><table style="width:25em"><th style="text-align:center" colspan="5">The Node of Binary Search Tree</th><tr><td style="text-align:center">Node leftChild</td><td style="text-align:center">Key key</td><td style="text-align:center">Value val</td><td style="text-align:center">int N</td><td style="text-align:center">Node rightChild</td></tr></table><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The inner class of Node</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key key;</span><br><span class="line">    <span class="keyword">private</span> Value val;</span><br><span class="line">    <span class="keyword">private</span> Node left, right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以该节点为根的子树的节点个数，包括根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.N = N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-api-实现"><a class="markdownIt-Anchor" href="#3-api-实现"></a> 3. API 实现</h2><p>这一节主要介绍数据的形式和相应的方法操作。这些方法都是基于二分查找发展而来的</p><p>它们是：</p><ol><li><code>get()</code>, <code>put()</code></li><li><code>min()</code>, <code>max()</code>, <code>floor()</code>, <code>ceiling()</code></li><li><code>delete()</code>, <code>deleteMin()</code>, <code>deleteMax()</code></li></ol><h3 id="31-搜索"><a class="markdownIt-Anchor" href="#31-搜索"></a> 3.1 搜索</h3><p>下面是 <code>get()</code> 方法的基本实现思路</p><p>使用二叉搜索树来搜索数据与二分查找十分相像。</p><p>首先从根节点开始，做以下操作：</p><ol><li>如果根节点和所给的键值相等，那么命中</li><li>如果所给的键值比根节点小，那么就在其<strong>左子树</strong>搜索</li><li>如果所给的键值比根节点大，那么就在其<strong>右子树</strong>搜索</li><li>假如最终找到了 <code>null</code>，那么说明所给键值不在符号表中，返回 <code>null</code></li></ol><p><img alt="Successful Search &amp; Unsuccessful Search" data-src="https://algs4.cs.princeton.edu/32bst/images/bst-search.png"></p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> get(x.left, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cmp &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> get(x.right, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里使用了<strong>递归</strong>的方法来深入子树中进行搜索。关于递归在下面的 <code>put()</code> 方法中也有运用。</p></blockquote><h3 id="32-插入"><a class="markdownIt-Anchor" href="#32-插入"></a> 3.2 插入</h3><p>比起之前基于有序数组的二分查找，二叉搜索树的最大改进之处在于二叉搜索树拥有效率更高的元素插入操作。</p><p>事实上，进行元素的插入是十分简单的，仅仅只是<strong>定位元素位置</strong>，<strong>连接上新元素</strong>，就完成了。</p><p>需要注意的是，二叉搜索树是有序的，你必须事先定位元素的插入位置，也就是说，你不能将元素随便地插入到一些错误的地方。</p><p>对于 <code>put()</code> 方法，主要完成两项工作：</p><ol><li>如果键值已经存在于符号表中，那么就更新它的值</li><li>如果键值不在符号表中，那么就创建一个新的节点存储键值对</li></ol><p>下面是 <code>put()</code> 方法的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">    root = put(root, key, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        x.left = put(x.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">        x.right = put (x.right, key, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x.val = val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新节点个数</span></span><br><span class="line">    x.N = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意到，<code>put()</code> 方法是<strong>递归的</strong>，这也是它的主要工作原理之一。<br>通过这个递归的方法，它才能深入树去进行搜索定位。<br>而最重要的一点是，此方法必须<strong>将我们传入的 Node 引用返回</strong></p></blockquote><blockquote><p>如果我们传进去的是一个正常的节点，也就是一些我们不应该去修改的内部节点，那么此方法必须将这个引用<strong>原样返回</strong>，而且<strong>返回值要让原始的引用去捕获</strong>。<br>这样，我们才能维持树的基本结构，否则树的结构就会被损坏。</p></blockquote><blockquote><p>如果我们传进去的不是一个正常的节点，比如 <code>null</code> 值，那么方法会自动生成一个新的节点，并将其返回，那么原有的链接就能连上一个新的节点。</p></blockquote><blockquote><p>一件非常有趣的事是，不只是公有方法，而且递归的私有方法也出现了同样的代码结构，即 <code>x = put(x, key, val)</code>, 我们将 <code>x</code> 传递进去，然后最终它却返回出来被原有的引用捕获了。</p></blockquote><blockquote><p>这是合理的，因为只有采用这种方式，我们才能保持树的结构然后<strong>更新</strong>链接，而不是毁掉它。</p></blockquote><blockquote><p>事实上，递归方法不返回引用也是可以的，只不过需要在函数内部将链接连上。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    x = <span class="keyword">new</span> Node(key, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="Insertion" data-src="https://algs4.cs.princeton.edu/32bst/images/bst-insert.png"></p><h3 id="33-删除"><a class="markdownIt-Anchor" href="#33-删除"></a> 3.3 删除</h3><p>删除操作是最为复杂的 BST 操作。<br>它拥有很多情况，让我们逐步分析。</p><h4 id="331-删除-最小最大-值"><a class="markdownIt-Anchor" href="#331-删除-最小最大-值"></a> 3.3.1 删除 最小/最大 值</h4><p>这是删除操作中最为简单的情况，我们只需删除最左或者最右边的节点，然后<strong>链接上它剩下的子树即可</strong></p><p>我们使用 <code>delMin()</code> 作为例子，将其反过来做，就变成了 <code>delMax()</code><br>下面是相应的操作：</p><ol><li>一直深入左子树去查找，然后定位到最小的节点</li><li>将它的右子树和它的父节点连接</li><li>由于原有的连接最小节点的链接被其右子树占据，没有指向最小节点的引用，那么它就会被垃圾回收机制回收。</li></ol><p>在这里，我们依旧使用<strong>递归</strong>的方法来深入树进行查找</p><p><img alt="Delete the min node" data-src="https://algs4.cs.princeton.edu/32bst/images/bst-deletemin.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    root = deleteMin(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.left == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> x.right;</span><br><span class="line"></span><br><span class="line">    x.left = deleteMin(x.left);</span><br><span class="line">    x.N = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与 <code>put()</code> 方法一样， <code>delMin()</code> 方法采用了<strong>递归</strong>的方法来深入树进行查找</p></blockquote><blockquote><p>所以，它需要返回我们传入的链接，然后让原有链接捕获它来保持整个树的结构。这也是更新链接的方式。</p></blockquote><blockquote><p>但是最有趣和最重要的一点是，当我们找到最小的节点之后，我们要将其<strong>右子树</strong>返回。</p></blockquote><blockquote><p>由于递归操作，最小节点的父节点的左链接会连接到最小节点的右子树上。<br>这个操作事实上 <strong>FREE</strong> 了最小的节点，而且保持了结构的完整。</p></blockquote><blockquote><p>这个操作在我们删除具有两个子节点的元素的时候也很有用。</p></blockquote><blockquote><p>那么在这里递归方法能不能不返回引用呢？<br>答案是<strong>不行！</strong><br><code>delMin()</code> 方法和 <code>put()</code> 方法不同的一点是<strong>它要回溯到上一个节点</strong>，当需要回溯到上一个节点的时候，我们就需要采用返回一个引用的方法，否则无法回溯。<br><strong>所以建议统一采用返回引用的做法</strong></p></blockquote><h4 id="332-通常节点的删除"><a class="markdownIt-Anchor" href="#332-通常节点的删除"></a> 3.3.2 通常节点的删除</h4><p>我们可以使用类似 <code>delMin()</code> 的方法来删除只具有一个子节点的节点</p><p>但是删除具有两个子节点的节点会更为复杂。</p><p>这种情况下需要解决的最重要的问题是，我们需要找到一个节点来<strong>替代其位置</strong>，否则链接将会损坏。</p><p>为了解决这个问题，我们采用它的<strong>后继</strong>来替代它。</p><p>下面是找到所需删除元素 <code>x</code> 之后的步骤：</p><ol><li><p>将 <code>x</code> 保存一个副本 <code>t</code></p><blockquote><p><code>t</code> 即所需要删除的元素</p></blockquote></li><li><p>让 <code>x</code> 指向其后继 <code>min(x.right)</code></p><blockquote><p>后继即比 <code>x</code> 大的下一个节点，也就是<strong>其右子树中最小的节点</strong><br>此时 <code>x</code> 已经指向后继。</p></blockquote></li><li><p>让 <code>x.right</code> 指向 <code>delMin(t.right)</code></p><blockquote><p>这一步较为关键和难以理解。<br><code>delMin(t.right)</code> 主要做了如下几件事：</p></blockquote><ol><li><p>将后继从下层的链接<strong>释放出来</strong></p><blockquote><p><code>t</code> 是原有 <code>x</code> 的副本，所以 <code>delMin(t.right)</code> 最后会查找到其后继，并释放出来。</p></blockquote></li><li><p>保持后继释放后的链接完整性。</p><blockquote><p><code>delMin()</code> 在查找到最小节点之后会返回右链接，由于调用递归性，右链接会被上层捕获，从而保持了链接性。<br>这里将后继释放出来后，会让其父节点来负责链接上其右子树。</p></blockquote></li><li><p>更新计数，并将传入的链接原样返回</p><blockquote><p>这是最为重要的，首先将计数更新了，保证计数正确性。</p></blockquote><blockquote><p>其次，<code>delMin(x)</code> 在最后退出递归的时候会返回 <code>x</code>。<br>也就是 <code>delMin(t.right)</code> 的返回值是 <code>t.right</code>。<br>那么 <code>x.right = delMin(t.right)</code> 也就相当于 <code>x.right = t.right</code>。</p></blockquote><blockquote><p>正好是使用了 <code>x</code> 来替代 <code>t</code>（注意<strong>此时 <code>x</code> 已经是后继了</strong>）</p></blockquote></li></ol></li><li><p>让 <code>x.left</code> 指向 <code>t.left</code></p></li><li><p>更新计数器，递归方法返回传入值来保持链接完整性</p></li></ol><p><img alt="Normal Delete" data-src="https://algs4.cs.princeton.edu/32bst/images/bst-delete.png"></p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    root = delete(root,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Notice that, we use recursive way</span></span><br><span class="line">    <span class="comment">// to locate the Node which will be delete</span></span><br><span class="line">    <span class="comment">// Also, we need to renew the counter</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Therefore, in this method, we need to</span></span><br><span class="line">    <span class="comment">// retrun the link of the node itself, to</span></span><br><span class="line">    <span class="comment">// miantain the connectivity</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if not hit,</span></span><br><span class="line">    <span class="comment">// deep into subtree and continue search</span></span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = delete (x.left, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = delete(x.right, key);</span><br><span class="line">    <span class="keyword">else</span> &#123;  <span class="comment">// hit</span></span><br><span class="line">        <span class="comment">// The deletion of one or none child</span></span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Two child</span></span><br><span class="line">        Node t = x;</span><br><span class="line">        x = min(t.right);</span><br><span class="line">        <span class="comment">// refer to the special notice</span></span><br><span class="line">        x.right = deleteMin(t.right);</span><br><span class="line">        x.left = t.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// renew counter</span></span><br><span class="line">    x.N = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;   <span class="comment">// return itself to maintain the conectivity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-其他的有序方法"><a class="markdownIt-Anchor" href="#34-其他的有序方法"></a> 3.4 其他的有序方法</h3><h4 id="341-最小和最大"><a class="markdownIt-Anchor" href="#341-最小和最大"></a> 3.4.1 最小和最大</h4><p>找到最小或者最大的元素是很简单的，只需要深入左子树或者右子树就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> min(root).key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">min</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> min(x.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="342-向下取整向上取整"><a class="markdownIt-Anchor" href="#342-向下取整向上取整"></a> 3.4.2 向下取整/向上取整</h4><p>这两个方法的目的是寻找到一个<strong>不大于或者不小于输入节点</strong>的节点</p><p>我们使用向下取整来举个例子：</p><p>这个方法的核心思想就是：</p><ol><li><p>如果所给的键值比根节点小，那么所需的节点就肯定在<strong>左子树中</strong></p></li><li><p>如果所给的键值比根节点大，那么所需的节点<strong>可能在右子树中</strong></p><blockquote><p>也就是说，如果我们在右子树中找不到所需节点，那么<strong>根节点就是所需节点</strong></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    Node x = floor(root, key);</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> x.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor(x.left, key);</span><br><span class="line">    Node t = floor(x.right, key);</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="343-选择和排序"><a class="markdownIt-Anchor" href="#343-选择和排序"></a> 3.4.3 选择和排序</h4><p>这两个方法是关于节点在树中的排位问题的。</p><p>这也是为什么我们需要维护一个子树的节点总数的原因。</p><p><code>select()</code> 和 <code>rank()</code> 是一对互逆方法，一个给排名，返回键值，另一个给键值，返回排名</p><p>下面用 <code>rank()</code> 方法举个例子，此方法的步骤是：</p><ol><li><p>如果键值和根节点相等，那么根节点的<strong>左子树的总数</strong>就是所给节点的排名</p></li><li><p>如果所给的键值比根节点小，那么就在左子树中寻找</p></li><li><p>如果所给的键值比根节点大，那么在右子树中寻找，此时，所给节点的排名为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>a</mi><mi>n</mi><mi>k</mi><mo>=</mo><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mtext> </mtext><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">)</mo><mo>+</mo><mi>R</mi><mi>a</mi><mi>n</mi><mi>k</mi><mo stretchy="false">(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mtext> </mtext><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">Rank = Size(left\ subtree) + Rank(right\ subtree) + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:.04398em">z</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></span></p><blockquote><p>左子树中的节点都比根节点小，既然所给节点都比根节点大，那么理应比左子树的节点都要大。所以排名还要加上左子树中的节点个数。其中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 表示的是根节点本身。</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> select(root, k).key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">select</span><span class="params">(Nodex, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> t = size(x.left);</span><br><span class="line">    <span class="keyword">if</span> (t &gt;k) <span class="keyword">return</span> select(x.left, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; k) <span class="keyword">return</span> select(x.right,k - t - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rank(key, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key, Node x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="keyword">null</span>) <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> rank(key, x.left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> + size(x.left) + rank(key, x.right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> size(x.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由方法的步骤可以看出，这两个方法都具有浓重的递归特质，使用递归类型的方法会简便得多</p></blockquote><h4 id="344-范围"><a class="markdownIt-Anchor" href="#344-范围"></a> 3.4.4 范围</h4><p><code>keys()</code> 方法的主要算法思想就是要返回在一个特定范围内的所有键值</p><p>我们使用<strong>队列</strong>来保存这些键值</p><ol><li><p>如果根节点比范围小，那么找右子树</p></li><li><p>如果根节点比范围大，那么找左子树</p></li><li><p>如果根节点在范围内，将其入列，<strong>然后分别找左子树和右子树</strong></p><blockquote><p>这么做的目的是，如果一个节点在范围内，那么它的左子树和右子树<strong>也有可能在范围内</strong></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Iterable &lt;Key&gt; keys(Key lo, Key hi) &#123;</span><br><span class="line">    Queue&lt;Key&gt; queue = <span class="keyword">new</span> Queue&lt;Key&gt;();</span><br><span class="line">    keys(root, queue, lo, hi);</span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> comlo = lo.compareTo(x.key);</span><br><span class="line">    <span class="keyword">int</span> cmphi = hi.compareTo(x.key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Notice that there is no *eles*,</span></span><br><span class="line">    <span class="comment">// that's because we need to traversal the subtree</span></span><br><span class="line">    <span class="keyword">if</span> (cmplo &lt; <span class="number">0</span>) keys(x.left, queue, lo, hi);</span><br><span class="line">    <span class="keyword">if</span> (cmplo &lt;= <span class="number">0</span> &amp;&amp; cmphi &gt;= <span class="number">0</span>) queue.enqueue(x.key);     <span class="comment">// Within range</span></span><br><span class="line">    <span class="keyword">if</span> (cmphi &gt; <span class="number">0</span>) keys(x.right, queue, lo, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-性能"><a class="markdownIt-Anchor" href="#4-性能"></a> 4. 性能</h2><p>BST 的性能是<strong>依赖于输入模型的</strong>。</p><p>最好的情况是 BST 完美平衡，也就是说所有叶节点到根节点的距离是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mi>l</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\sim lgN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></p><p>最坏的情况是 BST 中的每一个节点都在<strong>同一侧</strong>，此时搜寻效率将会减少到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span></p><p><img alt="Best Case" data-src="https://algs4.cs.princeton.edu/32bst/images/bst-best.png"> <img alt="Typical Case" data-src="https://algs4.cs.princeton.edu/32bst/images/bst-typical.png"> <img alt="Worst Case" data-src="https://algs4.cs.princeton.edu/32bst/images/bst-worst.png"></p><p>在平均情况下，一个有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个随机键值的二叉树中，插入和未命中搜索需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mn>2</mn><mi>l</mi><mi>n</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\sim 2lnN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> (大约是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.39</mn><mi>l</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">1.39lgN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">3</span><span class="mord">9</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>) 次的比较;</p><p>对于删除操作，在平均情况下，则需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-.11333499999999996em"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.9266650000000001em"><span class="svg-align" style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord" style="padding-left:.833em"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span><span style="top:-2.886665em"><span class="pstrut" style="height:3em"></span><span class="hide-tail" style="min-width:.853em;height:1.08em"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.11333499999999996em"><span></span></span></span></span></span></span></span></span> 次比较</p><h2 id="5-结论"><a class="markdownIt-Anchor" href="#5-结论"></a> 5. 结论</h2><p>使用 BST 可以很好地解决数组插入和删除引起的性能问题。</p><p>事实上，在 BST 中进行搜索需要大约 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>39</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">39\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.80556em;vertical-align:-.05556em"></span><span class="mord">3</span><span class="mord">9</span><span class="mord">%</span></span></span></span> 的额外性能，但是由于插入的开销被减少到了<strong>对数级别</strong>，所以这一额外的花销是值得的。</p><p>但是，BST 没有时间复杂度上的<strong>性能保证</strong>，在最坏情形下，它搜寻一个键仍然需要<strong>线性级别</strong>的时间</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先队列和堆排序</title>
      <link href="//Algorithm/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>//Algorithm/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>优先队列是一种类似队列的数据结构，但是支持<strong>删除最大或最小元素</strong>以及<strong>插入元素</strong></p><p>最重要的一点是，优先队列能存储很大的数据量，或者当你的内存很小的时候进行一些队列的操作</p><a id="more"></a><h2 id="2-基本实现"><a class="markdownIt-Anchor" href="#2-基本实现"></a> 2. 基本实现</h2><ol><li><p>数组实现（无序）</p><blockquote><p>当次序不重要的时候，我们可以重用<strong>栈</strong>这一数据结构。<br><code>insert()</code> 方法就类似<strong>栈</strong>的 <code>push()</code> 方法<br>对于 <code>deleteMax()</code> 方法，我们可以采用将<strong>最大的元素交换到栈顶</strong>的方法实现</p></blockquote></li><li><p>数组实现（有序）</p><blockquote><p>当需要次序的时候，我们使用数组用于保持元素的次序<br>为了维持这一次序，我们可以在插入的是偶将大的元素往右移动，这样，整个数组就会都是有序的。<br>这时，我们只需要简单的调用 <code>pop()</code> 方法即可实现删除最大元素</p></blockquote></li><li><p>链表实现</p><blockquote><p>由于上面使用了<strong>栈</strong>和<strong>队列</strong>这几种数据结构，我们可以使用更高效的链表来实现他们。<br>具体的算法思想和数组实现一致。</p></blockquote></li></ol><h2 id="3-二叉堆实现"><a class="markdownIt-Anchor" href="#3-二叉堆实现"></a> 3. 二叉堆实现</h2><h3 id="31-二叉堆的定义"><a class="markdownIt-Anchor" href="#31-二叉堆的定义"></a> 3.1 二叉堆的定义</h3><p>二叉堆是一个满足<strong>堆有序</strong>的<strong>完全二叉树</strong></p><blockquote><p>堆有序：当所有的二叉树节点都<strong>大于或等于</strong>他们的<strong>两个子节点</strong>时，称二叉树堆有序</p></blockquote><blockquote><p>推论：二叉堆的根节点比任何节点都要大</p></blockquote><h3 id="32-二叉堆的表示法"><a class="markdownIt-Anchor" href="#32-二叉堆的表示法"></a> 3.2 二叉堆的表示法</h3><p>因为二叉堆是一个<strong>完全二叉树</strong>；</p><p>所以，我们可以轻松的使用数组来表示一个二叉堆。</p><p>即，当前节点为 <code>k</code>，则左子节点为 <code>2k</code>，右子节点为 <code>2k + 1</code></p><blockquote><p>此时，由于除法只会返回商，所以一个节点无论它是左子节点还是右子节点，其父节点都是 <code>k / 2</code>。</p></blockquote><p><strong>需要注意的是，为了与参数上的索引对应，我们不使用 <code>a[0]</code></strong></p><h3 id="33-原理"><a class="markdownIt-Anchor" href="#33-原理"></a> 3.3 原理</h3><p>主要的原理是<strong>如何去重新排序一个二叉堆</strong><br>当我们进行比较和交换的时候，二叉堆的顺序将会被打破，所以我们需要重建二叉堆(<strong>reheapifying</strong>)</p><p>主要的算法思想是<strong>上浮</strong>和<strong>下沉</strong><br>当一个节点获得了更高的优先级的时候，我们将其上浮，通常是由于我们在二叉堆的底部插入了一个新节点导致的。</p><p>当一个节点优先级降低时，我们将它下沉，通常是我们用一个低优先级的节点替换了根节点的时候（其实是进行了删除操作）</p><ol><li><p>上浮</p><blockquote><p>当一个节点比他的父节点大的时，我们将它和它的父亲交换以恢复二叉堆的次序<br><strong>这是一个递归的操作，如果上浮后还存在二叉堆次序损坏，那么就继续上浮</strong></p></blockquote></li><li><p>下沉</p><blockquote><p>当一个节点比它的<strong>两个子节点</strong>都要小的时候，我们将它与<strong>较大的子节点交换</strong>以恢复二叉堆的次序 <strong>如果下沉之后仍存在此情况，继续下沉</strong></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>, k)) &#123;</span><br><span class="line">        exch(k, k / <span class="number">2</span>);</span><br><span class="line">        k = k / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k * <span class="number">2</span> &lt; N) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = k * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (less(j, j + <span class="number">1</span>)) &#123;</span><br><span class="line">            j ++:</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!less(k, j)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        exch(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-实现"><a class="markdownIt-Anchor" href="#34-实现"></a> 3.4 实现</h3><ol><li><p>插入元素</p><blockquote><p>我们将一个新元素插入到数组尾部，增大堆的大小，然后将元素<strong>上浮</strong></p></blockquote></li><li><p>删除最大元素</p><blockquote><p>我们将位于<strong>数组尾部的元素</strong>和<strong>根节点</strong>交换，然后<strong>删除原来的根节点</strong>，将新的根节点<strong>下沉</strong></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key v)</span> </span>&#123;</span><br><span class="line">    pq[++ N] = v;</span><br><span class="line">    swim(N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Key max = pq[<span class="number">1</span>];</span><br><span class="line">    exch(<span class="number">1</span>, N--);</span><br><span class="line">    pq[N + <span class="number">1</span>] = <span class="keyword">null</span>;   <span class="comment">// Prevent the object free</span></span><br><span class="line">    sink(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-索引优先队列"><a class="markdownIt-Anchor" href="#4-索引优先队列"></a> 4. 索引优先队列</h2><p>索引优先队列是一种带了索引的优先队列；</p><p>这里的索引指的是，队列中的元素 <strong>在队列的位置。</strong></p><p>至于优先队列为何需要索引，实际上是为了方便修改队列里的数据。</p><p>有了这个索引，我们就可以处理一些大型的输入数据（甚至可能都没办法一次性读入内存的数据），或者在一些小内存机器上工作</p><p>主要的改变有：</p><ol><li><p>我们将元素和它的索引一起插入</p></li><li><p>我们删除最大元素的时候，返回它的索引</p></li></ol><h3 id="41-实现"><a class="markdownIt-Anchor" href="#41-实现"></a> 4.1 实现</h3><p>使用 3 个数组：</p><ol><li><p><code>pq[]</code></p><blockquote><p>优先队列的堆，下标是堆的位置，值是 <strong>索引</strong></p></blockquote></li><li><p><code>qp[]</code></p><blockquote><p>索引数组，是 <code>pq[]</code> 的反转，值是堆的位置</p></blockquote></li><li><p><code>keys[]</code></p><blockquote><p>对象数组，下标是索引，值是对象本身</p></blockquote></li></ol><h3 id="42-使用优先队列的多项归并"><a class="markdownIt-Anchor" href="#42-使用优先队列的多项归并"></a> 4.2 使用优先队列的多项归并</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiway</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(In[] streams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = streams.lenth;</span><br><span class="line">        <span class="comment">// Notice tha the N is the number of the STREAM,</span></span><br><span class="line">        <span class="comment">// not the input strings.</span></span><br><span class="line">        IndexMinPQ&lt;String&gt; pq = <span class="keyword">new</span> IndexMinPQ&lt;String&gt; (N);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!streams[i].isEmpty()) &#123;  <span class="comment">// That is a Stream</span></span><br><span class="line">                <span class="comment">// Insert the stream</span></span><br><span class="line">                pq.insert(i, streams[i].readString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Output the Min element</span></span><br><span class="line">            StdOut.println(pq.min());</span><br><span class="line">            <span class="keyword">int</span> i = pq.delMin();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Keep reading next String</span></span><br><span class="line">            <span class="keyword">if</span> (!streams[i].isEmpty()) &#123;</span><br><span class="line">                pq.insert(i, streams[i].readString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = args.lenth;</span><br><span class="line">        In[] streams = <span class="keyword">new</span> In[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            streams[i] = <span class="keyword">new</span> In(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        merge(streams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-堆排序"><a class="markdownIt-Anchor" href="#5-堆排序"></a> 5. 堆排序</h2><p>堆排序是优先队列的一种应用；<br>它将元素插入到优先队列中，然后通过删除最大元素或者删除最小元素来达到排序的目的</p><p>这个算法由于使用了优先队列，它能处理一些特别大型的数据，或者在一些小内存机器上使用。</p><p>它包含了两个步骤，<strong>建立二叉堆</strong>和<strong>销毁二叉堆</strong></p><h3 id="51-实现原理"><a class="markdownIt-Anchor" href="#51-实现原理"></a> 5.1 实现原理</h3><h4 id="511-建立二叉堆"><a class="markdownIt-Anchor" href="#511-建立二叉堆"></a> 5.1.1 建立二叉堆</h4><p>需要注意的是，<strong>数组其实就是一个二叉堆！</strong><br>所以我们只需要对数组进行<strong>二叉堆重建(reheapifying)</strong>，那么建立的步骤就完成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = N / <span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">    sink(pq, k, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="512-销毁二叉堆排序"><a class="markdownIt-Anchor" href="#512-销毁二叉堆排序"></a> 5.1.2 销毁二叉堆（排序）</h4><p>二叉堆可以帮助我们获取最大或者最小的元素，所以我们只需要将其删除出二叉堆，然后插入到一个新数组就可以了。</p><p>但是要注意的是，我们应该如何去删除最大的元素呢？<br>实际上，我们不需要真正的“删除”这个元素（即释放它的内存）；<br>我们只是在进行排序，所以我们只需要将它<strong>交换</strong>，或者说将它放到正确的位置，即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (N&gt;<span class="number">1</span>) &#123;</span><br><span class="line">    exch(a,<span class="number">1</span>, N--);</span><br><span class="line">    sink(a, <span class="number">1</span>, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-实现"><a class="markdownIt-Anchor" href="#52-实现"></a> 5.2 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.lenth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Build the heap</span></span><br><span class="line"><span class="comment">    * We only need to traversal the nodes</span></span><br><span class="line"><span class="comment">    * who contains children.</span></span><br><span class="line"><span class="comment">    * As the heap's theory, we convince that the k = N/2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">        sink(a, k, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destory the heap</span></span><br><span class="line">    <span class="keyword">while</span> (N&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        exch(a,<span class="number">1</span>, N--);</span><br><span class="line">        sink(a, <span class="number">1</span>, N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果需要升序，应该使用删除最大元素的二叉堆；</p><p>同理，如果需要降序，应该使用删除最小元素的二叉堆；</p><p>因为交换使得删除的元素被交换到了数组尾部。</p><p>需要注意的是，我们这里使用的是 1-base 的堆，而普通的数组是 0-base 的；</p><p>所以需要在索引计算上小心谨慎。</p><h3 id="53-性能"><a class="markdownIt-Anchor" href="#53-性能"></a> 5.3 性能</h3><p>进行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个数据元素的排序，堆排序仅仅需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>N</mi><mi>l</mi><mi>g</mi><mi>N</mi><mo>+</mo><mn>2</mn><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(2NlgN + 2N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 次的比较和一半的交换</p><p>虽然它的时间复杂度是线性级别的，但是它需要很少的内存就可以处理很大型的数据。</p><p>同时，堆排序在最坏情况下<strong>可以保证</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 的复杂度，而且是<strong>原地排序</strong>（不需要多余空间）</p><p>尽管如此，堆排序的应用仍然没有快速排序广泛和频繁，主要是因为：</p><ol><li><p>堆排序的内循环比快速排序要复杂</p><blockquote><p>循环技术和各种需要注意的地方较快速排序多</p></blockquote></li><li><p>堆排序<strong>不能有效利用缓存</strong></p><blockquote><p>堆排序载入大数组时，数组的引用会很可能布满整个内存，而快速排序是递归调用，保留着很多局部的引用，所以快速排序在<strong>利用缓存的效率上</strong>比堆排序高。</p></blockquote><blockquote><p>现代机器的缓存命中率一般都会在 95% 以上，所以<strong>有效的利用缓存是很重要的</strong>。</p></blockquote></li><li><p>同时和归并排序相比，堆排序是<strong>不稳定</strong>的，在开发一些要求排序稳定性的程序时，显然应该选择归并排序</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法的应用</title>
      <link href="//Algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>//Algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-多种排序方式"><a class="markdownIt-Anchor" href="#1-多种排序方式"></a> 1. 多种排序方式</h2><p>使用 <code>Comparator</code> 接口，我们可以定义不同的 <code>sort()</code> 方法或者使用不同的键来对数据进行排序。</p><p><code>Comparator</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，此接口是被排序类提供的</strong>，排序方法只需要调用接口的 <code>compare</code>方法即可</p><p>为了使用此接口，我们可以通过重载 <code>sort()</code> 方法来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The original sort() method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* The sort method body */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now we use new sort which comes wit Comparator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] a, Comparator c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* The new sort method body */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Also, we need to changge other</span></span><br><span class="line"><span class="comment">// assistant method to use Comparator</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">less</span><span class="params">(Comparator c, Key v, Key w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Invoke the interface method</span></span><br><span class="line">    <span class="keyword">return</span> c.compare(v, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<strong>被排序类</strong>的实现，可以通过使用内部类的方式来提供 <code>Comparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_NAME = <span class="keyword">new</span> ByName();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_SECTION = <span class="keyword">new</span> BySection();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ByName</span> <span class="keyword">implements</span> <span class="title">Comapator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function">pubic <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// By name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BySection</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// By Section</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-稳定性"><a class="markdownIt-Anchor" href="#2-稳定性"></a> 2. 稳定性</h2><p>稳定性指的是，在排序过程中，算法会保留<strong>具有相同键值</strong>的元素的相对顺序。</p><p>如果能够保留，就说明排序算法是稳定的，如果不能够保留，则不稳定。</p><p>排序算法稳定与否，在于<strong>在排序过程中，是否改变了相同键值元素的位置</strong></p><h2 id="3-排序算法的比较"><a class="markdownIt-Anchor" href="#3-排序算法的比较"></a> 3. 排序算法的比较</h2><table><tr><td rowspan="2" style="text-align:center;vertical-align:middle">Algorithm</td><td rowspan="2" style="text-align:center;vertical-align:middle">Stable?</td><td rowspan="2" style="text-align:center;vertical-align:middle">Inplace?</td><td colspan="2" style="text-align:center">Grow Rate to Sort N Items</td><td rowspan="2" style="text-align:center;vertical-align:middle">Notes</td></tr><tr><td style="text-align:center;vertical-align:middle">Running Time</td><td style="width:6em">Extra Space</td></tr><tr><td style="text-align:center;vertical-align:middle">Selection Sort</td><td style="text-align:center;vertical-align:middle">No</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">$N^2$</td><td style="text-align:center;vertical-align:middle">1</td><td style="text-align:center;vertical-align:middle"></td></tr><tr><td style="text-align:center;vertical-align:middle">Insertion Sort</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">Between $N$ and $N^2$</td><td style="text-align:center;vertical-align:middle">1</td><td style="text-align:center;vertical-align:middle">Base on the input</td></tr><tr><td style="text-align:center;vertical-align:middle">Shell Sort</td><td style="text-align:center;vertical-align:middle">No</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">$N^{6/5}$</td><td style="text-align:center;vertical-align:middle">1</td><td style="text-align:center;vertical-align:middle"></td></tr><tr><td style="text-align:center;vertical-align:middle">Quick Sort</td><td style="text-align:center;vertical-align:middle">No</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">$NlogN$</td><td style="text-align:center;vertical-align:middle">$lgN$</td><td style="text-align:center;vertical-align:middle">The efficiency is guaranteed by the posibility</td></tr><tr><td style="text-align:center;vertical-align:middle">3-way Partitioning<br>Quick Sort</td><td style="text-align:center;vertical-align:middle">No</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">between $N$ and $NlogN$</td><td style="text-align:center;vertical-align:middle">$lgN$</td><td style="text-align:center;vertical-align:middle">The efficiency is guaranteed by the posibility, meanwhile it also depens on the input</td></tr><tr><td style="text-align:center;vertical-align:middle">Merge Sort</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">No</td><td style="text-align:center;vertical-align:middle">$NlogN$</td><td style="text-align:center;vertical-align:middle">$N$</td><td style="text-align:center;vertical-align:middle"></td></tr><tr><td style="text-align:center;vertical-align:middle">Heap Sort</td><td style="text-align:center;vertical-align:middle">No</td><td style="text-align:center;vertical-align:middle">Yes</td><td style="text-align:center;vertical-align:middle">$NlogN$</td><td style="text-align:center;vertical-align:middle">$N$</td><td style="text-align:center;vertical-align:middle"></td></tr></table><h2 id="4-结论"><a class="markdownIt-Anchor" href="#4-结论"></a> 4. 结论</h2><ol><li><p>快速排序是最快的排序算法</p><blockquote><p>快速排序的时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mi>c</mi><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\sim cNlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 级别，同时它的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">c</span></span></span></span> 也比其他排序算法要小</p></blockquote></li><li><p>如果稳定性很重要，而空间并不是很紧张，那么<strong>归并排序</strong>是最好的选择</p></li><li><p>如果空间非常小，那么<strong>堆排序</strong>是一个不错的选择</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>符号表</title>
      <link href="//Algorithm/%E7%AC%A6%E5%8F%B7%E8%A1%A8/"/>
      <url>//Algorithm/%E7%AC%A6%E5%8F%B7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-符号表"><a class="markdownIt-Anchor" href="#1-符号表"></a> 1. 符号表</h2><p>符号表是一个储存键值对的表，同时还有<strong>插入</strong>和删除的功能。</p><a id="more"></a><h3 id="11-符号表的设计"><a class="markdownIt-Anchor" href="#11-符号表的设计"></a> 1.1 符号表的设计</h3><ol><li><p>符号表不允许重复的键</p><blockquote><p>键值对是唯一的，一个键只对应一个值</p></blockquote></li><li><p>符号表不允许空键和空值</p><blockquote><p>这是因为空键会导致 <code>Runtime Exception</code><br>不允许空值可以让我们通过更少的 API 来实现更多的类似插入删除的操作</p></blockquote><blockquote><p>我们可以通过 <code>get()</code> 来测试一个键是否是空键<br>通过 <code>put()</code> 的空值来删除这个键</p></blockquote></li><li><p>只通过 <code>compareTo()</code> 方法来去判断两个键的相等性</p><blockquote><p>如果我们混合使用 <code>equal()</code> 和 <code>compareTo()</code> 方法，那么这将会导致很多不必要的浪费</p></blockquote><blockquote><p>为了避免这种使用不同方法所造成的浪费，我们决定只使用 <code>compareTo()</code> 来去判断相等性</p></blockquote></li></ol><h3 id="12-api"><a class="markdownIt-Anchor" href="#12-api"></a> 1.2 API</h3><p>这里展现了我们应该使用在符号表的 API ，这些 API 主要对键值对进行操作；<br>之后的内容将基于这里给出的 API 来进行。</p><h4 id="121-关键的-api"><a class="markdownIt-Anchor" href="#121-关键的-api"></a> 1.2.1 关键的 API</h4><p>最为关键的符号表 API 是 <code>put()</code> 和 <code>get()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Put the key and value pair into the symbols table.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@parma</span> key The key you want to insert, when it is null, delete the key from table.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@parma</span> value The value you want to insert</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">* Get the value of the specfic key in the table.</span></span></span><br><span class="line"><span class="function"><span class="comment">* @parma key The key you specify</span></span></span><br><span class="line"><span class="function"><span class="comment">* @return The value of the specific key, if the value doesn't exist, return null</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">Value <span class="title">get</span><span class="params">(Key key)</span></span></span><br></pre></td></tr></table></figure><h4 id="122-在有序符号表中的其他方法"><a class="markdownIt-Anchor" href="#122-在有序符号表中的其他方法"></a> 1.2.2 在有序符号表中的其他方法</h4><p>这些 API 是应用于<strong>有序符号表</strong>的<br>这里只展示了一些关键方法，还有一些冗余方法用于更方便的操作，这里不予展示</p><p>API 包括：</p><ol><li><code>min()</code> 和 <code>max()</code></li><li><code>floor()</code> 和 <code>ceiling()</code></li><li><code>rank()</code> 和 <code>select()</code></li><li><code>keys()</code></li></ol><blockquote><p>这里只展示了 <code>rank()</code>, <code>select()</code> 和 <code>keys()</code> 方法，其他的方法比较简单，而且其作用也很容易通过名字进行推断。<br>所以在这里不予显示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rank &amp; Select</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Get the number of the keys which are less than the specific one. Also called the RANK</span></span><br><span class="line"><span class="comment">* <span class="doctag">@parma</span> Key key The specific key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> The number of keys in the table which are less than the specific one.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">* Get the key which is rank k</span></span></span><br><span class="line"><span class="function"><span class="comment">* @parma int k The rank of the key</span></span></span><br><span class="line"><span class="function"><span class="comment">* @return The specific key</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// keys()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">* Get the all keys inside the table.</span></span></span><br><span class="line"><span class="function"><span class="comment">* @return An Iterable Set of keys, such as List or Queue</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">* Get the set of the range of [lo..hi]</span></span></span><br><span class="line"><span class="function"><span class="comment">* @parma Key lo The low range of the keys.</span></span></span><br><span class="line"><span class="function"><span class="comment">* @parma Key hi The high range of the keys.</span></span></span><br><span class="line"><span class="function"><span class="comment">* @return The Iterable Set of the keys.</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span></span></span><br></pre></td></tr></table></figure><h2 id="2-在无序表中的顺序查找"><a class="markdownIt-Anchor" href="#2-在无序表中的顺序查找"></a> 2. 在无序表中的顺序查找</h2><p>当我们实现一个符号表的时候，我们通常使用链表的形式来实现；</p><p>使用这样的一个数据结构时，我们只能以<strong>顺序</strong>的形式进行搜索，仅仅通过在单链接链表中遍历所有的节点</p><h3 id="21-实现"><a class="markdownIt-Anchor" href="#21-实现"></a> 2.1 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequentialSearchST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The linked List Node</span></span><br><span class="line">        Key key;</span><br><span class="line">        Value val;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(Key key, Value val, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// get the specific key, return the corrsponding value</span></span><br><span class="line">        <span class="keyword">for</span>(Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(key.equals(x.key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> x.val;   <span class="comment">// hit</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    <span class="comment">// Not hit</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(key.equals(x.key)) &#123;</span><br><span class="line">                x.val = val;</span><br><span class="line">                <span class="keyword">return</span>;     <span class="comment">// hit</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Not hit, create new node</span></span><br><span class="line">        <span class="comment">// Add  at the beginning</span></span><br><span class="line">        first = <span class="keyword">new</span> Node(key, val, first);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-性能"><a class="markdownIt-Anchor" href="#22-性能"></a> 2.2 性能</h3><p>在一个具有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个节点的符号表中，使用顺序查找方法，在最坏情况下，需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次的比较。</p><p>特别的是，插入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个节点，需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><msup><mi>N</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\sim N^2/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span></span></span></span> 次的比较</p><h3 id="23-结论"><a class="markdownIt-Anchor" href="#23-结论"></a> 2.3 结论</h3><p>我们可以看到，使用链表实现符号表时，它需要使用顺序查找方法，这样子使得查找的效率变得很低下；</p><p>这样子的实现方式，并不能满足我们现今对大数据处理的需求。</p><h2 id="3-在有序符号表中的二分查找"><a class="markdownIt-Anchor" href="#3-在有序符号表中的二分查找"></a> 3. 在有序符号表中的二分查找</h2><p>为了实现更快的查找性能，我们需要转用<strong>数组</strong>来实现符号表；</p><p>对于一个<strong>有序符号表</strong>来说，我们可以使用<strong>二分查找</strong>的方法来进行搜索；<br>后面会看到，使用二分查找将会大大提高我们的搜索效率</p><h3 id="31-实现"><a class="markdownIt-Anchor" href="#31-实现"></a> 3.1 实现</h3><p>我们使用两个平行的数组来分别储存键和值；</p><p>然后我们使用 <code>rank()</code> 方法来帮助我们找到一个特定的键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* These method all base on the rank() method</span></span><br><span class="line"><span class="comment">* Which return the number of the keys which are less than the spcific one</span></span><br><span class="line"><span class="comment">* Or the right position of the specific key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i = rank(key);</span><br><span class="line">    <span class="keyword">if</span> (i&lt; N &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> vals[i];     <span class="comment">// hit</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    <span class="comment">// Not hit</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The specific position of the key</span></span><br><span class="line">    <span class="keyword">int</span> i = rank(key);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; N &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Update: 2017-02-12</span></span><br><span class="line">        vals[i] = val; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Not hit, create new key-value pair</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = N; j &gt; i; j--) &#123;</span><br><span class="line">        <span class="comment">// MOVE THE DATA FORWARD</span></span><br><span class="line">        keys[j] = keys[j - <span class="number">1</span>];</span><br><span class="line">        vals[j] = vals[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    keys[i] = key;</span><br><span class="line">    vals[i] = val;</span><br><span class="line">    N++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于 <code>rank()</code> 方法的一些需要注意的点：<br>这个方法的返回值是<strong>小于这个键的所有键的个数</strong><br>换句话来说就是这个键在<strong>数组中的排名</strong>，也就是它的<strong>位置</strong><br>重要的是，由于 <code>get()</code> 和 <code>put()</code> 方法也使用了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Using the Binary Searching method, due to the ordered talbe.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Notice that, the lo, hi, mid is the</span></span><br><span class="line">    <span class="comment">// POSITION of the array</span></span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = N - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;     <span class="comment">// Use this format to avoid the overflow</span></span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmp &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>二分查找是很简单的，通过在一个<strong>有序的</strong>序列中比较<strong>中间位置</strong>的数据元素，从而逐步缩减查找范围，达到减少比较次数的作用。</p></blockquote><p>需要注意的是：</p><ol><li><p>使用 <code>mid = lo + (hi - lo) / 2;</code> 来避免溢出</p><blockquote><p>为了理解这点，你需要明白，<code>lo</code>, <code>hi</code> 和 <code>mid</code> 只是键值的<strong>位置</strong>，而不是键值的值。</p></blockquote><blockquote><p>我们只需要获取中间元素的<strong>位置</strong>，如果一个数组的元素总数很大，那么使用 <code>hi + lo</code> 就会导致溢出，使得 <code>mid</code> 的结果甚至都不在 <code>[lo...hi]</code> 之间。</p></blockquote><blockquote><p>为了防止溢出，或者说为了保证 <code>mid</code> 的结果落在 <code>[lo...hi]</code> 之间，那么我们就需要使用另一种计算方式；<br>即，通过<strong>步长</strong>的方式来获取中间位置，通过使用 <code>lo + 步长</code> 的方式，可以有效的避免溢出的出现。</p></blockquote><blockquote><p>所以，我们使用 <code>mid = lo + (hi - lo) / 2</code> 来获取中间位置。</p></blockquote></li><li><p>当数据元素小于 5 时，使用顺序查找来降低出错率</p><blockquote><p>顺序查找比二分查找更不容易出错。</p></blockquote><blockquote><p>当数据元素小于 5 的时候，顺序查找和二分查找并没有什么大的性能差异，此时使用顺序查找来降低出错率是可以接受的。</p></blockquote></li></ol><h3 id="32-性能"><a class="markdownIt-Anchor" href="#32-性能"></a> 3.2 性能</h3><p>在一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个键值的符号表中，使用二分查找，需要不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>g</mi><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">lgN + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 次的比较</p><p>但是在同时需要插入和删除的操作的时候，二分查找的效率还是远远不能满足我们的需求</p><p>如果你需要在一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个元素个数组中插入一个元素，你需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mn>2</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">\sim 2N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次的数组访问；</p><p>而且如果你需要插入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个元素到一个空表里，你需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sim N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 次的数组访问。</p><h3 id="33-结论"><a class="markdownIt-Anchor" href="#33-结论"></a> 3.3 结论</h3><p>在有序符号表中使用二分查找，可以将时间复杂度减少到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">logN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 级别。</p><p>对于一个静态的符号表（即不允许插入和删除元素的表），在查找之前将其进行排序是值得的；</p><p>但是这种形式的查找还是不能满足我们对于<strong>快速的查找的同时支持快速的插入和删除操作</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="//Algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>//Algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>快速排序是一种特殊的归并排序，它基于分治策略，<br>将数组分成左和右两部分，然后将他们分别独立排序。</p><p><strong>数组的切分是很关键的</strong></p><p>快速排序和归并排序在原理上的唯一不同就是，</p><p>快速排序的真正比较工作在 <strong>递归之前</strong> 完成，而归并排序在递归之后完成。</p><a id="more"></a><h2 id="2-切分"><a class="markdownIt-Anchor" href="#2-切分"></a> 2. 切分</h2><p>这是快速排序真正做比较的部分，也就是真正起作用的部分。</p><p>切分的目标是找到一个元素：</p><ol><li>它的左边的所有元素都不大于它</li><li>它的右边的所有元素都不小于它</li></ol><h3 id="21-实现流程"><a class="markdownIt-Anchor" href="#21-实现流程"></a> 2.1 实现流程</h3><p>一般来说，我们并不能找到这样的元素，所以我们进行以下的操作：</p><ol><li><p>随机的选择元素</p><blockquote><p>通常来说，选择数组的第一个元素</p></blockquote></li><li><p>从数组的两端同时开始扫描数组</p><blockquote><p><code>i</code>, <code>j</code> 分别指向数组的两端；<br><code>i</code> 自增，直到 <code>i</code> 所指元素 <code>a[i]</code> 不小于切分元素 <code>a[lo]</code>；<br><code>j</code> 自减，直到 <code>j</code> 所指元素 <code>a[j]</code> 不大于切分元素 <code>a[lo]</code></p></blockquote></li><li><p>如果元素不在正确的位置，那么就交换它</p><blockquote><p>上述的 <code>i</code>, <code>j</code> 都停止后，交换 <code>a[i]</code> 和 <code>a[j]</code></p></blockquote></li><li><p>直到这两个指针相遇或者跨越对方，然后将切分元素放到相遇位置。</p><blockquote><p>事实上，此时 <code>j</code> 所指的元素就是不大于切分元素的元素；<br>因此，将切分元素 <code>a[lo]</code> 和 <code>a[j]</code> 交换即可让切分元素放入正确位置</p></blockquote></li></ol><p><img alt="The Partition" data-src="https://algs4.cs.princeton.edu/23quicksort/images/partitioning-overview.png"></p><h3 id="22-实现"><a class="markdownIt-Anchor" href="#22-实现"></a> 2.2 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = hi + <span class="number">1</span>;     <span class="comment">// The scanner</span></span><br><span class="line">    Comparable v = a[lo];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指针 i 的扫描过程</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == hi) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指针 j 的扫描过程</span></span><br><span class="line">        <span class="keyword">while</span> (less(v, a[--j])) &#123;</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 实际上这个 if 是多余的，</span></span><br><span class="line">             <span class="comment">// 因为我们的切分元素就在 lo 的位置，</span></span><br><span class="line">             <span class="comment">// 当 j 位于 lo 的位置时，由于不满足条件，</span></span><br><span class="line">             <span class="comment">// j 就会停止扫描</span></span><br><span class="line">             <span class="keyword">if</span> (j == lo) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两指针相遇，完成扫描过程</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时两指针停止，说明 a[i] 和 a[j] 都不在正确位置</span></span><br><span class="line">        <span class="comment">// 所以将 a[i] 和 a[j] 交换</span></span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扫描完成，将切分元素放入正确位置</span></span><br><span class="line">    exch(a, lo, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-注意事项"><a class="markdownIt-Anchor" href="#23-注意事项"></a> 2.3 注意事项</h3><ol><li><p>切分<strong>在原本的数组</strong>中发生</p><blockquote><p>事实上， 也可以使用一个辅助数组；<br>但是这样就丧失了相对于归并排序的不需要额外空间的优势</p></blockquote></li><li><p>不要越界</p><blockquote><p>注意检查扫描指针和边界的关系</p></blockquote></li><li><p>注意保持随机性</p><blockquote><p>在快速排序中保持随机性是保证此算法性能的关键</p></blockquote></li><li><p>注意循环的终止条件</p><blockquote><p>一个程序员常犯的错误就是没有考虑到数组可能包含与切分你元素的值相同的元素，从而导致了循环无法结束；<br>所以在上面的实现中，即使扫描到相同元素也会停止扫描，保证了不会因为重复元素而影响性能</p></blockquote></li><li><p>注意递归的终止条件</p><blockquote><p>如果你不能把切分元素放入到正确的位置（放入到了错误的位置），那么就有可能引起一个无法终止的递归，这是要极力避免的。</p></blockquote></li></ol><h2 id="3-基本实现"><a class="markdownIt-Anchor" href="#3-基本实现"></a> 3. 基本实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Disable the dependency to the input String</span></span><br><span class="line">        <span class="comment">// It's very important.</span></span><br><span class="line">        StdRandom.shuffle(a);</span><br><span class="line">        sort(a, <span class="number">0</span>, a.lenth - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line"></span><br><span class="line">        sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">        sort(a, j + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，和归并排序一样，快速排序中真正做比较和交换的，实际上是<strong>切分</strong>这一个过程，而不是 <code>sort()</code> 方法</p></blockquote><h2 id="4-性能"><a class="markdownIt-Anchor" href="#4-性能"></a> 4. 性能</h2><p>快速排序需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mn>2</mn><mi>N</mi><mi>l</mi><mi>n</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\sim 2NlnN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次的比较和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">1/6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">6</span></span></span></span> 的交换<br>在最坏情况下，当输入数组本身就是有序时，快速排序需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">N^2 / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span></span></span></span> 次的比较</p><p><strong>但是通过打乱输入保证随机性可以防止这种情况的发生</strong></p><h2 id="5-改进"><a class="markdownIt-Anchor" href="#5-改进"></a> 5. 改进</h2><h3 id="51-切换到插入排序"><a class="markdownIt-Anchor" href="#51-切换到插入排序"></a> 5.1 切换到插入排序</h3><p>对于一些小型数组，插入排序会比快速排序要快，这是由于快速排序使用了递归方法进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ho &lt;= lo + M) &#123;</span><br><span class="line">        Insertion.sort(a, lo, hi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line"></span><br><span class="line">    sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">    sort(a, j + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-三取样切分"><a class="markdownIt-Anchor" href="#52-三取样切分"></a> 5.2 三取样切分</h3><p>快速排序基于切分，如果切分元素选择的好，那么就可以减少切分所用的时间，从而提高算法性能<br>在实践中，我们一般使用<strong>三取样</strong>，然后取其<strong>中位数</strong>的形式来选取切分元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小数组使用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> (ho &lt;= lo + M) &#123;</span><br><span class="line">        Insertion.sort(a, lo, hi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三取样获取切分元素</span></span><br><span class="line">    <span class="keyword">int</span> m = medianOf3(a, lo, lo + (hi - lo) / <span class="number">2</span>, hi);</span><br><span class="line">    swap(a, lo, m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line"></span><br><span class="line">    sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">    sort(a, j + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>三取样，即选取数组头部、尾部和中间<strong>位置</strong>的元素</p></blockquote><h2 id="6-三向切分的快速排序"><a class="markdownIt-Anchor" href="#6-三向切分的快速排序"></a> 6. 三向切分的快速排序</h2><p>对于有大量重复性元素的数组，我们采用这个算法，实际上属于快速排序的一种改进形式。</p><h3 id="61-实现原理"><a class="markdownIt-Anchor" href="#61-实现原理"></a> 6.1 实现原理</h3><p>使用 2 个指针 (<code>lt</code>,<code>gt</code>)来维护数组的 3 个部分：</p><ol><li><p>小于切分元素的</p><blockquote><p>指针 <code>lo</code> 和 <code>lt</code> 之间属于这个部分</p></blockquote></li><li><p>等于切分元素的</p><blockquote><p>指针 <code>lt</code> 和 <code>gt</code> 之间属于这个部分</p></blockquote></li><li><p>大于切分元素的</p><blockquote><p>指针 <code>gt</code> 和 <code>hi</code> 之间属于这个部分</p></blockquote></li></ol><ul><li>指针 <code>lt</code> 的左边都是小于切分元素的元素</li><li>指针 <code>gt</code> 的右边都是大于切分元素的元素</li><li>指针 <code>lt</code> 和 <code>gt</code> 之间都是等于切分元素的元素</li></ul><h3 id="62-实现过程"><a class="markdownIt-Anchor" href="#62-实现过程"></a> 6.2 实现过程</h3><p><img alt="3way Quick Sort" data-src="https://algs4.cs.princeton.edu/23quicksort/images/partitioning3-overview.png"></p><p>指针 <code>i</code> 实际上的作用是进行数组扫描；</p><p>而 <code>lt</code> 和 <code>gt</code> 的工作是进行数组区域的划分。</p><ol><li><p>初始状态，<code>lt</code> 在数组头部，<code>i</code> 位于 <code>lt</code> 的后一个位置， <code>gt</code> 在数组尾部</p></li><li><p>当 <code>a[i]</code> 小于切分元素时，交换 <code>a[i]</code> 和 <code>a[lt]</code>，并自增<code>lt</code> 和 <code>i</code></p><blockquote><p>交换过后，<code>i</code> 所指的元素已经被检查过；<br>而为了满足 <code>lt</code> 左边的元素都是小于切分元素的，所以 <code>lt</code> 要增加</p></blockquote></li><li><p>当 <code>a[i]</code> 大于切分元素时候，交换 <code>a[i]</code> 和 <code>a[gt]</code>，并自减 <code>gt</code></p><blockquote><p>此时，由于 <code>i</code> 所指的元素是从数组尾部交换来的；<br><strong>并没有经过检查</strong>；<br>所以不能自增 <code>i</code></p></blockquote></li><li><p>当 <code>a[i]</code> 等于切分元素时候，自增 <code>i</code></p><blockquote><p>由于任何时候， <code>i</code> 都会在 <code>lt</code> 的前面；<br>这种情况下，说明 <code>a[i]</code> 已经处于正确位置；<br>不必进行交换操作</p></blockquote></li><li><p>当 <code>i</code> 与 <code>gt</code> 相遇时，切分完成</p><blockquote><p>此时，所有的元素都经过了 <code>i</code> 的检查，切分完成</p></blockquote></li></ol><h3 id="63-具体实现"><a class="markdownIt-Anchor" href="#63-具体实现"></a> 6.3 具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick3way</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lt = lo, i = lo + <span class="number">1</span>, gt = hi;</span><br><span class="line"></span><br><span class="line">        Comararble v = a[lo];   <span class="comment">// 切分元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// i 比 v 小</span></span><br><span class="line">                exch(a, lt++, i++);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// i 比 v 大</span></span><br><span class="line">                exch(a, i, gt--);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(a, lo, lt - <span class="number">1</span>);</span><br><span class="line">        sort(a, gt + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="64-性能"><a class="markdownIt-Anchor" href="#64-性能"></a> 6.4 性能</h3><p>对于含有重复元素的数组，我们有一个值来描述这个数组的信息含量，它叫做<strong>香农信息量(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.08125em">H</span></span></span></span>)</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo>=</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mi>l</mi><mi>g</mi><msub><mi>p</mi><mn>1</mn></msub><mo>+</mo><mi>p</mi><mn>2</mn><mi>l</mi><mi>g</mi><msub><mi>p</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>p</mi><mi>k</mi></msub><mi>l</mi><mi>g</mi><msub><mi>p</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H = -(p_1lgp_1 + p2lgp_2 + \cdots + p_klgp_k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.08125em">H</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo>−</mo><mi>T</mi><mi>h</mi><mi>e</mi><mtext> </mtext><mi>S</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>n</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">H - The \ Shannon\ information</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.08125em">H</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>−</mo><mi>T</mi><mi>h</mi><mi>e</mi><mtext> </mtext><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>t</mi><mi>y</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>t</mi><mi>h</mi><mi>e</mi><mtext> </mtext><mi>i</mi><mi>t</mi><mi>h</mi><mtext> </mtext><mi>k</mi><mi>e</mi><mi>y</mi><mtext> </mtext><mi>w</mi><mi>a</mi><mi>s</mi><mtext> </mtext><mi>s</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">p_i - The\ posibillty\ of\ the\ ith\ key\ was\ selected</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.7777700000000001em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span></p><p>对于含有重复元素的数组，不存在任何基于比较的排序算法能够保证在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>H</mi><mo>−</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">NH - N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.08125em">H</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次比较之中将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个元素排序。其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.08125em">H</span></span></span></span> 是由主键值概率定义的香农信息量</p><p>所以，它证明了三向切分的快速排序是最好的基于比较的算法，<strong>信息量最优</strong></p><p>事实上，对于拥有大量重复键值的数组来说，三向切分的快速排序的时间复杂度是 <strong>线性级别的</strong></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速选择算法解 Top K 问题</title>
      <link href="//Algorithm/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95%E8%A7%A3%20Top%20K%20%E9%97%AE%E9%A2%98/"/>
      <url>//Algorithm/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95%E8%A7%A3%20Top%20K%20%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-top-k-问题"><a class="markdownIt-Anchor" href="#1-top-k-问题"></a> 1. Top K 问题</h2><p>Top K 问题就是在序列中寻找到 <strong>第 K 个大（或者小）的元素</strong></p><p>对此，我们可以研究一下它的上界和下界：</p><ol><li><p>上界为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></p><blockquote><p>Top K 问题只要使用排序就一定能解决，所以其最坏的时间复杂度就是排序的复杂度</p></blockquote></li><li><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span> 的值较小时，如 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">1, 2, 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">3</span></span></span></span>，则上界为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></p><blockquote><p>显然，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 时，我们只需要遍历一次数组就能获取最小或者最大元素；<br>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">k = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">2</span></span></span></span> 时，我们只需要遍历两次数组就可以完成工作</p></blockquote></li><li><p>下界为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></p><blockquote><p>由 2 可知，我们可以有一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 级别的算法；<br>与此同时，我们至少需要遍历一次数组，才能获取到足够的信息来进行 Top K 判断</p></blockquote></li></ol><p>综上所述，我们可以拥有一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 级别的算法来解决 Top K 问题，这就是这里介绍的快速选择算法。</p><a id="more"></a><h2 id="2-快速选择算法"><a class="markdownIt-Anchor" href="#2-快速选择算法"></a> 2. 快速选择算法</h2><p>快速选择算法实际上是快速排序的一个变种，通过使用快速排序的 <strong>切分</strong> 来达到选择 Top K 的目的。</p><p>事实上，由于快速排序的切分保证了：</p><ol><li>所有左边的元素都不大于切分元素</li><li>所有右边的元素都不小于切分元素</li></ol><p>因此，实际上切分元素的所处位置，就指示了其 Top K 特性，也就是说：</p><p>如果切分元素位于第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">h</span></span></span></span> 个位置，那么切分元素就是数组中的 Top <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">h</span></span></span></span></p><h3 id="21-算法过程"><a class="markdownIt-Anchor" href="#21-算法过程"></a> 2.1 算法过程</h3><ol><li><p>完成切分过程，获取到切分元素位置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span></p></li><li><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>&gt;</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">k &gt; j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span>，则对切分元素的右半边数组进行切分</p></li><li><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>&lt;</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">k &lt; j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span>，则对切分元素的左半边数组进行切分</p></li><li><p>重复上述过程，直到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">k = j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span></p></li></ol><h3 id="22-实现"><a class="markdownIt-Anchor" href="#22-实现"></a> 2.2 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title">select</span><span class="params">(Comparable[]a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    StdRamdom.shuffle(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hi = a.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(hi &gt; lo) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k &gt; j) &#123;</span><br><span class="line">            lo = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; j) &#123;</span><br><span class="line">            hi = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时我们只有一个元素可以选择</span></span><br><span class="line">    <span class="comment">// 说明此时的 a[k] 就是 Top K</span></span><br><span class="line">    <span class="keyword">return</span> a[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-性能"><a class="markdownIt-Anchor" href="#3-性能"></a> 3. 性能</h2><p>快速选择算法的平均时间复杂度是 <strong>线性级别的</strong>（即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span>）</p><p>其复杂度来源于切分过程，而对于切分过程，每次切分大约会将数组等分，所以需要：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mi>N</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><mn>2</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">(N + N/2 + N/4 + \cdots + 1 )\sim 2N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord">4</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次的比较</p><p>一个更精确的公式如下：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>N</mi></msub><mo>=</mo><mn>2</mn><mi>N</mi><mo>+</mo><mn>2</mn><mi>k</mi><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mi>N</mi><mi mathvariant="normal">/</mi><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>K</mi><mo stretchy="false">)</mo><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mi>N</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C_N = 2N + 2kln(N/k) + 2(N - K)ln(N / (N - k))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.32833099999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">K</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">k = N / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>N</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo>+</mo><mn>2</mn><mi>l</mi><mi>n</mi><mn>2</mn><mo stretchy="false">)</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">C_N = (2 + 2ln2) N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.32833099999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></p><p>但是与快速排序一样，快速选择的最坏情况下的时间复杂度是 <strong>平方级别</strong> 的，不过在上面的实现中，由于我们进行了随机洗牌，从而保证了性能。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graham Scan 解决凸包问题</title>
      <link href="//Algorithm/Graham%20Scan%20%E8%A7%A3%E5%86%B3%E5%87%B8%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>//Algorithm/Graham%20Scan%20%E8%A7%A3%E5%86%B3%E5%87%B8%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>输入一个点集，输出一个构成<strong>能容纳所有点的最小多边形的顶点集合</strong></p><h2 id="1-graham-scan"><a class="markdownIt-Anchor" href="#1-graham-scan"></a> 1. Graham scan</h2><ol><li><p>选择一个具有<strong>最小 y 坐标的点 p</strong>，如果有多个点，则选择最左边的点（x 坐标最小）</p></li><li><p>将其他点按照 <code>p -&gt; i</code> 向量的极角(polar angle) 排序</p><blockquote><p>极角即为向量与 <strong>X 轴正向</strong> 的夹角</p></blockquote></li><li><p>按顺序考虑其余点，如果出现<strong>顺时针的拐角则将该点忽略</strong></p></li></ol><a id="more"></a><h2 id="2-要点"><a class="markdownIt-Anchor" href="#2-要点"></a> 2. 要点</h2><h3 id="21-寻找原点"><a class="markdownIt-Anchor" href="#21-寻找原点"></a> 2.1 寻找原点</h3><p>将点按照 y 坐标优先进行排序；</p><p>即，先看 y 坐标，后看 x 坐标。</p><h3 id="22-按照极角排序"><a class="markdownIt-Anchor" href="#22-按照极角排序"></a> 2.2 按照极角排序</h3><p>使用基于逆时针转角（CCW）的方法</p><ol><li><p>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 上方，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 下方，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 极坐标较小</p></li><li><p>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 下方，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 上方，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 极坐标较大</p></li><li><p>否则，根据 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>→</mo><msub><mi>q</mi><mn>1</mn></msub><mo>→</mo><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p \to q_1 \to q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 的逆时针转角(<code>ccw(p, q1, q2)</code>) 确定极坐标大小</p></li></ol><blockquote><p>上述函数中，<code>ccw(p, q1, q2)</code> 返回 1，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 较大；<br>返回 -1 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 较大</p></blockquote><h2 id="3-确定逆时针转角ccw"><a class="markdownIt-Anchor" href="#3-确定逆时针转角ccw"></a> 3. 确定逆时针转角(CCW)</h2><p><strong>使用三角形有向面积进行判定</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>2</mn><mo>×</mo><mi>A</mi><mi>r</mi><mi>e</mi><mi>a</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mo>=</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>b</mi><mi>x</mi></msub><mo>−</mo><msub><mi>a</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>b</mi><mi>y</mi></msub><mo>−</mo><msub><mi>a</mi><mi>y</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mi>x</mi></msub><mo>−</mo><msub><mi>a</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mi>y</mi></msub><mo>−</mo><msub><mi>a</mi><mi>y</mi></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} 2 \times Area(a, b, c) = \begin{vmatrix} a_x &amp; a_y &amp; 1\\ b_x &amp; b_y &amp; 1\\ c_x &amp; c_y &amp; 1\\ \end{vmatrix} = \\ \begin{vmatrix} b_x - a_x &amp; b_y - a_y \\ c_x - a_x &amp; c_y - a_y \\ \end{vmatrix} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.08em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.58em"><span style="top:-5.58em"><span class="pstrut" style="height:4.08597em"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em"><span style="top:-1.05597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em"><span style="top:-1.05597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span></span></span><span style="top:-2.2559899999999997em"><span class="pstrut" style="height:4.08597em"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em"><span style="top:-1.65598em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500199999999999em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500000000000004em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em"><span style="top:-1.65598em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500199999999999em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>如果面积为正，则为逆时针</strong><br><strong>如果面积为负，则为顺时针</strong><br><strong>如果面积为 0，则三点共线</strong></p><p>原理：根据空间向量的<strong>右手系</strong>可知，当法向量为负时，三点为顺时针；当法向量为正时，三点为逆时针。</p><p>而平面法向量和<strong>两个向量的叉乘正负一致</strong>，则可以通过求两个向量的叉乘判断顺逆时针的情况。</p><p>由向量叉乘的物理含义可知，<strong>向量的叉乘就是两个向量所在的平行四边形的面积</strong></p><p>在三维条件下，叉乘为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo>×</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>i</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>j</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>k</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">|a \times b| = \begin{vmatrix} i &amp; j &amp; k\\ a_x &amp; a_y &amp; a_z\\ b_x &amp; b_y &amp; b_z \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:3.636em;vertical-align:-1.5500299999999998em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em"><span style="top:-1.05597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">i</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.04398em">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.04398em">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em"><span style="top:-1.05597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">z = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.04398em">z</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 这一平面，则</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo>×</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>y</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">|a \times b| = \begin{vmatrix} a_x &amp; a_y\\ b_x &amp; b_y\\ \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.424em;vertical-align:-.9500199999999999em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em"><span style="top:-1.65598em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500199999999999em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.15139200000000003em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500000000000004em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em"><span style="top:-1.65598em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500199999999999em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>到这一步不难看出，上面两倍三角形有向面积的二维行列式表达正是二维空间中向量的叉乘。</p><p>所以，三角形有向面积的正负就表明了三角形三个点的顺时针和逆时针的特性。</p><h2 id="4-corner-case"><a class="markdownIt-Anchor" href="#4-corner-case"></a> 4. Corner Case</h2><p>主要出现的 Corner Case 有：</p><ol><li><p>点数量不够</p><blockquote><p>只有至少不共线的 3 个点才能构成凸包</p></blockquote></li><li><p>共点问题</p><blockquote><p>有多个点重合</p></blockquote></li><li><p>共线问题</p><blockquote><p>有多个点的共线问题</p></blockquote></li><li><p>点集为空等其他情况</p></li></ol><h2 id="5-实现流程"><a class="markdownIt-Anchor" href="#5-实现流程"></a> 5. 实现流程</h2><p>对于以上 Corner Case 有如下处理方法：</p><ol><li><p>检查 <code>null</code></p></li><li><p>检查点集数量</p><blockquote><p>3 个点及以上才有可能产生凸包</p></blockquote></li><li><p>遍历排序后的点集，直到第一个不与第一个点重复的点，如果所有点都重复，则退出</p><blockquote><p>由此可去除原点重复问题</p></blockquote></li><li><p>遍历剩下的点集，直到第一个与前两个不共线的点，将其的前一点作为凸包第二顶点</p><blockquote><p><strong>前一点</strong> 即与原点共线的 <strong>最后一个点</strong></p></blockquote></li><li><p>通过 CCW 来计算逆时针转角，抛弃小于等于 0 的点</p><blockquote><p>由于 CCW 可以表示共线情况，可以通过只要大于零的点即可避免途中出现的共线情况<br>实际上，由于 CCW 使用三角形面积进行计算，所以，也可以解决共点问题</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本排序算法</title>
      <link href="//Algorithm/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>//Algorithm/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>成本模型：<br>一般为元素<strong>比较</strong>和<strong>交换</strong>的次数。<br>如果<strong>不需要比较和交换</strong>，那么我们计算<strong>数组访问</strong>的次数</p><a id="more"></a><h2 id="1-冒泡排序"><a class="markdownIt-Anchor" href="#1-冒泡排序"></a> 1. 冒泡排序</h2><p>冒泡排序，顾名思义，是通过不断交换相邻元素，让较小的元素向上浮，让较大的元素向下沉的算法。</p><ol><li>从数组头部开始，对每一对相邻元素进行比较，并交换</li><li>索引加一，重复上述操作，直到索引到达数组末尾</li><li>此时，可以保证数组末尾元素必定是最大的元素</li><li>将索引移动范围剪一，并重复上述过程</li></ol><h2 id="11-性能"><a class="markdownIt-Anchor" href="#11-性能"></a> 1.1 性能</h2><p>由于需要进行两层循环，冒泡排序的复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，而且对于已经有序的数组，它也同样需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的复杂度。</p><h2 id="2-选择排序"><a class="markdownIt-Anchor" href="#2-选择排序"></a> 2. 选择排序</h2><ol><li>找到<strong>最小元素</strong></li><li>把它和<strong>第一个元素</strong>相交换</li><li>在<strong>剩下的元素</strong>中寻找最小元素</li><li>将其和<strong>第二个元素</strong>交换</li><li>重复以上步骤，直到数组排序完毕（元素指针走到数组末尾）</li></ol><h3 id="21-性能"><a class="markdownIt-Anchor" href="#21-性能"></a> 2.1 性能</h3><p>在一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 的数组中，它需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">{N^2}/{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord">2</span></span></span></span></span> 次的<strong>比较</strong>和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次的交换</p><p>特点：</p><ol><li>所需时间和输入模型无关</li><li>数据的移动是最少的</li></ol><h2 id="3-插入排序"><a class="markdownIt-Anchor" href="#3-插入排序"></a> 3. 插入排序</h2><p>插入排序的主要思想是在数组的无序部分取元素插入到有序部分中，从而逐步构建有序。</p><blockquote><p>举一个按照升序排列的例子</p></blockquote><ol><li>将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 中所有比它小的元素依次交换</li><li>保证在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 的左边，元素总是有序的</li><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 指针到达数组末尾的时候，排序就完成了。</li></ol><h3 id="31-实现"><a class="markdownIt-Anchor" href="#31-实现"></a> 3.1 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j-<span class="number">1</span>]); j--) &#123;</span><br><span class="line">            <span class="comment">// Compare a[i] with the items which is at its left side.</span></span><br><span class="line">            exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, <span class="number">0</span>, i)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-性能"><a class="markdownIt-Anchor" href="#32-性能"></a> 3.2 性能</h3><p>此算法的性能和输入有关。<br>如果输入的序列已经是部分排序的，那么使用这个算法将会比较快；<br>但是由于存在嵌套的 <code>for</code> 循环，在最坏情况下仍然需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 次交换</p><p>在之后的排序算法优化中，我们会经常使用插入排序的这一特性，在小数组、部分有序数组中应用插入排序，进一步降低时间复杂度。</p><h3 id="33-优化"><a class="markdownIt-Anchor" href="#33-优化"></a> 3.3 优化</h3><h4 id="331-使用移动代替交换"><a class="markdownIt-Anchor" href="#331-使用移动代替交换"></a> 3.3.1 使用移动代替交换</h4><p>可以在上述算法实现上进行进一步调优。<br>可以简单的将大的元素<strong>往右移动</strong>，从而空出一个正确的位置，将所需元素插入即可；<br>而不是每次都要交换一次元素。<br>这个调优将能<strong>节省一半</strong>的<strong>数组访问开支</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        Comparable t = a[j]; <span class="comment">// 需要插入的元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j-<span class="number">1</span>]); j--) &#123;</span><br><span class="line">            a[j] = a[j - <span class="number">1</span>]; <span class="comment">// 将大的元素向右移动</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a[j] = t; <span class="comment">// 将元素插入空出的位置</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, <span class="number">0</span>, i)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="332-使用二分查找"><a class="markdownIt-Anchor" href="#332-使用二分查找"></a> 3.3.2 使用二分查找</h4><p>由于是在有序部分寻找恰当位置插入，可以使用二分查找提高搜索效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binaryIndex</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mdi] &gt; key) &#123;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-希尔排序"><a class="markdownIt-Anchor" href="#4-希尔排序"></a> 4. 希尔排序</h2><p>希尔排序是基于插入排序的一种排序算法。<br>其基本思想是让元素在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">h</span></span></span></span> 步长中有序<br>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">h</span></span></span></span> 很大，那么我们就可以将一个元素一次性移动很远</p><h3 id="41-实现"><a class="markdownIt-Anchor" href="#41-实现"></a> 4.1 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Increasing order of a[]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> N = a.lenth;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (h &lt; N/<span class="number">3</span>) &#123;   <span class="comment">// From N/3 to reduce the h</span></span><br><span class="line">                            <span class="comment">// 1, 4, 13, 40, 121, 364, 1093, ...</span></span><br><span class="line">            h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// Make the array h ordered</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="comment">// Insert the a[i] into the a[i - h], a[i - 2*h] , a[i - 3*h]</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h) &#123;</span><br><span class="line">                    <span class="comment">// Replace j-- as the j -= h</span></span><br><span class="line">                    exch(a, j, j-h)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = h / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="42-性能"><a class="markdownIt-Anchor" href="#42-性能"></a> 4.2 性能</h3><p>希尔排序比插入排序和选择排序都要快；<br>但是我们并不能给出一个准确的数学分析证明它的精确增长函数</p><p>但是一个重要的结论已经被证明：</p><p><strong>希尔排序的复杂度达不到平方级别</strong></p><p>这是很神奇的，只是因为改变了插入排序的步长就可以让复杂度下降到平方级别以下。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="//Algorithm/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>//Algorithm/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>归并排序是一种递归算法；</p><p>其主要思想是<strong>分而治之</strong>策略，通过将一个大数组分成一个个小数组，通过递归地分割，最后归并成一个有序的数组。</p><p>需要注意的是，<strong>比较是在归并的过程中实行的</strong>，真正实施比较和排序的方法是归并方法，所以才被称为归并排序。</p><a id="more"></a><h2 id="2-归并过程"><a class="markdownIt-Anchor" href="#2-归并过程"></a> 2. 归并过程</h2><ol><li><p>复制原数组内容到一个新的辅助数组中</p></li><li><p>将辅助数组分为两半</p></li><li><p>分别遍历两半部分，将其元素进行比较，按顺序复制回原数组中</p></li></ol><h3 id="21-实现"><a class="markdownIt-Anchor" href="#21-实现"></a> 2.1 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// i 表示左半边，j 表示右半边</span></span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy the a[lo...hi] to the assistant array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;          <span class="comment">// 左边空了</span></span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;      <span class="comment">// 右边空了</span></span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(auk[j], auk[i])) &#123;</span><br><span class="line">            <span class="comment">// j 比 i 小，将 j 归并到数组中</span></span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// i 比 j 小，将 i 归并到数组中</span></span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-自顶向下的归并排序"><a class="markdownIt-Anchor" href="#3-自顶向下的归并排序"></a> 3. 自顶向下的归并排序</h2><p>分治法思想，先排序左半边，后排序右半边，然后将两半归并。</p><h3 id="31-实现"><a class="markdownIt-Anchor" href="#31-实现"></a> 3.1 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.lenth];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.lenth - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        sort(a, aux, lo, mid);       <span class="comment">// Sort the left side</span></span><br><span class="line">        sort(a, aux, mid + <span class="number">1</span>, hi);   <span class="comment">// Sort the right side</span></span><br><span class="line"></span><br><span class="line">        merge(a, aux, lo, mid, hi);  <span class="comment">// Merge the result</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这里 <code>sort()</code> 方法只是对数组进行了简单的分割，而没有进行真正的排序过程</p></blockquote><blockquote><p>在一些改进版本中，会在数组较小时，采用其他排序方法进行排序。</p></blockquote><h3 id="32-性能"><a class="markdownIt-Anchor" href="#32-性能"></a> 3.2 性能</h3><p>对于自顶向下的归并排序，需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo>∼</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">{1 \over 2} NlogN \sim NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次比较和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">6NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次数组访问</p><h3 id="33-改进"><a class="markdownIt-Anchor" href="#33-改进"></a> 3.3 改进</h3><h4 id="331-小数组使用插入排序"><a class="markdownIt-Anchor" href="#331-小数组使用插入排序"></a> 3.3.1 小数组使用插入排序</h4><p>由于对于小数组来说，归并会产生不必要的复制消耗；</p><p>所以，我们在数组较小时，采用插入排序进行排序过程，而不是全程使用归并算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo + CUTOFF - <span class="number">1</span>) &#123;</span><br><span class="line">        Insertion.sort(a, lo, hi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    sort(a, lo, mid);       <span class="comment">// Sort the left side</span></span><br><span class="line">    sort(a, mid + <span class="number">1</span>, hi);   <span class="comment">// Sort the right side</span></span><br><span class="line">    merge(a, lo, mid, hi);  <span class="comment">// Merge the result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="332-避免不必要的归并过程"><a class="markdownIt-Anchor" href="#332-避免不必要的归并过程"></a> 3.3.2 避免不必要的归并过程</h4><p>如果前半边数组和后半边数组 <strong>正好构成有序</strong>；</p><p>那就可以直接跳过归并过程，从而节省时间。</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tKfTcgy1fcfpxg6z6mj31dg09q0u2.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo + CUTOFF - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 小数组使用插入排序</span></span><br><span class="line">        Insertion.sort(a, lo, hi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    sort(a, lo, mid);       <span class="comment">// Sort the left side</span></span><br><span class="line">    sort(a, mid + <span class="number">1</span>, hi);   <span class="comment">// Sort the right side</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (less(a[mid], a[mid + <span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="comment">// 如果已经有序，则跳过归并过程</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    merge(a, lo, mid, hi);  <span class="comment">// Merge the result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="333-转换数组角色节省拷贝时间"><a class="markdownIt-Anchor" href="#333-转换数组角色节省拷贝时间"></a> 3.3.3 转换数组角色节省拷贝时间</h4><p>由于归并需要先将原数组的内容拷贝到辅助数组中；</p><p>为什么不直接将原输入数组当成辅助数组呢？</p><p>所以，我们可以通过将数组的角色调换，以节省拷贝的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// i 表示左半边，j 表示右半边</span></span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原来的拷贝数组的代码不见了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在，aux 和 a 角色互换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;          <span class="comment">// 左边空了</span></span><br><span class="line">            aux[k] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;      <span class="comment">// 右边空了</span></span><br><span class="line">            aux[k] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(auk[j], auk[i])) &#123;</span><br><span class="line">            <span class="comment">// j 比 i 小，将 j 归并到数组中</span></span><br><span class="line">            aux[k] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// i 比 j 小，将 i 归并到数组中</span></span><br><span class="line">            aux[k] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意，下面 aux 和 a 的顺序互换了</span></span><br><span class="line">        sort(aux, a, lo, mid);       <span class="comment">// Sort the left side</span></span><br><span class="line">        sort(aux, a, mid + <span class="number">1</span>, hi);   <span class="comment">// Sort the right side</span></span><br><span class="line"></span><br><span class="line">        merge(a, aux, lo, mid, hi);  <span class="comment">// Merge the result</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length ; i++) &#123;</span><br><span class="line">        aux[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(a, aux, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-自底向上的归并排序"><a class="markdownIt-Anchor" href="#4-自底向上的归并排序"></a> 4. 自底向上的归并排序</h2><p>它的主要思想是通过不断归并小数组，从而得到一个有序的大数组。<br>注意与其不同的是，自顶向下是将整个数组分为<strong>左右半边分别处理</strong>，<br>而这里的方法是将<strong>整个数组都打散为小数组</strong>之后再行合并。</p><h3 id="41-实现"><a class="markdownIt-Anchor" href="#41-实现"></a> 4.1 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">MergeBU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.lenth;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz = sz + sz) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N - sz; lo + = sz + sz) &#123;</span><br><span class="line">                merge (a, log, lo + sz - <span class="number">1</span>, Math.min(lo + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里使用了循环的版本，而不是递归的版本</p></blockquote><h3 id="42-性能"><a class="markdownIt-Anchor" href="#42-性能"></a> 4.2 性能</h3><p>对于一个长度为 N 的数组，自底向上的归并排序需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo>∼</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">{1 \over 2} NlogN \sim NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次比较和最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">6NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 次的数组访问</p><h2 id="5-比较"><a class="markdownIt-Anchor" href="#5-比较"></a> 5. 比较</h2><ol><li><p>当数组长度为 2 的幂的时候，这两个方法需要的开支是相同的</p><blockquote><p>它们的时间复杂度的增长级别是相同的，数组访问的增长级别也是相同的</p></blockquote></li><li><p>自底向上的归并排序适合于使用<strong>链表</strong>作为数据结构的数据，由于它只需要<strong>调整数组链接</strong>即可，而不需要去创建新的链表节点</p></li><li><p>由于自底向上使用的是循环算法，一般来说都要比使用递归算法的自顶向下的归并排序要快</p></li></ol><h2 id="6-展望"><a class="markdownIt-Anchor" href="#6-展望"></a> 6. 展望</h2><p>归并排序是<strong>基于比较的排序算法</strong>中<strong>渐进最优</strong>的</p><p>归并排序<strong>确保了</strong> 即使在最坏情况，所需要的最少比较次数都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\sim NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>。</p><p>由于没有一个基于比较的排序算法能<strong>保证</strong>所需要的最少次数都比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log(N!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span> 要少，由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo><mo>∼</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">log(N!) \sim NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">!</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>，所以归并排序是<strong>渐进最优</strong>的<strong>基于比较的</strong>排序算法</p><p>基于比较的排序可以由<strong>决策树</strong>来描述。</p><p>树的高度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">h</span></span></span></span> 即为所需要进行的比较次数，由排列原理可知，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个元素有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">N!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">!</span></span></span></span> 中排序方式，一个决策树的叶子个数必须要能容纳下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">N!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">!</span></span></span></span> 中排序结果，<strong>否则将无法完成排序</strong>。</p><p>因为如果不能容纳下所有的结果，一旦输入改变，那么得出的排序结果就可能是错误的。</p><p>所以一棵比较算法的决策树，<strong>至少</strong>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">N!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">!</span></span></span></span> 个叶节点，而高为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">h</span></span></span></span> 的树具有最多叶节点个数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.849108em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span></span></span>，则有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>≥</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>s</mi><mo>≥</mo><mi>N</mi><mo stretchy="false">!</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>⇒</mo><mtext> </mtext><mi>h</mi><mtext> </mtext><mo>≥</mo><mtext> </mtext><mi>l</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo><mo>∼</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} 2^h \ge leaves \ge N! \\ \Rightarrow \ h \ \ge \ lg(N!) \sim NlogN \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.059108em;vertical-align:-1.279554em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.779554em"><span style="top:-3.880446em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">!</span></span></span><span style="top:-2.380446em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mspace"> </span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mspace"> </span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">!</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.279554em"><span></span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集算法分析</title>
      <link href="//Algorithm/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>//Algorithm/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>并查集算法是用于判断互联网中我们是否需要新建立一条连接来使整个网络连通。即，元素的连通性问题。</p><a id="more"></a><h2 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念"></a> 1. 概念</h2><ul><li><p>连接</p><p>连接是一种等价关系，它意味着以下特点：</p><ul><li>自反性：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 连接着 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span></li><li>对称性：如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 相连，那么 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 相连</li><li>传递性：如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 相连，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span></span></span></span> 相连，那么 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span></span></span></span> 相连</li></ul></li></ul><h2 id="2-union-find-的实现"><a class="markdownIt-Anchor" href="#2-union-find-的实现"></a> 2. Union-Find 的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = StdIn.readInt();    <span class="comment">//read the Number of CONTACTS</span></span><br><span class="line">    UF UF = <span class="keyword">new</span> UF(N);          <span class="comment">//Initialize the data structure</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!StdIn.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = StdIn.readInt();</span><br><span class="line">        <span class="keyword">int</span> q = StdIn.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(uf.connected(p,q)) &#123;</span><br><span class="line">            <span class="comment">//If it is connected, ignore it</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uf.uinon(p,q);          <span class="comment">//Merge the contacts</span></span><br><span class="line">        StdOut.println(p + <span class="string">" "</span> + q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-union-和-find-的实现"><a class="markdownIt-Anchor" href="#3-union-和-find-的实现"></a> 3. <code>union()</code> 和 <code>find()</code> 的实现</h2><p>基于 <code>id[]</code> 数组，他们的每一个索引都是一个节点</p><h3 id="31-quick-find-算法"><a class="markdownIt-Anchor" href="#31-quick-find-算法"></a> 3.1 Quick-Find 算法</h3><p>这是一个 naive 的实现，每次执行 <code>union()</code> 都需要扫描整个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span> <span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Merge p and q into the same component</span></span><br><span class="line">    <span class="keyword">int</span> pID = find(p);</span><br><span class="line">    <span class="keyword">int</span> qID = find(q);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the p and q are at the same component,</span></span><br><span class="line">    <span class="comment">// do nothing and return.</span></span><br><span class="line">    <span class="keyword">if</span>(pID = qID) &#123;</span><br><span class="line">        retrun;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rename the p component to the q component</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; id.lenth; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(id[i] == pID) &#123;</span><br><span class="line">            id[i] = qID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count --;   <span class="comment">// Decrease the component counter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>connected()</code> 方法需要 2 次 <code>find()</code>；而对于 <code>union()</code> 方法则需要调用两次 <code>find()</code> ，检查 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个数组元素，改变其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \sim N - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 个数组元素的值。</p><p>所以，执行一次 <code>connected()</code> 和 <code>union()</code> 需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>+</mo><mn>3</mn><mo>∼</mo><mn>2</mn><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N+3 \sim 2N + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">3</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 数组访问。</p><p>而如果最后仅得到一个连通分量，那么就需要进行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 次 <code>connected() + union()</code>，也就是至少需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>3</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(N + 3)(N - 1) \sim N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">3</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 次数组访问。</p><h3 id="32-quick-union-算法"><a class="markdownIt-Anchor" href="#32-quick-union-算法"></a> 3.2 Quick-Union 算法</h3><p>使用<strong>树</strong>作为基本结构以避免每次调用 <code>union()</code> 时，都要扫描<strong>整个数组</strong></p><h4 id="321-基本概念"><a class="markdownIt-Anchor" href="#321-基本概念"></a> 3.2.1 基本概念</h4><ol><li><p>使用树作为基本的数据结构</p></li><li><p>每一个节点的 <code>id[]</code> 元素就是<strong>另一个节点的名字</strong>，我们认为它们之间建立了一个<strong>连接</strong></p><blockquote><p>例如， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 是两个节点，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 连接，那么 <code>id[p] == q</code></p></blockquote></li><li><p>如果 <code>id[p] == p</code>，那么我们称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 是一个根节点</p></li></ol><h4 id="322-实现"><a class="markdownIt-Anchor" href="#322-实现"></a> 3.2.2 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Find the root of the contact's component</span></span><br><span class="line">    <span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">        p = id[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Merge the root contact of the p's component and the q's component</span></span><br><span class="line">    <span class="keyword">int</span> pRoot = find(p);</span><br><span class="line">    <span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the two components' root are the same, return.</span></span><br><span class="line">    <span class="keyword">if</span> (pRoot == qRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the p's tree links with q's tree.</span></span><br><span class="line">    <span class="comment">// Now, the qRoot is the father contact of the qRoot.</span></span><br><span class="line">    id[pRoot] = qRoot;</span><br><span class="line"></span><br><span class="line">    count --;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="333-性能"><a class="markdownIt-Anchor" href="#333-性能"></a> 3.3.3 性能</h4><p>虽然一般来说，并查集算法比 Quick-Find 算法要快，但是在最坏情况下，并查集算法仍然需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>…</mo><mo>+</mo><mi>N</mi><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">2(1 + 2 + \ldots + N) \sim N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 次的数组访问</p><p>原因在于， <code>union()</code> 方法是<strong>随机的连接两棵树</strong>，就有可能将<strong>大树连接到小树上</strong>，增加树的深度。</p><p>如果所有的树都是大树连接到小树上，那么树就变成了线性表，此时即为最坏情况。</p><h2 id="4-加权的并查集算法"><a class="markdownIt-Anchor" href="#4-加权的并查集算法"></a> 4. 加权的并查集算法</h2><p>我们通过给树增加权值，从而可以避免上面的随机连接的情况。<br>权值即为树的大小。</p><h3 id="41-实现"><a class="markdownIt-Anchor" href="#41-实现"></a> 4.1 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedQuickUnionUF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * We need a new array to count the tree's size</span></span><br><span class="line"><span class="comment">    * The index is the root contact</span></span><br><span class="line"><span class="comment">    * The value is the corresponding size of the tree</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * Baically, we use the root contact to stand for the tree</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] sz;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeightedQuickUnionUF</span> <span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        sz = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="comment">// Initialize the sz[] as 1.</span></span><br><span class="line">            <span class="comment">// No one was linked at the first.</span></span><br><span class="line">            sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Find the root contact</span></span><br><span class="line">        <span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">            p = id[p];</span><br><span class="line">        &#125;</span><br><span class="line">        retrun p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;    <span class="comment">// Link the smaller tree's root contact to the bigger one</span></span><br><span class="line">            id[i] = j;</span><br><span class="line">            sz[j] += sz[i];     <span class="comment">// Adding the weight(or size) of the component</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            id[j] = i;</span><br><span class="line">            sz[i] += sz[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="42-性能"><a class="markdownIt-Anchor" href="#42-性能"></a> 4.2 性能</h3><p>通过使用加权算法，构造的森林中，任意节点的深度最多为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">logN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="5-路径压缩的并查集算法"><a class="markdownIt-Anchor" href="#5-路径压缩的并查集算法"></a> 5. 路径压缩的并查集算法</h2><p>更进一步，我们可以在遍历到一个节点的时候，就和它的根节点连在一起，<br>由于我们<strong>只检查连通分量（即根节点）是否相连</strong>，所以上述做法在 <strong>Union-Find</strong> 问题中是没有副作用的，同时可以<strong>极大地减少树的深度</strong>，从而提升算法性能。</p><h3 id="51-实现-1-两个循环"><a class="markdownIt-Anchor" href="#51-实现-1-两个循环"></a> 5.1 实现 1 ——两个循环</h3><p>使用第二个循环，将寻找根节点路径上的所有的点都与根节点直接连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pParent = p;</span><br><span class="line"><span class="keyword">int</span> pRoot = p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the p's root</span></span><br><span class="line">    <span class="keyword">while</span>(pRoot != id[pRoot]) &#123;</span><br><span class="line">        pRoot = id[pRoot];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (id[p] != p) &#123;</span><br><span class="line">        pParent = id[p];</span><br><span class="line">        id[p] = pRoot;</span><br><span class="line">        p = pParent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-实现-2-将点指向其爷爷节点"><a class="markdownIt-Anchor" href="#52-实现-2-将点指向其爷爷节点"></a> 5.2 实现 2 ——将点指向其爷爷节点</h3><p>一个更为简单的实现，直接将节点与其爷爷节点连接即可；</p><p>虽然效果没有 实现 1 好，但是在实际运用中，两者效果相差不大，而且实现 2 只需要一行代码即可，更具备工程意义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p != id[p]) &#123;</span><br><span class="line">id[p] = id[id[p]];</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="53-性能"><a class="markdownIt-Anchor" href="#53-性能"></a> 5.3 性能</h3><p>这个算法的性能是一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">arc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">c</span></span></span></span> 函数，<strong>十分接近常数</strong>。</p><h2 id="6-比较"><a class="markdownIt-Anchor" href="#6-比较"></a> 6. 比较</h2><p><img alt="The comparation of the Union-Find algorithm" data-src="https://algs4.cs.princeton.edu/15uf/images/uf-performance.png"></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>在算法中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">logN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">log_2{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></span> 等价 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析</title>
      <link href="//Algorithm/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>//Algorithm/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-观察"><a class="markdownIt-Anchor" href="#1-观察"></a> 1. 观察</h2><ul><li>运行程序，然后使用时间计算器来计算时间的使用。</li><li>使用大数据来猜测和验证数学模型</li></ul><a id="more"></a><h2 id="2-时间模型"><a class="markdownIt-Anchor" href="#2-时间模型"></a> 2. 时间模型</h2><p>时间使用的多少一般和以下因素有关：</p><ul><li>每个操作的所需时间</li><li>每个操作使用的频率</li></ul><h3 id="21-估计"><a class="markdownIt-Anchor" href="#21-估计"></a> 2.1 估计</h3><p>我们使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sim f(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 来代表，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 增长时，所用时间的结果和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 的比值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>，使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(N) \sim f(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 来代表当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 增长时，结果和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(N)/f(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 的比值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></p><h3 id="22-内循环"><a class="markdownIt-Anchor" href="#22-内循环"></a> 2.2 内循环</h3><ul><li>内循环指的是程序执行时，<strong>最频繁的操作</strong></li><li>程序的时间复杂度一般都取决于内循环</li></ul><h3 id="23-成本模型"><a class="markdownIt-Anchor" href="#23-成本模型"></a> 2.3 成本模型</h3><p>成本模型指的是基本的算法操作<br>例如 3-Sum 问题，其成本模型是数组访问的次数</p><h3 id="24-确定成本模型的步骤"><a class="markdownIt-Anchor" href="#24-确定成本模型的步骤"></a> 2.4 确定成本模型的步骤</h3><ol><li>确定输入模型和问题规模</li><li>确定内循环</li><li>根据内循环来确定成本模型</li><li>根据输入模型，来确定操作的频率和次数</li></ol><h3 id="25-增长级别的分类"><a class="markdownIt-Anchor" href="#25-增长级别的分类"></a> 2.5 增长级别的分类</h3><p><img alt="Classification" data-src="https://algs4.cs.princeton.edu/14analysis/images/classifications.png"></p><ol><li><p>常数级别</p><blockquote><p>大多数的 Java <strong>基本操作</strong> 都是常数级别的。</p></blockquote></li><li><p>对数级别</p><blockquote><p>比常数级别稍慢，例如 <strong>二分查找</strong></p></blockquote></li><li><p>线性级别</p><blockquote><p>单独的 <code>for</code> 循环</p></blockquote></li><li><p>线性对数级别</p><blockquote><p>例如归并排序和快速排序</p></blockquote></li><li><p>平方级别</p><blockquote><p>两个嵌套的 <code>for</code> 循环，例如选择排序，插入排序，冒泡排序都是平方级别的</p></blockquote></li><li><p>立方级别</p><blockquote><p>三个嵌套的 <code>for</code> 循环是立方级别的，例如 3-sum 的暴力解法</p></blockquote></li><li><p>指数级别</p><blockquote><p>非常慢，尽量避免去使用这种级别的算法</p></blockquote></li></ol><h3 id="26-设计更快的算法"><a class="markdownIt-Anchor" href="#26-设计更快的算法"></a> 2.6 设计更快的算法</h3><p>使用分治策略</p><p>例如 3-sum 问题，我们可以先尝试解决较为简单的 2-sum 问题</p><blockquote><p>3-sum 问题：即给出一个数和给定的数据集合，在数据集合中寻</p></blockquote><ul><li><p>2-sum 问题</p><p>2-sum 问题即为找到所有的数对，它们的和为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，我们注意到，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">A + B = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 成立时，说明，两个数<strong>互为相反数</strong>，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mo>−</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A = -B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span><br>所以我们可以采取 <strong>二分查找</strong> 的方法来查找数据的相反数，从而查找到数对。</p><p>这样，我们就将时间复杂度由 <strong>平方级别</strong>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>) 减少到了 <strong>线性对数级别</strong>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span>)</p><blockquote><p>注意，如果二分查找返回的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 之间，那么说明我们查找到了重复数据，（由于我们是对整个数组进行遍历，所以数据就会出现重复）应该不增加计数。</p></blockquote></li><li><p>3-sum 问题</p><p>和 2-sum 问题一样，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(a[i] + a[j])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 在数组中（不是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 也不是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mclose">]</span></span></span></span> ）时，整数对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a[i], a[j])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 是三元组的一部分。</p><p>由此，通过分治策略和使用 <strong>二分查找</strong>，我们将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">N^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 级别的问题降低到了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">N^2logN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 级别。</p></li></ul><h3 id="27-根据增长数量级做出的预测"><a class="markdownIt-Anchor" href="#27-根据增长数量级做出的预测"></a> 2.7 根据增长数量级做出的预测</h3><p>| Describe | Function | Modulus is 2 | Modulus is 10 | Handle the 10N | Handle 10N in 10 times faster|<br>|--------|------|------|-------|-----|–mathjax: true<br>—|<br>| Linear| <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>|2|10| a day| couples of hours|<br>| Linearrithmic|<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">NlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span>|2|10|a day | couples of hours|<br>| Quadratic| <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>| 4| 100| a few weeks| a day|<br>| Cubic| <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">N^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> | 8 | 1000 | a few months | couples of weeks|<br>| Exponential| <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8413309999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span></span></span></span></span></span></span></span></span> | <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8413309999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span></span></span></span></span></span></span></span></span> | <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>10</mn><mi>N</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{10N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8413309999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span></span></span></span></span></span></span></span></span></span> | forever | forever</p><h3 id="28-注意事项"><a class="markdownIt-Anchor" href="#28-注意事项"></a> 2.8 注意事项</h3><ol><li><p>大常数</p><blockquote><p>一般来说，我们认为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><msup><mi>N</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">2N^2 + cN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∼</mo><mn>2</mn><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sim 2N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 的，但是当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">c</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>，或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span> 的时候，这种估计是不正确的。</p></blockquote></li><li><p>非决定性的内循环</p><blockquote><p>由于错误的内循环，导致了错误的成本模型，从而导致了错误的分析结果</p></blockquote></li><li><p>指令时间</p><blockquote><p>对于当今的现代计算机，由于缓存技术的使用，使得访问大数组的非相邻元素所需的时间可能会很长</p></blockquote></li><li><p>系统因素</p><blockquote><p>当你在运行算法分析程序的时候，可能你的电脑并不只是在运行这一程序，同时还运行着其他程序，这样的话就有可能导致算法分析的结果的不正确。</p></blockquote></li><li><p>不分伯仲</p><blockquote><p>比较执行相同任务的程序时，通常会出现一个情形下这个算法比较好，另一个情形下另一个算法比较好的情况。</p></blockquote></li><li><p>对于输入的强烈依赖</p><blockquote><p>在 3-sum 问题中，如果我们将问题改成 <em>是否存在和为0的三个数？</em> 如果第一组的三个数都是 0，那么时间复杂度为<strong>常数级别</strong>，如果输入中不存在这样的数，则时间复杂度为 <strong>立方级别</strong></p></blockquote><blockquote><p>在这种情况下，我们通常使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>w</mi></msub></mrow><annotation encoding="application/x-tex">T_w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.13889em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.02691em">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> （最坏情况的时间复杂度） 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>a</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{av}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.13889em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:.03588em">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> （平均时间复杂度） 来表示这种情况</p></blockquote></li><li><p>多个问题参量</p><blockquote><p>成本模型并不总是单因素函数，也有可能是多因素函数。例如使用二分查找来进行白名单问题分析时，时间复杂度和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">MlogN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 成正比</p><blockquote><p>其中白名单有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个整数，输入中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 个整数</p></blockquote></blockquote></li></ol><h2 id="3-内存模型"><a class="markdownIt-Anchor" href="#3-内存模型"></a> 3. 内存模型</h2><p>在 Java 中，内存的使用一般会被填充为 <strong>8的倍数</strong></p><h3 id="31-对象"><a class="markdownIt-Anchor" href="#31-对象"></a> 3.1 对象</h3><ul><li>Integer<ul><li>一共需要 24 byte</li><li>16 bytes 为对象本身的开销</li><li>4 bytes 的 <code>int</code> 值</li><li>对象的引用，一般为 内存地址，使用 8 byte</li></ul></li></ul><h3 id="32-链表"><a class="markdownIt-Anchor" href="#32-链表"></a> 3.2 链表</h3><ul><li>Node(inner class)<ul><li>一共 40 byte</li><li>16 bytes 为对象的开销</li><li>2 * 8 bytes 的引用（<code>Node</code> 中有两个引用）</li><li>当作为内部类时，需要一个额外的指向外围类的引用</li><li>数据的开销</li></ul></li></ul><h3 id="33-数组"><a class="markdownIt-Anchor" href="#33-数组"></a> 3.3 数组</h3><blockquote><p>在 Java 中，数组被实现为了对象</p></blockquote><ul><li>数组<ul><li>24 bytes 的头信息<ul><li>16 bytes 对象开销</li><li>4 bytes 填补开销</li></ul></li></ul></li></ul><h3 id="34-string"><a class="markdownIt-Anchor" href="#34-string"></a> 3.4 String</h3><ul><li>40 bytes</li><li>Object cost, 16 bytes</li><li>reference, 8 bytes</li><li>3 int, 12 bytes<ul><li>offset</li><li>counter</li><li>hash</li></ul></li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Δ</span></span></span></span> The subString</p><blockquote><p>当你调用 <code>substring()</code> 方法时， 它重新创建了 <code>String</code> 对象， 但是并没有创建 <code>value[]</code> 数组, 这个数组被存在<strong>常量区</strong></p></blockquote><blockquote><p>所以，<code>subString()</code> 所需的内存是一个常量</p></blockquote><h2 id="4-展望"><a class="markdownIt-Anchor" href="#4-展望"></a> 4. 展望</h2><ul><li><p>不成熟的优化是万恶之源</p><blockquote><p>Premature optimization is the root of all evil</p></blockquote></li><li><p>如果运行时间已经足够快了，那么对运行时间的改进就不值得了</p><blockquote><p>不值得花费 2 倍的开发时间来提高 10 % 的性能</p></blockquote></li><li><p>但是我们当我们处理大型问题的时候，我们的确需要好的算法，好的算法在大规模问题中能带来巨大的收益</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包，队列和栈</title>
      <link href="//Algorithm/%E8%83%8C%E5%8C%85%EF%BC%8C%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/"/>
      <url>//Algorithm/%E8%83%8C%E5%8C%85%EF%BC%8C%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>它们都是一些数据对象的集合</p><h2 id="1-特点"><a class="markdownIt-Anchor" href="#1-特点"></a> 1. 特点</h2><h3 id="11-背包"><a class="markdownIt-Anchor" href="#11-背包"></a> 1.1 背包</h3><ul><li><strong>不支持</strong> 删除元素</li><li>使用其来收集元素，遍历和递归它们</li><li>元素的顺序是不确定的</li></ul><a id="more"></a><h3 id="12-队列先进先出"><a class="markdownIt-Anchor" href="#12-队列先进先出"></a> 1.2 队列(先进先出)</h3><p>这里所说的队列指的是先进先出的队列。</p><ul><li>数据元素相对此集合的顺序是<strong>先进先出</strong></li><li>队列能收集数据，同时保持它们的相对顺序</li></ul><h3 id="13-栈"><a class="markdownIt-Anchor" href="#13-栈"></a> 1.3 栈</h3><ul><li>正好与队列相反，数据元素在栈中是后进先出的。</li><li>栈也会保持数据元素的相对顺序</li></ul><h3 id="14-例子算数表达式的表示法"><a class="markdownIt-Anchor" href="#14-例子算数表达式的表示法"></a> 1.4 例子：算数表达式的表示法</h3><p>使用两个栈来表达算数表达式</p><p>当接收到一个算数表达式的时候：</p><ol><li>将数值压入<strong>数值栈</strong></li><li>将操作符压入<strong>操作符栈</strong></li><li>忽略<strong>左括号</strong></li><li>当遇到<strong>右括号</strong>的时候，弹出<strong>一个操作符</strong>，和<strong>所需要的数值</strong>，并且将计算结果压入数值栈</li></ol><h2 id="2-实现"><a class="markdownIt-Anchor" href="#2-实现"></a> 2. 实现</h2><h3 id="21-使用数组实现栈"><a class="markdownIt-Anchor" href="#21-使用数组实现栈"></a> 2.1 使用数组实现栈</h3><ul><li><code>push()</code> 方法需要检查当前栈是否是满的，如果满，则进行扩容</li><li><code>resize()</code> 方法会将当前数组的空间加倍（或减半）</li><li><code>pop()</code> 方法需要检查当前栈的大小是否<strong>小于数组的 1/4</strong>，如果成立，则将数组的空间减少为它的一半。</li><li>需要防止<strong>对象游离</strong>，当数据对象被弹出后，将其声明为 <code>null</code></li><li>缺点<ul><li>时间复杂度与<strong>数组的大小</strong>相关</li><li>所需要的空间是不可预知的</li></ul></li></ul><blockquote><p>如果当前栈的大小小于数组的 1/4，那么即使 <code>pop()</code> 方法使其减少了，它仍然比当前栈的大小还要<strong>大一倍</strong>，所以我们依旧有空间储存数据，为了防止空间的浪费，将数组的空间减少。</p><p>当一个数据对象被弹出栈后，它就<strong>再也不会被栈使用了</strong>，但是数据的引用依旧存在，所以 Java 不会将这块内存回收。这种情况就被叫做<strong>对象游离</strong></p></blockquote><h3 id="22-链表"><a class="markdownIt-Anchor" href="#22-链表"></a> 2.2 链表</h3><p>链表是一个递归的数据结果，它可以是空，或者是一个指向一个节点的引用；<br>这个节点储存一个数据元素和一个指向<strong>下一个节点或列表</strong>的引用；<br><code>Node</code>（节点）类经常被用于内部类。</p><h4 id="221-创建"><a class="markdownIt-Anchor" href="#221-创建"></a> 2.2.1 创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    Item item;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>只要声明一个 <code>Node</code> 变量，我们就能表示一个链表<br>因为 <code>Node</code> 被用作内部类，所以我们能直接地声明其成员。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Node first = <span class="keyword">new</span> Node();</span><br><span class="line">Node second = <span class="keyword">new</span> Node();</span><br><span class="line">Node thrid = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Items</span></span><br><span class="line">first.item = <span class="string">"to"</span>;</span><br><span class="line">second.item = <span class="string">"be"</span>;</span><br><span class="line">thrid.item = <span class="string">"or"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Nexts</span></span><br><span class="line">first.next = second;</span><br><span class="line">second.next = thrid;</span><br></pre></td></tr></table></figure><p><img alt="Build linked List" data-src="https://algs4.cs.princeton.edu/13stacks/images/linked-list.png"></p><h4 id="222-在头部插入"><a class="markdownIt-Anchor" href="#222-在头部插入"></a> 2.2.2 在头部插入</h4><p>使用另一个引用（例如 <code>oldfirst</code>） 来储存头结点，然后建立新节点来储存数据，然后将 <code>next</code> 指向头结点</p><p><img alt="Insert at beginning" data-src="https://algs4.cs.princeton.edu/13stacks/images/linked-list-insert-front.png"></p><h4 id="223-从头部删除"><a class="markdownIt-Anchor" href="#223-从头部删除"></a> 2.2.3 从头部删除</h4><p>将头指针<code>first</code>直接指向 <code>first.next</code> 即可<br>Java 的 garbage collector 会将内存回收。</p><p><img alt="Remove from the beginning" data-src="https://algs4.cs.princeton.edu/13stacks/images/linked-list-remove-first.png"></p><h4 id="224-在尾部插入"><a class="markdownIt-Anchor" href="#224-在尾部插入"></a> 2.2.4 在尾部插入</h4><p>就像在头部插入一样，用一个另外的引用 <code>oldlast</code> 来保存尾部节点，然后建立一个新的节点来储存数据，然后将 <code>oldlast.next</code> 声明为 <code>last</code></p><blockquote><p>注意，对于单链表，尾部节点的引用可能要通过从头结点的层层遍历才能取到，这也是为什么一般仅使用头节点来作为主要的操作节点。</p></blockquote><p><img alt="Insert at the end" data-src="https://algs4.cs.princeton.edu/13stacks/images/linked-list-insert-end.png"></p><h4 id="225-在其他地方插入和删除"><a class="markdownIt-Anchor" href="#225-在其他地方插入和删除"></a> 2.2.5 在其他地方插入和删除</h4><p>进行这个操作，我们必须要拿到所需要插入位置的前一个节点的信息来辅助我们的插入删除操作，因此我们需要<strong>遍历</strong> 链表来取得指定插入位置的前一个位置。</p><h4 id="226-遍历"><a class="markdownIt-Anchor" href="#226-遍历"></a> 2.2.6 遍历</h4><p>一般来说，我们使用 <code>foreach</code> 语句来进行遍历操作。</p><p>使用这个语句的类必须要实现 <code>Iterable</code> 和 <code>Iterator</code> 接口来返回一个迭代器和定义迭代方法。</p><p>但是对于链表这种简单结构来说，我们只需要使用一般的 <code>for</code> 语句即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">    <span class="comment">//handle x.item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-链表的使用"><a class="markdownIt-Anchor" href="#3-链表的使用"></a> 3. 链表的使用</h2><p>使用链表可以：</p><ul><li>处理任何数据</li><li>需求的空间仅仅和集合的大小成正比</li><li>时间复杂度和集合的大小<strong>无关</strong></li></ul><blockquote><p>链表的插入和删除操作仅仅是变量的<strong>赋值</strong>，以及<strong>对象的构建</strong>，它们的时间复杂度都是<strong>常数级别</strong> 的</p></blockquote><h3 id="31-实现栈"><a class="markdownIt-Anchor" href="#31-实现栈"></a> 3.1 实现栈</h3><p>将链表的头部设定为栈顶</p><ul><li>当压入数据的时候，我们<strong>在头部</strong>插入数据元素</li><li>当弹出数据的时候，我们<strong>在头部</strong>删除数据元素</li></ul><blockquote><p>选择链表头部而不是尾部进行操作的原因：链表的插入和删除操作都是在一端进行的；</p><p>链表的尾部元素一般不好获取，特别是对于单链表而言，如果采用尾部作为栈顶，那么当删除栈顶元素之后，我们无法很快的获取新的栈顶元素的引用（<strong>因为要从头部进行遍历，或者维护两个指针，这都是不必要的</strong>）；</p><p>而采用头部作为栈的顶部，仅仅需要一句声明语句 <code>newTop = top.next;</code> 即可获取到新的栈顶元素。</p></blockquote><h3 id="32-实现队列"><a class="markdownIt-Anchor" href="#32-实现队列"></a> 3.2 实现队列</h3><ul><li>设定链表的头部为队列的头部，链表的尾部为队列的尾部。</li><li>当插入元素时，在尾部插入数据。</li><li>当删除元素时，在头部删除数据。</li></ul><blockquote><p>由于队列插入和删除的位置不同，在尾部删除元素很麻烦，但是相应的插入操作却变得十分简单，仅需要改变其 <code>next</code> 域即可，而不是类似删除操作还要返回前一个数据的引用。</p></blockquote><h3 id="33-背包的实现"><a class="markdownIt-Anchor" href="#33-背包的实现"></a> 3.3 背包的实现</h3><p>将栈或队列的 <code>pop()</code> 操作去掉，就是一个背包结构。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Head 标签内容</title>
      <link href="//HTML/Head%20%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/"/>
      <url>//HTML/Head%20%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p><code>&lt;head&gt;</code> 标签中保存的是网页的 <strong>元数据</strong> 内容，不会在页面上展示；</p><p>下面简单介绍几个 <code>&lt;head&gt;</code> 标签中比较重要的子标签。</p><a id="more"></a><h2 id="2-title-标签"><a class="markdownIt-Anchor" href="#2-title-标签"></a> 2. <code>&lt;title&gt;</code> 标签</h2><p>这个标签保存着网页的标题内容，一般是网页的名字；会显示在浏览器的标题栏，在收藏网页的时候作为默认名字进行存储。</p><p><code>&lt;title&gt;</code> 标签还可以用于 SEO，提升搜索排名</p><h2 id="3-meta-标签"><a class="markdownIt-Anchor" href="#3-meta-标签"></a> 3. <code>&lt;meta&gt;</code> 标签</h2><p>这是 <code>&lt;head&gt;</code> 中比较重要的一个子标签内容，包含了网站的元数据，其中主要包括：</p><ol><li><p>charset 编码，可以用 <code>&lt;meta&gt;</code> 的 <code>charset</code> 属性来指定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这种方法，可以硬指定网站使用的编码，如果浏览器强制使用的编码不正确，则可能无法正确渲染网页。</p></li><li><p>元数据信息，通过 <code>name</code> 和 <code>description</code> 属性来描述</p><p><code>name</code> 描述的是元数据的名字，<code>description</code> 属性才是真正的元数据内容。</p><p>可以使用元数据内容为网站进行 SEO，或者提供网站维护者的信息。</p></li><li><p>特殊的元数据</p><p>可以通过一些特别的元数据描述来对特定的网站链接进行富文本优化。</p><p>如可以使用 <code>og</code> 前缀，让网站在 Facebook 的链接进行富文本化，显示网站 logo 和内容。</p></li></ol><h2 id="4-link-标签"><a class="markdownIt-Anchor" href="#4-link-标签"></a> 4. <code>&lt;link&gt;</code> 标签</h2><p><code>&lt;link&gt;</code> 标签主要有以下的作用：</p><ol><li><p>用于表示网站 logo</p><p>可以使用 <code>rel</code> 属性指定为 <code>icon</code>，然后使用 <code>herf</code> 链接到图片</p></li><li><p>用于链接外部 CSS</p><p>属于最常用功能，通过 <code>rel=&quot;stylesheet&quot;</code> 和 <code>herf</code> 来指定需要链接的外部 CSS 表</p></li></ol><h2 id="5-script-标签"><a class="markdownIt-Anchor" href="#5-script-标签"></a> 5. <code>&lt;script&gt;</code> 标签</h2><p>用于指定页面使用的 JS 内容</p><p>可以直接包含 js 文本，也可以通过 <code>src</code> 属性来指定外部 <code>.js</code> 文件</p><h2 id="6-指定语言"><a class="markdownIt-Anchor" href="#6-指定语言"></a> 6. 指定语言</h2><p>这虽然不是 <code>&lt;head&gt;</code> 标签的内容，但是语言作为网页元数据的一种，有必要在这里说明。</p><p>可以通过给任何的标签添加 <code>lang</code> 属性来设置语言，如果要给整个页面指定语言，则在 <code>&lt;html&gt;</code> 标签中添加 <code>lang</code> 属性即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh_CN"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络考试速记</title>
      <link href="//Reviews/ComputerNetwork/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E8%AF%95%E9%80%9F%E8%AE%B0/"/>
      <url>//Reviews/ComputerNetwork/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E8%AF%95%E9%80%9F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-osi-参考模型"><a class="markdownIt-Anchor" href="#1-osi-参考模型"></a> 1. OSI 参考模型</h2><p>从低到高：</p><ol><li><p>物理层</p><blockquote><p>通信信道的原始 <strong>比特</strong>，机械、电子、时序、物理介质</p></blockquote></li><li><p>数据链路层</p><blockquote><p>数据帧，控制对共享信道的访问（介质访问控制子层）</p></blockquote></li></ol><a id="more"></a><ol start="3"><li><p>网络层</p><blockquote><p>控制子网的运行，数据包的端到端传输，路由算法，处理拥塞</p></blockquote></li><li><p>传输层</p><blockquote><p>向会话层提供服务，为应用层提供抽象，与网络层一起处理拥塞</p></blockquote></li><li><p>会话层</p><blockquote><p>令牌管理，同步，崩溃恢复</p></blockquote></li><li><p>表示层</p><blockquote><p>传递信息的语法和语义，统一不同计算机的数据格式并提供抽象接口。</p></blockquote></li><li><p>应用层</p><blockquote><p>OSI 最顶层，通常包含用户需要的各种协议，如 HTTP</p></blockquote></li></ol><h2 id="2-tcpip-参考模型"><a class="markdownIt-Anchor" href="#2-tcpip-参考模型"></a> 2. TCP/IP 参考模型</h2><ol><li><p>链路层</p><blockquote><p>实际上是一个接口，而不是层</p></blockquote></li><li><p>互联网层</p><blockquote><p>大致对应 OSI 网络层</p></blockquote></li><li><p>传输层</p><blockquote><p>OSI 中的传输层</p></blockquote></li><li><p>应用层</p><blockquote><p>TCP/IP 中没有会话层和表示层，应用层将其整合了。</p></blockquote></li></ol><p>与 OSI 的对比</p><table><thead><tr><th>OSI</th><th>TCP/IP</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td></tr><tr><td>表示层</td><td> </td></tr><tr><td>会话层</td><td> </td></tr><tr><td>传输层</td><td>传输层</td></tr><tr><td>网络层</td><td>互联网层</td></tr><tr><td>数据链路层</td><td> </td></tr><tr><td>物理层</td><td> </td></tr></tbody></table><p>OSI 先有层级，后有协议；</p><p>TCP/IP 先有协议，后有层级</p><h2 id="3-信息传输介质"><a class="markdownIt-Anchor" href="#3-信息传输介质"></a> 3. 信息传输介质</h2><ol><li><p>磁介质</p><blockquote><p>低成本，短途运输速率高，延迟高</p></blockquote></li><li><p>双绞线</p><blockquote><p>即常用的网线。低噪声，低延迟，拥有足够的带宽，是目前应用最为广泛的信息传输介质</p></blockquote></li><li><p>同轴电缆</p><blockquote><p>带宽比双绞线大，抗噪性较好，主要用于 <strong>长距离信息运输</strong></p></blockquote></li><li><p>电力线</p><blockquote><p>布置方便；但电源信号专用，频率不符，目前应用低</p></blockquote></li><li><p>光纤</p><blockquote><p>超高带宽，主要用于长距离通信<br>光纤相对于铜线，具有高带宽，低衰减，重量轻，部署难，接口费用高 的特点</p></blockquote></li></ol><h2 id="4-多路复用"><a class="markdownIt-Anchor" href="#4-多路复用"></a> 4. 多路复用</h2><ol><li><p>频分复用</p><blockquote><p>将频谱分为几个频段，每个用户 <strong>完全拥有</strong> 其中一个频段进行通信。<br>OFDM 已经广泛应用于 802.11、有线电视网络和电力线网络</p></blockquote></li><li><p>时分复用</p><blockquote><p>用户以循环的方式轮流工作，周期性地获得 <strong>整个带宽</strong> 非常短的一个时间<br>TDM 广泛用于电话网络和蜂窝网络中</p></blockquote></li><li><p>码分复用</p><blockquote><p>通过码片来提取叠加信号中的信息。<br>通过不同的码片序列来提取对应的信息，并将其他的信息都当做噪声<br>CDMA 被用于卫星通信和蜂窝网络以及有线电视网络</p></blockquote></li></ol><h2 id="5-数据链路层"><a class="markdownIt-Anchor" href="#5-数据链路层"></a> 5. 数据链路层</h2><p>数据链路层操作的对象是数据帧，向网络层提供服务，进行差错控制和流量控制。</p><h3 id="51-分帧"><a class="markdownIt-Anchor" href="#51-分帧"></a> 5.1 分帧</h3><ol><li><p>字节长度</p><blockquote><p>通过计算字节长度来分帧<br>不准确，很少使用</p></blockquote></li><li><p>填充字节标志</p><blockquote><p>帧变长<br>某些情况会干扰帧分界</p></blockquote></li><li><p>填充比特</p><blockquote><p>确保最小转换密度，有助于物理层保持同步<br>USB 使用该技术</p></blockquote></li><li><p>物理层编码违禁法</p><blockquote><p>通过使用一些物理层的违法编码或者冗余字节来进行分帧<br>不需要填充数据</p></blockquote></li></ol><p>802.11 和以太网综合使用了上述方法（不包括字节长度）</p><h3 id="52-差错检测和修正"><a class="markdownIt-Anchor" href="#52-差错检测和修正"></a> 5.2 差错检测和修正</h3><h4 id="521-纠错码不可靠信道wifi"><a class="markdownIt-Anchor" href="#521-纠错码不可靠信道wifi"></a> 5.2.1 纠错码——不可靠信道(WIFI)</h4><ol><li><p>海明码</p><blockquote><p>纠错存储器<br>检测 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">d</span></span></span></span> 个错误，需要距离为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.77777em;vertical-align:-.08333em"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 的编码方案</p></blockquote></li><li><p>卷积码</p><blockquote><p>GSM 使用</p></blockquote></li><li><p>里德罗门码</p><blockquote><p>纠错能力强，处理突发错误能力强<br>应用于光盘，卫星通信</p></blockquote></li><li><p>低密度奇偶校验</p><blockquote><p>纠错性能最佳<br>使用于 802.11，数字广播，万兆以太</p></blockquote></li></ol><h4 id="522-检错码可靠信道光纤"><a class="markdownIt-Anchor" href="#522-检错码可靠信道光纤"></a> 5.2.2 检错码——可靠信道(光纤)</h4><ol><li><p>奇偶校验</p><blockquote><p>只能检查一处错误</p></blockquote></li><li><p>校验和</p><blockquote><p>16 位字节和，可以检验奇偶校验检查不出的错误</p></blockquote></li><li><p>循环冗余检验</p><blockquote><p>多项式检验<br>最可靠，使用最广泛<br>使用于局域网和点到点连接</p></blockquote></li></ol><h3 id="53-回退-n-步与选择重传"><a class="markdownIt-Anchor" href="#53-回退-n-步与选择重传"></a> 5.3 回退 N 步与选择重传</h3><ol><li><p>停等协议</p><blockquote><p>直到接收到确认后才发下一帧</p></blockquote></li><li><p>回退 N 步</p><blockquote><p>不需要等到回报才发下一帧；而是直接发 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span> 帧；<br>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span> 个帧都没有回报，则堵塞。</p><p>出错时，直接丢弃，发送方回退，重新发送错误之后的帧。<br>错误多时，影响带宽</p></blockquote></li><li><p>选择重传</p><blockquote><p>相比回退 N 步，不是由发送方回退 N 个窗口后重发；<br>而是由接收方缓存接下来的帧，直到错误帧重发后，进行合并。</p></blockquote></li><li><p>两者的流量控制</p><blockquote><p>通过滑动窗口来进行流量控制。<br>只有接收方的窗口滑动时（回报），发送方的窗口才能滑动<br>回报没有拿到，则发送方的窗口阻塞，如果超时，则尝试重发</p></blockquote></li></ol><h2 id="6-mac-子层"><a class="markdownIt-Anchor" href="#6-mac-子层"></a> 6. MAC 子层</h2><ol><li><p>MAC： Medium Access Control，介质访问控制子层</p></li><li><p>用途： 用于确定多道访问中的下一个使用者</p></li><li><p>使用原因</p><blockquote><p>多个网络使用者交流无序会导致混乱和信道拥塞，为了确定消息发送和传输测序，保证信道畅通。</p></blockquote></li></ol><h3 id="61-信道分配"><a class="markdownIt-Anchor" href="#61-信道分配"></a> 6.1 信道分配</h3><ol><li><p>静态分配</p><blockquote><p>用户固定一个信道<br>无法解决突发流量问题</p></blockquote></li><li><p>动态分配假设</p><blockquote><p>单信道是核心；<br>冲突可观察是最基本的的假设</p></blockquote></li></ol><h3 id="62-多路访问协议"><a class="markdownIt-Anchor" href="#62-多路访问协议"></a> 6.2 多路访问协议</h3><h4 id="621-aloha"><a class="markdownIt-Anchor" href="#621-aloha"></a> 6.2.1 ALOHA</h4><h5 id="6211-纯-aloha"><a class="markdownIt-Anchor" href="#6211-纯-aloha"></a> 6.2.1.1 纯 ALOHA</h5><ol><li>发送不受限制</li><li>冲突的帧将损坏</li><li>等待随机时间后重发</li><li>最好的信道利用率为 18%</li></ol><h5 id="6212-分槽-aloha"><a class="markdownIt-Anchor" href="#6212-分槽-aloha"></a> 6.2.1.2 分槽 ALOHA</h5><ol><li><p>用户只能在下一个时间槽的开始时刻发送帧</p><blockquote><p>即帧的发送必须等待时间槽</p></blockquote></li><li><p>利用率： 37% 空槽，37% 成功， 26% 冲突</p></li></ol><h4 id="622-载波侦听多路访问"><a class="markdownIt-Anchor" href="#622-载波侦听多路访问"></a> 6.2.2 载波侦听多路访问</h4><p>称为 CSMA 协议。</p><p>CSMA： Carrier Sense Protocol</p><h5 id="6221-坚持和非坚持"><a class="markdownIt-Anchor" href="#6221-坚持和非坚持"></a> 6.2.2.1 坚持和非坚持</h5><ol><li><p>1-坚持</p><blockquote><p>侦听信道，直到信道空闲<br>冲突发生，等待随机时间后重发<br>冲突的发生概率和信道带宽延迟积有关</p></blockquote></li><li><p>非坚持</p><blockquote><p>侦听信道，如果信道忙，随机等待<br>其余与 1-坚持 相同</p></blockquote></li></ol><h5 id="6222-带冲突检测的-csma"><a class="markdownIt-Anchor" href="#6222-带冲突检测的-csma"></a> 6.2.2.2 带冲突检测的 CSMA</h5><p>称为 CSMA/CD （CSMA with Collision Detection）</p><p>冲突检测：<strong>传输时</strong> 侦听信道，如果读回的信号不同于其发出的信号特征，则发生了冲突。</p><p>与普通 CSMA 的不同：CSMA/CD 会在检测到冲突后，立即停止帧的发送；而普通的 CSMA 不会</p><h4 id="623-无冲突协议"><a class="markdownIt-Anchor" href="#623-无冲突协议"></a> 6.2.3 无冲突协议</h4><ol><li><p>位图协议</p><blockquote><p>通过在竞争槽中的对应槽插入位来向网络中广播站的发帧意愿<br>高序号的站比低序号的站平均等待时间要短</p></blockquote></li><li><p>令牌协议</p><blockquote><p>令牌的拥有者具有发帧权限<br>发帧与否，都必须将令牌传到下一站<br>不存在高序号站和低序号站的差别</p></blockquote></li><li><p>二进制倒计数</p><blockquote><p>通过逻辑或来得到位时间<br>站通过检测位时间和地址对应位的相同与否，来确定是否获取信道</p></blockquote></li></ol><h4 id="624-有限竞争协议"><a class="markdownIt-Anchor" href="#624-有限竞争协议"></a> 6.2.4 有限竞争协议</h4><p>低负载下，竞争有利于提高延迟；</p><p>高负载下，采用无冲突技术能获取更好的信道效率。</p><p>通过给某些站赋予更高的成功获取信道的概率，或者增减时间槽内的站数量来实现。</p><h4 id="625-无线局域网冲突问题"><a class="markdownIt-Anchor" href="#625-无线局域网冲突问题"></a> 6.2.5 无线局域网冲突问题</h4><p>由于无线覆盖范围的差别，站在开始传送时，无法知道接收方是否有无线电活动。</p><ol><li><p>隐藏终端问题</p><blockquote><p>由于竞争者离得太远，无法检测到潜在的竞争者</p></blockquote></li><li><p>暴露终端问题</p><blockquote><p>发送方相距太近，而接收方不在危险范围内，导致信道的浪费</p></blockquote></li></ol><p>解决办法称为 MACA （Multiple Access with Collision Avoidance） 冲突避免多路访问。</p><h4 id="626-冲突避免多路访问"><a class="markdownIt-Anchor" href="#626-冲突避免多路访问"></a> 6.2.6 冲突避免多路访问</h4><p>发送方在发送帧之前，先发送一个 RTS 短帧；</p><p>接收方回报一个 CTS 短帧。</p><p>其他站检测到这两个帧，保持静默。</p><p>RTS： Request To Send</p><p>CTS: Clear To Send</p><h3 id="63-以太网"><a class="markdownIt-Anchor" href="#63-以太网"></a> 6.3 以太网</h3><h4 id="631-mac-协议"><a class="markdownIt-Anchor" href="#631-mac-协议"></a> 6.3.1 MAC 协议</h4><p>MAC 地址有 6 字节， 48 位</p><table><tr><td>8 字节</td><td>6</td><td>6</td><td>2</td><td>0-1500</td><td>0-46</td><td>4</td></tr><tr><td>前导码</td><td>目标地址</td><td>原地址</td><td>类型</td><td>数据</td><td>填充</td><td>校验和</td></tr></table><ol><li><p>以太网限制有效帧至少 64 字节长</p><blockquote><p>防止由于帧过短导致传输时间短，从而引起冲突误判为非冲突</p></blockquote></li><li><p>二进制指数后退</p><blockquote><p>冲突后，在对应区间选择等待的时间槽数量 ($0 \sim 2^i -1 $)，最大为 1023<br>冲突少时，确保低延迟；<br>冲突多时，确保解决问题的时间间隔</p></blockquote></li></ol><h4 id="632-交换机和集线器的区别"><a class="markdownIt-Anchor" href="#632-交换机和集线器的区别"></a> 6.3.2 交换机和集线器的区别</h4><p>交换机：</p><ol><li>全双工电缆不存在冲突问题</li><li>通过缓冲来解决输出端口的冲突问题</li></ol><h3 id="64-80211-wifi-mac-协议"><a class="markdownIt-Anchor" href="#64-80211-wifi-mac-协议"></a> 6.4 802.11 WiFi MAC 协议</h3><p>无线电存在信号弱，半双工特性，冲突代价大，所以试图去避免冲突。</p><ol><li><p>采用冲突避免 CSMA (CSMA/CA)</p><blockquote><p>在发送前侦听信道，和冲突后指数后退(等待时间槽)<br>通过 ACK 来确认推断冲突是否发生</p></blockquote></li><li><p>使用 NAV 来确认信道忙的时间段</p><blockquote><p>NAV 是在站自身管理的；<br>在帧中夹带 NAV 信息，但是不单独传输 NAV</p></blockquote></li></ol><p>帧结构：</p><table><tr><td>2 字节</td><td>2</td><td>6</td><td>6</td><td>6</td><td>2</td><td>0-2312</td><td>4</td></tr><tr><td>帧控制</td><td>持续时间</td><td>接收地址</td><td>发送地址</td><td>远端地址</td><td>序号</td><td>数据</td><td>帧检验序列</td></tr></table><p>帧控制结构：</p><table><tr><td>2 比特</td><td>2</td><td>4</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>协议版本</td><td>类型</td><td>子类型</td><td>去往 DS</td><td>来自 DS</td><td>更多段</td><td>重传</td><td>电源管理</td><td>更多数据</td><td>受保护的</td><td>顺序</td></tr></table><p>WiFi 定义了关联服务和重新关联服务。</p><p>关联服务用于连接 AP；</p><p>重新关联服务用于改变首选 AP。</p><p>WiFi 连接前必须验证，使用 WPA2</p><h3 id="65-网桥"><a class="markdownIt-Anchor" href="#65-网桥"></a> 6.5 网桥</h3><h4 id="651-网桥转发算法"><a class="markdownIt-Anchor" href="#651-网桥转发算法"></a> 6.5.1 网桥转发算法</h4><ol><li><p>如果目标地址端口和源端口相同，丢弃该帧</p></li><li><p>如果去往目标地址的端口与源端口不同，转发</p></li><li><p>如果目标端口未知，进行泛洪，转发到除了源端口的所有其他端口</p></li></ol><h4 id="652-生成树网桥"><a class="markdownIt-Anchor" href="#652-生成树网桥"></a> 6.5.2 生成树网桥</h4><p>是为了解决由于网桥间存在 <strong>冗余链路</strong> 导致的 <strong>泛洪循环</strong> 问题。</p><p>通过确定根，通过根生成一个生成树来确保泛洪算法不出现循环。</p><h3 id="66-vlan"><a class="markdownIt-Anchor" href="#66-vlan"></a> 6.6 VLAN</h3><p>由于安全性，负载均衡，广播风暴问题，需要将 LAN 在内部分成多个 LAN 并进行动态调整，此时就出现了 VLAN。</p><p>通过虚拟的网桥来进行连接和交换， VLAN 通过在帧中加上 VLAN 协议(包括优先级和 VLAN 标识符) 来确定设备位置。</p><p>VLAN 兼容旧设备，在最后的 VLAN 端口处，有 VLAN 的帧会被还原为原来的普通数据帧。</p><h2 id="7-交换设备"><a class="markdownIt-Anchor" href="#7-交换设备"></a> 7. 交换设备</h2><ol><li><p>网关工作在 <strong>应用层和传输层</strong></p></li><li><p>路由器工作在 <strong>网络层</strong></p></li><li><p>网桥和交换机工作在 <strong>数据链路层</strong></p></li><li><p>中继器，集线器工作在 <strong>物理层</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Class Basic</title>
      <link href="//CSharp/CSharp%20Class%20Basic/"/>
      <url>//CSharp/CSharp%20Class%20Basic/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>C# 类的基本语法和 Java 无异</p><p>下面只具体讲讲有区别的地方</p><a id="more"></a><h2 id="2-构造函数链"><a class="markdownIt-Anchor" href="#2-构造函数链"></a> 2. 构造函数链</h2><p>Java 中可以通过在构造函数中使用 <code>this</code> 来调用另一个构造函数，从而实现构造函数的职责委托链条。</p><p>C# 中则使用 <strong>冒号</strong> 来保证 <code>this</code> 的优先调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empolyee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Empolyee() &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"Unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Empolyee(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Empolyee</span> &#123;</span><br><span class="line"></span><br><span class="line">    Empolyee(): <span class="keyword">this</span>(<span class="string">"Unknwon"</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Empolyee(<span class="keyword">string</span> name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-可选参数"><a class="markdownIt-Anchor" href="#3-可选参数"></a> 3. 可选参数</h2><p>当然，在 .NET 4.0 以上可以在构造函数中使用可选参数。</p><p>可选参数用法和其他方法相同</p><h2 id="4-静态构造函数"><a class="markdownIt-Anchor" href="#4-静态构造函数"></a> 4. 静态构造函数</h2><p>实际上就是 Java 中的 <strong>静态初始化块</strong>，具体的行为也区别不大。</p><ol><li>静态构造函数只能有一个</li><li>静态构造函数不能重载，不接受任何参数</li><li>静态构造函数在类实例构建和首次调用静态成员时调用</li><li>静态构造函数会 <strong>先于所有构造函数执行</strong></li></ol><p>不过语法上稍有不同，Java 采用 <code>static</code> 加大括号形式，而 C# 采用在构造函数前面加 <code>static</code> 来实现</p><h2 id="5静态类"><a class="markdownIt-Anchor" href="#5静态类"></a> 5.静态类</h2><p><strong>Java 中没有的内容</strong></p><p>可以在类级别使用 <code>static</code> 关键字，这样的类是 Top-level 的 <strong>静态类</strong>，具有如下特性：</p><ol><li>不能使用 <code>new</code> 关键字构建实例</li><li>只能拥有 <code>static</code> 成员</li></ol><p>实际上，就是 Java 中的工具类写法。</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Const and Readonly Field</title>
      <link href="//CSharp/CSharp%20Const%20and%20Readonly%20Field/"/>
      <url>//CSharp/CSharp%20Const%20and%20Readonly%20Field/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>C# 提供了两种 <strong>常量级别</strong> 数据，相当于 Kotlin 中的 <code>const</code> 和 <code>lazy value</code>；</p><p>使用 <code>const</code> 和 <code>readonly</code> 来进行修饰</p><a id="more"></a><h2 id="2-const"><a class="markdownIt-Anchor" href="#2-const"></a> 2. Const</h2><p><code>const</code> 类型是 <strong>编译时常量</strong>。</p><p><code>const</code> 必须被初始化！</p><p>与 Kotlin 不同的是 C# 中的 <code>const</code> 除了字面常量以外，还允许使用 <code>null</code> 应用。</p><p>除此之外，C# 的 <code>const</code> 还允许在局部作用域使用，而 Kotlin 的 <code>const</code> 只允许在 Top-level 使用</p><h2 id="3-readonly-field"><a class="markdownIt-Anchor" href="#3-readonly-field"></a> 3. Readonly Field</h2><p>只读字段是一种特殊的 <code>lazy</code> 常量。</p><p>和 Kotlin 的 <code>lazy-value</code> 不同的是：</p><ol><li><p>只读字段可以不被初始化</p></li><li><p>只读字段 <strong>只能被显式初始化，或者构造函数初始化</strong></p></li><li><p>如果不被初始化，那么显式字段拥有默认值</p></li></ol><h2 id="4-两者区别"><a class="markdownIt-Anchor" href="#4-两者区别"></a> 4. 两者区别</h2><p>C# 中 <code>const</code> 和 <code>readonly</code> 的主要区别在于：</p><p><code>const</code> 是 <strong>隐式静态的</strong>，即可以直接通过类名来调用 <code>const</code></p><p>而 <code>readonly</code> <strong>不是隐式静态的</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Object Initialization</title>
      <link href="//CSharp/CSharp%20Object%20Initialization/"/>
      <url>//CSharp/CSharp%20Object%20Initialization/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>为了简化对象初始化的流程，C# 提供了 <strong>对象初始化语法</strong>。</p><p>简单的来说就是通过类似 <strong>数组初始化</strong> 的方法来对变量进行初始化操作。</p><a id="more"></a><h2 id="2-语法"><a class="markdownIt-Anchor" href="#2-语法"></a> 2. 语法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point p = <span class="keyword">new</span> Point &#123;x = <span class="number">1.0</span>, y = <span class="number">2.0</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-原理"><a class="markdownIt-Anchor" href="#3-原理"></a> 3. 原理</h2><p>此语法实际上是一个语法糖，其原理就是先调用 <strong>默认构造函数</strong>，然后再对每个属性或者字段 <strong>依次赋值</strong>。</p><p>和以下代码行为相同。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point point = <span class="keyword">new</span> Point();</span><br><span class="line">point.x = <span class="number">1.0</span>;</span><br><span class="line">point.y = <span class="number">2.0</span>;</span><br></pre></td></tr></table></figure><h2 id="4-调用自定义构造函数"><a class="markdownIt-Anchor" href="#4-调用自定义构造函数"></a> 4. 调用自定义构造函数</h2><p>对象初始化块除了调用默认的构造函数以外，还可以调用自定义的构造函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point point = <span class="keyword">new</span> Point(<span class="string">"This is a point"</span>) &#123;x = <span class="number">1.0</span>, y = <span class="number">2.0</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-初始化内部引用属性"><a class="markdownIt-Anchor" href="#5-初始化内部引用属性"></a> 5. 初始化内部引用属性</h2><p>由于自动属性默认为引用类型赋值为 <code>null</code> ，所以内部的属性必须经过正确的初始化之后才能使用。</p><p>为了简化繁琐的声明语句， C# 也提供了对内部引用属性的初始化语法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Rectangle rect = <span class="keyword">new</span> Rectangle</span><br><span class="line">&#123;</span><br><span class="line">    TopLeft = <span class="keyword">new</span> Point &#123; X = <span class="number">10</span>, Y = <span class="number">10</span> &#125;,     <span class="comment">// 注意逗号</span></span><br><span class="line">    BottomRight = <span class="keyword">new</span> Point &#123; X = <span class="number">200</span>, Y = <span class="number">200</span> &#125;</span><br><span class="line">&#125;;  <span class="comment">// 注意分号</span></span><br></pre></td></tr></table></figure><p>其行为和如下代码相同：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Rectangle rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line">Point p1 = <span class="keyword">new</span> Point();</span><br><span class="line">p1.X = <span class="number">10</span>;</span><br><span class="line">p1.Y = <span class="number">10</span>;</span><br><span class="line">rect.TopLeft = p1;</span><br><span class="line"></span><br><span class="line">Point p2 = <span class="keyword">new</span> Point();</span><br><span class="line">p2.X = <span class="number">200</span>;</span><br><span class="line">p2.Y = <span class="number">200</span>;</span><br><span class="line">rect.BottomRight = p2;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Properties and Fields</title>
      <link href="//CSharp/CSharp%20Properties%20and%20Fields/"/>
      <url>//CSharp/CSharp%20Properties%20and%20Fields/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>C# 相对于 Java 的一个较大的改进就是提供了类的 <strong>属性访问</strong> 语法。</p><p>在这里，将和 Kotlin 来比较学习。</p><a id="more"></a><h2 id="2-定义属性"><a class="markdownIt-Anchor" href="#2-定义属性"></a> 2. 定义属性</h2><p>这是 C# 和 Kotlin 的第一个不同，</p><p>C# 的普通属性需要 <strong>自定义后备字段(backing field)</strong>；</p><p>而 Kotlin 不允许字段，只在 getter 和 setter 中使用 <code>field</code> 来指代字段。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> X &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            x = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面的 <code>value</code> 指代的是传入 setter 的值</p><p>而与之相反的是，Kotlin 允许 setter 使用括号来进行传入参数命名</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">get</span>() = field</span><br><span class="line">        <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            field = value</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-静态属性"><a class="markdownIt-Anchor" href="#3-静态属性"></a> 3. 静态属性</h2><p>Kotlin 实际上没有这个语法，只能使用伴生对象来实现。</p><p>C# 支持静态属性，不过只能应用于静态字段。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Bank</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> interest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Interest &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> interest; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; interest = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-自动属性"><a class="markdownIt-Anchor" href="#4-自动属性"></a> 4. 自动属性</h2><p>如果一个属性不包括具体逻辑，只负责简单获取返回，那么定义一大堆私有后备字段是极其不方便的，所以 C# 提供了 <strong>自动属性</strong>，使用一个 <strong>私有的后备字段</strong> 和 简单的 getter 和 setter。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> X &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Y &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于后备字段不可见，所以整个类都必须使用 <strong>属性</strong> 来进行操作，而不能直接操作字段。</p><blockquote><p>这点和 Kotlin 的行为很像</p></blockquote><p>有一点需要注意的地方，自动属性会使用默认值来填充私有后备属性；</p><p>这说明任何 <strong>引用类型</strong> 默认为 <code>null</code>，使用时需要注意。</p><p>在 C# 6.0 后可以对自动属性进行初始化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> X &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125; = <span class="number">1.0</span></span><br></pre></td></tr></table></figure><h2 id="5-只读只写属性"><a class="markdownIt-Anchor" href="#5-只读只写属性"></a> 5. 只读只写属性</h2><p><strong>忽略</strong>属性中对应的 <code>set</code> 或者 <code>get</code> 可以让属性成为 <strong>只读只写属性</strong></p><p>当进行写入操作时，编译器会报错。</p><blockquote><p>而 Kotlin 使用 <code>var</code> 和 <code>val</code> 来区分可读可写，如果需要做严格限制，可以将 getter 或者 setter 设置为私有</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Visibility Modifiers</title>
      <link href="//CSharp/CSharp%20Visibility%20Modifiers/"/>
      <url>//CSharp/CSharp%20Visibility%20Modifiers/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>C# 的访问修饰符比 Java 多了两个 <code>internal</code> 和 <code>protected internal</code></p><p>默认行为也不同</p><a id="more"></a><h2 id="2-internal"><a class="markdownIt-Anchor" href="#2-internal"></a> 2. Internal</h2><p>C# 新增的 <code>internal</code> 访问修饰符，指的是，该类型的可见范围为 <strong>当前程序集</strong>(即 <code>.dll</code> 和 <code>.exe</code> 中)</p><blockquote><p>注意和 Java 的 package 级别的可见性区分，<code>internal</code> 指示的是整个程序集的可见性。</p></blockquote><h2 id="3-protected-internal"><a class="markdownIt-Anchor" href="#3-protected-internal"></a> 3. Protected Internal</h2><p><code>protected internal</code> 实际上是 <code>protected</code> 和 <code>internal</code> 的一个 <code>union</code>。</p><p>它指示的是，该类型在当前程序集可见 <strong>或者</strong> 在其他程序集中的派生类可见</p><h2 id="4-修饰限制"><a class="markdownIt-Anchor" href="#4-修饰限制"></a> 4. 修饰限制</h2><p>Top-level 的类型只能使用 <code>public</code> 和 <code>internal</code> 来修饰，如普通的类。</p><p>嵌套类、嵌套的数据结构可以使用其他的修饰符。</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 分部类</title>
      <link href="//CSharp/CSharp%20%E5%88%86%E9%83%A8%E7%B1%BB/"/>
      <url>//CSharp/CSharp%20%E5%88%86%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>当开发大型项目时，会出现某个类非常长的情况。</p><p>C# 对此提供了一个 <code>partial</code> 关键字；</p><p>可以用它将一个类分割成多个文件，以期分隔经常改动的内容和不经常改动的内容。</p><a id="more"></a><p>例如 <code>Empolyee.cs</code> ：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将其分割为两个文件，然后使用 <code>partial</code> 进行标记。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Employee.cs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Employee.Internal.cs</span></span><br><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，文件的名字是可以随便取的，并没有特别的限制。</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSX Mono Halal Installation</title>
      <link href="//Mono/OSX%20Mono%20Halal%20Installation/"/>
      <url>//Mono/OSX%20Mono%20Halal%20Installation/</url>
      
        <content type="html"><![CDATA[<p>在开发时，总想保证自己的开发平台得到及时的更新；</p><p>但是使用官方安装包的安装不方便进行快速更新，而且安装下来一大堆版本堆积也不够清真。</p><p>所以，在这里使用 Homebrew Cask 可以让 mono-mdk 得到及时，清真的安装和更新。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install mono-mdk</span><br></pre></td></tr></table></figure><blockquote><p>Homebrew 也有 mono 包，但是不知道为什么那个包一般的软件认不出来</p></blockquote><p>有一点需要注意的地方就是，Visual Studio For Mac Preview 使用的是比较新的 mono，此时我们需要 tap <code>caskroom/versions</code> 仓库来获取 mono-mdk 的 preview 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/versions</span><br><span class="line">brew cask install mono-mdk-preview</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mono </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mono </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《编写可读代码的艺术》笔记</title>
      <link href="//CleanCode/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%20%E7%AC%94%E8%AE%B0/"/>
      <url>//CleanCode/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-代码应该易于理解"><a class="markdownIt-Anchor" href="#1-代码应该易于理解"></a> 1. 代码应该易于理解</h2><p>好的代码，应该能让人易于理解。</p><p>理解难度指的是别人<strong>读懂</strong>你的代码所需的时间。</p><blockquote><p>读懂指的是，能对代码进行修改和扩展，并保持原有功能不变。</p></blockquote><p>易于理解的代码也易于测试，集成，模块化和扩展。</p><p>从提高编码能力来看：<strong>程序员应该以写出易于理解的代码为核心目标。</strong></p><a id="more"></a><h2 id="2-把信息装到名字中"><a class="markdownIt-Anchor" href="#2-把信息装到名字中"></a> 2. 把信息装到名字中</h2><h3 id="21-选择专业的词-不要空洞"><a class="markdownIt-Anchor" href="#21-选择专业的词-不要空洞"></a> 2.1 选择专业的词, 不要空洞</h3><p><code>get</code> 这个词很抽象，应该使用 <code>download</code> <code>fetch</code> 等更具有明显指向的词。</p><p>下表是一个建议：</p><table><thead><tr><th>单词</th><th>更多选择</th></tr></thead><tbody><tr><td>send</td><td>deliver, dispatch, announce, distribute, route</td></tr><tr><td>find</td><td>search, extract, locate, recover</td></tr><tr><td>start</td><td>launch, create, begin, open</td></tr><tr><td>make</td><td>create, set up, build, generate, compose, add, new</td></tr></tbody></table><p><strong>关键思想：清晰精确比装可爱要好</strong></p><h3 id="22-避免使用泛泛的名字"><a class="markdownIt-Anchor" href="#22-避免使用泛泛的名字"></a> 2.2 避免使用泛泛的名字</h3><p>例如 <code>tmp</code> 和 <code>retval</code> 这种空洞的词语不要使用。</p><p><code>tmp</code> 这个名字只应用于<strong>短期</strong>存在且<strong>临时性</strong>为其主要存在因素的变量。</p><p><code>i</code> <code>j</code> <code>k</code> 经常被应用于迭代器，但是应该优先考虑比这些变量更为贴切的命名。</p><h3 id="23-使用具体的名字代替抽象的名字"><a class="markdownIt-Anchor" href="#23-使用具体的名字代替抽象的名字"></a> 2.3 使用具体的名字代替抽象的名字</h3><p>例如 <code>ServerCanStart()</code>，如果它是检测服务是否可以监听某个给定的端口的话，那么就应该声明为 <code>CanListenOnPort()</code></p><h4 id="例子-run_locally"><a class="markdownIt-Anchor" href="#例子-run_locally"></a> 例子： <code>run_locally</code></h4><p>如果我们有个命令行标识叫 <code>run_locally</code>，那么很难推断出它究竟有什么用处，可能需要在本地运行的时候使用它？但不明白为什么使用它。</p><p>假如 <code>run_locally</code> 是用于输出日志，那么就应该把它改成 <code>extra_logging</code> ，如果 <code>run_locally</code> 不仅做这个工作怎么办呢？假如说它还承担了建立和使用一个本地数据库的工作。</p><p>那么就应该 <strong>新建另一个标志</strong> <code>use_local_database</code></p><h3 id="24-为名字附带更多信息"><a class="markdownIt-Anchor" href="#24-为名字附带更多信息"></a> 2.4 为名字附带更多信息</h3><p>为你的名字带上一些具体的信息，比如说变量的 <strong>内在格式</strong>，和变量的 <strong>单位</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> id;  <span class="comment">// Example: "af84ef845cd8"</span></span><br></pre></td></tr></table></figure><p>如上，如果这个变量的格式很重要，那么就应该在名字附上 <code>hex_id</code></p><p>这里指的就是变量的 <strong>内在格式</strong>，而不是类似匈牙利命名法的变量的类型。</p><p>有时候单位也是很重要的，那么就应该加上单位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start_ms = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elapsed_ms = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() - start;</span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">"load time was: "</span> + elapsed + <span class="string">" seconds"</span>);</span><br></pre></td></tr></table></figure><h3 id="25-名字的长度"><a class="markdownIt-Anchor" href="#25-名字的长度"></a> 2.5 名字的长度</h3><ol><li>大作用域采用较长名称，小作用域采用短名称</li><li>使用快捷键来快速输入长名字和使用名字自动补全</li><li>不要使用大家都不认得的首字母缩写词</li><li>丢掉没用的词</li></ol><h3 id="26-利用名字的格式来传递含义"><a class="markdownIt-Anchor" href="#26-利用名字的格式来传递含义"></a> 2.6 利用名字的格式来传递含义</h3><p>比如说大驼峰是类，小驼峰是变量等等；格式可以指明一个名字的类型。</p>]]></content>
      
      
      <categories>
          
          <category> CleanCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CleanCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij Tips and Tricks</title>
      <link href="//IntelliJ/Intellij%20Tips%20and%20Tricks/"/>
      <url>//IntelliJ/Intellij%20Tips%20and%20Tricks/</url>
      
        <content type="html"><![CDATA[<h2 id="1-跳转"><a class="markdownIt-Anchor" href="#1-跳转"></a> 1. 跳转</h2><p><strong>原则： 尽量不使用鼠标、不使用标签页</strong></p><ol><li><p><code>command + O</code> 跳转到特定的类</p></li><li><p><code>shift + command + O</code> 跳转到文件</p><blockquote><p>使用 <code>: + 行号</code> 可以快速跳转到特定文件的特定行</p></blockquote></li><li><p><code>alt + command + o</code> 变量、方法跳转</p><blockquote><p>使用 <code>&lt;class&gt;.&lt;symbol&gt;</code> 可以跳转到特定类的方法或者变量</p></blockquote></li></ol><a id="more"></a><ol start="4"><li><p><code>double shift</code> Search Everywhere</p><blockquote><p>上述方法的综合体</p></blockquote></li><li><p><code>command + E</code> Recent Files</p></li><li><p><code>shift + command + E</code> Recent Changed Files</p></li><li><p><code>command + [</code> 和 <code>command + ]</code> 在之前打开的文件前后跳转</p></li><li><p>在 Project Window 使用 <strong>Auto Scroll from Souce</strong>，使用 <code>command + ↓</code> 来跳转到源文件</p></li><li><p>在方法名、变量名和类名使用 <code>command + B</code> 可以跳转到声明部分</p></li><li><p>在方法名、变量名和类名使用 <code>command + U</code> 可以跳转到继承链的上一级，即超类</p></li><li><p>在声明部分使用 <code>alt + command + B</code> 可以查看所有的 <strong>实现</strong> 并进行跳转</p></li><li><p>在变量声明部分使用 <code>ctrl + H</code> 可以显示整个变量、类的继承结构</p></li><li><p>在方法名使用 <code>shift + command + H</code> 可以显示方法的继承结构</p></li><li><p>在文件中使用 <code>command + F12</code> 可以显示一个当前类所有成员的 Popup 窗口</p><blockquote><p>也可以使用 <code>command + 7</code> 来打开结构窗口来查看</p></blockquote></li><li><p>使用 <code>command + ↑</code> 来打开 Navigation Bar， <strong>不要把它长期显示在屏幕上</strong></p></li><li><p>使用 <code>F2</code> 和 <code>shift + F2</code> 来在错误之间跳转</p><blockquote><p>在右上角的感叹号图标右键点击，可以设置 <strong>只在 Error 之间跳转</strong></p></blockquote></li></ol><h2 id="2-新建"><a class="markdownIt-Anchor" href="#2-新建"></a> 2. 新建</h2><ol><li><p>在 Project Window 使用 <code>command + N</code> 来新建文件或者 package 或者目录</p></li><li><p>使用 <code>abc/def/ghi/mnop</code> 这种文件夹名来建立文件夹结构，而不要一个一个建立</p></li><li><p>同上，在新建文件时，也可以使用 <code>abc/def/test.txt</code> 这种文件名来构建一个在文件夹内部的文件</p></li><li><p>同，使用 <code>abc.def.ghi.Hehe</code> 这种 <strong>类名</strong> 可以建立一个 <strong>在包内的类</strong></p></li><li><p>焦点在编辑器时使用 <code>ctrl + alt + N</code> 来进行上述新建操作</p></li><li><p>使用 <code>command + shift + N</code> 新建一个临时文件(Scratral File)</p><blockquote><p>临时文件可以是任何文件，也可以成功的编译运行。<br>实际上就是用来给开发者进行一些小测试用的</p></blockquote></li></ol><h2 id="3-重构"><a class="markdownIt-Anchor" href="#3-重构"></a> 3. 重构</h2><ol><li><p>使用 <code>alt + ↑</code> 来选择一行代码</p><blockquote><p>持续点击会继续选择更大的作用域：<br>方法 -&gt; 内部类 -&gt; 外部类 -&gt; 文件</p></blockquote></li><li><p>使用 <code>alt + ↓</code> 来缩小选择的作用域范围</p></li><li><p>使用 <code>alt + shift + ↑/↓</code> 来 <strong>移动选择的代码</strong></p></li><li><p>使用 <code>shift + command + V</code> 来打开剪切板历史记录</p><blockquote><p>不包括 IdeaVim 的剪贴板历史记录</p></blockquote></li><li><p>使用 <code>alt + shift + 左键点击</code> 来设置一个 Multicursor</p><blockquote><p><strong>不要使用这个功能来进行代码重构</strong><br>可以使用多重指针来进行复制粘贴操作</p></blockquote></li><li><p>使用 <code>shift + F6</code> 来进行变量重命名</p></li><li><p>使用 <code>alt + command + L</code> 进行当前文件的代码格式化</p></li><li><p>使用 Code Cleanup 来进行整个工程级别的代码格式化</p></li><li><p>选择一段代码然后使用 <code>alt + Enter</code> 可以对当前片段的代码格式进行调整。</p></li><li><p>使用 <code>ctrl + T</code> 可以调出 Refactor This 菜单，有很多重构功能可以使用</p></li></ol><h2 id="4-language-injection"><a class="markdownIt-Anchor" href="#4-language-injection"></a> 4. Language Injection</h2><p>在 <strong>字符串</strong> 使用 <code>alt + Enter</code> 选择 <code>inject language</code> 可以让 IDEA 认定当前字符串的语言成分，从而进行相应语言的提示和工作。</p><ol><li><p>选择 <code>json</code> 可以在 JSON 编辑框中编辑纯 JSON 内容，IDEA 会自动生成相应的 Java 字符串</p></li><li><p>选择 SQL 可以进行 SQL 补全，同时选择链接的数据库进行执行。</p><blockquote><p>同时，如果在 SQL 字符串中使用重构功能，IDEA 不仅会重构代码内容，同时还会对 <strong>数据库</strong> 内容进行修改</p></blockquote></li><li><p>选择 <strong>正则表达式</strong> 可以在对应的 Hover 框内对正则表达式进行检验</p></li></ol><h2 id="5-补全"><a class="markdownIt-Anchor" href="#5-补全"></a> 5. 补全</h2><ol><li><p>使用 <code>ctrl + shift + Space</code> 进行 <strong>智能补全</strong></p></li><li><p>使用 <code>command + P</code> 来获取 <strong>所调用方法的参数信息</strong></p></li><li><p>使用 <code>ctrl + alt + Space</code> 可以补全方法名和类名</p></li><li><p>使用 <code>alt + /</code> 来进行变量补全和 <strong>变量命名补全</strong></p></li><li><p>使用 <code>shift + command + Enter</code> 可以补全当前语句块</p><blockquote><p>不仅仅是分号补全，还可以是大括号补全</p></blockquote></li></ol><h2 id="6-模板"><a class="markdownIt-Anchor" href="#6-模板"></a> 6. 模板</h2><ol><li><p>使用 <code>command + J</code> 来插入已经定义好的 Live Template</p><blockquote><p>可以打出 Live Template 然后使用 Tab 进行补全<br>不过使用 <code>command + J</code> 可以给予提示</p><p>常用的：<code>psvm -&gt; public static void main(String[] args)</code></p></blockquote></li><li><p>在选择了一段代码的情况下，使用 <code>alt + command + T</code> 可以将代码用特定的结构包起来</p><blockquote><p>比如说 <code>if-else</code> 、<code>try-catch</code> 等等</p></blockquote></li><li><p>使用调用可以在列表中选取 Postfix Completion，具体效果和上面相同</p></li><li><p>模板不仅仅支持 Java，还支持例如 HTML，CSS， Javascript 等多种语言</p></li></ol><h2 id="7-代码分析"><a class="markdownIt-Anchor" href="#7-代码分析"></a> 7. 代码分析</h2><ol><li><p>使用 Code Inspection By Name 可以分析特定的错误和缺陷</p></li><li><p>使用 Structural Search/Replace 可以进行特定的代码结构的查找和替换，同时，可以将其加入 Inspection，进行错误提示</p></li><li><p>使用 Analyze Data Flow 可以分析特定变量的流动，有助于读懂他人代码</p></li></ol><h2 id="8-版本控制"><a class="markdownIt-Anchor" href="#8-版本控制"></a> 8. 版本控制</h2><ol><li><p>选择两个 commit 然后使用 <code>ctrl + D</code> 来进行 Diff</p></li><li><p>使用 Annotate 可以查看一个文件中的各行的修改</p></li><li><p>使用 <code>command + K</code> 进行 commit 操作</p></li><li><p>使用 <code>shift + command + K</code> 进行 push 操作</p></li><li><p>使用 <code>alt + command + Z</code> 进行 revert 操作</p></li><li><p>使用 <code>ctrl + V</code> 调出 有关版本控制的 Popup 窗口</p></li></ol><h2 id="9-调试"><a class="markdownIt-Anchor" href="#9-调试"></a> 9. 调试</h2><ol><li><p>右键点击断点区域，可以设置断电的 condition</p><blockquote><p>还有个 More 可以点击</p></blockquote></li><li><p>在调用栈区域，可以选择 Drop Frame 将选择的 Frame 进行出栈操作</p><blockquote><p>如果不小心 Step Into 太深的话可以使用这个</p></blockquote></li></ol><h2 id="10-其他"><a class="markdownIt-Anchor" href="#10-其他"></a> 10. 其他</h2><ol><li><p>使用 <strong>ctrl + `</strong> 来进行代码样式、快捷键等的快速切换</p></li><li><p>可以在设置中定义一个常用的 Quick List</p></li><li><p>使用 <code>alt + F12</code> 可以调出 IDEA 内置终端</p></li><li><p>Help 菜单中的 Productive Guild 记录了使用的 IDEA 功能，包括功能的解释和使用频率</p></li><li><p>Registry 内有一个选项可以减少输入延迟(editor latency)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> IntelliJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Advanced Skill</title>
      <link href="//Python/Python%203%20Advanced%20Skill/"/>
      <url>//Python/Python%203%20Advanced%20Skill/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数返回多个值"><a class="markdownIt-Anchor" href="#1-函数返回多个值"></a> 1. 函数返回多个值</h2><p>函数可以通过返回一个<strong>元组</strong>来达到返回多个值的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_error_details</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span>, <span class="string">'second error details'</span>)</span><br><span class="line"></span><br><span class="line">errnum, errstr = get_error_details()</span><br></pre></td></tr></table></figure><blockquote><p>上面运用到了<strong>元组解包</strong>技术，通过使用逗号分隔变量，就可以分别取出对应位置的元组元素。</p></blockquote><a id="more"></a><h2 id="2-特殊方法"><a class="markdownIt-Anchor" href="#2-特殊方法"></a> 2. 特殊方法</h2><p>Python 的类中有许多内置的特殊方法，例如 <code>__init__()</code> 和 <code>__del__()</code></p><p>可以在 Python 的参考手册中找到它们以及对应的作用。</p><h2 id="3-单行语句块"><a class="markdownIt-Anchor" href="#3-单行语句块"></a> 3. 单行语句块</h2><p>如果一个语句块只有一个逻辑行，则可以把它置于条件语句或者循环语句的同一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag: <span class="keyword">print</span> <span class="string">'Yes'</span></span><br></pre></td></tr></table></figure><h2 id="4-lambda-表达式"><a class="markdownIt-Anchor" href="#4-lambda-表达式"></a> 4. Lambda 表达式</h2><p><code>lambda</code> 语句用来创建新的<strong>函数对象</strong>，并且在运行时返回它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> s: s*n</span><br></pre></td></tr></table></figure><blockquote><p>本质上, <code>lambda</code> 需要一个参数,后面仅跟单个表达 式作为函数体,而表达式的值被这个新建的函数返回。注意,即便是 <code>print</code> 语句也不 能用在 <code>lambda</code> 形式中,只能使用表达式。</p></blockquote><h2 id="5-列表综合"><a class="markdownIt-Anchor" href="#5-列表综合"></a> 5. 列表综合</h2><p>通过列表综合，可以从一个已有的列表导出一个新的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: list_comprehension.py</span></span><br><span class="line"></span><br><span class="line">listone = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">listtwo = [<span class="number">2</span>*i <span class="keyword">for</span> i <span class="keyword">in</span> listone <span class="keyword">if</span> i &gt; <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>通过在列表中使用这样的语句就可以对符合条件的每个列表元素进行处理<br>注意原有的列表并没有改变，这个操作实际上是<strong>生成了一个新列表</strong></p></blockquote><h2 id="6-exec-和-eval"><a class="markdownIt-Anchor" href="#6-exec-和-eval"></a> 6. <code>exec</code> 和 <code>eval</code></h2><p><code>exec</code> 语句用来执行<strong>字符串形式</strong>的 Python 语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; exec(&apos;print(&quot;Hello, World&quot;)&apos;)</span><br><span class="line">Hello, World</span><br></pre></td></tr></table></figure><p><code>eval</code> 语句用来执行<strong>字符串形式</strong>的 Python 表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'2*3'</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>两者看似相同，但是也有细微区别：</p></blockquote><blockquote><ol><li><code>eval</code> 只接受<strong>单行字符串表达式</strong>，<code>exec</code> 可以接受一个语句和语句块</li></ol><blockquote><p>“表达式”所指的就是<strong>可以放在等号右边的东西</strong>，<code>break</code> <code>if</code> <code>pass</code> 等不是表达式</p></blockquote></blockquote><blockquote><ol start="2"><li><code>eval</code> 会<strong>返回表达式的结果</strong>，<code>exec</code> 则会忽略该结果</li></ol></blockquote><h2 id="7-assert-语句"><a class="markdownIt-Anchor" href="#7-assert-语句"></a> 7. <code>assert</code> 语句</h2><p>同 Java 中的 <code>assert</code> 语句一样，以调试为目的。<br>但是 Python 的 <code>assert</code> 语句功能是默认启动的<br>当 <code>assert</code> 失败时，会引发一个 <code>AssertionError</code></p><h2 id="8-repr-函数"><a class="markdownIt-Anchor" href="#8-repr-函数"></a> 8. repr 函数</h2><p>该函数用来取得对象的规范字符串表示，实际上它的作用就是<strong>为对象包了一层<code>&quot;&quot;</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.append(<span class="string">'item'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line">[<span class="string">'item'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(i)</span><br><span class="line"><span class="string">"['item']"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(repr(i))</span><br><span class="line">[<span class="string">'item'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(repr(i)) == i</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Basic</title>
      <link href="//Python/Python%203%20Basic/"/>
      <url>//Python/Python%203%20Basic/</url>
      
        <content type="html"><![CDATA[<h2 id="1-注释"><a class="markdownIt-Anchor" href="#1-注释"></a> 1. 注释</h2><ol><li>注释以 <code>#</code> 开头</li><li>以 <code>#!</code> 开头的称为<strong>组织行</strong>，表明了执行脚本的<strong>解释器</strong></li></ol><blockquote><p>Linux/Unix 中，如果不清楚 Python 的位置，可以使用 <code>#!/usr/bin/env python</code>，<code>env</code> 会自动寻找 Python 的解释器路径进行执行。</p></blockquote><a id="more"></a><h2 id="2-字面意义的常量"><a class="markdownIt-Anchor" href="#2-字面意义的常量"></a> 2. 字面意义的常量</h2><p>如同 5, 1.23, 9.25e-3 这样的<strong>数</strong>，以及 “This is a string” 等<strong>字符串</strong>被称作字面意义上的<strong>常量</strong></p><h3 id="21-数"><a class="markdownIt-Anchor" href="#21-数"></a> 2.1 数</h3><p>数的类型有三种——整数、浮点数和复数</p><ol><li><code>2</code> 是整数</li><li><code>3.23</code> 和 <code>52.3E-4</code> 是浮点数</li><li><code>(-5+4j)</code> 和 <code>(2.3-4.6j)</code> 是复数</li></ol><blockquote><p>Python 3 只有一种整数类型，不区分 <code>long</code> 和 <code>int</code><br>Python 2 中区分 <code>long</code> 类型<br>布尔型(<code>bool</code>) 属于整型(<code>integer</code>)的一种</p></blockquote><h3 id="22-字符串"><a class="markdownIt-Anchor" href="#22-字符串"></a> 2.2 字符串</h3><ol><li><p>字符串是字符的<strong>序列</strong>，其编码默认为 <strong>Unicode</strong>。</p><blockquote><p>可以使用 <code>str.encode(&quot;ascii&quot;)</code> 将字符串编码转换为 ASCII</p></blockquote></li><li><p>可以用<strong>单引号</strong>和<strong>双引号</strong>来指定字符串，<strong>单引号和双引号的意义完全相同</strong></p></li><li><p>利用<strong>三引号</strong> <code>&quot;&quot;&quot;</code> 或者 <code>'''</code> 可以指定一个<strong>多行字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''This is a multi-line-string. This is the first line.</span></span><br><span class="line"><span class="string">And this is the second line.</span></span><br><span class="line"><span class="string">"What's your name?" I asked.</span></span><br><span class="line"><span class="string">He said "Bond, James Bond."</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><blockquote><p>在三引号中，可以自由使用单引号和双引号</p></blockquote></li><li><p>使用<strong>转义</strong>来表示原有字符</p><blockquote><p>例如 <code>'What's your name?'</code> 中，由于（<strong>使用单引号界定的</strong>）字符串中有单引号，会使 Python 解释出现错误，此时需要用转义来表示原有的单引号。<br>正确的应该是 <code>'What\'s your name?'</code>。<br>但是，<strong>可以在用双引号界定的字符串中使用单引号。</strong><br>这个也是正确的 <code>&quot;What's your name?&quot;</code></p></blockquote><blockquote><p>另外，在一行的末尾的反斜杠 <code>\</code> 仅仅表示下一行的字符串是上一行的<strong>继续</strong>，<strong>并不增加新的行</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下字符串是等价的</span></span><br><span class="line"><span class="string">"This is the first line.\</span></span><br><span class="line"><span class="string">This is also the first line."</span></span><br><span class="line"></span><br><span class="line"><span class="string">"This is the firstline. This is also the first line."</span></span><br></pre></td></tr></table></figure></li><li><p>原始字符串</p><blockquote><p>当需要指定一些字符不被特殊处理时，可以使用 <code>r</code> 或者 <code>R</code> 附加在字符串前面指定<strong>原始字符串</strong>。<br>例如： <code>r&quot;Newlines are indicated by \n&quot;</code><br>此时，<strong>字符串中的所有字符都不会被转义</strong></p></blockquote><blockquote><p><strong>在正则表达式使用的时候，请尽量使用原始字符串</strong></p></blockquote></li><li><p>字符串是<strong>不可变</strong>的</p></li><li><p>字符串按字面意义连接</p><blockquote><p>如果将两个字符串按字面意义相邻放着，会被自动转为一个字符串</p></blockquote></li><li><p><code>format()</code> 方法</p><blockquote><p>可以使用 <code>format()</code> 方法来通过使用其他信息构建字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line">name = <span class="string">'Swaroop'</span></span><br><span class="line">print(<span class="string">'&#123;0&#125; is &#123;1&#125; years old'</span>.format(name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出为</span></span><br><span class="line"><span class="comment"># Swaroop is 25 years old.</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以使用 <code>format()</code> 进行格式化输出</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:.3&#125;'</span>.format(<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line"><span class="string">'0.333'</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-变量"><a class="markdownIt-Anchor" href="#3-变量"></a> 3. 变量</h2><h3 id="31-命名"><a class="markdownIt-Anchor" href="#31-命名"></a> 3.1 命名</h3><p>同其他语言的变量命名无多大差别。</p><ol><li>不允许数字开头</li><li>大小写敏感</li></ol><h3 id="32-类型"><a class="markdownIt-Anchor" href="#32-类型"></a> 3.2 类型</h3><p>Python 变量<strong>不需要声明类型</strong>，但仍然是<strong>强类型</strong><br>实际上，Python 的任何一切都称为<strong>对象</strong></p><h2 id="4-逻辑行和物理行"><a class="markdownIt-Anchor" href="#4-逻辑行和物理行"></a> 4. 逻辑行和物理行</h2><p>Python 中<strong>一个逻辑行对应一个物理行</strong>，虽然 Python 也可以使用分号，但是<strong>一般不使用分号</strong></p><blockquote><p>其他语言一般强制要求行尾分号，Python 不推荐分号的使用。</p></blockquote><h2 id="5-缩进"><a class="markdownIt-Anchor" href="#5-缩进"></a> 5. 缩进</h2><p>Python 有着严格的缩进区分，不能随意缩进，<strong>缩进用来标明语句块</strong><br><strong>同一个语句块具有相同的缩进层次</strong></p><blockquote><p>Python 使用缩进来表示代码块，<strong>不再使用花括号</strong></p></blockquote><h2 id="6-操作符"><a class="markdownIt-Anchor" href="#6-操作符"></a> 6. 操作符</h2><ol><li><p>Python 中的 <code>//</code> 符号表示<strong>向下取整相除</strong>，而不是单行注释。注释使用 <code>#</code> 来开头。</p><blockquote><p>注意这里是<strong>向下取整</strong>，而不是<strong>趋零取整</strong></p></blockquote></li><li><p>布尔操作</p><ul><li><code>not</code> 表示布尔非（相当于 <code>!</code>）</li><li><code>and</code> 表示布尔与（相当于 <code>&amp;&amp;</code>）</li><li><code>or</code> 表示布尔或（相当于 <code>||</code>）</li></ul><blockquote><p>有趣的是，不等于仍然使用 <code>!=</code> 来表示</p></blockquote></li><li><p>相等性判别</p><blockquote><p>Python 3 中有两种相等性判别，一种是变量相等性(equality)，另一种是实例相等性(identity)</p></blockquote><blockquote><p><code>is</code> 用作判断实例相等性<br>否定操作为 <code>is not</code></p></blockquote><blockquote><p>而 <code>==</code> 用于判断变量相等性</p></blockquote><p>区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li><li><p>优先级</p><blockquote><p>在 Python 中，<code>lambda</code> 表达式处在最高优先级，而并非布尔运算</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Class</title>
      <link href="//Python/Python%203%20Class/"/>
      <url>//Python/Python%203%20Class/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Python 是高度面向对象的语言，事实上，任何的变量类型都是<strong>类</strong></p><a id="more"></a><h2 id="2-创建类"><a class="markdownIt-Anchor" href="#2-创建类"></a> 2. 创建类</h2><p>类由 <code>class</code> 关键词定义，后面加冒号表示类的作用域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="3-self-参数"><a class="markdownIt-Anchor" href="#3-self-参数"></a> 3. self 参数</h2><p>Python 的 <code>self</code> 参数类似于 Java 的 <code>this</code>，但是这个参数在 Python 中的作用则更为重要，具体可以看下面的内容</p><h2 id="4-类域"><a class="markdownIt-Anchor" href="#4-类域"></a> 4. 类域</h2><p>Python 类的域与 Java 不同</p><ol><li><p>不带 <code>self</code> 参数修饰的普通变量为<strong>静态变量</strong></p></li><li><p>只有带 <code>self</code> 修饰的才是对象变量</p><blockquote><p>例如 <code>self.name</code> 是对象变量，<code>name</code> 是静态变量</p></blockquote></li><li><p><strong>成员都是公有的，包括数据成员</strong></p><blockquote><p>但是以双下划线 <code>__</code> 开头的成员会被 Python 的名称管理体系作为<strong>私有变量</strong>，这是 Python 的名称管理体系做出的，而不是类的特性</p></blockquote></li></ol><h2 id="5-类方法"><a class="markdownIt-Anchor" href="#5-类方法"></a> 5. 类方法</h2><p>Python 的类方法和 Java 稍有不同</p><ol><li><p>类的普通方法必须定义 <code>self</code> 参数</p></li><li><p>类块中不带 <code>self</code> 参数的方法一般为<strong>静态方法</strong>，需要用 <code>staticmethod()</code> 修饰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span>:</span></span><br><span class="line">    <span class="string">'''Represent a robot, with a name'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"hehe"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'We have &#123;0:d&#125; robot'</span>.format(Robot.population) )</span><br><span class="line">    howMany = staticmethod(howMany)</span><br></pre></td></tr></table></figure><blockquote><p>静态方法也可以用以下语句修饰</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'We have &#123;0:d&#125; robot'</span>.format(Robot.population))</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-构造函数和析构函数"><a class="markdownIt-Anchor" href="#6-构造函数和析构函数"></a> 6. 构造函数和析构函数</h2><p>Python 拥有构造函数和析构函数。工作原理和 C++ 的构造函数和析构函数相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Hello, my name is'</span>, self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I am dying."</span>)</span><br></pre></td></tr></table></figure><h2 id="7-继承"><a class="markdownIt-Anchor" href="#7-继承"></a> 7. 继承</h2><p>Python 的继承通过在类名称后面添加括号实现。<br>括号中为父类的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolMember</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        print(<span class="string">'(Initialize SchoolMember:&#123;0&#125;)'</span>.format(self.name))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''Tell my details.'''</span></span><br><span class="line">        print(<span class="string">'Name:"&#123;0&#125;" Age:"&#123;1&#125;"'</span>.format(self.name,self.age),end =<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(SchoolMember)</span>:</span></span><br><span class="line">    <span class="string">'''Repressent a teacher.'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,salary)</span>:</span></span><br><span class="line">        SchoolMember.__init__(self,name,age)</span><br><span class="line">        self.salary = salary</span><br><span class="line">        print(<span class="string">'(Initialized Teacher:&#123;0&#125;)'</span>.format(self.name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(<span class="string">'Salary:"&#123;0:d&#125;"'</span>.format(self.salary))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchoolMember)</span>:</span></span><br><span class="line">    <span class="string">'''Represents a student'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,marks)</span>:</span></span><br><span class="line">        SchoolMember.__init__(self,name,age)</span><br><span class="line">        self.marks = marks</span><br><span class="line">        print(<span class="string">'(Initialized Student:&#123;0&#125;)'</span>.format(self.name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(<span class="string">'Marks:"&#123;0:d&#125;"'</span>.format(self.marks))</span><br><span class="line"></span><br><span class="line">t = Teacher(<span class="string">'Mrs.Shrividya'</span>,<span class="number">30</span>,<span class="number">30000</span>)</span><br><span class="line">s = Student(<span class="string">'Swaroop'</span>,<span class="number">25</span>,<span class="number">75</span>)</span><br><span class="line">print() <span class="comment"># print a blank line</span></span><br><span class="line"></span><br><span class="line">members = [t,s]</span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members:</span><br><span class="line">    member.tell() <span class="comment"># work for both Teacher and Students</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，<code>Student</code> 和 <code>Teacher</code> 都继承自 <code>SchoolMenber</code><br>通过 <code>SchoolMenber</code> 调用父类方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Collection</title>
      <link href="//Python/Python%203%20Collection/"/>
      <url>//Python/Python%203%20Collection/</url>
      
        <content type="html"><![CDATA[<h2 id="1-列表list"><a class="markdownIt-Anchor" href="#1-列表list"></a> 1. 列表(list)</h2><p>列表是用于处理<strong>有序项目</strong>的数据结构，与 Java 的<strong>数组</strong>类似，自带排序方法，可以使用 <code>[]</code> 进行<strong>随机访问</strong></p><p>列表使用方括号定义，使用 <code>len()</code> 函数来获取列表长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is my shopping list</span></span><br><span class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</span><br><span class="line"></span><br><span class="line">print(len(shoplist))</span><br><span class="line"></span><br><span class="line">olditem = shoplist[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">del</span> shoplist[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p><code>del</code> 类似 C++ 中的 <code>delete</code>，用于释放一个对象。<br>这里使用 <code>del</code> 来将列表元素移除</p></blockquote><a id="more"></a><h2 id="2-元组tupple"><a class="markdownIt-Anchor" href="#2-元组tupple"></a> 2. 元组(tupple)</h2><p>元组和列表相似，唯一的区别是<strong>元组不可改变</strong></p><p>元组使用<strong>圆括号来定义</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圆括号是可选的，但是还是加上圆括号为好</span></span><br><span class="line">zoo = (<span class="string">'python'</span>, <span class="string">'elephant'</span>, <span class="string">'penguin'</span>)</span><br><span class="line">print(<span class="string">'Number of annimal in the zoo is'</span>, len(zoo))</span><br><span class="line"></span><br><span class="line">new_zoo = (<span class="string">'monkey'</span>, <span class="string">'camel'</span>, zoo)</span><br><span class="line">print(<span class="string">'Last annimal in the zoo is'</span>, new_zoo[<span class="number">2</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><blockquote><p>注意到，元组是<strong>可以嵌套的</strong>，有点类似于 Java 中的<strong>二维数组</strong>，但<strong>并不完全相同</strong>。</p></blockquote><blockquote><p><code>new_zoo[0]</code> ==&gt; <code>'monkey'</code><br><code>new_zoo[2]</code> ==&gt; <code>zoo</code> ==&gt; <code>('python', 'elephant', 'penguin')</code><br><code>new_zoo[2][2]</code> ==&gt; <code>zoo[2]</code> ==&gt; <code>'penguin'</code></p></blockquote><blockquote><p>含有 0 个或者 1 个元素的元组<br>含有 0 个元素的元组用<strong>空圆括号</strong>表示，<code>empty = ()</code><br>含有 1 个元素的元组<strong>要在元素后面接一个逗号</strong> <code>singleton = (2, )</code></p></blockquote><h2 id="3-字典dict"><a class="markdownIt-Anchor" href="#3-字典dict"></a> 3. 字典(dict)</h2><p>字典是一个<strong>键值对</strong>的表，类似于 Java 中的哈希表，一个项目具有 <code>Key</code> 和 <code>Value</code></p><p>只能用<strong>不可变</strong>对象作为项目的<strong>键</strong>，值则可以是可变的也可以是不可变的。</p><p>字典使用<strong>花括号</strong>定义，用<strong>冒号</strong>分隔键和值，用<strong>逗号</strong>分隔项目，使用 <code>[]</code> 来取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ab = &#123;</span><br><span class="line">        <span class="string">'Swaroop'</span>   :   <span class="string">'swaroop@swaroopch.com'</span></span><br><span class="line">        <span class="string">'Larry'</span>     :   <span class="string">'larry@wall.org'</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Swaroop's address is"</span>, ab[<span class="string">'Swaroop'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, adderss <span class="keyword">in</span> ab:</span><br><span class="line">    <span class="comment"># iterate the dict</span></span><br></pre></td></tr></table></figure><blockquote><p>在字典中，使用<strong>键</strong>来充当索引成分。<br>字典可以通过 <code>items()</code> 方法来返回键值对的列表，但是是无序的。<br>注意字典是没有顺序的（不能维持插入时的顺序），要使用时最好先排序。</p></blockquote><h2 id="4-序列"><a class="markdownIt-Anchor" href="#4-序列"></a> 4. 序列</h2><p>列表，元组和字符串都是序列，序列具有以下特点：</p><ol><li><p>支持索引操作符 <code>[]</code> 随机访问</p><blockquote><p>索引从 0 开始，可以<strong>支持负数</strong><br>当索引是负数时，它会抓取倒数的项目</p></blockquote></li><li><p>可以采取<strong>切片操作</strong></p><blockquote><p>即返回一个序列的子集，例如子数组等<br>切片操作通过冒号完成，例如下面的 <code>shoplist[1:3]</code>。<br>切片操作的区间是<strong>左闭右开</strong>，上面返回的是 <code>shoplist[1]</code> 和 <code>shoplist[2]</code> 组成的子列表<br>假如前一个为空，切片从<strong>序列头</strong>开始，后一个为空，切片在<strong>序列尾</strong>停止。（后一个为空，最后结果<strong>包括最后一个元素</strong>，<code>shoplist[:]</code> 返回整个列表）</p></blockquote><blockquote><p>也可以使用<strong>负数</strong>作切片，此时的负数只作为一个定位元素的<strong>索引</strong>，例如 <code>shoplist[:-1]</code> 会在<strong>倒数第一个停止</strong>，也就是<strong>不包括最后一个元素的子列表</strong></p></blockquote><blockquote><p>也可以给切片定义第三个参数——切片的<strong>步长</strong>。其实就是切片操作在遍历数组时的步长。<br>步长通过两个冒号的最后一个参数定义<br><code>shoplist[::3]</code> ==&gt; <code>shoplist[0], shoplist[3], shoplist[6]...</code></p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Indexing or 'Subscription' operation</span></span><br><span class="line">print(<span class="string">'Item 0 is'</span>, shoplist[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'Item 1 is'</span>, shoplist[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">'Item 2 is'</span>, shoplist[<span class="number">2</span>])</span><br><span class="line">print(<span class="string">'Item 3 is'</span>, shoplist[<span class="number">3</span>])</span><br><span class="line">print(<span class="string">'Item -1 is'</span>, shoplist[<span class="number">-1</span>])</span><br><span class="line">print(<span class="string">'Item -2 is'</span>, shoplist[<span class="number">-2</span>])</span><br><span class="line">print(<span class="string">'Character 0 is'</span>, name[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slicing on a list</span></span><br><span class="line">print(<span class="string">'Item 1 to 3 is'</span>, shoplist[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(<span class="string">'Item 2 to end is'</span>, shoplist[<span class="number">2</span>:])</span><br><span class="line">print(<span class="string">'Item 1 to -1 is'</span>, shoplist[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">print(<span class="string">'Item start to end is'</span>, shoplist[:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slicing on a string</span></span><br><span class="line">print(<span class="string">'characters 1 to 3 is'</span>, name[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(<span class="string">'characters 2 to end is'</span>, name[<span class="number">2</span>:])</span><br><span class="line">print(<span class="string">'characters 1 to -1 is'</span>, name[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">print(<span class="string">'characters start to end is'</span>, name[:])</span><br></pre></td></tr></table></figure><h2 id="5-集合"><a class="markdownIt-Anchor" href="#5-集合"></a> 5. 集合</h2><p>集合是无顺序的简单对象的聚集。</p><p>使用集合，可以<strong>检查是否是成员</strong>，<strong>是否是另一个集合的子集</strong>，<strong>得到两个集合的交集</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bri = set([<span class="string">'brazil'</span>, <span class="string">'russia'</span>, <span class="string">'india'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'india'</span> <span class="keyword">in</span> bri</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'usa'</span> <span class="keyword">in</span> bri</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bric = bri.copy() &gt;&gt;&gt; bric.add(<span class="string">'china'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bric.issuperset(bri)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bri.remove(<span class="string">'russia'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bri &amp; bric <span class="comment"># OR bri.intersection(bric)</span></span><br><span class="line">&#123;<span class="string">'brazil'</span>, <span class="string">'india'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="6-引用"><a class="markdownIt-Anchor" href="#6-引用"></a> 6. 引用</h2><p>这个概念和 Java 中的引用相同。</p><p>注意切片操作可以对一个序列进行<strong>深拷贝(deep copy)</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Control Flow</title>
      <link href="//Python/Python%203%20Control%20Flow/"/>
      <url>//Python/Python%203%20Control%20Flow/</url>
      
        <content type="html"><![CDATA[<p> <a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a><br> <a href="#2-if-%E8%AF%AD%E5%8F%A5">2. if 语句</a><br> <a href="#3-while-%E8%AF%AD%E5%8F%A5">3. while 语句</a><br> <a href="#4-for-%E8%AF%AD%E5%8F%A5">4. for 语句</a><br> <a href="#5-%E5%85%B6%E4%BB%96%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6">5. 其他流程控制</a></p><h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>控制流程包括 <code>if</code> <code>for</code> 和 <code>while</code></p><p>Python 的流程控制语句有些特殊</p><ol><li>首先，关于流程控制<strong>不使用括号</strong>，只有函数和表达式才使用小括号</li><li>使用冒号指示语句块的开头</li></ol><a id="more"></a><h2 id="2-if-语句"><a class="markdownIt-Anchor" href="#2-if-语句"></a> 2. if 语句</h2><p>下面是一个 <code>if</code> 语句的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: if.py</span></span><br><span class="line"></span><br><span class="line">number = <span class="number">23</span></span><br><span class="line">guess = int(input(<span class="string">'Enter an integer : '</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> guess == number:</span><br><span class="line">    print(<span class="string">'Congratualtions, you guessed it!'</span>)</span><br><span class="line">    print(<span class="string">'But you do not win any prizes!'</span>)</span><br><span class="line"><span class="keyword">elif</span> guess &lt; number:</span><br><span class="line">    print(<span class="string">'No, it is a little higher than that'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'No, it is a little lower than that'</span>)</span><br><span class="line">print(<span class="string">'Done'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>几个注意要点：</p></blockquote><ol><li>Python 中为了减少缩进，使用 <code>elif</code> 来代替 <code>if...else if...else</code></li><li>注意缩进，同样的缩进等级表示了同一个代码块</li><li><strong>Python 中没有 <code>switch</code> 语句，使用相应的 <code>if..eles</code> 结构来替代</strong></li><li><strong>注意不要漏掉冒号</strong></li></ol><h2 id="3-while-语句"><a class="markdownIt-Anchor" href="#3-while-语句"></a> 3. while 语句</h2><p>while 语句与其他语言无太大差别，讲几个注意事项</p><ol><li><strong>注意不要漏掉 <code>while</code> 语句末尾的冒号</strong></li><li><code>Ture</code> 和 <code>False</code> 代表布尔类型</li><li><code>while</code> 可以有 <code>else</code> 语句，但一般不使用</li></ol><h2 id="4-for-语句"><a class="markdownIt-Anchor" href="#4-for-语句"></a> 4. for 语句</h2><p><code>for</code> 语句和其他语言有较大区别，以下是 Python 和 Java 语言的对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>下面是等价的 Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上 Python 的 <code>for</code> 语句更像 Java 中的 <code>foreach</code> 语句，下面是两种等价的语法形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">    print(word)</span><br></pre></td></tr></table></figure><p>下面是 Java 语法表述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="keyword">for</span>(word : wordList) &#123;</span><br><span class="line">    System.out.println(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的几个要点：</p><ol><li><p><code>range()</code> 函数的指示区间为<strong>左闭右开</strong></p></li><li><p><code>print()</code> 函数会<strong>默认打印换行符</strong></p><blockquote><p>通过指示 <code>end</code> 来进行单行打印<br><code>print(word, end='')</code><br>如果缓冲区中有字符，那么指定 <code>flush</code> 为 <code>True</code> 来清除缓冲区<br><code>print(word, end='', flush=True)</code></p></blockquote></li></ol><h2 id="5-其他流程控制"><a class="markdownIt-Anchor" href="#5-其他流程控制"></a> 5. 其他流程控制</h2><p><code>break</code> 和 <code>continue</code> 都和其他语言无异</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Exception</title>
      <link href="//Python/Python%203%20Exception/"/>
      <url>//Python/Python%203%20Exception/</url>
      
        <content type="html"><![CDATA[<p> <a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a><br> <a href="#2-%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8">2. 处理异常</a><br> <a href="#3-%E5%BC%95%E5%8F%91%E5%BC%82%E5%B8%B8">3. 引发异常</a><br> <a href="#4-tryfinally-%E8%AF%AD%E5%8F%A5">4. Try…Finally 语句</a><br> <a href="#5-with-%E8%AF%AD%E5%8F%A5">5. with 语句</a></p><h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Python 的异常处理和 Java 相似，函数拼写错误等也会触发异常。</p><a id="more"></a><h2 id="2-处理异常"><a class="markdownIt-Anchor" href="#2-处理异常"></a> 2. 处理异常</h2><p>通过 <code>try...except</code> 语句来处理异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    text = input(<span class="string">'Enter something --&gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    print(<span class="string">'Why did you do an EOF on me?'</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    print(<span class="string">'You cancelled the operation.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'You entered &#123;0&#125;'</span>.format(text))</span><br></pre></td></tr></table></figure><blockquote><p><code>try</code> 还可以带一个 <code>else</code> 语句，作用与 <code>while</code> 的语句类似</p></blockquote><h2 id="3-引发异常"><a class="markdownIt-Anchor" href="#3-引发异常"></a> 3. 引发异常</h2><p>通过 <code>raise</code> 语句来引发异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputException</span><span class="params">(Exception)</span>:</span></span><br><span class="line"><span class="string">'''A user-defined exception class'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length,atleast)</span>:</span></span><br><span class="line">        Exception.__init__(self)</span><br><span class="line">        self.length = length</span><br><span class="line">        self.atleast = atleast</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    text = input(<span class="string">'Enter something--&gt;'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(text) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> ShortInputException(len(text),<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#other work can continue as usual here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    print(<span class="string">'Why did you do an EOF on me'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ShortInputException <span class="keyword">as</span> ex:</span><br><span class="line">    print(<span class="string">'ShortInputException The input was &#123;0&#125; long, excepted \</span></span><br><span class="line"><span class="string">atleast &#123;1&#125;'</span>.format(ex.length, ex.atleast))</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'No exception was raised.'</span>)</span><br></pre></td></tr></table></figure><h2 id="4-tryfinally-语句"><a class="markdownIt-Anchor" href="#4-tryfinally-语句"></a> 4. Try…Finally 语句</h2><p>这点与 Java 相似，Python 使用 <code>finally</code> 语句来对流进行一些收尾操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: finally.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'poem.txt'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># our usual file-reading idiom</span></span><br><span class="line">        line = f.readline()</span><br><span class="line">        <span class="keyword">if</span> len(line) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(line, end = <span class="string">''</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>) <span class="comment"># To make sure it runs for a while</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    print(<span class="string">'!! You cancelled the reading from the file.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line">    print(<span class="string">'(Cleanig up: closed the file)'</span>)</span><br></pre></td></tr></table></figure><h2 id="5-with-语句"><a class="markdownIt-Anchor" href="#5-with-语句"></a> 5. with 语句</h2><p>这个语句类似 Java 中的<strong>带资源的 <code>try</code> 块</strong><br>通过使用 <code>with</code> 来打开一个带资源的操作，则其会自动在最后将资源关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: using_with.py</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"poem.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Function</title>
      <link href="//Python/Python%203%20Function/"/>
      <url>//Python/Python%203%20Function/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数的定义"><a class="markdownIt-Anchor" href="#1-函数的定义"></a> 1. 函数的定义</h2><p>函数通过 <code>def</code> 关键字来定义。<br><code>def</code> 后跟一个函数名称，<strong>然后跟一对圆括号</strong>，表示函数。<br><strong>注意不要漏掉括号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: function1.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hello, World!'</span>)</span><br><span class="line"></span><br><span class="line">sayHello() <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-函数参数"><a class="markdownIt-Anchor" href="#2-函数参数"></a> 2. 函数参数</h2><p>在函数定义的圆括号中可以指定形参。<br><strong>注意，不需要声明形参类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        print(a, <span class="string">'is maximum'</span>)</span><br><span class="line">    <span class="keyword">elif</span> a == b:</span><br><span class="line">        print(a, <span class="string">'is equal to'</span>, b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(b, <span class="string">'is maximum'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意，Python 的方法是 <strong>Pass by reference</strong></p></blockquote><p>其中 a, b 是形参</p><blockquote><p>这里由于形参类型不确定，一般的 IDE 无法进行提示。所以可以使用冒号指明其类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(a:int, b:int)</span>:</span></span><br></pre></td></tr></table></figure><h2 id="3-变量作用域"><a class="markdownIt-Anchor" href="#3-变量作用域"></a> 3. 变量作用域</h2><ol><li><p>函数内声明的变量称作<strong>局部变量</strong></p></li><li><p>可以使用 <code>global</code> 语句来调用和<strong>修改函数外部声明的变量</strong></p><blockquote><p>但是，<strong>不建议使用</strong> <code>global</code> 语句。<br>应通过其他方式实现。</p></blockquote></li><li><p>非局部变量</p><blockquote><p>在嵌套定义函数的情况下会遇到。<br>通过 <code>nonlocal</code> 来调用外部函数定义的变量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcOuter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    print(<span class="string">'x is '</span>, x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funcInner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = <span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>有毒性，最好不要这么搞</p></blockquote></li></ol><h2 id="4-默认参数"><a class="markdownIt-Anchor" href="#4-默认参数"></a> 4. 默认参数</h2><p>通过在<strong>函数定义</strong>的时候对<strong>形参进行指定</strong>，可以指定默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(message, times = <span class="number">1</span>)</span>:</span></span><br><span class="line">    print(message * times)</span><br></pre></td></tr></table></figure><p><strong>只有形参表末尾的形参才能有默认参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b = <span class="number">5</span>)</span> # <span class="title">Correct</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">func</span><span class="params">(a = <span class="number">5</span>, b)</span> # <span class="title">Wrong</span></span></span><br></pre></td></tr></table></figure><h2 id="5-关键参数"><a class="markdownIt-Anchor" href="#5-关键参数"></a> 5. 关键参数</h2><p>在<strong>函数调用</strong>的时候对<strong>形参进行指定</strong>，可以<strong>忽略形参顺序</strong>指定实参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b = <span class="number">5</span>, c = <span class="number">10</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'a is '</span>, a, <span class="string">'and b is '</span>, b, <span class="string">'and c is '</span>, c)</span><br><span class="line"></span><br><span class="line">func(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">func(<span class="number">25</span>, c = <span class="number">24</span>)</span><br><span class="line">func(c = <span class="number">50</span>, a = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="6-不定参数"><a class="markdownIt-Anchor" href="#6-不定参数"></a> 6. 不定参数</h2><p>通过在<strong>函数定义</strong>的时候使用<strong>星号</strong>标识形参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: total.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(initial = <span class="number">5</span>, *numbers, **keywords)</span>:</span></span><br><span class="line">    count = initial</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        count += number</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keywords:</span><br><span class="line">        count += keywords[key]</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">print(total(<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, vegetables = <span class="number">50</span>, fruits = <span class="number">100</span>))</span><br></pre></td></tr></table></figure><blockquote><p>带一个星号的参数范围内的参数会被收集为一个<strong>列表</strong><br>如上面的函数会将 <code>1, 2, 3</code> 收集为一个叫做 <code>numbers</code> 的列表。</p></blockquote><blockquote><p>带两个星号的参数范围内的参数会被收集为一个<strong>字典</strong><br>如上面的函数会将 <code>vegetables = 50, fruits = 100</code> 收集为一个叫做 <code>keywords</code> 的字典。</p></blockquote><h2 id="7-keyword-only-参数"><a class="markdownIt-Anchor" href="#7-keyword-only-参数"></a> 7. Keyword-only 参数</h2><p>在<strong>带星参数</strong>之后的<strong>普通参数</strong>会成为 Keyword-only 参数，即<strong>只能通过关键参数形式来传递实参</strong></p><p>假如不需要不定参数而又想使用 Keyword-only 参数，那么可以使用<strong>没有名字的空星</strong>，如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a,b,*,c,d)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a,b,c,d)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: foo() takes exactly <span class="number">2</span> positional arguments (<span class="number">4</span> given)</span><br></pre></td></tr></table></figure><h2 id="8-return-语句"><a class="markdownIt-Anchor" href="#8-return-语句"></a> 8. return 语句</h2><p>Python 的函数<strong>默认为没有返回值</strong><br>一个没有返回值的函数的 <code>return</code> 语句等价于 <code>return None</code></p><h2 id="9-docstrings"><a class="markdownIt-Anchor" href="#9-docstrings"></a> 9. DocStrings</h2><p>这一特性很类似 Java 的 javadoc。与 Java 不同的是，Python 的 DocStrings 在<strong>函数的第一个逻辑行处定义</strong></p><p>特点如下：</p><ol><li>一个<strong>多行字符串</strong></li><li>以大写字母开头，句号结尾</li><li><strong>第二行是空行</strong></li></ol><blockquote><p>Python 的每个函数都拥有 <code>__doc__</code> 属性，可以通过调用这个属性来显示 DocStrings<br>在 DocStrings 中可以使用 reStructureText 的格式来实现 Javadoc 中的 <code>@parma</code> <code>@retrun</code> 功能</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">'''This is the foo function</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It is just a foo function</span></span><br><span class="line"><span class="string">    :parma a: This is the parma a</span></span><br><span class="line"><span class="string">    :type a: int</span></span><br><span class="line"><span class="string">    :parma b: This is the parma b</span></span><br><span class="line"><span class="string">    :type b: int</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>也可以使用 Google 的规范</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">module_level_function</span><span class="params">(param1, param2=None, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""This is an example of a module level function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Function parameters should be documented in the ``Args`` section. The name</span></span><br><span class="line"><span class="string">    of each parameter is required. The type and description of each parameter</span></span><br><span class="line"><span class="string">    is optional, but should be included if not obvious.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameter types -- if given -- should be specified according to</span></span><br><span class="line"><span class="string">    `PEP 484`_, though `PEP 484`_ conformance isn't required or enforced.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If \*args or \*\*kwargs are accepted,</span></span><br><span class="line"><span class="string">    they should be listed as ``*args`` and ``**kwargs``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The format for a parameter is::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        name (type): description</span></span><br><span class="line"><span class="string">            The description may span multiple lines. Following</span></span><br><span class="line"><span class="string">            lines should be indented. The "(type)" is optional.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            Multiple paragraphs are supported in parameter</span></span><br><span class="line"><span class="string">            descriptions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        param1 (int): The first parameter.</span></span><br><span class="line"><span class="string">        param2 (Optional[str]): The second parameter. Defaults to None.</span></span><br><span class="line"><span class="string">            Second line of description should be indented.</span></span><br><span class="line"><span class="string">        *args: Variable length argument list.</span></span><br><span class="line"><span class="string">        **kwargs: Arbitrary keyword arguments.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bool: True if successful, False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The return type is optional and may be specified at the beginning of</span></span><br><span class="line"><span class="string">        the ``Returns`` section followed by a colon.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The ``Returns`` section may span multiple lines and paragraphs.</span></span><br><span class="line"><span class="string">        Following lines should be indented to match the first line.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The ``Returns`` section supports any reStructuredText formatting,</span></span><br><span class="line"><span class="string">        including literal blocks::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                'param1': param1,</span></span><br><span class="line"><span class="string">                'param2': param2</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        AttributeError: The ``Raises`` section is a list of all exceptions</span></span><br><span class="line"><span class="string">            that are relevant to the interface.</span></span><br><span class="line"><span class="string">        ValueError: If `param2` is equal to `param1`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. _PEP 484:</span></span><br><span class="line"><span class="string">       https://www.python.org/dev/peps/pep-0484/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> param1 == param2:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'param1 may not be equal to param2'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="10-注解annotations"><a class="markdownIt-Anchor" href="#10-注解annotations"></a> 10. 注解(Annotations)</h2><h3 id="101-参数注解"><a class="markdownIt-Anchor" href="#101-参数注解"></a> 10.1 参数注解</h3><p>Python 的参数注解定义在<strong>形参声明的位置，与形参以括号间隔，置于参数默认值之前</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a: <span class="string">"This is param a"</span>, b: <span class="string">"This is param b"</span> = <span class="number">5</span>)</span>:</span></span><br></pre></td></tr></table></figure><h3 id="102-返回值注解"><a class="markdownIt-Anchor" href="#102-返回值注解"></a> 10.2 返回值注解</h3><p>Python 的返回值注解定义在<strong>函数头末尾的冒号之前，使用 <code>-&gt;</code> 和函数头分隔</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def haul(item: Haulable, *vargs: PackAnimal) -&gt; Distance:</span><br></pre></td></tr></table></figure><blockquote><p>注意，注解可以是字符串，也可以是类型。<br>可以通过注解实现类型检查</p></blockquote><h3 id="103-lambda-表达式"><a class="markdownIt-Anchor" href="#103-lambda-表达式"></a> 10.3 Lambda 表达式</h3><p>Lambda 表达式不支持注解</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 IO</title>
      <link href="//Python/Python%203%20IO/"/>
      <url>//Python/Python%203%20IO/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用-input-进行输入"><a class="markdownIt-Anchor" href="#1-使用-input-进行输入"></a> 1. 使用 <code>input()</code> 进行输入</h2><p>Python3 使用 <code>input()</code> 函数获取用户输入。</p><p><code>input()</code> 函数会返回一个字符串，随后可以使用 <code>int()</code> <code>float()</code> 等方法将字符串转为对应的类型或者格式</p><blockquote><p>在 Python 3 中，<code>raw_input()</code> 被整合到 <code>input()</code> 函数中，Python 2 的 <code>input()</code> 函数的功能被抛弃了。</p></blockquote><a id="more"></a><h2 id="2-文件输入输出"><a class="markdownIt-Anchor" href="#2-文件输入输出"></a> 2. 文件输入输出</h2><p>与 C++ 和 Java 读取文件流的形式一样，Python 通过使用 <code>file</code> 类的函数来对文件进行读取写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">poem = <span class="string">'''\ Programming is fun</span></span><br><span class="line"><span class="string">When the work is done</span></span><br><span class="line"><span class="string">if you wanna make your work also fun:</span></span><br><span class="line"><span class="string">    use Python!</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'poem.txt'</span>, <span class="string">'w'</span>) <span class="comment"># open for 'w'riting</span></span><br><span class="line">f.write(poem) <span class="comment"># write text to file</span></span><br><span class="line">f.close() <span class="comment"># close the file</span></span><br><span class="line">f = open(<span class="string">'poem.txt'</span>) <span class="comment"># if no mode is specified, 'r'ead mode is assumed by default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = f.readline()</span><br><span class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>: <span class="comment"># Zero length indicates EOF</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">f.close() <span class="comment"># close the file</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>open()</code> 打开文件，模式规则和 C++ 的相同<br>文件交互完毕后，使用 <code>close()</code> 来关闭文件流</p></blockquote><h2 id="3-pickle-模块"><a class="markdownIt-Anchor" href="#3-pickle-模块"></a> 3. pickle 模块</h2><p>Python 提供了一个 <code>pickle</code> 的标准模块，用于将对象储存在文件中，称为对象的持久化保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: pickling.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># the name of the file where we will store the object</span></span><br><span class="line">shoplistfile = <span class="string">'shoplist.data'</span></span><br><span class="line"><span class="comment"># the list of things to buy</span></span><br><span class="line">shoplist = [<span class="string">'apple'</span>,<span class="string">'mango'</span>,<span class="string">'carrot'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write to the file</span></span><br><span class="line">f = open(shoplistfile,<span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(shoplist, f) <span class="comment">#dump the object to a file f.close()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> shoplist <span class="comment"># detroy the shoplist variable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read back from the storage</span></span><br><span class="line">f = open(shoplistfile,<span class="string">'rb'</span>)</span><br><span class="line">storedlist = pickle.load(f) <span class="comment"># load the object from the file</span></span><br><span class="line">print(storedlist)</span><br></pre></td></tr></table></figure><blockquote><p>注意，持久化保存要求使用<strong>二进制模式</strong><br>通过 <code>dump()</code> 和 <code>load()</code> 就可以对对象进行导入和导出</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 Module</title>
      <link href="//Python/Python%203%20Module/"/>
      <url>//Python/Python%203%20Module/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>模块有点类似 C++ 中的 Namespace，但并不完全相同</p><a id="more"></a><h2 id="2-导入模块"><a class="markdownIt-Anchor" href="#2-导入模块"></a> 2. 导入模块</h2><p>通过使用 <code>import</code> 语句来导入一个模块进行使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: using_sys.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'The conmmand line arguments are:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n\nThe PYTHONPATH is'</span>, sys.path, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在上面的例子中，通过使用 <code>import sys</code> 就可以通过 <code>sys.function</code> 的形式来调用 sys 模块中的函数和变量。</p></blockquote><blockquote><p>用户自定义模块在第一次导入时，会编译成<strong>字节码</strong>文件，这是 Python 处理的，可以提高模块导入的效率。<br>这些文件以 <code>.pyc</code> 为扩展名，如果 Python 没有当前目录的访问权限，那么就不会创建 <code>.pyc</code> 文件</p></blockquote><blockquote><p>第三方模块可以通过 Python 自带的 <code>pip</code> 进行安装</p></blockquote><p>另外，还可以通过使用 <code>from...import...</code> 语句来导入语句；<br>它和 <code>import</code> 语句的唯一区别就是在模块导入之后，不用再在调用的时候填写模块名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import statement</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># From...import... statement</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line">print(argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you want to import all the identifiers,</span></span><br><span class="line"><span class="comment"># use this statement.</span></span><br><span class="line">form sys <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><blockquote><p>注意，<code>from...import *</code> 语句<strong>不会导入以双下划线开头的标识符</strong>，如 <code>__version__</code></p></blockquote><blockquote><p>一般来说，<strong>不建议使用 <code>from...import...</code> 语句</strong></p></blockquote><h2 id="3-创建模块"><a class="markdownIt-Anchor" href="#3-创建模块"></a> 3. 创建模块</h2><p>创建模块最简单的方法就是<strong>编写 .py 文件</strong>；<br>一个 <code>.py</code> 文件就是一个 Python 模块。<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: mymodule.py</span></span><br><span class="line"></span><br><span class="line">__version__ = <span class="string">'0.1'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hi'</span>)</span><br></pre></td></tr></table></figure><p>Module Demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: mymodule_demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mymodule</span><br><span class="line"></span><br><span class="line">mymodule.sayHi()</span><br><span class="line">print(<span class="string">'Version'</span>, mymodule.__version__)</span><br></pre></td></tr></table></figure><h2 id="4-模块的默认变量"><a class="markdownIt-Anchor" href="#4-模块的默认变量"></a> 4. 模块的默认变量</h2><p>每个模块都有几个默认变量，它们是由 Python 自动构建的；<br>如 <code>__name__</code> 变量，这是<strong>模块的名字</strong>（即 <code>.py</code> 文件的名字）</p><p>可以使用 <code>__name__</code> 变量来检测其自身是否是作为主程序运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Filename: using_name.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'This program is being run by itself'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'I am being imported from another module'</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>'__main__'</code> 是主模块的名字，也就是<strong>主程序的文件名</strong></p></blockquote><h2 id="5-dir-函数"><a class="markdownIt-Anchor" href="#5-dir-函数"></a> 5. <code>dir()</code> 函数</h2><p><code>dir()</code> 函数是内建函数，可以通过它来列出模块定义的标识符，包括<strong>函数、类和变量</strong><br>如果不提供参数，则返回<strong>当前模块</strong>中定义的名称列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib = fibo.fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</span><br><span class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__name__'</span>, <span class="string">'a'</span>, <span class="string">'fib'</span>, <span class="string">'fibo'</span>, <span class="string">'sys'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>由此可以看出，主模块具有 <code>__buitins__</code> 对象，实际上这就是 Python 的内建函数和类<br><code>dir()</code> 函数一般不会将内建函数列出，如果需要查看，可以通过 <code>dir(builtins)</code> 查看</p></blockquote><h2 id="6-包package"><a class="markdownIt-Anchor" href="#6-包package"></a> 6. 包(Package)</h2><p>包是模块的文件夹，其中包含了很多模块；<br>同时一个包也可以包含<strong>另一个包</strong>。</p><p><strong>一个包必须包含 <code>__init__.py</code> 文件，以免 Python 将包识别为普通目录</strong></p><p>可以使用点号来访问到包中的模块</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sound/                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats/                  Subpackage <span class="keyword">for</span> file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              aiffread.py</span><br><span class="line">              aiffwrite.py</span><br><span class="line">              auread.py</span><br><span class="line">              auwrite.py</span><br><span class="line">              ...</span><br><span class="line">      effects/                  Subpackage <span class="keyword">for</span> sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              surround.py</span><br><span class="line">              reverse.py</span><br><span class="line">              ...</span><br><span class="line">      filters/                  Subpackage <span class="keyword">for</span> filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              vocoder.py</span><br><span class="line">              karaoke.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure><blockquote><p>关于 <code>__init__.py</code>:</p></blockquote><blockquote><ol><li>一个包必须包含这个文件</li><li>这个文件可以是空的，也可以做一些包的初始化工作，比如定义 <code>__all__</code> 变量</li></ol></blockquote><h3 id="61-导入包"><a class="markdownIt-Anchor" href="#61-导入包"></a> 6.1 导入包</h3><p>包的导入有如下几种形式：</p><ol><li><p>使用 <code>import</code> 语句</p><blockquote><p>例如 <code>import sound.effects.echo</code>, 将 <code>sound/effects/echo</code> 模块导入；<br>使用方法为 <code>sound.effects.echo.echofilter(input, output, delay = 0.7, atten = 4</code></p></blockquote></li><li><p>使用 <code>from package import item</code></p><blockquote><p>在包(Package)层面，<strong>Python 推荐这么导入</strong>，主要的优点在于能够减少没有必要的前缀修饰。<br>例如： <code>from sound.effects import echo</code> 将 <code>echo</code> 模块导入<br>使用方法为：<code>echo.echofilter(input, output, delay = 0.7, atten = 4)</code></p></blockquote></li><li><p>补充：关于 <code>from package import *</code> 和 <code>__all__</code> 变量</p><blockquote><p><code>__all__</code> 变量通常在 <code>__init__.py</code> 文件中定义，用于指定<strong>允许 <code>import *</code> 识别的标识符</strong>，即允许导出的标识符；<br>如果没有指定这个变量，那么在使用 <code>import *</code> 时便会自动<strong>忽略以下划线开头的标识符</strong></p></blockquote></li><li><p>内包导入</p><blockquote><p>对于<strong>包中的模块</strong>，在可能需要到另一个兄弟包模块的时候，由于它们处在同一个目录结构中，所以可以简单地省略一些前缀。<br>Python 在导入包时，首先会搜寻<strong>当前目录</strong>，如果搜索不到，则再到系统 PATH 中进行搜索<br>例如 <code>srround</code> 想要利用 <code>echo</code> 模块，则直接简单地 <code>import echo</code> 即可。</p></blockquote><blockquote><p>在 Python 2.5 之后，可以使用<strong>相对路径</strong>进行包导入，例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个点代表当前目录</span></span><br><span class="line"><span class="comment"># 两个点代表父目录</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> echo</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> formats</span><br><span class="line"><span class="keyword">from</span> ..filters <span class="keyword">import</span> equalizer</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>目前，Python 推荐使用 <code>from package import item</code> 的包层面导入，和 <code>import module</code> 的模块层面导入方法，能更好地避免冗余和变量名称冲突。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊发音</title>
      <link href="//Japanese/%E7%89%B9%E6%AE%8A%E5%8F%91%E9%9F%B3/"/>
      <url>//Japanese/%E7%89%B9%E6%AE%8A%E5%8F%91%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>特殊发音指的是在发音过程中，一些五十音的发音方式要发生改变的情况。</p><p>包括浊音、半浊音、拗音、促音和长音，以及同一个假名可能在不同场景下需要音变的情况。</p><a id="more"></a><h2 id="2-浊音"><a class="markdownIt-Anchor" href="#2-浊音"></a> 2. 浊音</h2><p>浊音值得是 「た」「さ」「か」「は」行假名派生出来的，具体的浊化音和英语的浊化差不多：ta -&gt; da; sa -&gt; za; ka -&gt; ga;</p><table><thead><tr><th>あ</th><th>い</th><th>う</th><th>え</th><th>お</th></tr></thead><tbody><tr><td>が</td><td>ぎ</td><td>ぐ</td><td>げ</td><td>ご</td></tr><tr><td>ガ</td><td>ギ</td><td>グ</td><td>ゲ</td><td>ゴ</td></tr><tr><td>ざ</td><td>じ</td><td>ず</td><td>ぜ</td><td>ぞ</td></tr><tr><td>ザ</td><td>ジ</td><td>ズ</td><td>ゼ</td><td>ゾ</td></tr><tr><td>だ</td><td>ぢ</td><td>づ</td><td>で</td><td>ど</td></tr><tr><td>ダ</td><td>ヂ</td><td>ヅ</td><td>デ</td><td>ド</td></tr><tr><td>ば</td><td>び</td><td>ぶ</td><td>べ</td><td>ぼ</td></tr><tr><td>バ</td><td>ビ</td><td>ブ</td><td>ベ</td><td>ボ</td></tr></tbody></table><h3 id="21-鼻浊音"><a class="markdownIt-Anchor" href="#21-鼻浊音"></a> 2.1 鼻浊音</h3><p>特别注意，当 「が」行位于 <strong>句中或者句末</strong> 时，发鼻浊音。</p><p>即在发 「が」时，先发 「ん」的音。</p><p>当 「が」行位于词首的时候，只发普通的浊音，而不是鼻浊音。</p><p>当 「が」用作 <strong>助词</strong> 时，也发 <strong>鼻浊音</strong></p><p>具体可以参考此<span class="exturl" data-url="aHR0cDovL3d3dy5iaWxpYmlsaS5jb20vdmlkZW8vYXYzNDg4NjIzLw==" title="http://www.bilibili.com/video/av3488623/">视频链接<i class="fa fa-external-link"></i></span></p><h3 id="22-半浊音"><a class="markdownIt-Anchor" href="#22-半浊音"></a> 2.2 半浊音</h3><p>需要注意的是，最后一个 「は」的浊化。</p><p>有浊音和 <strong>半浊音</strong> 的区别。</p><p>「は」的浊音就是 ha -&gt; ba (「ば」)</p><p>而 「は」的半浊音是 ha -&gt; pa (「ぱ」)</p><p>注意假名右上角标注的不同，浊音标注两点，而半浊音标注一个圈</p><h2 id="3-送气音和不送气音"><a class="markdownIt-Anchor" href="#3-送气音和不送气音"></a> 3. 送气音和不送气音</h2><p>送气音是 「か」「た」「ぱ」行假名特有现象。</p><p>主要是为了满足较快的语速，保证说话的连贯性。</p><p>当这些假名不在词首、句首时，发不送气音。</p><p>即， <strong>发音不变，将送气量减少</strong>，听起来就会像浊音，但是实际上还是清音或者半浊音。</p><blockquote><p>这里要多多练习才能掌握，注意多听多练，重点在 <strong>气流量的减少</strong> 而非 发音的改变，不然会导致 「か」「が」不分。</p></blockquote><h2 id="4-母音无声化"><a class="markdownIt-Anchor" href="#4-母音无声化"></a> 4. 母音无声化</h2><p>母音无声化指的是在一些情况下 <strong>省略元音</strong>，而只保留气音的现象。</p><p>这也是为日语的高语速而服务的。</p><h3 id="41-いう结尾-无声子音"><a class="markdownIt-Anchor" href="#41-いう结尾-无声子音"></a> 4.1 「い」「う」结尾 + 无声子音</h3><p>无声子音指的是声带不震动的气音。</p><p>包括 「か」「さ」「た」「は」「ぱ」行，以及拗音 きゃ行、しゃ行、ちゃ行、ひゃ行、ぴゃ行</p><p>如果遇到 「い」「う」结尾的词加上无声子音，那么就会造成母音无声化。</p><p>其最主要的特征就是发前面的词时， <strong>声带不会震动！</strong></p><p>具体可以看<span class="exturl" data-url="aHR0cHM6Ly9qcC5zb25pYy1sZWFybmluZy5jb20vMjAxMC8wMy8xMS9tdXNlaWthLw==" title="https://jp.sonic-learning.com/2010/03/11/museika/">这个视频<i class="fa fa-external-link"></i></span></p><h3 id="42-いう假名结尾时"><a class="markdownIt-Anchor" href="#42-いう假名结尾时"></a> 4.2 「い」「う」假名结尾时</h3><p>比如说常见的 です 和 ます，其中的 す 就会出现母音无声化。</p><p>念做 「ｓ」而不是 「su」。</p><blockquote><p>注意 す 的读音也有比较难发的地方，注意读准</p></blockquote><h2 id="5-促音"><a class="markdownIt-Anchor" href="#5-促音"></a> 5. 促音</h2><p>促音指的是 っ　，其本身 <strong>不发音</strong>，但是占用词语的一个节拍。</p><p>所谓节拍，就是有促音的，读的时候，保持口型，不发音，等一阵子再发下一个假名。</p><p>具体看 <span class="exturl" data-url="aHR0cDovL3d3dy5sZWFybmphcGFuZXNlLmFpeW9yaS5vcmcvaGlyYWdhbmEtc29rdW9uLmh0bWw=" title="http://www.learnjapanese.aiyori.org/hiragana-sokuon.html">http://www.learnjapanese.aiyori.org/hiragana-sokuon.html<i class="fa fa-external-link"></i></span></p><h2 id="6-长音"><a class="markdownIt-Anchor" href="#6-长音"></a> 6. 长音</h2><p>长音指的是 <strong>将前一个字母的音拉长一拍</strong>，和促音相反。</p><p>在 <strong>写法上</strong>，有如下规则：</p><ol><li><p>母音重复</p><blockquote><p>如 「あ」「い」「う」只需要重复假名即可</p></blockquote></li><li><p>「え」段加「い」</p><blockquote><p>如 「きれい」美丽的</p></blockquote></li><li><p>「お」段加「う」</p><blockquote><p>如 「おとうさん」父亲</p></blockquote></li><li><p>片假名使用「ー」表示</p><blockquote><p>日文输入法输入减号即可</p></blockquote></li></ol><p>注意，「え」和 「お」会出现母音重复现象，如 「おおい」。</p><p>同时，「え」段有时也有加「え」的情况，如 「おねえさん」</p><p>可能需要总结归纳。</p><h2 id="7-拗音"><a class="markdownIt-Anchor" href="#7-拗音"></a> 7. 拗音</h2><p>拗音是 「イ」段假名的特有现象，此段假名加上 ょ・ゃ・ょ 即组成拗音。</p><p>注意拗音的字要缩小。</p><p>拗音连成一个音节来读，而不是分开两个音节，相对来说较为简单。</p><p>需要注意的是，拗音的罗马字会省略掉 i，如　「きゃ」的罗马字是「kya」，在打字时注意即可。</p><p>如果要单独打后面的缩小的字，那么在假名前面加上 x 即可，如 ゃ 使用 「xya」即可。</p><h2 id="8-助词音变"><a class="markdownIt-Anchor" href="#8-助词音变"></a> 8. 助词音变</h2><p>一些假名在用作助词时，会发生音变现象，比如：</p><ol><li>「は」-&gt; 「わ」</li><li>「へ」-&gt; 「え」</li></ol>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动词变化形式</title>
      <link href="//Japanese/%E5%8A%A8%E8%AF%8D%E5%8F%98%E5%8C%96%E5%BD%A2%E5%BC%8F/"/>
      <url>//Japanese/%E5%8A%A8%E8%AF%8D%E5%8F%98%E5%8C%96%E5%BD%A2%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-敬体形式ます形"><a class="markdownIt-Anchor" href="#1-敬体形式ます形"></a> 1. 敬体形式(ます形)</h2><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gw1fadotjnrlgj31kw0wejvz.jpg"></p><a id="more"></a><h2 id="2-连用形"><a class="markdownIt-Anchor" href="#2-连用形"></a> 2. 连用形</h2><p>实际上就是 ます 形去掉 ます，就是动词连用形。</p><h3 id="21-敬体"><a class="markdownIt-Anchor" href="#21-敬体"></a> 2.1 敬体</h3><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79gw1fadowlhl2tj31kw0wkq8q.jpg"></p><p>注意，这里的敬体时态变形都是属于敬体。</p><p>中顿形用的比较少。</p><blockquote><p>始めまして</p></blockquote><h3 id="22-名词"><a class="markdownIt-Anchor" href="#22-名词"></a> 2.2 名词</h3><p>动词连用形就是动词的 <strong>名词形式</strong>。</p><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79gw1fadp1msrawj31kw0wcado.jpg"></p><p>通常和 に 连用，表示目的。</p><blockquote><p>に 作为助词只能接名词，表示目的时，只能使用动词的名词形式，即连用形。</p></blockquote><h3 id="23-构成复合词"><a class="markdownIt-Anchor" href="#23-构成复合词"></a> 2.3 构成复合词</h3><p><img alt data-src="https://ww2.sinaimg.cn/large/006tNc79gw1fadp4u9r4ej31kw0wkafh.jpg"></p><h2 id="3-否定形"><a class="markdownIt-Anchor" href="#3-否定形"></a> 3. 否定形</h2><p>由动词原形变化而来</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gw1fadp9qc2i6j31kw0wijx5.jpg"></p><h2 id="4-意志形想要做"><a class="markdownIt-Anchor" href="#4-意志形想要做"></a> 4. 意志形(想要做)</h2><p>用作第二人称时，主要表达<strong>劝诱和建议</strong>的意义。</p><p><img alt data-src="https://ww2.sinaimg.cn/large/006tNc79gw1fadpfgd83qj31kw0wjwj3.jpg"></p><p>注意，意志形和推量形有区别，推量形表示 <strong>推测</strong>。</p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gw1fadphot8s7j31kw0wawjx.jpg"></p><p>需要注意的是，推量形不能用于第二人称，而意志形不能用于第三人称。</p><h2 id="5-た-形て-形"><a class="markdownIt-Anchor" href="#5-た-形て-形"></a> 5. た 形/て 形</h2><p><img alt data-src="https://ww2.sinaimg.cn/large/006tNc79gw1fae0smbu83j31kw0wmwiz.jpg"></p><h3 id="51-音变规律"><a class="markdownIt-Anchor" href="#51-音变规律"></a> 5.1 音变规律</h3><p><strong>仅仅适用于五段动词</strong></p><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gw1fae28lq0sqj31kw0wuq9g.jpg"></p><h3 id="52-作用"><a class="markdownIt-Anchor" href="#52-作用"></a> 5.2 作用</h3><p><img alt data-src="https://ww4.sinaimg.cn/large/65e4f1e6jw1fae2euignej21kw0wg0y6.jpg"></p><p>た 形表示 <strong>完成时和过去式</strong></p><p>て 形表示 <strong>中顿</strong>，如果有两个动词需要隔开来说，那么使用 て 形</p><h2 id="6-假定形如果"><a class="markdownIt-Anchor" href="#6-假定形如果"></a> 6. 假定形(如果)</h2><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1fae2lsbgg6j21kw0wfjwj.jpg"></p><p>直接使用 <strong>尾变 え 段 + ば</strong> 即可，不需要区分。</p><h3 id="61-假定形表达方式"><a class="markdownIt-Anchor" href="#61-假定形表达方式"></a> 6.1 假定形表达方式</h3><p>假定形表达方式有四种： と、ば、なら、たら</p><h4 id="611-と-形式"><a class="markdownIt-Anchor" href="#611-と-形式"></a> 6.1.1 と 形式</h4><p>前面的动作发生之后，就 <strong>一定会</strong> (100%) 发生后面的动作；</p><p>表示一种自然状态和必定发生的事情。</p><p>使用 <strong>动词原形、否定形 + と</strong></p><blockquote><p>コインを入 い れると、缶 (かん) ビールが出 で る</p></blockquote><h4 id="612-ば-形式"><a class="markdownIt-Anchor" href="#612-ば-形式"></a> 6.1.2 ば 形式</h4><p>主要是固定搭配、谚语和接特定的动词，基本属于固定搭配。</p><p>就是上面的 PPT 的形式。</p><blockquote><p>平 (へい) 日 (じつ) は学 (がっ) 校 (こう) に行 い かなければならない</p><p>研 けん 究 きゅう すればするほど、面 おも 白 しろ くなる。</p><p>住 す めば都 みやこ 。</p><blockquote><p>表示习惯了都是好地方 （谚语）</p></blockquote><p>喉 のど 元 もと 過 す ぎれば熱 あつ さを忘 わす れる。</p><blockquote><p>比喻享乐时候就会忘了以前的艰辛</p></blockquote><p>麝 じゃ あれば香 かんば し。</p><blockquote><p>比喻有实力的人最终都能得到认同</p></blockquote><p>この仕 し 事 ごと はやればできると思 おも う。</p><p>先 せん 生 せい に聞 き けば分 わ かる。</p><p>学 がく 生 せい はちゃんと宿 しゅく 題 だい をすればいい</p></blockquote><p>接特定的动词，主要有</p><ol><li>やれば</li><li>聞けば</li><li>すれば</li></ol><p>固定搭配，主要有</p><ol><li><p>〜 ば 〜 ほど</p><blockquote><p>越… 就越 …</p></blockquote></li><li><p>否定形去 い ＋ ければならない</p><blockquote><p>不…的话，就不行。</p></blockquote></li></ol><p>剩下的都表示 <strong>必然结果</strong></p><h4 id="613-なら-形式"><a class="markdownIt-Anchor" href="#613-なら-形式"></a> 6.1.3 なら 形式</h4><p>假设前面的动作 <strong>尚未进行</strong>，而给予后面的建议和意见、后果。</p><p>用法： <strong>动词原形、否定形、名词 + なら</strong></p><p>注意不需要变化，只使用原形即可。</p><p>通常只接原形。</p><blockquote><p>スーパーに行 い くなら、メロンを買 か ってきてください</p></blockquote><h4 id="614-たら-形式"><a class="markdownIt-Anchor" href="#614-たら-形式"></a> 6.1.4 たら 形式</h4><p>动词 た 形 + なら 的省略。</p><p>表示 <strong>如果事情已经发生了，而对后方的效果、后果。</strong></p><blockquote><p>(已经发生了) 的话…就…</p></blockquote><p>用法： <strong>动词 た 形 + ら</strong></p><blockquote><p>学 がっ 校 こう に行 い ったら、先 せん 生 せい に休 やす みのことを伝 つた えてください<br><strong>到了学校之后</strong>，和老师说休假的事情。</p></blockquote><h4 id="615-なら-和-たら-的区别"><a class="markdownIt-Anchor" href="#615-なら-和-たら-的区别"></a> 6.1.5 なら 和 たら 的区别</h4><ul><li>なら<blockquote><p>表示前面的动作 <strong>尚未进行</strong>，多用于表示建议</p></blockquote></li><li>たら<blockquote><p>表示前面的动作 <strong>已经进行</strong></p></blockquote></li></ul><p>但是在接形容词和名词，区别不大。</p><p>还有就是 なら 比较正式化，而 たら 比较口语化；</p><p>需要注意的就是它们在接动词的区别。</p><h2 id="7-命令形"><a class="markdownIt-Anchor" href="#7-命令形"></a> 7. 命令形</h2><p>语法上比较凶悍，大多数情况不要使用。</p><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1fae2paq48cj21kw0wdq78.jpg"></p><p>一段动词中的 よ 是一个 <strong>书面用语</strong>，口语中一般不用。</p><h3 id="71-命令的表达方式"><a class="markdownIt-Anchor" href="#71-命令的表达方式"></a> 7.1 命令的表达方式</h3><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1fae2r554kaj21kw0wbaeg.jpg"></p><p>最后一种是 <strong>否定形式</strong> 的命令表达。</p><blockquote><p>在这里是双重否定，注意区分。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动词和他动词</title>
      <link href="//Japanese/%E8%87%AA%E5%8A%A8%E8%AF%8D%E5%92%8C%E4%BB%96%E5%8A%A8%E8%AF%8D/"/>
      <url>//Japanese/%E8%87%AA%E5%8A%A8%E8%AF%8D%E5%92%8C%E4%BB%96%E5%8A%A8%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>相当于英语中的及物动词和不及物动词。</p><p>自动词是不及物的；</p><p>他动词是及物的。</p><a id="more"></a><h2 id="2-用法区别"><a class="markdownIt-Anchor" href="#2-用法区别"></a> 2. 用法区别</h2><p>这里有个考点，就是自他动词的用法区别</p><ol><li><p>主语 が　+ 自动词</p><blockquote><p>自动词前面的格助词是 が</p></blockquote></li><li><p>主语 が　+ 宾语 を　+ 他动词</p><blockquote><p>他动词前面的格助词是 を</p></blockquote></li><li><p>を　后面还可以接自动词，表示经过、离开。</p></li></ol><h2 id="3-按照意思区分"><a class="markdownIt-Anchor" href="#3-按照意思区分"></a> 3. 按照意思区分</h2><p>首先，我们可以按照意思来区分。</p><p>如果动作可以 <strong>自然发生</strong>，不需要外力帮助，那么就是自动词。</p><p>比如说，雨が降る　这里的 降る　是自动词；</p><p>而 料理を食べる　中的 食べる　就是他动词。</p><blockquote><p>雨是自然落下的，不存在外力；<br>料理是被吃的，存在外力。</p></blockquote><h2 id="4-自他动词按照说话立场有所不同"><a class="markdownIt-Anchor" href="#4-自他动词按照说话立场有所不同"></a> 4. 自他动词按照说话立场有所不同</h2><p>例如，开门 開く　是自动词；</p><p>而 開ける　是他动词。</p><p>区别在于说话人立场不同，</p><p>開く 指的是乘客看到电车门打开了，此时对于 <strong>乘客而言</strong>，车门打开不依靠外力；</p><p>而 開ける　指的是，电车司机把门打开了，此时 <strong>对于电车司机而言</strong>，车门打开依靠外力指向。</p><h2 id="5-区分技巧"><a class="markdownIt-Anchor" href="#5-区分技巧"></a> 5. 区分技巧</h2><p>对于同个意思的自他动词，称为一对自他动词，主要有以下几种区分技巧。</p><h3 id="51-技巧一"><a class="markdownIt-Anchor" href="#51-技巧一"></a> 5.1 技巧一</h3><p><img alt data-src="https://ww4.sinaimg.cn/large/65e4f1e6gw1fae4cd6mz0j21kw0wo43v.jpg"></p><p>あ　是自动词， え　是他动词</p><blockquote><p>注意，存在反例，不一定正确。</p></blockquote><h3 id="52-技巧二"><a class="markdownIt-Anchor" href="#52-技巧二"></a> 5.2 技巧二</h3><p><img alt data-src="https://ww4.sinaimg.cn/large/65e4f1e6gw1fae4dtm5v0j21kw0x444a.jpg"></p><p>す　结尾的动词，几乎可以确定为他动词；另外一个就是他动词。</p><h3 id="53-技巧三"><a class="markdownIt-Anchor" href="#53-技巧三"></a> 5.3 技巧三</h3><p><img alt data-src="https://ww1.sinaimg.cn/large/65e4f1e6jw1fae4gae9ncj21kw0x0dky.jpg"></p><p>注意，另一个动词没有 る　才能使用。<br>如果没有 す，那么 る　就把 す　的地位替代掉，成为他动词。</p><blockquote><p>注意，这个技巧不靠谱概率较高，慎用。</p></blockquote><h3 id="54-反例"><a class="markdownIt-Anchor" href="#54-反例"></a> 5.4 反例</h3><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1fae4ijf1tyj21kw0x4djs.jpg"></p><blockquote><p>預かる：别人的东西放在自己这里 -&gt; 保管<br>預ける：自己的东西放在别人那里 -&gt; 寄存</p></blockquote><p>此外还有一些反例</p><ol><li><p>聞く 是自动词；聞こえる 是他动词</p><blockquote><p>聞く　是听<br>聞こえる 是听得到</p></blockquote></li><li><p>固定搭配 なる 和 する</p><blockquote><p>〜が〜になる，表示自然变化<br>〜を〜にする，表示人为改变。</p><p>〜になる，表示客观结果<br>〜にする，表示主观决定</p></blockquote></li><li><p>入る　是自动词，入れる　是他动词</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>补助动词</title>
      <link href="//Japanese/%E8%A1%A5%E5%8A%A9%E5%8A%A8%E8%AF%8D/"/>
      <url>//Japanese/%E8%A1%A5%E5%8A%A9%E5%8A%A8%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ている"><a class="markdownIt-Anchor" href="#1-ている"></a> 1. 〜ている</h2><p>主要表示以下意思：</p><ol><li><p>正在进行的动作</p></li><li><p>反复进行的动作</p></li><li><p>自然维持的状态</p><blockquote><p>电视机坏了</p></blockquote></li><li><p>过去的经历</p><blockquote><p>去过 3 次北海道</p></blockquote></li><li><p>未来完成的结果</p><blockquote><p>到…时候， <strong>已经</strong>… 了吧</p></blockquote></li></ol><a id="more"></a><h2 id="2-てある"><a class="markdownIt-Anchor" href="#2-てある"></a> 2. 〜てある</h2><ol><li><p>后接他动词，表示状态</p><blockquote><p>〜ている 一般接 <strong>自动词</strong>，表示自然保持的状态<br>〜てある　后接 <strong>他动词</strong>，表示人为维持的状态</p><p>需要注意的是，上述两个的格动词都使用 が<br>实际上，〜ている 让他动词具有表达状态的能力，整体上成为了自动词<br>还有就是，上述的两种状态，都是 <strong>静止状态</strong>，所以格助词使用 に。<br><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1faem4uhis4j21kw0x0wjc.jpg"></p></blockquote></li><li><p>后接他动词，表示 <strong>事先做好了某种准备</strong></p><blockquote><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1faemljbhx4j21kw0wkadt.jpg"><br>票已经买好了，准备已经做好了</p></blockquote></li></ol><h2 id="3-ておく"><a class="markdownIt-Anchor" href="#3-ておく"></a> 3. 〜ておく</h2><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1faemo1ksr0j21kw0x5782.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动词特征和分类</title>
      <link href="//Japanese/%E5%8A%A8%E8%AF%8D%E7%89%B9%E5%BE%81%E5%92%8C%E5%88%86%E7%B1%BB/"/>
      <url>//Japanese/%E5%8A%A8%E8%AF%8D%E7%89%B9%E5%BE%81%E5%92%8C%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-动词特征"><a class="markdownIt-Anchor" href="#1-动词特征"></a> 1. 动词特征</h2><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79gw1fadogttbnrj31kw0x2wil.jpg"></p><a id="more"></a><h2 id="2-动词分类"><a class="markdownIt-Anchor" href="#2-动词分类"></a> 2. 动词分类</h2><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gw1fadoi93mdmj31kw0w4wht.jpg"></p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79gw1fadojmviaij31kw0wugqb.jpg"></p><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79gw1fadom0nmxtj31kw0w9wic.jpg"></p><p>如果是 <strong>汉字直接加　る</strong>，并且 <strong>不是两个假名</strong>，那么它是 <strong>五段动词</strong>。</p><p>如果是 <strong>两个假名</strong> 的，那么就为 <strong>一段动词</strong>。</p><blockquote><p>比如上面的 帰る 有三个假名，是 <strong>五段动词</strong>。<br>但是 見る　<strong>只有两个假名</strong>，而且，る　前面是 み(い 段假名)，是 <strong>一段动词</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间数词</title>
      <link href="//Japanese/%E6%97%B6%E9%97%B4%E6%95%B0%E8%AF%8D/"/>
      <url>//Japanese/%E6%97%B6%E9%97%B4%E6%95%B0%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-日期"><a class="markdownIt-Anchor" href="#1-日期"></a> 1. 日期</h2><ol><li><p>一号</p><blockquote><p>一日（ついたち）/（いちにち）/一号</p></blockquote></li><li><p>二号</p><blockquote><p>二日（ふつか）/二号</p></blockquote></li><li><p>三号</p><blockquote><p>三日（みっか）/三号</p></blockquote></li><li><p>四号</p><blockquote><p>四日（よっか）/四号</p></blockquote></li><li><p>五号</p><blockquote><p>五日（いつか）/五号</p></blockquote></li><li><p>六号</p><blockquote><p>六日（むいか）/六号</p></blockquote></li><li><p>七号</p><blockquote><p>七日（なのか）/七号</p></blockquote></li><li><p>八号</p><blockquote><p>八日（ようか）/八号<br>注意，八号和四号很像，八号有<strong>长音</strong></p></blockquote></li><li><p>九号</p><blockquote><p>九日（ここのか）/九号</p></blockquote></li><li><p>十号</p><blockquote><p>十日（とおか）/十号</p></blockquote></li><li><p>二十号</p><blockquote><p>二十日（はつか）</p></blockquote></li><li><p>几号</p><blockquote><p>表示疑问<br>何日（なんにち）/几号,几日</p></blockquote></li></ol><a id="more"></a><h2 id="2-星期"><a class="markdownIt-Anchor" href="#2-星期"></a> 2. 星期</h2><p>星期相对比较简单，记住 <strong>日月火水木金土</strong> 即可。</p><h2 id="3-时间前后表达"><a class="markdownIt-Anchor" href="#3-时间前后表达"></a> 3. 时间前后表达</h2><h3 id="31-日"><a class="markdownIt-Anchor" href="#31-日"></a> 3.1 日</h3><ol><li><p>今天</p><blockquote><p>きょう</p></blockquote></li><li><p>明天</p><blockquote><p>あした/みょうにち</p></blockquote></li><li><p>昨天</p><blockquote><p>きのう</p></blockquote></li><li><p>前天</p><blockquote><p>おととい</p></blockquote></li><li><p>后天</p><blockquote><p>あさって</p></blockquote></li></ol><h3 id="32-星期"><a class="markdownIt-Anchor" href="#32-星期"></a> 3.2 星期</h3><ol><li><p>本周</p><blockquote><p>こんしゅう (今周)</p></blockquote></li><li><p>上周</p><blockquote><p>せんしゅう (先周)</p></blockquote></li><li><p>上上周</p><blockquote><p>せんせんしゅう (先々周)</p></blockquote></li><li><p>下周</p><blockquote><p>らいしゅう (来周)</p></blockquote></li><li><p>下下周</p><blockquote><p>さらいしゅう (再来周)</p></blockquote></li></ol><h3 id="33-月"><a class="markdownIt-Anchor" href="#33-月"></a> 3.3 月</h3><ol><li><p>这个月</p><blockquote><p>こんげつ （本月）</p></blockquote></li><li><p>下个月</p><blockquote><p>らいげつ （来月）</p></blockquote></li><li><p>下下个月</p><blockquote><p>さらいげつ （再来月）</p></blockquote></li><li><p>上个月</p><blockquote><p>せんげつ (先月)</p></blockquote></li><li><p>上上个月</p><blockquote><p>せんせんげつ (先々月)</p></blockquote></li></ol><h3 id="34-年"><a class="markdownIt-Anchor" href="#34-年"></a> 3.4 年</h3><ol><li><p>今年</p><blockquote><p>ことし (今年)</p></blockquote></li><li><p>去年</p><blockquote><p>きょねん (去年) / さくねん (昨年)</p></blockquote></li><li><p>前年</p><blockquote><p>おととし / ぜんねん (前年)</p></blockquote></li><li><p>明年</p><blockquote><p>らいねん (来年)</p></blockquote></li><li><p>后年</p><blockquote><p>さらいねん (再来年)</p></blockquote></li></ol><h2 id="4-一天之内的表达"><a class="markdownIt-Anchor" href="#4-一天之内的表达"></a> 4. 一天之内的表达</h2><ol><li><p>早上</p><blockquote><p>あさ</p></blockquote></li><li><p>上午</p><blockquote><p>ごぜん (午前)</p></blockquote></li><li><p>中午</p><blockquote><p>ひる (昼)</p></blockquote></li><li><p>下午</p><blockquote><p>ごご (午后)</p></blockquote></li><li><p>傍晚</p><blockquote><p>ゆうがた (夕方)</p></blockquote></li><li><p>晚上</p><blockquote><p>よる (夜)</p></blockquote></li><li><p>白天</p><blockquote><p>ひる (昼)</p></blockquote></li></ol><h2 id="5-长时间末尾的表达"><a class="markdownIt-Anchor" href="#5-长时间末尾的表达"></a> 5. 长时间末尾的表达</h2><ol><li><p>周末</p><blockquote><p>周末（しゅうまつ）</p></blockquote></li><li><p>月末</p><blockquote><p>月末（げつまつ）</p></blockquote></li><li><p>年末</p><blockquote><p>年末（ねんまつ）</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>授受关系</title>
      <link href="//Japanese/%E6%8E%88%E5%8F%97%E5%85%B3%E7%B3%BB/"/>
      <url>//Japanese/%E6%8E%88%E5%8F%97%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-我-他人"><a class="markdownIt-Anchor" href="#1-我-他人"></a> 1. 我 -&gt; 他人</h2><p><img alt data-src="https://ww4.sinaimg.cn/large/006tNc79gw1facsmr44fhj31kw0xawhu.jpg"></p><p>需要注意的是， さしあげる　是 あげる 的自谦语。</p><blockquote><p>实际上，判断自谦语和尊敬语主要看主语成分，即 は 的修饰词。</p></blockquote><a id="more"></a><h2 id="2-他人-我"><a class="markdownIt-Anchor" href="#2-他人-我"></a> 2. 他人 -&gt; 我</h2><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79gw1facsvyzcczj31kw0wvjvo.jpg"></p><p>这里有个常考点，主要是考 <strong>格助词</strong> 和后面的句末修饰的关系。</p><p>需要记忆。</p><p>同理，上述的 くださる　是 くれる　的尊敬语；</p><p>いだだく　是 もらう　的 <strong>自谦语</strong>。</p><blockquote><p>主要看主语，いだだく　虽然是 自谦语，但是用于描述别人的动作，表示对别人的尊敬。</p></blockquote><h2 id="3-结合使役逻辑颠倒"><a class="markdownIt-Anchor" href="#3-结合使役逻辑颠倒"></a> 3. 结合使役，逻辑颠倒！</h2><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gw1fact2971huj31kw0wxjwe.jpg"></p><p>这里的逻辑颠倒，主要是 <strong>行为人</strong> 的变化。</p><p>这里的第三句并没有 <strong>请求</strong> 的意思，所表达的就是 “我要说自己的意见”，而不包含有请求意味。</p><h2 id="4-请求别人为自己做某事"><a class="markdownIt-Anchor" href="#4-请求别人为自己做某事"></a> 4. 请求别人为自己做某事</h2><p><img alt data-src="https://ww3.sinaimg.cn/large/006tNc79gw1fact8n66ixj31kw0wqn1u.jpg"></p><p>这里的句式才具有 <strong>请求意味</strong>；</p><p>需要注意的是，いただく　的请求句式需要使用 <strong>动词的可能态</strong>，也就是动词末尾变为同行的 え　段。</p><h2 id="5-请求别人允许自己做某事"><a class="markdownIt-Anchor" href="#5-请求别人允许自己做某事"></a> 5. 请求别人允许自己做某事</h2><p><img alt data-src="https://ww1.sinaimg.cn/large/006tNc79gw1factd1h7jwj31kw0x6dku.jpg"></p><p>在请求句式加上 <strong>使役态</strong>，变成 <strong>请求允许</strong> 的意思。</p><h2 id="6-注意"><a class="markdownIt-Anchor" href="#6-注意"></a> 6. 注意</h2><p>授受关系中隐含了一个 <strong>恩惠给予</strong> 的意思。</p><p>如果没有包含此意思，就不应该使用此句式。</p>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Basic</title>
      <link href="//CSharp/CSharp%20Basic/"/>
      <url>//CSharp/CSharp%20Basic/</url>
      
        <content type="html"><![CDATA[<p> <a href="#1-hello-world">1. Hello, World!</a><br> <a href="#2-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">2. 基本类型</a><br>  <a href="#21-%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96">2.1 声明和初始化</a><br>  <a href="#22-%E9%BB%98%E8%AE%A4%E5%80%BC">2.2 默认值</a><br>  <a href="#23-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98">2.3 基本类型的对象成员</a><br>  <a href="#24-big-number">2.4 Big Number</a><br> <a href="#3-%E5%AD%97%E7%AC%A6%E4%B8%B2">3. 字符串</a><br>  <a href="#31-%E9%80%90%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2">3.1 逐字字符串</a><br>  <a href="#32-%E7%9B%B8%E7%AD%89%E6%80%A7%E5%88%A4%E5%88%AB">3.2 相等性判别</a><br>  <a href="#33-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96">3.3 字符串格式化</a><br> <a href="#4-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">4. 类型转换</a><br>  <a href="#41-checked-%E5%92%8C-unchecked">4.1 checked 和 unchecked</a><br> <a href="#5-%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B-var">5. 隐式类型 var</a><br>  <a href="#%E7%9C%9F%E6%AD%A3%E7%94%A8%E9%80%94">真正用途</a></p><h2 id="1-hello-world"><a class="markdownIt-Anchor" href="#1-hello-world"></a> 1. Hello, World!</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SimpleCSharpApp</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] app</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">"Hello, World!"</span>);</span><br><span class="line"></span><br><span class="line">      Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​基本的编码规范：</p><ul><li>区分大小写</li><li>命名空间、类、成员（包括方法）采用<strong>大驼峰</strong></li><li>大括号另起一行</li></ul><a id="more"></a><h2 id="2-基本类型"><a class="markdownIt-Anchor" href="#2-基本类型"></a> 2. 基本类型</h2><p>C# 中的基本类型都是<strong>对象</strong>，事实上，基本类型的关键字都对应一个 <code>System</code> 命名空间中的一个<strong>类</strong></p><blockquote><p>显然是相对于 Java 的重大进步</p></blockquote><p>下表给出了 C# 基本类型和 CLS，系统类型的对应关系。</p><table><thead><tr><th>基本类型</th><th>符合 CLS？</th><th>系统类型</th><th>范围</th><th>作用</th></tr></thead><tbody><tr><td>bool</td><td>T</td><td>System.Boolean</td><td>true or false</td><td>布尔值</td></tr><tr><td>sbyte</td><td>F</td><td>System.SByte</td><td>-128 ~ 127</td><td>有符号的 8 bit 整数</td></tr><tr><td>byte</td><td>T</td><td>System.Bute</td><td>0 ~255</td><td>无符号的 8 bit 整数</td></tr><tr><td>short</td><td>T</td><td>System.Int16</td><td>-32768 ~32767</td><td>有符号的 16 bit 整数</td></tr><tr><td>ushort</td><td>F</td><td>System.UInt16</td><td>0 ~ 65535</td><td>无符号的 16 bit 整数</td></tr><tr><td>int</td><td>T</td><td>System.Int32</td><td>-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></td><td>带符号的 32 bit 整数</td></tr><tr><td>uint</td><td>F</td><td>System.UInt32</td><td>0 ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></td><td>无符号的 32 bit 整数</td></tr><tr><td>long</td><td>T</td><td>System.Int64</td><td>-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></td><td>有符号的 64 bit 整数</td></tr><tr><td>ulong</td><td>F</td><td>Sytem.UInt64</td><td>0 ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span></td><td>无符号的 64 bit 整数</td></tr><tr><td>char</td><td>T</td><td>System.Char</td><td>U+0000 ~U+ffff</td><td>16 bit 的 Unicode 字符</td></tr><tr><td>float</td><td>T</td><td>System.Single</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>3.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup><mo>∼</mo><mo>+</mo><mn>3.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup></mrow><annotation encoding="application/x-tex">-3.4 \times 10^{38} \sim +3.4 \times 10^{38}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord">3</span><span class="mord">.</span><span class="mord">4</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">+</span><span class="mord">3</span><span class="mord">.</span><span class="mord">4</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></td><td>32 bit 浮点数</td></tr><tr><td>double</td><td>T</td><td>System.Double</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>±</mo><mn>5.0</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>324</mn></mrow></msup><mo>∼</mo><mtext> </mtext><mo>±</mo><mn>1.7</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup></mrow><annotation encoding="application/x-tex">\pm 5.0 \times 10^{-324} \sim \ \pm 1.7 \times 10 ^{308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">±</span><span class="mord">5</span><span class="mord">.</span><span class="mord">0</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">±</span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></td><td>64 bit 浮点数</td></tr><tr><td>decimal</td><td>T</td><td>System.Decimal</td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>7.9</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>28</mn></msup><mo>∼</mo><mn>7.9</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>28</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mrow><mn>0</mn><mo>∼</mo><mn>28</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(-7.9 \times 10^{28} \sim 7.9 \times 10^{28})/(10^{0 \sim 28})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">7</span><span class="mord">.</span><span class="mord">9</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">7</span><span class="mord">.</span><span class="mord">9</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mrel mtight">∼</span><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>128 bit 带符号数</td></tr><tr><td>string</td><td>T</td><td>System.String</td><td>受系统内存限制</td><td>字符串</td></tr><tr><td>object</td><td>T</td><td>System.Object</td><td>任何类型都能保存在一个 object 变量中</td><td>所有类的基类</td></tr></tbody></table><h3 id="21-声明和初始化"><a class="markdownIt-Anchor" href="#21-声明和初始化"></a> 2.1 声明和初始化</h3><p>C# 变量声明和初始化采用 C 系语言的一贯语法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> myInt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> myString;</span><br><span class="line">myString = <span class="string">"This is my string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> b1 = <span class="literal">true</span>, b2 = <span class="literal">false</span>, b3 = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>当然也可以用全名来声明一个基本变量，不过基本没人这么干。</p><h3 id="22-默认值"><a class="markdownIt-Anchor" href="#22-默认值"></a> 2.2 默认值</h3><p>与 Java 一样，C# 的基本变量都具有一定的默认值。</p><ul><li><code>bool</code> 默认为 <code>false</code></li><li>数值类型默认为 0，如果是浮点数，则为 0.0</li><li><code>char</code> 类型默认为空字符</li><li><code>BigInteger</code> 默认为 0</li><li><code>DateTime</code> 类型设置为 <code>1/1/0001/ 12:00:00 AM</code></li><li>对象引用默认为 <code>null</code></li></ul><h3 id="23-基本类型的对象成员"><a class="markdownIt-Anchor" href="#23-基本类型的对象成员"></a> 2.3 基本类型的对象成员</h3><p>C# 与 Java 最大的区别就是，取消了原始类型，所有的类型都是对象。</p><p>所以，基本对象也具有成员，通常集成了一些对本类型的一些处理方法，和 Java 中的 <code>Integer</code> <code>Long</code> 等类型不同。</p><p>需要注意的是，基本类型内置了 <code>Parse()</code> 方法，用于将 <code>string</code> 字面量转换成对应的对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> b = <span class="keyword">bool</span>.Parse(<span class="string">"True"</span>);</span><br></pre></td></tr></table></figure><h3 id="24-big-number"><a class="markdownIt-Anchor" href="#24-big-number"></a> 2.4 Big Number</h3><p>与 Java 一样，C# 也内置了 <code>BigNumber</code> 类型，它需要使用 <code>System.Numerics</code> 命名空间才能使用。</p><h2 id="3-字符串"><a class="markdownIt-Anchor" href="#3-字符串"></a> 3. 字符串</h2><p>C# 的字符串和 Java 的大体相似，只有少数的扩展功能。</p><p>字符串使用 <code>string</code> 定义，而不是使用大写的。</p><p>同样，支持加号拼接、转义、<code>StringBuilder</code>。</p><p>字符串也是不可变的。</p><p>不过，C# 字符串相对于 Java 来说也有一些扩展功能。</p><h3 id="31-逐字字符串"><a class="markdownIt-Anchor" href="#31-逐字字符串"></a> 3.1 逐字字符串</h3><p>实际上就是原始字符串，在字符串引号前加上 <code>@</code>，则编译器不会对转义字符进行转义，同时，空格也会得到保留（即可以声明多行字符串）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> raw = <span class="string">@"C:\MyApp\bin\Debug"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> multipleLine = <span class="string">@"This is</span></span><br><span class="line"><span class="string">  mutiple</span></span><br><span class="line"><span class="string">  line</span></span><br><span class="line"><span class="string">  string"</span>;</span><br></pre></td></tr></table></figure><h3 id="32-相等性判别"><a class="markdownIt-Anchor" href="#32-相等性判别"></a> 3.2 相等性判别</h3><p>谢天谢地，C# 支持了操作符重载功能，也就是说，可以用 <code>==</code> 和 <code>!=</code> 进行字符串相等性判别，而不是 Java 的引用判别。</p><p>与此同时，也可以使用传统的 <code>Equals()</code> 来进行字符串相等性判断。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line">Console.WriteLine(s1 == <span class="string">"hello"</span>);<span class="comment">// true</span></span><br><span class="line">Console.WriteLine(s1.Equals(<span class="string">"hello"</span>));</span><br></pre></td></tr></table></figure><h3 id="33-字符串格式化"><a class="markdownIt-Anchor" href="#33-字符串格式化"></a> 3.3 字符串格式化</h3><p>C# 中使用 <code>{0}</code> <code>{1}</code> 等可以实现字符串格式化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> hehe = <span class="string">"hhe"</span>;</span><br><span class="line"><span class="keyword">string</span> s = <span class="string">"&#123;0&#125;, &#123;1&#125;, $hehe"</span>;</span><br><span class="line">Console.WriteLine(<span class="keyword">string</span>.Format(s, <span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>同时也可以使用基本的格式化字符，可以直接使用于控制台输出。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"c format: &#123;0:c&#125;"</span>, <span class="number">99999</span>); <span class="comment">//$99999.00</span></span><br></pre></td></tr></table></figure><blockquote><p>比起 Java 只能用格式化字符，不知道高到哪里去了。</p></blockquote><p>下面是一些常用的格式化字符：</p><table><thead><tr><th>格式化字符</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>C 或 c</td><td style="text-align:left">用于格式化货币，这个标识会以当地的货币符号为前缀</td></tr><tr><td>D 或 d</td><td style="text-align:left">用于格式化十进制数，还可以指定最小的填充个数</td></tr><tr><td>E 或 e</td><td style="text-align:left">用于指数计数法，字母的大小写决定了数字后的 E 的大小写</td></tr><tr><td>F 或 f</td><td style="text-align:left">用于顶点小数的格式化，也可以指定最小的填充个数</td></tr><tr><td>G 或 g</td><td style="text-align:left">代表 general。这个字符能用来将一个数格式化为定点或者指数格式</td></tr><tr><td>N 或 n</td><td style="text-align:left">用于基本的数值格式化（带逗号）</td></tr><tr><td>X 或 x</td><td style="text-align:left">用于十六进制，字母的大小写决定了十六进制字母的大小写</td></tr></tbody></table><p>其中，给定的占位符由冒号分隔，如上面的 <code>{0:c}</code></p><p>能指定填充个数的，在格式化字符后添加个数。例如：<code>{0:d9}</code></p><h2 id="4-类型转换"><a class="markdownIt-Anchor" href="#4-类型转换"></a> 4. 类型转换</h2><p>与 C 系 语言一样，C# 对于数据类型，会使用<strong>隐式向上转换</strong>，或者称为<strong>宽化</strong>。</p><p>使用 <code>()</code> 对类型进行<strong>强制转换</strong>(cast)，也叫做<strong>窄化</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s1 = <span class="number">30000</span>;</span><br><span class="line"><span class="keyword">short</span> s2 = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">s1 + s2;<span class="comment">// 转换为 int</span></span><br><span class="line">(<span class="keyword">short</span>)(s1 + s2);<span class="comment">// 强制转换为 short，丢失数据。</span></span><br></pre></td></tr></table></figure><h3 id="41-checked-和-unchecked"><a class="markdownIt-Anchor" href="#41-checked-和-unchecked"></a> 4.1 checked 和 unchecked</h3><p>当我们不希望数据丢失时，可以使用 <code>checked</code>，这个关键字在数据出现溢出时会抛出异常。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">checked</span>((<span class="keyword">short</span>)(s1 + s2));<span class="comment">// OverflowException</span></span><br></pre></td></tr></table></figure><p>同样也可以使用 <code>checked</code> 块。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">checked</span> &#123;</span><br><span class="line">  <span class="keyword">byte</span> sum = (<span class="keyword">byte</span>)Add(b1, b2);</span><br><span class="line">  Console.WriteLine(<span class="string">"sum = &#123;0&#125;"</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果运算过多，我们可以直接开启 <code>checked</code> 编译选项，此时对<strong>所有运算</strong>都会进行 <code>checkede</code> 操作。</p><p>当然，这个时候，我们也会有一些不想被 check 的运算，那么就可以使用 <code>unchecked</code> 关键字来避免 checked。</p><p>用法类似 <code>checked</code>，就不举例了。</p><h2 id="5-隐式类型-var"><a class="markdownIt-Anchor" href="#5-隐式类型-var"></a> 5. 隐式类型 var</h2><p>C# 中，可以利用 <code>var</code> 关键字来让编译器对变量的类型进行<strong>自动推断</strong>。</p><p>这个特性有点类似 C++ 11 的 <code>auto</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInt = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>var</code> 仍然是<strong>强类型</strong>的，只不过类型并不在编辑时确定，但是也是在编译期间就确定类型，而且不能改变。这和 JS 中的 <code>var</code> 有很大不同。</p><h3 id="真正用途"><a class="markdownIt-Anchor" href="#真正用途"></a> 真正用途</h3><p>虽然有这么好用的特性，但是 C# 并不鼓励滥用，<strong>如果需要 int，那么就声明 int。</strong></p><p>这个特性通常<strong>只在</strong> LINQ 查询中使用，由于某些情况下无法得知数据库查询结果的真正类型，所以此时使用 <code>var</code> 是合理的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subset = <span class="keyword">from</span> i <span class="keyword">in</span> numbers <span class="keyword">where</span> i &lt; <span class="number">10</span> <span class="keyword">select</span> i;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Control Flow</title>
      <link href="//CSharp/CSharp%20Control%20Flow/"/>
      <url>//CSharp/CSharp%20Control%20Flow/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ifelse"><a class="markdownIt-Anchor" href="#1-ifelse"></a> 1. if/else</h2><p>只接受布尔值</p><a id="more"></a><h2 id="2-逻辑运算符"><a class="markdownIt-Anchor" href="#2-逻辑运算符"></a> 2. 逻辑运算符</h2><p><code>&amp;&amp;</code> <code>||</code> <code>!</code></p><p>需要注意的是，<code>&amp;&amp;</code> 和 <code>||</code> 在有必要的时候都会“短路”，也就是说如果只检查一个表达式就能确定 if 的布尔值，那么就不会检查另一个了。</p><h2 id="3-switch"><a class="markdownIt-Anchor" href="#3-switch"></a> 3. switch</h2><p>switch 相比 Java 来说，可以支持 <strong>字符串</strong> 和 <strong>枚举</strong> 值。</p><blockquote><p>不过并不支持类型检测，相比 Kotlin 来说差了一截。</p></blockquote><h2 id="4-for"><a class="markdownIt-Anchor" href="#4-for"></a> 4. for</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// for body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-foreach"><a class="markdownIt-Anchor" href="#5-foreach"></a> 5. foreach</h2><p>遗憾的是，C# 将 foreach 语法用了一个单独的关键字 <code>foreach</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">string</span> c <span class="keyword">in</span> carTypes) &#123;</span><br><span class="line">    Console.WriteLine(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以使用隐含类型 <code>var</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> linqSubset) &#123;</span><br><span class="line">    Console.Write(<span class="string">"&#123;0&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-whiledo-while"><a class="markdownIt-Anchor" href="#6-whiledo-while"></a> 6. while/do-while</h2><p>和 Java 没什么不同；<br>需要注意一下 do while 最后要有个分号。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">    <span class="comment">// hehe</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// hehe</span></span><br><span class="line">&#125;<span class="keyword">while</span>(condition);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Method</title>
      <link href="//CSharp/CSharp%20Method/"/>
      <url>//CSharp/CSharp%20Method/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1. 定义</h2><p>C# 中的方法定义和 Java 没有区别。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-默认按值传递"><a class="markdownIt-Anchor" href="#2-默认按值传递"></a> 2. 默认按值传递</h2><p>C# 默认的参数传递是 <strong>按值传递</strong> 的；<br>也就是说，方法中拿到的参数实际上是实参的一个 <strong>副本</strong></p><h2 id="3-输出参数"><a class="markdownIt-Anchor" href="#3-输出参数"></a> 3. 输出参数</h2><p>C# 支持 <strong>输出参数</strong>， 这是 C/C++ 语言中常用的一种技巧；<br>即，通过对传入的指针进行赋值，然后在调用完毕后进行指针解引用，从而得到多个返回值。</p><p>C# 没有指针，所以使用了 <code>out</code> 关键字用作指明输出参数。</p><p>使用输出参数的方法定义如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">out</span> <span class="keyword">int</span> ans</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans = x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时， <strong>也需要</strong> 使用 <code>out</code> 关键字。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line">Add(<span class="number">90</span>, <span class="number">90</span>, <span class="keyword">out</span> ans);</span><br></pre></td></tr></table></figure><p>用作输出参数的变量可以不进行初始化，如同上面的 <code>ans</code> 一样；<br>但是， <strong>必须</strong> 在方法内部对输出参数进行赋值，否则会报错。</p><p>使用这个技巧，我们可以一次性返回多个值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hehe</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">int</span> a, <span class="keyword">out</span> <span class="keyword">int</span> b, <span class="keyword">out</span> <span class="keyword">int</span> c</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// hehe</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-按引用传递"><a class="markdownIt-Anchor" href="#4-按引用传递"></a> 4. 按引用传递</h2><p>C# 比 Java 高明的地方就在于，C# 可以 <strong>按引用传递</strong>，所以可以做到 Java 比较难做到的 <strong>交换两个 int</strong>；</p><p>只要使用 <code>ref</code> 关键字，指明需要按照引用传递的参数即可</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swapStrings</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">string</span> s1, <span class="keyword">ref</span> <span class="keyword">string</span> s2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> temp = s1;</span><br><span class="line">    s1 = s2;</span><br><span class="line">    s2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，由于两个参数是按照 <strong>引用</strong> 传递的，所以上述代码是有效的。</p><h2 id="5-不定参数"><a class="markdownIt-Anchor" href="#5-不定参数"></a> 5. 不定参数</h2><p>同 Java 一样，C# 也支持不定参数。</p><p>只要使用 <code>params</code> 关键字指明不定参数即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addToList</span>(<span class="params"><span class="keyword">params</span> <span class="keyword">int</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Add to list</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 Java 一样，不定参数只支持 <strong>数组</strong> 类型，而不支持其他集合类型。</p><p>需要注意的是，C# 只支持 <strong>一个</strong> <code>params</code> 参数， 而且必须是参数列表中 <strong>最后一个</strong> 参数。</p><h2 id="6-可选参数"><a class="markdownIt-Anchor" href="#6-可选参数"></a> 6. 可选参数</h2><p>C# 也支持可选参数（也叫做 <strong>默认参数</strong>），即给参数赋予默认值的行为。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EnterLogData</span>(<span class="params"><span class="keyword">string</span> message, <span class="keyword">string</span> owner = <span class="string">"Programmer"</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// hehe</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要在 <strong>定义</strong> 方法时，给形参进行 <strong>“赋值”</strong> 即可。</p><p>需要注意的是，可选参数的默认值必须在 <strong>编译时确定</strong>；<br>也就是说，不能将一些运行时才能确定的量作为默认值</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EnterLogData</span>(<span class="params"><span class="keyword">string</span> message, <span class="keyword">string</span> owner = <span class="string">"Programmer"</span>, DateTime timeStamp = DateTime.Now</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ERROR!</span></span><br><span class="line">    <span class="comment">// DateTime.Now determined at runtime!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-命名参数"><a class="markdownIt-Anchor" href="#7-命名参数"></a> 7. 命名参数</h2><p>C# 还支持 <strong>命名参数</strong>，即，通过形参名字来指定对应的实参，而不需要遵守参数顺序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DisplayFancyMessage(message: <span class="string">"Wow! Very Fancy indeed!"</span>,</span><br><span class="line">                    textColor: ConsoleColor.DarkRed,</span><br><span class="line">                    backgroundColor: ConsoleColor.White)</span><br></pre></td></tr></table></figure><p>通过 <strong>冒号</strong> (<code>:</code>) 来分隔形参和实参。</p><p>通过命名参数，可以很好地结合可选参数来使用。</p><h2 id="8-方法重载"><a class="markdownIt-Anchor" href="#8-方法重载"></a> 8. 方法重载</h2><p>和其他现代语言一样，C# 也支持方法重载。</p><p>注意方法签名只由两部分决定：方法名字和方法参数（类型和数量）。<br>和 Java 的方法重载没什么区别。</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 复杂类型</title>
      <link href="//CSharp/CSharp%20%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B/"/>
      <url>//CSharp/CSharp%20%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数组"><a class="markdownIt-Anchor" href="#1-数组"></a> 1. 数组</h2><p>使用类似 Java 的语法进行数组初始化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>[] stringArray = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</span><br></pre></td></tr></table></figure><p>当然，数组也可以使用 <code>var</code> 声明</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c is a int array</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="11-多维数组"><a class="markdownIt-Anchor" href="#11-多维数组"></a> 1.1 多维数组</h3><p>C# 比较神奇的一点就是它有 <strong>两种</strong> 多维数组类型：矩形数组和交错数组。</p><h4 id="111-矩形数组"><a class="markdownIt-Anchor" href="#111-矩形数组"></a> 1.1.1 矩形数组</h4><p>矩形数组时一个每一行长度都相等的多维数组</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6*6 的数组</span></span><br><span class="line"><span class="keyword">int</span> [,] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>, <span class="number">6</span>];</span><br></pre></td></tr></table></figure><h4 id="112-交错数组"><a class="markdownIt-Anchor" href="#112-交错数组"></a> 1.1.2 交错数组</h4><p>交错数组是 <strong>数组的数组</strong>，其中包括了内部数组。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5 个不同数组</span></span><br><span class="line"><span class="keyword">int</span>[][] jagArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br></pre></td></tr></table></figure><h4 id="113-区别"><a class="markdownIt-Anchor" href="#113-区别"></a> 1.1.3 区别</h4><ol><li><p>矩形数组是 <strong>一个数组</strong></p></li><li><p>交错数组是 <strong>数组的数组</strong>，实际上也就是 Java 的普通多维数组</p></li><li><p>矩形数组涉及方法调用，而交错数组只涉及内存访问。</p><blockquote><p>交错数组比矩形数组要快。</p></blockquote></li></ol><h3 id="12-数组基类"><a class="markdownIt-Anchor" href="#12-数组基类"></a> 1.2 数组基类</h3><p>数组实际上也是一个对象，可以调用基类 <code>System.Array</code> 的静态方法来进行一些工作。</p><p>主要的方法有：</p><ul><li><code>Clear()</code></li><li><code>CopyTo()</code></li><li><code>Length</code></li><li><code>Rank</code></li><li><code>Reverse()</code></li><li><code>Sort()</code></li></ul><h2 id="2-枚举"><a class="markdownIt-Anchor" href="#2-枚举"></a> 2. 枚举</h2><h3 id="21-声明与使用"><a class="markdownIt-Anchor" href="#21-声明与使用"></a> 2.1 声明与使用</h3><p>使用 <code>enum</code> 定义枚举。</p><p>默认会以 <code>int</code> 来存储枚举值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EmpType</span><br><span class="line">&#123;</span><br><span class="line">    Manager,                <span class="comment">// 0</span></span><br><span class="line">    Grunt,                  <span class="comment">// 1</span></span><br><span class="line">    Contractor,             <span class="comment">// 2</span></span><br><span class="line">    VicePresident = <span class="number">101</span>     <span class="comment">// 101</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过 <strong>冒号</strong> (<code>:</code>) 来指定枚举储存的类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EmpType : <span class="keyword">byte</span></span><br><span class="line">&#123;</span><br><span class="line">    Manager,        <span class="comment">// 0</span></span><br><span class="line">    Grunt,          <span class="comment">// 1</span></span><br><span class="line">    Contractor,     <span class="comment">// 2</span></span><br><span class="line">    VicePresident   <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-获取枚举值"><a class="markdownIt-Anchor" href="#22-获取枚举值"></a> 2.2 获取枚举值</h3><p>每个枚举对象都有个 <code>ToString()</code> 方法，可以用它获取枚举的 <strong>名字</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EmpType emp = EmpType.Manager;</span><br><span class="line"></span><br><span class="line">emp.ToString();     <span class="comment">// "Manager"</span></span><br></pre></td></tr></table></figure><p>如果想获取枚举存储的变量值，那么使用强制转换即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"&#123;0&#125; = &#123;1&#125;"</span>, emp.ToString(), (<span class="keyword">byte</span>)emp);</span><br></pre></td></tr></table></figure><p><code>System.Enum</code> 还提供了 <code>GetValues()</code> 方法来获取枚举中的所有成员。</p><h3 id="23-注意事项"><a class="markdownIt-Anchor" href="#23-注意事项"></a> 2.3 注意事项</h3><p>需要注意的是，<code>switch</code> 可以接受 <strong>0</strong> 作为 <strong>枚举值</strong> 进行处理；</p><p>但是，对于其他的数值则不行。</p><p>所以最好还是使用类似 Java 的枚举使用方法。</p><h2 id="3-结构-struct"><a class="markdownIt-Anchor" href="#3-结构-struct"></a> 3. 结构 (struct)</h2><p>结构类型和类很相似，都可以具有构造函数、域和方法；同时也可以给它们附上可见性修饰符。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"X = &#123;0&#125;, Y = &#123;1&#125;"</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构和类的不同点主要在于：结构是一个 <strong>值类型</strong>，而类是一个 <strong>引用类型</strong>。</p><p>下面会详细描述两种类型的不同点。</p><p>需要注意的是，结构在声明时必须为 <strong>每个域</strong> 赋值；或者使用 <strong>默认构造函数</strong>，否则在使用结构时就会报错。</p><h2 id="4-值类型和引用类型"><a class="markdownIt-Anchor" href="#4-值类型和引用类型"></a> 4. 值类型和引用类型</h2><ol><li><p>值类型分配在栈中，引用类型分配在堆中</p></li><li><p>值类型在使用等号(<code>=</code>)赋值时，对应内容的值被复制，而引用类型只复制指向对象的引用</p><blockquote><p>即，值类型在复制时，构造出了新的对象<br>而引用类型只是复制指针，并没有构造出新的对象</p></blockquote></li><li><p>基本类型和枚举、结构都是值类型</p></li><li><p>类、数组、字符串都是引用类型</p></li><li><p>结构中包含引用类型时，复制结构，只复制引用类型的引用</p></li><li><p>按值传递引用类型时，引用本身进行复制，然后传入方法中，不会改变原有的引用的指向</p></li><li><p>按引用传递引用类型时，引用本身被传入方法中，会改变原有引用的指向</p></li></ol><h2 id="5-可空类型"><a class="markdownIt-Anchor" href="#5-可空类型"></a> 5. 可空类型</h2><p>可空类型(nullable-type) 只能用于 <strong>值类型</strong>。</p><p>它使用 <code>?</code> 来表示一个值类型是 <strong>可以为空的</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? nullableInt = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>这通常用于数据库编程中。</p><p>此语法不能用于引用类型，因为引用类型可以为空。</p><blockquote><p>这和 Kotlin 中的 <code>?</code> 不同，Kotlin 中不指明 <code>?</code> 的类型都是不可空的。</p></blockquote><p>可以使用 <code>??</code> 操作符为空类型赋予初始值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> myData = dr.GetIntFromDatabase() ?? <span class="number">100</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET 平台基础知识</title>
      <link href="//CSharp/dot%20NET%20%E5%B9%B3%E5%8F%B0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>//CSharp/dot%20NET%20%E5%B9%B3%E5%8F%B0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1 . 概述</h2><p>.NET 是微软公司开发的一个运行库和平台，它是平台无关和语言无关的，可以支持多种语言创建 .NET 应用并跨平台运行。</p><blockquote><p>这有点类似 Java 的 “write once, run anywhere” 的思想</p></blockquote><a id="more"></a><h2 id="2-net-平台的构成"><a class="markdownIt-Anchor" href="#2-net-平台的构成"></a> 2. .NET 平台的构成</h2><p>.NET 平台主要有平台构造块（CLR, CTS, CLS）和基础类库构成。</p><h3 id="21-平台构造块"><a class="markdownIt-Anchor" href="#21-平台构造块"></a> 2.1 平台构造块</h3><p>.NET 的平台构造块有三个，分别为 CLR, CTS 和 CLS。</p><h4 id="211-clr-公共语言运行库"><a class="markdownIt-Anchor" href="#211-clr-公共语言运行库"></a> 2.1.1 CLR —— 公共语言运行库</h4><p>CLR 全称叫做 Common Langurage Runtime。其主要作用就是为我们定位、加载和管理 .NET 类型，同时负责底层细节的工作，如内存管理、应用托管、处理线程、安全检查等。</p><blockquote><p>从 Java 的角度看，CLR 相当于 Java 的 JRE</p></blockquote><h4 id="212-cts-公共类型系统"><a class="markdownIt-Anchor" href="#212-cts-公共类型系统"></a> 2.1.2 CTS —— 公共类型系统</h4><p>CTS 的全称叫做 Common Type System。顾名思义，它定义了一个公共的 .NET 类型系统，描述 .NET 支持的数据结构和类型，这是 .NET 的多语言支持的特点。</p><h4 id="213-cls-公共语言规范"><a class="markdownIt-Anchor" href="#213-cls-公共语言规范"></a> 2.1.3 CLS —— 公共语言规范</h4><p>CLS 全称为 Common Language Specification。它定义了一个让所有的 .NET 语言都支持的公共类型和编程结构的子集，这主要是保证各个语言的兼容性而设计的。如果构造的 .NET 类型仅公开与 CLS 兼容的部分，那么所编写的 .NET 库就能与其他语言进行交互。</p><h3 id="22-基础类库"><a class="markdownIt-Anchor" href="#22-基础类库"></a> 2.2 基础类库</h3><p>.NET 除了三大构件以外，还提供了一个使用与全部 .NET 程序语言的基础库。</p><blockquote><p>相当于 Java 和 C ++ 中的标准库</p></blockquote><p>基础类库包括各种基本类型，文件 IO ，线程，GUI 以及与各种外部设备的交互等等。</p><p>下面的图显示了 .NET 构件与基础类库的关系。</p><p><img alt="关系" data-src="https://img.blog.csdn.net/20160611195251305"></p><h2 id="3-c-的特点"><a class="markdownIt-Anchor" href="#3-c-的特点"></a> 3. C# 的特点</h2><ol><li><p>不需要指针</p></li><li><p>自动管理内存和垃圾回收</p><blockquote><p>所以不支持 <code>delete</code> 关键字</p></blockquote></li><li><p>类、接口、结构、枚举、委托都有正式的语法结构</p></li><li><p>可以重载操作符</p></li><li><p>支持基于特性的编程</p></li><li><p>属性(property) 而非字段(field)</p><blockquote><p>也就是说可以直接用点操作符而不是使用 getter 和 setter。</p></blockquote></li><li><p><code>await</code> 和 <code>async</code> 关键字，类似同步调用的异步调用方法</p></li></ol><p>同时还具有其他语言的泛型、匿名类、反射等特性。</p><h2 id="4-托管代码和非托管代码"><a class="markdownIt-Anchor" href="#4-托管代码和非托管代码"></a> 4. 托管代码和非托管代码</h2><p>和 Java 一样，C# 语言需要生成类似 Java 字节码的一种中间代码才能够运行。</p><p>所以 C# 编译生成的代码只能在 .NET 运行库中执行。</p><blockquote><p>就像 Java 必须使用 JRE 运行一样</p></blockquote><p>正确的来说，这种必须在 .NET 运行库中执行的代码被称为<strong>托管代码</strong>(managed code)；</p><p>包含托管代码的二进制单元称为<strong>程序集</strong>(assembly)。</p><p>反之，不能直接在 .NET 运行库承载的代码被称为非托管代码(unmanaged code)</p><h2 id="5-其他支持-net-的编程语言"><a class="markdownIt-Anchor" href="#5-其他支持-net-的编程语言"></a> 5. 其他支持 .NET 的编程语言</h2><p>除了 C# 以外，.NET 框架也支持其他的编程语言。</p><p>实际上，在安装了 Visual Studio 之后，微软会提供 C#, Visual Basic, C++/CLI , JavaScript 和 F# 的 .NET 支持</p><h2 id="6-net-程序集概览"><a class="markdownIt-Anchor" href="#6-net-程序集概览"></a> 6. .NET 程序集概览</h2><p>为了实现平台无关性，.NET 采用了程序集的概念。</p><p>不同的语言通过特定的编译器，编译得到一个中间语言(IL)和元数据，随后打包成一个程序集。</p><blockquote><p>需要注意的是，.NET 中间语言拥有很多种缩写，IL 只是其中一种，其余的还有 MSIL 或者 CIL。</p><p>IL, MSIL, CIL 都是等价的，指的就是中间语言。</p></blockquote><p>程序集是二进制大对象所打包成的集合，大致分为两类；</p><p>一类是应用程序，拥有一个 <code>.exe</code> 入口。</p><p>另一类是库，具有 <code>.dll</code> 扩展名。</p><p>CIL 类似于 Java 的字节码，也是平台无关性的一个重要的原因。</p><p>在运行时，CIL 通过 JIT 编译器编译成为特定的机器码，在不同的设备上进行运行。</p><p>程序集除了包含 CIL 以外，还包含了元数据。元数据是许多 C# 特性的支柱（例如反射，晚期绑定等），同时，一些现代 IDE (Visual Studio)可以利用元数据进行智能感知。</p><p>此外，程序集还包含了描述程序集本身的元数据，它们叫做<strong>清单</strong>(manifest)。</p><h2 id="7-cts"><a class="markdownIt-Anchor" href="#7-cts"></a> 7. CTS</h2><p>CTS 是 .NET 的公共类型系统，它包括五个内容：</p><ul><li>类</li><li>接口</li><li>结构</li><li>枚举</li><li>委托</li></ul><p>大体上与 Java 类似，下面重点讲讲和 Java 不同的部分。</p><h3 id="71-委托delegate"><a class="markdownIt-Anchor" href="#71-委托delegate"></a> 7.1 委托(delegate)</h3><p>这可以算是 C# 相对 Java 的一个进步的方面。委托相当于一个类型安全的<strong>函数指针</strong>，实际上委托是一个派生自 <code>System.MultcastDelegate</code> 的<strong>类</strong>，使用 <code>delegate</code> 关键字可以声明一个委托。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">BinaryOp</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span>;</span><br></pre></td></tr></table></figure><p>这样，就可以使用委托来实现回调，而不需要像 Java 一样使用臃肿的接口来进行回调动作。</p><h3 id="72-结构struct"><a class="markdownIt-Anchor" href="#72-结构struct"></a> 7.2 结构(struct)</h3><p>C# 的结构和 C99 之后的结构很像，用法也趋近；可以包含字段、构造函数、定义方法等。</p><p>不过一般当做一个容器类来使用。</p><h2 id="8-内建类型"><a class="markdownIt-Anchor" href="#8-内建类型"></a> 8. 内建类型</h2><p>同样，.NET 具有一个內建的核心数据类型，用于兼容不同平台的类型结构。下表给出了一个 CTS 数据类型和 C# 、C++ 的相应对比。</p><table><thead><tr><th>CTS</th><th>C</th><th style="text-align:left">C++</th></tr></thead><tbody><tr><td>System.Byte</td><td>byte</td><td style="text-align:left">unsigned char</td></tr><tr><td>System.SByte</td><td>sbyte</td><td style="text-align:left">signed cahr</td></tr><tr><td>System.Int16</td><td>short</td><td style="text-align:left">short</td></tr><tr><td>System.Int32</td><td>int</td><td style="text-align:left">int 或 long</td></tr><tr><td>System.Int64</td><td>long</td><td style="text-align:left">int64_t</td></tr><tr><td>System.UInt16</td><td>ushort</td><td style="text-align:left">unsigned short</td></tr><tr><td>System.UInt32</td><td>uint</td><td style="text-align:left">unsigned int 或 unsigned long</td></tr><tr><td>System.UInt64</td><td>ulong</td><td style="text-align:left">unsigned int64_t</td></tr><tr><td>System.Single</td><td>float</td><td style="text-align:left">float</td></tr><tr><td>System.Double</td><td>double</td><td style="text-align:left">double</td></tr><tr><td>System.Object</td><td>object</td><td style="text-align:left">object^</td></tr><tr><td>System.Char</td><td>char</td><td style="text-align:left">wchar_t</td></tr><tr><td>System.String</td><td>string</td><td style="text-align:left">String^</td></tr><tr><td>System.Decimal</td><td>decimal</td><td style="text-align:left">Decimal</td></tr><tr><td>System.Boolean</td><td>bool</td><td style="text-align:left">bool</td></tr></tbody></table><h2 id="9-clr"><a class="markdownIt-Anchor" href="#9-clr"></a> 9. CLR</h2><p>CLR 类似于 JVM，利用 <code>mscoree.dll</code> 库来进行 .NET 程序加载工作。</p><p>下图是 <code>mscoree.dll</code> 的工作流。</p><p><img alt data-src="https://www.ituring.com.cn/download/01YY7g3jBdEN"></p><h2 id="10-名称空间namespace"><a class="markdownIt-Anchor" href="#10-名称空间namespace"></a> 10. 名称空间(namespace)</h2><p>这个特性类似于 Java 的 <code>package</code> 。</p><p>语法和 C++ 中的名称空间语法相同，使用 <code>using</code> 来引入名称空间（相当于 Java 的 <code>import</code>） 来进行使用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyApp</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"Hi from C#"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，同 Java 一样，在使用对应的名称空间之前，首先要引入依赖程序集。</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin `this` 表达式</title>
      <link href="//Kotlin/Kotlin%20%60this%60%20%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>//Kotlin/Kotlin%20%60this%60%20%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Tags: Kotlin</p><hr><p>Kotlin 提供了一个 <code>this</code> 表达式，主要就是一个带标签的 <code>this</code>，用于在内部类、扩展中获取正确的类对象实例。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="comment">// implicit label @A</span></span><br><span class="line">  <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123; <span class="comment">// implicit label @B</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">foo</span><span class="params">()</span></span> &#123; <span class="comment">// implicit label @foo</span></span><br><span class="line">      <span class="keyword">val</span> a = <span class="keyword">this</span><span class="symbol">@A</span> <span class="comment">// A's this</span></span><br><span class="line">      <span class="keyword">val</span> b = <span class="keyword">this</span><span class="symbol">@B</span> <span class="comment">// B's this</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> c = <span class="keyword">this</span> <span class="comment">// foo()'s receiver, an Int</span></span><br><span class="line">      <span class="keyword">val</span> c1 = <span class="keyword">this</span><span class="symbol">@foo</span> <span class="comment">// foo()'s receiver, an Int</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> funLit = <span class="symbol">lambda@</span> <span class="function"><span class="keyword">fun</span> String.<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> d = <span class="keyword">this</span> <span class="comment">// funLit's receiver</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> funLit2 = &#123; s: String -&gt;</span><br><span class="line">        <span class="comment">// foo()'s receiver, since enclosing lambda expression</span></span><br><span class="line">        <span class="comment">// doesn't have any receiver</span></span><br><span class="line">        <span class="keyword">val</span> d1 = <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 内联函数</title>
      <link href="//Kotlin/Kotlin%20%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
      <url>//Kotlin/Kotlin%20%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>使用 lambda 和高阶函数固然方便，但是由于需要生成函数对象和进行闭包操作，这也造成了一些不必要的内存和时间开销。</p><p>但是一般情况下，我们可以通过将函数和 Lambda 表达式内联化进行开销的减免。</p><blockquote><p>内联函数指的是将整个函数直接替换为函数实际代码的技术，它可以减少函数调用时由于跳转产生的开销浪费。</p></blockquote><a id="more"></a><h2 id="2-kotlin-内联语法"><a class="markdownIt-Anchor" href="#2-kotlin-内联语法"></a> 2. Kotlin 内联语法</h2><p>例如 <code>lock()</code> 函数，它可以很方便的在调用点进行内联化操作：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock(l) &#123; foo() &#125;</span><br></pre></td></tr></table></figure><p>通过这种写法，编译器并没有为 lambda 表达式创建一个函数对象，而是生成了如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l.lock()</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">  l.unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让编译器进行这种操作，我们可以给函数使用 <code>inline</code> 修饰符。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> lock<span class="type">&lt;T&gt;</span><span class="params">(lock: <span class="type">Lock</span>, body: ()</span></span> -&gt; T): T &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>inline</code> 修饰符会对整个函数和其 lambda 表达式都有效，即整个函数和 lambda 都被替换成实际代码。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  内联函数</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">inlineLock</span><span class="params">(lock: <span class="type">Lock</span>, body: ()</span></span> -&gt; T): T &#123;</span><br><span class="line">    lock.lock()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> body()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">echo</span><span class="params">()</span></span> = println(<span class="string">"foo"</span>)</span><br></pre></td></tr></table></figure><p>调用该内联函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lock = ReentrantLock()</span><br><span class="line">inlineLock(lock, &#123; echo() &#125;)</span><br></pre></td></tr></table></figure><p>以上代码会被编译为如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lock = ReentrantLock()</span><br><span class="line">lock.lock()</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    println(<span class="string">"foo"</span>)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数内联技术会导致代码体积膨胀，为了减少代码体积膨胀，不要内联大体积的函数。</p><h2 id="3-noinline"><a class="markdownIt-Anchor" href="#3-noinline"></a> 3. Noinline</h2><p>有时候我们只希望对函数本身进行内联化操作，而对其 lambda 参数不使用内联。</p><p>此时我们可以对参数使用 <code>noinline</code> 标识符</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(inlined: ()</span></span> -&gt; <span class="built_in">Unit</span>, <span class="keyword">noinline</span> notInlined: () -&gt; <span class="built_in">Unit</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内联的 lambda 只能在内联函数内部调用，或者作为一个 <code>inline</code> 参数传给内联函数；<br>但是非内联的 labmda 可以储存在变量中，或者传递它。</p><h2 id="4-非局部返回"><a class="markdownIt-Anchor" href="#4-非局部返回"></a> 4. 非局部返回</h2><p>普通的 <code>return</code> 默认返回的函数是<strong>最近的 <code>fun</code> 所定义的函数</strong>，这叫做局部返回(local return)</p><p>所以，由于在 lambda 表达式内部不能让外部函数返回，所以在 lambda 表达式中使用 <code>return</code> 是被禁止的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ordinaryFunction &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="comment">// ERROR: can not make `foo` return here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是内联函数由于使用定义替代了调用，所以在其中使用 <code>return</code> 是可以的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">  inlineFunction &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// OK: the lambda is inlined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中，<code>return</code> 会让 <code>foo()</code> 返回。</p><p>这种返回方式被称作非局部返回。<br>这种特性十分有效，所以被内建在标准的循环中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hasZeros</span><span class="params">(ints: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">  ints.forEach &#123;</span><br><span class="line">    <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// returns from hasZeros</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时候，在调用处传入的 lambda 可能并不会被立即执行，而是传入到另一个线程中，或者另一个本地对象或本地方法中，此时，非本地返回同样会被禁止。</p><p>为了提示编译器，我们使用 <code>crossinline</code> 标识符来指明当前的函数对象会在一个内嵌的函数或者对象，或是在另一个线程中执行。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(<span class="keyword">crossinline</span> body: ()</span></span> -&gt; <span class="built_in">Unit</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> f = <span class="keyword">object</span>: Runnable &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> = body()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>break</code> 和 <code>continue</code> 尚未写入支持，但是 Kotlin 开发组预计会在未来实现这两个功能。</p><h2 id="5-类型参数"><a class="markdownIt-Anchor" href="#5-类型参数"></a> 5. 类型参数</h2><p>有时候我们希望访问一个对象的类型参数，例如 <code>Class</code>，在 Java 中，这通常是通过<strong>反射机制</strong>来实现的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> TreeNode.<span class="title">findParentOfType</span><span class="params">(clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">var</span> p = parent</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; !clazz.isInstance(p)) &#123;</span><br><span class="line">        p = p.parent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">    <span class="keyword">return</span> p <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用这个函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> root = DefaultMutableTreeNode(<span class="string">"root"</span>)</span><br><span class="line"><span class="keyword">val</span> node1 = DefaultMutableTreeNode(<span class="string">"node1"</span>)</span><br><span class="line"><span class="keyword">val</span> node1_1 = DefaultMutableTreeNode(<span class="string">"node1_1"</span>)</span><br><span class="line"><span class="keyword">val</span> node2 = DefaultMutableTreeNode(<span class="string">"node2"</span>)</span><br><span class="line">node1.add(node1_1)</span><br><span class="line">root.add(node1)</span><br><span class="line">root.add(node2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parent = node1_1.findParentOfType(DefaultMutableTreeNode::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">println(parent) <span class="comment">//  node1</span></span><br></pre></td></tr></table></figure><p>可以看到由于依赖于反射，所以在函数体内不但要处理未检查类型转换的警告也很难处理具体类型的信息。</p><p>而内联函数由于是复制到调用处，所以实际在运行时无需依赖反射，可以直接得到真实类型。<br>要开启此功能，只需在泛型参数前加上 <code>reified</code> 关键字。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> TreeNode.<span class="title">inlineFindParentOfType</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">var</span> p = parent</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; p !<span class="keyword">is</span> T) &#123;</span><br><span class="line">        p = p.parent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> parent = node1_1.inlineFindParentOfType&lt;DefaultMutableTreeNode&gt;()</span><br><span class="line">println(parent) <span class="comment">//  node1</span></span><br></pre></td></tr></table></figure><p>非内联的函数不能使用 <code>reified</code> 标识符。<br>一个不具备运行时表示类型的类型（比如一个没有 reified 的类型参数，或者是一个虚拟的类型，如 <code>Nothing</code>），不能当做 <code>reified</code> 函数参数使用。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 内部类</title>
      <link href="//Kotlin/Kotlin%20%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>//Kotlin/Kotlin%20%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-声明"><a class="markdownIt-Anchor" href="#1-声明"></a> 1. 声明</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> bar: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> demo = Outer.Nested().foo() <span class="comment">// == 2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-inner-关键字"><a class="markdownIt-Anchor" href="#2-inner-关键字"></a> 2. <code>inner</code> 关键字</h2><p>需要使用 <code>inner</code> 关键字来指明一个内部类<strong>允许访问外部类属性。</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> bar: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">  <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = bar</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> demo = Outer().Inner().foo() <span class="comment">// == 1</span></span><br></pre></td></tr></table></figure><h2 id="3-获取外部类实例"><a class="markdownIt-Anchor" href="#3-获取外部类实例"></a> 3. 获取外部类实例</h2><p>通过使用<span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy9kb2NzL3JlZmVyZW5jZS90aGlzLWV4cHJlc3Npb25zLmh0bWw=" title="https://kotlinlang.org/docs/reference/this-expressions.html">带标签的 <code>this</code><i class="fa fa-external-link"></i></span> 可以获取外部类实例。</p><h2 id="4-匿名内部类"><a class="markdownIt-Anchor" href="#4-匿名内部类"></a> 4. 匿名内部类</h2><p>Kotlin 没有 Java 中的匿名类，反之，Kotlin 使用**对象表达式(object expression)**来实现这一功能。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.addMouseListener(<span class="keyword">object</span>: MouseAdapter() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseEntered</span><span class="params">(e: <span class="type">MouseEvent</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果内部类对应的接口只有一个方法，那么也可以使用 lambda 表达式来创建这个内部类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listener = ActionListener &#123; println(<span class="string">"clicked"</span>) &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 函数</title>
      <link href="//Kotlin/Kotlin%20%E5%87%BD%E6%95%B0/"/>
      <url>//Kotlin/Kotlin%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-声明"><a class="markdownIt-Anchor" href="#1-声明"></a> 1. 声明</h2><p>函数使用 <code>fun</code> 关键字进行声明。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">double</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-调用"><a class="markdownIt-Anchor" href="#2-调用"></a> 2. 调用</h2><p>函数的调用和其他语言一样</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = double(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="21-类成员函数调用"><a class="markdownIt-Anchor" href="#21-类成员函数调用"></a> 2.1 类成员函数调用</h3><p>类成员函数使用 <code>.</code> 进行调用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sample().foo() <span class="comment">// create instance of class Sample and calls foo</span></span><br></pre></td></tr></table></figure><h3 id="22-中继调用"><a class="markdownIt-Anchor" href="#22-中继调用"></a> 2.2 中继调用</h3><p>使用了 <code>infix</code> 标识符的函数可以进行中继调用</p><h4 id="221-条件"><a class="markdownIt-Anchor" href="#221-条件"></a> 2.2.1 条件</h4><ul><li>函数是成员函数或者扩展</li><li>函数只有一个参数</li><li>使用 <code>infix</code> 进行标识</li></ul><h4 id="222-例子"><a class="markdownIt-Anchor" href="#222-例子"></a> 2.2.2 例子</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define extension to Int</span></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">shl</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call extension function using infix notation</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> shl <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// is the same as</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.shl(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="3-参数"><a class="markdownIt-Anchor" href="#3-参数"></a> 3. 参数</h2><p>函数的参数使用 Pascal 的形式进行调用。(<code>name: Type</code>)</p><p>使用逗号分隔不同的参数。</p><p>每个参数都<strong>必须显式指明类型</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">powerOf</span><span class="params">(number: <span class="type">Int</span>, exponent: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="31-默认参数"><a class="markdownIt-Anchor" href="#31-默认参数"></a> 3.1 默认参数</h3><p>Kotlin 中允许使用默认参数，这样相比 Java 就减少了函数重载的使用。</p><blockquote><p>在 Java 中，如果出现多个重载函数，开销将迅速增长。<br>但是 Kotlin 相对于 Python 来说仍然支持函数重载特性</p></blockquote><p>使用 <code>=</code> 来指定参数的默认值，而且 Kotlin 不对默认参数的位置进行要求。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">read</span><span class="params">(b: <span class="type">Array</span>&lt;<span class="type">Byte</span>&gt;, off: <span class="type">Int</span> = <span class="number">0</span>, len: <span class="type">Int</span> = b.size()</span></span>) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过类重载的方法<strong>不允许拥有默认参数</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span> = <span class="number">10</span>)</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> : <span class="type">A</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123; ... &#125;  <span class="comment">// no default value allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-参数指定"><a class="markdownIt-Anchor" href="#32-参数指定"></a> 3.2 参数指定</h3><p>在函数调用时，Kotlin 支持参数的指定，类似 Python</p><p>例如，对如下函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">reformat</span><span class="params">(str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             normalizeCase: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             upperCaseFirstLetter: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             divideByCamelHumps: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             wordSeparator: <span class="type">Char</span> = <span class="string">' '</span>)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>调用时</strong>使用 <code>=</code> 来指定参数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reformat(str,</span><br><span class="line">    normalizeCase = <span class="literal">true</span>,</span><br><span class="line">    upperCaseFirstLetter = <span class="literal">true</span>,</span><br><span class="line">    divideByCamelHumps = <span class="literal">false</span>,</span><br><span class="line">    wordSeparator = <span class="string">'_'</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>当然我们也可以不指定所有的参数，如果参数有默认值的话。<br>此时，没有被指定的实参按照顺序赋予形参。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reformat(str, wordSeparator = <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>调用 Java 的方法时，不能使用参数指定。</strong></p><h3 id="33-不定参数"><a class="markdownIt-Anchor" href="#33-不定参数"></a> 3.3 不定参数</h3><p>Kotlin 同样支持不定参数，只需要给参数标识上 <code>vararg</code> 即可。</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">asList</span><span class="params">(<span class="keyword">vararg</span> ts: <span class="type">T</span>)</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> result = ArrayList&lt;T&gt;()</span><br><span class="line">  <span class="keyword">for</span> (t <span class="keyword">in</span> ts) <span class="comment">// ts is an Array</span></span><br><span class="line">    result.add(t)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 Java 一样，不定参数会被视作一个 <code>Array</code> 对象来进行处理。</p><p><strong>只有一个参数能被标记为 <code>vararg</code></strong>。</p><p>不定参数可以不处于最后位置，此时，只能通过<strong>参数指定</strong>的形式对剩下的参数进行赋值，或者如果其中一个参数是函数，那么可以在<strong>括号外</strong>使用 lambda 表达式。</p><p>此外，Kotlin 中可以将一个 <code>Array</code> 对象传给不定参数，通过使用 spread operator (<code>*</code>) 来实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> list = asList(-<span class="number">1</span>, <span class="number">0</span>, *a, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="4-返回值"><a class="markdownIt-Anchor" href="#4-返回值"></a> 4. 返回值</h2><p>如果一个函数没有指明返回值或者没有使用 <code>return</code> 语句，那么默认返回 <code>Unit</code>。</p><blockquote><p><code>Unit</code> 是一种特有类型，只具有 <code>Unit</code> 一个值。<br>使用 <code>Unit</code> 的原因在于，Kotlin 一切都是对象，使用一个具体类型能使泛型更好的工作</p></blockquote><blockquote><p>不使用 <code>Void</code> 的原因：因为已经存在了一个 <code>Nothing</code> 类，为了防止意思冲突，所以使用 <code>Unit</code> 来指代 Java 中的 <code>void</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printHello</span><span class="params">(name: <span class="type">String</span>?)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (name != <span class="literal">null</span>)</span><br><span class="line">        println(<span class="string">"Hello <span class="subst">$&#123;name&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        println(<span class="string">"Hi there!"</span>)</span><br><span class="line">    <span class="comment">// `return Unit` or `return` is optional</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，<code>Unit</code> 的返回值声明也是可以省略的。</p><blockquote><p>实际上，在编码规范中，要求对其省略。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printHello</span><span class="params">(name: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="41-单一表达式函数"><a class="markdownIt-Anchor" href="#41-单一表达式函数"></a> 4.1 单一表达式函数</h3><p>当一个函数只具有一条表达式时，花括号可以被省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">double</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = x * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>此时，如果编译器能推断出表达式的值，那么返回类型的声明也是可以省略的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">double</span><span class="params">(x: <span class="type">Int</span>)</span></span> = x * <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="42-非单一表达式函数"><a class="markdownIt-Anchor" href="#42-非单一表达式函数"></a> 4.2 非单一表达式函数</h3><p>如果函数不是单一表达式，而且具有返回值，那么返回类型就必须被声明。</p><h2 id="5-函数作用域"><a class="markdownIt-Anchor" href="#5-函数作用域"></a> 5. 函数作用域</h2><p>在 Kotlin 中，函数可以在 Top-level 声明，也就是说不需要用类来包裹函数。</p><p>函数同样也可以是<strong>局部的</strong>，也就是说它可以是成员函数或者函数的扩展。</p><h3 id="51-局部函数"><a class="markdownIt-Anchor" href="#51-局部函数"></a> 5.1 局部函数</h3><p>Kotlin 支持局部函数，例如<strong>嵌套函数</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(graph: <span class="type">Graph</span>)</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(current: <span class="type">Vertex</span>, visited: <span class="type">Set</span>&lt;<span class="type">Vertex</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!visited.add(current)) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (v <span class="keyword">in</span> current.neighbors)</span><br><span class="line">      dfs(v, visited)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dfs(graph.vertices[<span class="number">0</span>], HashSet())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，内部函数可以访问外部函数的局部变量，也就是<strong>闭包</strong>属性。</p><p>所以对于上面的例子，<code>visited</code> 可以作为一个局部变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(graph: <span class="type">Graph</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> visited = HashSet&lt;Vertex&gt;()</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(current: <span class="type">Vertex</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!visited.add(current)) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (v <span class="keyword">in</span> current.neighbors)</span><br><span class="line">      dfs(v)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dfs(graph.vertices[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-尾调用"><a class="markdownIt-Anchor" href="#6-尾调用"></a> 6. 尾调用</h2><p>对于一些算法实现来说，使用递归实现会令算法过程更加明晰。</p><p>对此，Kotlin 拥有一个特殊的关键字 <code>tailrec</code>，使用它可以支持使用尾调用(tail recursion)形式的函数。</p><p>使用 <code>tailrec</code> 关键字的原因在于：<br>虽然不使用这个关键字也可以实现尾调用形式的函数，<br>但是 <code>tailrec</code> 会指示编译器将其优化为相应的循环形式，<br>从而避免了因递归调用过多造成的 <code>StackOverflow</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tailrec</span> <span class="function"><span class="keyword">fun</span> <span class="title">findFixPoint</span><span class="params">(x: <span class="type">Double</span> = <span class="number">1.0</span>)</span></span>: <span class="built_in">Double</span></span><br><span class="line">        = <span class="keyword">if</span> (x == Math.cos(x)) x <span class="keyword">else</span> findFixPoint(Math.cos(x))</span><br></pre></td></tr></table></figure><p>使用 <code>tailrec</code> 的函数必须满足尾调用形式，即<strong>函数的最后一个操作就是调用其自身。</strong></p><p>当你的递归调用操作之后还存在更多代码时，不能对函数使用 <code>tailrec</code></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 可见性修饰符</title>
      <link href="//Kotlin/Kotlin%20%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>//Kotlin/Kotlin%20%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Kotlin 的可见性修饰符和 Java 及 C++ 有比较大的区别。</p><p>首先，Kotlin 拥有<strong>四种</strong>可见性修饰符:<br><code>public</code> <code>private</code> <code>protected</code> <code>internal</code></p><p><strong>默认的可见性修饰符为 <code>public</code></strong>。</p><a id="more"></a><h2 id="2-包级别"><a class="markdownIt-Anchor" href="#2-包级别"></a> 2. 包级别</h2><p>函数，变量，类都可以在 “top-level” 级别声明，即<strong>直接在包内声明</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file name: example.kt</span></span><br><span class="line"><span class="keyword">package</span> foo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">baz</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在包级别中的可见性规则如下：</p><ul><li>如果没有显式指定，那么 <code>public</code> 是默认的可见性，即你声明的内容在<strong>任意地方</strong>均可见</li><li>如果指定了 <code>private</code>，那么只有<strong>同文件</strong>可见</li><li>如果指定了 <code>internal</code>，那么只有在<strong>同一个模块</strong>可见</li><li><code>protected</code> 修饰符不支持在包级别使用</li></ul><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file name: example.kt</span></span><br><span class="line"><span class="keyword">package</span> foo</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;&#125; <span class="comment">// visible inside example.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> bar: <span class="built_in">Int</span> = <span class="number">5</span> <span class="comment">// property is visible everywhere</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span>         <span class="comment">// setter is visible only in example.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">val</span> baz = <span class="number">6</span>    <span class="comment">// visible inside the same module</span></span><br></pre></td></tr></table></figure><h2 id="3-类级别"><a class="markdownIt-Anchor" href="#3-类级别"></a> 3. 类级别</h2><p>当在类或者接口中声明属性或方法时，也同样有可见性的修饰符作用。<br>此时，规则如下。</p><ul><li>如果没有显式指定，那么默认为 <code>public</code>，此时，内容对<strong>所有能看见这个类的对象</strong>都是可见的</li><li>如果指定了 <code>private</code>，那么只有在类的内部才可见</li><li>如果指定了 <code>protected</code>，那么只在类内部和其子类可见，如果 override 了一个 <code>protected</code> 变量，那么 override 后的变量自动具有 <code>protected</code> 属性</li><li>如果指定了 <code>internal</code>，那么在模块内可见</li></ul><blockquote><p>需要注意的是，不像 Java，<br>外部类<strong>不能</strong>看见内部类的 <code>private</code> 变量。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">open</span> <span class="keyword">val</span> b = <span class="number">2</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">val</span> c = <span class="number">3</span></span><br><span class="line">    <span class="keyword">val</span> d = <span class="number">4</span>  <span class="comment">// public by default</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">val</span> e: <span class="built_in">Int</span> = <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span> : <span class="type">Outer</span></span>() &#123;</span><br><span class="line">    <span class="comment">// a is not visible</span></span><br><span class="line">    <span class="comment">// b, c and d are visible</span></span><br><span class="line">    <span class="comment">// Nested and e are visible</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> b = <span class="number">5</span>   <span class="comment">// 'b' is protected</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unrelated</span></span>(o: Outer) &#123;</span><br><span class="line">    <span class="comment">// o.a, o.b are not visible</span></span><br><span class="line">    <span class="comment">// o.c and o.d are visible (same module)</span></span><br><span class="line">    <span class="comment">// Outer.Nested is not visible, and Nested::e is not visible either</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-构造器"><a class="markdownIt-Anchor" href="#4-构造器"></a> 4. 构造器</h2><p>同样的，构造器也可以指定可见性，但是如果可见性被指定了，那么 <code>constructor</code> 关键字就必须存在。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(a: <span class="built_in">Int</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>构造器的默认可见性为 <code>public</code>，即能看到类，就能看到构造器。</p><h2 id="5-关于模块"><a class="markdownIt-Anchor" href="#5-关于模块"></a> 5. 关于模块</h2><p>一个具有 <code>internal</code> 可见性的变量，方法，类，函数在其模块内可见。</p><p>所谓的模块，更通俗一点来说就是<strong>在一起编译的 Kotlin 文件</strong>，比如说：</p><ul><li>一个 IntelliJ IDEA module</li><li>一个 Maven 或者 Gradle 工程</li><li>一个使用同一个 Ant Task 调用的文件集合</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 委托属性</title>
      <link href="//Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E5%B1%9E%E6%80%A7/"/>
      <url>//Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用场景"><a class="markdownIt-Anchor" href="#1-使用场景"></a> 1. 使用场景</h2><p>有些时候，对于一些特殊的变量，虽然我们每次都去手动生成它们，但是如果一次性生成它们，然后存进库中会更加方便，例如：</p><ul><li>lazy 属性：只在第一次访问它们的时候计算它们。</li><li>observable 属性：当它被修改的时候，会通知它的监听者。</li><li>将属性储存在一个 Map 中，而不是用字段存储。</li></ul><p>对于这些使用场景，Kotlin 支持使用<strong>委托属性</strong></p><a id="more"></a><h2 id="2-声明"><a class="markdownIt-Anchor" href="#2-声明"></a> 2. 声明</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p: String <span class="keyword">by</span> Delegate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明委托属性的语法为：<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code>。</p><p>其中，在 <code>by</code> 之后的表达式就是<strong>委托操作</strong>。</p><p>上面的例子说明了 <code>p</code> 变量的操作将会委托给 <code>Delegate</code> 类来进行。</p><p>为了替代 <code>p</code> 的 getter 和 setter，<code>Delegate</code> 类必须提供 <code>getValue()</code> 和 <code>setValue()</code> 方法，委托之后，对 <code>p</code> 的调用操作<strong>将会由这两个方法来完成</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span> </span>&#123;</span><br><span class="line">  <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"<span class="variable">$thisRef</span>, thank you for delegating '<span class="subst">$&#123;property.name&#125;</span>' to me!"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"<span class="variable">$value</span> has been assigned to '<span class="subst">$&#123;property.name&#125;</span> in <span class="variable">$thisRef</span>.'"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么当我们进行如下调用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> e = Example()</span><br><span class="line">println(e.p)</span><br></pre></td></tr></table></figure><p>打印结果为</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Example@</span><span class="number">33</span>a17727, thank you <span class="keyword">for</span> delegating ‘p’ to me!</span><br></pre></td></tr></table></figure><p>同理，进行如下操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.p = <span class="string">"NEW"</span></span><br></pre></td></tr></table></figure><p>将会打印如下结果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NEW has been assigned to ‘p’ <span class="keyword">in</span> <span class="symbol">Example@</span><span class="number">33</span>a17727.</span><br></pre></td></tr></table></figure><h2 id="3-需要满足的条件"><a class="markdownIt-Anchor" href="#3-需要满足的条件"></a> 3. 需要满足的条件</h2><p>对于只读属性(<code>val</code>)，被委派的类必须提供 <code>getValue()</code> 方法，该方法必须拥有如下参数</p><ul><li>接收者：必须是<strong>当前属性的拥有者</strong>（属性所属的类）或者其<strong>超类</strong>的实例对象。</li><li>元数据：必须是 <code>KProperty&lt;*&gt;</code> 或者它的超类</li></ul><p><code>getValue()</code> 必须拥有返回值，而且类型与当前委托的属性类型相同。</p><p>对于可变属性(<code>var</code>)，被委托的类必须<strong>额外提供</strong>一个 <code>setValue()</code> 方法，该方法必须拥有如下参数：</p><ul><li>接收者：和 <code>getValue()</code> 相同</li><li>元数据：和 <code>getValue()</code> 相同</li><li>新值：其类型必须和所委托的类型相同，或者是它的超类。</li></ul><p><code>getValue()</code> 和 <code>setValue()</code> 方法既可以是被委托类的成员，也可以是它的<strong>扩展</strong>。</p><p><strong>两个方法都需要使用 <code>operator</code> 来修饰。</strong></p><h2 id="4-一般的委托场景"><a class="markdownIt-Anchor" href="#4-一般的委托场景"></a> 4. 一般的委托场景</h2><p>Kotlin 的标准库提供了一些工厂方法，用来实现篇头所说的几种场景。</p><h3 id="41-lazy-变量"><a class="markdownIt-Anchor" href="#41-lazy-变量"></a> 4.1 lazy 变量</h3><p>Kotlin 提供了一个 <code>lazy()</code> 方法用于 lazy 变量的生成。</p><p><code>lazy()</code> 方法接受一个 lambda 表达式，返回一个 <code>Lazy&lt;T&gt;</code> 实例，用于委托属性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">    println(<span class="string">"computed!"</span>)</span><br><span class="line">    <span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    println(lazyValue)</span><br><span class="line">    println(lazyValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code> 中的第一个调用会**触发 <code>lazy()</code>**进行 <code>lazyValue</code> 的计算，而第二个调用只会返回 <code>lazyValue</code> 的值。</p><p>结果为</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed!</span><br><span class="line">Hello</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>默认情况下，<code>lazy()</code> 的调用是<strong>同步的</strong>。也就是说，只有一个线程会进行变量的计算，完成后，所有的线程都能看到其结果。</p><p>如果不需要初始化同步，那么可以通过将 <code>LazyThreadSafetyMode.PUBLICATION</code> 作为参数传给 <code>lazy()</code> 方法来实现。</p><p>如果确保变量的初始化只会有一个线程来完成，那么可以将 <code>LazyThreadSafetyMode.NONE</code> 作为参数传给 <code>lazy()</code>，这样一来，Kotlin 就不会对该变量的生成启用线程安全机制。</p><h3 id="42-observable"><a class="markdownIt-Anchor" href="#42-observable"></a> 4.2 Observable</h3><p>Kotlin 标准库用 <code>Delegates.observable()</code> 来实现可观察属性(observable property)。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.properties.Delegates</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: String <span class="keyword">by</span> Delegates.observable(<span class="string">"&lt;no name&gt;"</span>) &#123;</span><br><span class="line">        prop, old, new -&gt;</span><br><span class="line">        println(<span class="string">"<span class="variable">$old</span> -&gt; <span class="variable">$new</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> user = User()</span><br><span class="line">    user.name = <span class="string">"first"</span></span><br><span class="line">    user.name = <span class="string">"second"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Delegates.observable()</code> 接受两个参数：一个是<strong>初始化值</strong>，另一个是 handler。</p><p>Handler 会在每次我们对变量进行<strong>赋值操作后</strong>被调用。<br>它具有三个参数：</p><ul><li>被赋值的变量</li><li>旧的变量值</li><li>新的变量值</li></ul><p>上面的例子的打印结果为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;no name&gt; -&gt; first</span><br><span class="line">first -&gt; second</span><br></pre></td></tr></table></figure><p>使用 <code>vetoable()</code> 代替 <code>observable()</code> 方法可以对变量赋值进行<strong>拦截操作</strong>。</p><p><code>vetoable()</code> 的 handler 会在每次<strong>赋值操作前</strong>被调用。</p><h3 id="43-在-map-中储存属性"><a class="markdownIt-Anchor" href="#43-在-map-中储存属性"></a> 4.3 在 Map 中储存属性</h3><p>这个场景通常在进行 JSON 解析或者对其他数据进行动态解析时常用的。</p><p>对于 JSON 数据，我们通常将其解析为一个 Map，所以，我们可以通过对 Map 进行委派，从而实现反序列化操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> map: Map&lt;String, Any?&gt;) &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String <span class="keyword">by</span> map</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span>     <span class="keyword">by</span> map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个调用的例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> user = User(mapOf(</span><br><span class="line">    <span class="string">"name"</span> to <span class="string">"John Doe"</span>,</span><br><span class="line">    <span class="string">"age"</span>  to <span class="number">25</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(user.name) <span class="comment">// Prints "John Doe"</span></span><br><span class="line">println(user.age)  <span class="comment">// Prints 25</span></span><br></pre></td></tr></table></figure><p><code>User</code> 类会通过 Map 将数据取出。</p><p>这个方法同样适用于 <code>var</code> 变量，只要把 <code>Map</code> 改成 <code>MutableMap</code> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 委托模式</title>
      <link href="//Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/"/>
      <url>//Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-委托模式"><a class="markdownIt-Anchor" href="#1-委托模式"></a> 1. 委托模式</h2><blockquote><p>委托模式是软件设计模式中的一项基本技巧。<br>在委托模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。<br>委托模式是一项基本技巧，许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式。<br>委托模式使得我们可以用聚合来替代继承。</p></blockquote><a id="more"></a><h2 id="2-java-例子"><a class="markdownIt-Anchor" href="#2-java-例子"></a> 2. Java 例子</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">     void f();</span><br><span class="line">     void g();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="title">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> void f() &#123; System.<span class="keyword">out</span>.println(<span class="string">"A: doing f()"</span>); &#125;</span><br><span class="line">     <span class="keyword">public</span> void g() &#123; System.<span class="keyword">out</span>.println(<span class="string">"A: doing g()"</span>); &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="title">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> void f() &#123; System.<span class="keyword">out</span>.println(<span class="string">"B: doing f()"</span>); &#125;</span><br><span class="line">     <span class="keyword">public</span> void g() &#123; System.<span class="keyword">out</span>.println(<span class="string">"B: doing g()"</span>); &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">implements</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">     <span class="comment">// delegation</span></span><br><span class="line">     I i = new A();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> void f() &#123; i.f(); &#125;</span><br><span class="line">     <span class="keyword">public</span> void g() &#123; i.g(); &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// normal attributes</span></span><br><span class="line">     <span class="keyword">public</span> void toA() &#123; i = new A(); &#125;</span><br><span class="line">     <span class="keyword">public</span> void toB() &#123; i = new B(); &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">         C c = new C();</span><br><span class="line">         c.f();     <span class="comment">// output: A: doing f()</span></span><br><span class="line">         c.g();     <span class="comment">// output: A: doing g()</span></span><br><span class="line">         c.toB();</span><br><span class="line">         c.f();     <span class="comment">// output: B: doing f()</span></span><br><span class="line">         c.g();     <span class="comment">// output: B: doing g()</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>C</code> 将 <code>I</code> 接口的工作委托给 <code>A</code> 或者 <code>B</code> 来做。</p><p>可以看出，Java 中的委托模式的缺点在于要求比较多的代码。</p><h2 id="3-kotlin-的委托模式"><a class="markdownIt-Anchor" href="#3-kotlin-的委托模式"></a> 3. Kotlin 的委托模式</h2><p>而在 Kotlin 中，委托模式要求的代码量非常低。</p><p>只需要一个 <code>by</code> 表达式就能实现委托模式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseImpl</span></span>(<span class="keyword">val</span> x: <span class="built_in">Int</span>) : Base &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span> &#123; print(x) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>(b: Base) : Base <span class="keyword">by</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> b = BaseImpl(<span class="number">10</span>)</span><br><span class="line">  Derived(b).print() <span class="comment">// prints 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里 <code>by</code> 表达式表示，变量 <code>b</code> 会储存在类 <code>Derived</code> 中，<br>编译器会在 <code>Derived</code> 生成所有的 <code>Base</code> 的方法，并将它们都用 <code>b</code> 来执行。</p><h2 id="4-注意事项"><a class="markdownIt-Anchor" href="#4-注意事项"></a> 4. 注意事项</h2><p>不过需要注意的是，Kotlin 的委托目前只支持<strong>初始值</strong>。</p><p>也就是一旦类被建立，那么委托就不可改变，即使委托的对象是 <code>var</code>。</p><p>只有通过重新建立类才能改变委托。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 异常</title>
      <link href="//Kotlin/Kotlin%20%E5%BC%82%E5%B8%B8/"/>
      <url>//Kotlin/Kotlin%20%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>和 Java 一样，Kotlin 的异常都继承于 <code>Throwable</code> 类。</p><p>每个异常都拥有 <code>message</code> <code>stacktrace</code> 和 <code>cause</code></p><a id="more"></a><h2 id="2-抛出异常"><a class="markdownIt-Anchor" href="#2-抛出异常"></a> 2. 抛出异常</h2><p>使用 <code>throw</code> 抛出一个异常</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> MyException(<span class="string">"Hi There!"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意到，没有 <code>new</code></p></blockquote><h2 id="3-捕获异常"><a class="markdownIt-Anchor" href="#3-捕获异常"></a> 3. 捕获异常</h2><p>使用 <code>try-catch-finally</code> 来进行异常捕获和处理。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e: SomeException) &#123;</span><br><span class="line">  <span class="comment">// handler</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// optional finally block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以有多个 <code>catch</code> 块，<code>finally</code> 块是可选的；<br>但是必须存在至少一个 <code>catch</code> 块，否则就必须有 <code>finally</code>。</p><h2 id="4-try-表达式"><a class="markdownIt-Anchor" href="#4-try-表达式"></a> 4. <code>try</code> 表达式</h2><p><code>try</code> 也可以是一个表达式，也就是说它可以拥有<strong>返回值</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span>? = <span class="keyword">try</span> &#123; parseInt(input) &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123; <span class="literal">null</span> &#125;</span><br></pre></td></tr></table></figure><p>表达式的返回值不是 <code>try</code> 块的最后一个值，就是 <code>catch</code> 块的最后一个值。<br><code>finally</code> 块中的语句不会被作为返回值返回。</p><h2 id="5-已检查异常"><a class="markdownIt-Anchor" href="#5-已检查异常"></a> 5. 已检查异常</h2><p>不像 Java，Kotlin 中<strong>没有已检查异常</strong>；<br>也就说它不需要也不会在函数头进行 <code>throws</code> 声明。</p><p>原因在于，如果类似 Java 拥有已检查异常，那么：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Appendable append(CharSequence csq) throws IOException;</span><br></pre></td></tr></table></figure><p>当我在调用这个方法时，我就必须进行异常捕获（有很多方法内部不允许再次抛出异常）。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  log.append(message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  <span class="comment">// Must be safe</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，就会写出上面的代码，由于生吞了异常，这是一种非常不好的写法，同时这也违反了《Effective Java》中的条款。</p><blockquote><p>《Effective Java》第六十五条：不要忽略异常</p></blockquote><p>同样也有很多关于已检查异常的批评意见<br>see <span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy9kb2NzL3JlZmVyZW5jZS9leGNlcHRpb25zLmh0bWwjY2hlY2tlZC1leGNlcHRpb25z" title="https://kotlinlang.org/docs/reference/exceptions.html#checked-exceptions">here<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 扩展类型</title>
      <link href="//Kotlin/Kotlin%20%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B/"/>
      <url>//Kotlin/Kotlin%20%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>Kotlin 支持类似 C# 的对类进行扩展，而<strong>不需要</strong>对该类进行继承操作。<br>这个特性被称作扩展(extension)。</p><a id="more"></a><h2 id="2-方法的扩展"><a class="markdownIt-Anchor" href="#2-方法的扩展"></a> 2. 方法的扩展</h2><p>给类写一个扩展方法很简单，只需要使用类成员运算符(<code>.</code>)即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> MutableList<span class="type">&lt;Int&gt;</span>.<span class="title">swap</span><span class="params">(index1: <span class="type">Int</span>, index2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> tmp = <span class="keyword">this</span>[index1] <span class="comment">// 'this' corresponds to the list</span></span><br><span class="line">  <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">  <span class="keyword">this</span>[index2] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，我们给 <code>MutableList&lt;Int&gt;</code> 类扩展了一个方法 <code>swap()</code>。<br>此时，我们称 <code>MutableList&lt;Int&gt;</code> 为<strong>接收者类型</strong>，例子中的 <code>this</code> 标识符指的就是接收者类型的对象本身。</p><p>对类进行方法扩展后，我们就可以调用普通方法一样调用这个方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l = mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">l.swap(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// 'this' inside 'swap()' will hold the value of 'l'</span></span><br></pre></td></tr></table></figure><p>当然，可以看出 <code>MutableList</code> 是个泛型类，同样的，我们的扩展方法也支持泛型特性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> MutableList<span class="type">&lt;T&gt;</span>.<span class="title">swap</span><span class="params">(index1: <span class="type">Int</span>, index2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> tmp = <span class="keyword">this</span>[index1] <span class="comment">// 'this' corresponds to the list</span></span><br><span class="line">  <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">  <span class="keyword">this</span>[index2] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-方法的扩展是静态的"><a class="markdownIt-Anchor" href="#3-方法的扩展是静态的"></a> 3. 方法的扩展是静态的</h2><p>这指的是决定扩展方法调用的，是形式上的调用对象类型，而非实际的调用对象类型。</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>: <span class="type">C</span></span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> C.<span class="title">foo</span><span class="params">()</span></span> = <span class="string">"c"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> = <span class="string">"d"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printFoo</span><span class="params">(c: <span class="type">C</span>)</span></span> &#123;</span><br><span class="line">    println(c.foo())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFoo(D())</span><br></pre></td></tr></table></figure><p>此时，<code>printFoo()</code> 的结果是 <strong>“c”</strong> 而不是 <strong>“d”</strong>。<br>虽然传入 <code>printFoo()</code> 方法的是 D 对象，但是在该方法定义中，使用的是 C 的 <code>foo()</code> 方法，<br>所以即使传入的是 D，而结果却依然是 C 的打印结果。</p><p>这就是扩展方法的静态特性。</p><h2 id="4-方法扩展的优先级和重载"><a class="markdownIt-Anchor" href="#4-方法扩展的优先级和重载"></a> 4. 方法扩展的优先级和重载</h2><h3 id="41-优先级"><a class="markdownIt-Anchor" href="#41-优先级"></a> 4.1 优先级</h3><p>如果类中已经存在了一个和我们扩展方法相同的成员，那么在方法调用时，<strong>优先调用类成员</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; println(<span class="string">"member"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> C.<span class="title">foo</span><span class="params">()</span></span> &#123; println(<span class="string">"extension"</span>) &#125;</span><br></pre></td></tr></table></figure><p>如果我们调用对于一个任意的 <code>C</code> 对象调用 <code>c.foo()</code> ，结果都会是 <strong>“menber”</strong> ，而不是 <strong>“extension”</strong>。</p><h3 id="42-重载"><a class="markdownIt-Anchor" href="#42-重载"></a> 4.2 重载</h3><p>但是，如果我们的扩展方法和类成员拥有不同的<strong>函数签名</strong>，那么两者互不干涉，就像函数重载一样。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; println(<span class="string">"member"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> C.<span class="title">foo</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123; println(<span class="string">"extension"</span>) &#125;</span><br></pre></td></tr></table></figure><p>如果我们调用 <code>C().foo(1)</code>，则依旧会打印 <strong>&quot;extension&quot;</strong></p><h2 id="5-可以为空的接收者"><a class="markdownIt-Anchor" href="#5-可以为空的接收者"></a> 5. 可以为空的接收者</h2><p>扩展可以使用一个为空的接收者类型，这样的扩展方法在对象为 <code>null</code> 的时候仍然能被调用，此时可以在扩展方法中进行 <code>null</code> 检查，对于调用者来说，就直接调用方法即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Any?.<span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">"null"</span></span><br><span class="line">    <span class="comment">// after the null check, 'this' is autocast to a non-null type, so the toString() below</span></span><br><span class="line">    <span class="comment">// resolves to the member function of the Any class</span></span><br><span class="line">    <span class="keyword">return</span> toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，Kotlin 在经过 <code>if(this == null)</code> 这一 <code>null</code> 检查之后，会自动将对象 cast 成为一个非空对象。</p><h2 id="6-属性的扩展"><a class="markdownIt-Anchor" href="#6-属性的扩展"></a> 6. 属性的扩展</h2><p>与方法的扩展一样，Kotlin 中同样可以对属性进行扩展。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> &lt;T&gt; List&lt;T&gt;.lastIndex: <span class="built_in">Int</span></span><br><span class="line">  <span class="keyword">get</span>() = size - <span class="number">1</span></span><br></pre></td></tr></table></figure><p>需要注意的是，由于扩展采用静态处理，而不是插入一个新成员，<br>所以，扩展的属性没有 <strong>backing field</strong> 的支持，<br>因此，<strong>扩展属性不能被初始化</strong>，它们只能用显式的 getter 和 setter 来进行初始化。</p><h2 id="7-友元对象的扩展"><a class="markdownIt-Anchor" href="#7-友元对象的扩展"></a> 7. 友元对象的扩展</h2><p>如果一个类具有友元对象(Companion Object)，那么，也可以对其进行扩展。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> &#123; &#125;  <span class="comment">// will be called "Companion"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> MyClass.Companion.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展的友元对象就像类的友元对象一样，使用类名进行调用。</p><h2 id="8-扩展类型的作用域"><a class="markdownIt-Anchor" href="#8-扩展类型的作用域"></a> 8. 扩展类型的作用域</h2><p>通常，我们会将扩展定义在 top-level，此时就需要使用 <code>import</code> 语句来调用这个扩展。</p><h2 id="9-将扩展作为类成员"><a class="markdownIt-Anchor" href="#9-将扩展作为类成员"></a> 9. 将扩展作为类成员</h2><p>我们可以在一个类中定义另一个类的扩展方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">baz</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        bar()   <span class="comment">// calls D.bar</span></span><br><span class="line">        baz()   <span class="comment">// calls C.baz</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">caller</span><span class="params">(d: <span class="type">D</span>)</span></span> &#123;</span><br><span class="line">        d.foo()   <span class="comment">// call the extension function</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们称 C 为<strong>调度接收者</strong>，D 为<strong>扩展接收者</strong>。</p><p>当扩展名称和类成员冲突时，此时，在<strong>扩展内部</strong>，扩展接收者具有更高优先级；而在<strong>扩展外部</strong>，调度接收者具有更高优先级。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"C foo"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"D foo"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> C.<span class="title">fooBar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        foo()           <span class="comment">// "C foo"</span></span><br><span class="line">        <span class="keyword">this</span><span class="symbol">@D</span>.foo()    <span class="comment">// "D foo"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">caller</span><span class="params">(c: <span class="type">C</span>)</span></span> &#123;</span><br><span class="line">        c.fooBar()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> d = D()</span><br><span class="line">    <span class="keyword">val</span> c = C()</span><br><span class="line"></span><br><span class="line">    d.foo() <span class="comment">// "D foo"</span></span><br><span class="line">    c.foo() <span class="comment">// "C foo"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要在扩展内部访问外部类（即 D），则需要一个带标签的 <code>this</code> 来进行。</p><p>带标签的 <code>this</code> 通常用于内部类来访问外部类。</p><p>注意，扩展成员需要使用一个另外的调用器来执行。<br>在类的外部它是不可见的。</p><h2 id="10-扩展成员的继承"><a class="markdownIt-Anchor" href="#10-扩展成员的继承"></a> 10. 扩展成员的继承</h2><p>与其他成员一样，扩展成员也可以进行继承和重载操作。<br>但需要注意的是，<strong>扩展接收者</strong>是静态的，而<strong>调度接收者</strong>是动态的。</p><p>即，<strong>扩展接收者不受多态影响</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D1</span> : <span class="type">D</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"D.foo in C"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> D1.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"D1.foo in C"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">caller</span><span class="params">(d: <span class="type">D</span>)</span></span> &#123;</span><br><span class="line">        d.foo()   <span class="comment">// call the extension function</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> : <span class="type">C</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"D.foo in C1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> D1.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"D1.foo in C1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C().caller(D())   <span class="comment">// prints "D.foo in C"</span></span><br><span class="line">C1().caller(D())  <span class="comment">// prints "D.foo in C1" - dispatch receiver is resolved virtually</span></span><br><span class="line">C().caller(D1())  <span class="comment">// prints "D.foo in C" - extension receiver is resolved statically</span></span><br></pre></td></tr></table></figure><h2 id="11-开发扩展的动机"><a class="markdownIt-Anchor" href="#11-开发扩展的动机"></a> 11. 开发扩展的动机</h2><p>提供扩展这一特性主要是为了简化 Java 代码中关于工具类的调用。</p><p>将这样的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line">Collections.swap(</span><br><span class="line">    list,</span><br><span class="line">    Collections.binarySearch(list,Collections.max(otherList)),</span><br><span class="line">    Collections.max(list))</span><br></pre></td></tr></table></figure><p>转换成这样的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line">list.swap(list.binarySearch(otherList.max()), list.max())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 数据类</title>
      <link href="//Kotlin/Kotlin%20%E6%95%B0%E6%8D%AE%E7%B1%BB/"/>
      <url>//Kotlin/Kotlin%20%E6%95%B0%E6%8D%AE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>我们经常要使用容器类结构，所以 Kotlin 提供了一种新特性，专门用于生成容器类，称为数据类(data class)</p><a id="more"></a><h2 id="2-创建"><a class="markdownIt-Anchor" href="#2-创建"></a> 2. 创建</h2><p>Kotlin 使用 <code>data</code> 定义一个数据类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><p>编译器会自动为这个类生成如下方法：</p><ul><li><code>equal()</code> 和 <code>hashCode()</code></li><li><code>toString()</code>：生成 <code>&quot;User(name=John, age=42)&quot;</code></li><li><code>componentN()</code> 方法，用于类的解构</li><li><code>copy()</code> 方法，用于复制这个类</li></ul><p>如果这些方法已经被显式声明了，那么则不进行生成。</p><h2 id="3-需要满足的条件"><a class="markdownIt-Anchor" href="#3-需要满足的条件"></a> 3. 需要满足的条件</h2><p>一个 Kotlin 数据类需要满足如下条件：</p><ul><li>primary constructor 必须具有至少一个参数</li><li>所有的 primary constructor 参数必须使用 <code>val</code> 或 <code>var</code></li><li>数据类不能具有 <code>open</code> <code>abstract</code> <code>sealed</code> 修饰符，而且不能是内部类。</li><li>数据类不能继承其他类，但是可以实现接口</li></ul><blockquote><p>如果需要在 JVM 上使得类具有一个无参数的构造器，那么所有的 primary constructor 参数都必须有默认值</p></blockquote><h2 id="4-复制"><a class="markdownIt-Anchor" href="#4-复制"></a> 4. 复制</h2><p>数据类自动实现了 <code>copy()</code> 方法，可以进行数据类的深拷贝。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> jack = User(name = <span class="string">"Jack"</span>, age = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> olderJack = jack.copy(age = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>copy()</code> 方法的声明如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">copy</span><span class="params">(name: <span class="type">String</span> = this.name, age: <span class="type">Int</span> = this.age)</span></span> = User(name, age)</span><br></pre></td></tr></table></figure><h2 id="5-数据类的解构"><a class="markdownIt-Anchor" href="#5-数据类的解构"></a> 5. 数据类的解构</h2><p>数据类自动生成了 <code>componentN()</code> 方法，因此可以用作数据类的解构。</p><blockquote><p>解构指的是类似 Python 中的返回元组，将数据类中的数据拆分开，用不同的变量来承接的特性。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> jane = User(<span class="string">"Jane"</span>, <span class="number">35</span>)</span><br><span class="line"><span class="keyword">val</span> (name, age) = jane</span><br><span class="line">println(<span class="string">"<span class="variable">$name</span>, <span class="variable">$age</span> years of age"</span>) <span class="comment">// prints "Jane, 35 years of age"</span></span><br></pre></td></tr></table></figure><p>上面这个例子实际上在编译过程中会被自动转换成</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = jane.component1()</span><br><span class="line"><span class="keyword">val</span> age = jane.component2()</span><br></pre></td></tr></table></figure><p>所以 <code>name</code> 和 <code>age</code> 可以直接被使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(name)</span><br><span class="line">println(age)</span><br></pre></td></tr></table></figure><p><code>componentN()</code> 方法的顺序和 primary constructor 中<strong>参数的顺序</strong>相同。</p><blockquote><p><code>componentN()</code> 方法的自定义<br>实际上，为了支持上面的类似元组的操作，需要使用 <code>operator</code> 标识符来声明 <code>componentN()</code> 方法。</p></blockquote><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;K, V&gt;</span> Map<span class="type">&lt;K, V&gt;</span>.<span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;Map.Entry&lt;K, V&gt;&gt; = entrySet().iterator()</span><br><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;K, V&gt;</span> Map.Entry<span class="type">&lt;K, V&gt;</span>.<span class="title">component1</span><span class="params">()</span></span> = getKey()</span><br><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;K, V&gt;</span> Map.Entry<span class="type">&lt;K, V&gt;</span>.<span class="title">component2</span><span class="params">()</span></span> = getValue()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>定义之后，就可以像这样调用</p></blockquote><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map) &#123;</span><br><span class="line">   <span class="comment">// do something with the key and the value</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 枚举类</title>
      <link href="//Kotlin/Kotlin%20%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
      <url>//Kotlin/Kotlin%20%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>事实上，Kotlin 的枚举和 Java 一样，只是提供了一个类型限定范围。</p><p>而如果要使用在 <code>switch</code>，都必须使用 <code>valueOf()</code> 方法，同时使用 try-catch。</p><blockquote><p>当然，在 Kotlin 中，可以使用 sealed clasdd 来方便的实现需要 switch 的情景。</p></blockquote><a id="more"></a><h2 id="2-声明"><a class="markdownIt-Anchor" href="#2-声明"></a> 2. 声明</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Direction</span> </span>&#123;</span><br><span class="line">  NORTH, SOUTH, WEST, EAST</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-初始化"><a class="markdownIt-Anchor" href="#3-初始化"></a> 3. 初始化</h2><p>与 Java 一样，枚举类也可以被初始化</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span></span>(<span class="keyword">val</span> rgb: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    RED(<span class="number">0xFF0000</span>),</span><br><span class="line">    GREEN(<span class="number">0x00FF00</span>),</span><br><span class="line">    BLUE(<span class="number">0x0000FF</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-匿名类"><a class="markdownIt-Anchor" href="#4-匿名类"></a> 4. 匿名类</h2><p>每一个枚举项都能拥有它自己的匿名类和重载方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolState</span> </span>&#123;</span><br><span class="line">  WAITING &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">signal</span><span class="params">()</span></span> = TALKING</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  TALKING &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">signal</span><span class="params">()</span></span> = WAITING</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">signal</span><span class="params">()</span></span>: ProtocolState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-创建枚举"><a class="markdownIt-Anchor" href="#5-创建枚举"></a> 5. 创建枚举</h2><p>创建枚举和 Java 相同，只能使用 <code>valueOf()</code> 方法。<br>而且，此方法在参数不符合枚举值时，会抛出异常。</p><p>同时 Kotlin 也提供了 <code>values()</code> 方法来遍历所有的枚举值。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 泛型</title>
      <link href="//Kotlin/Kotlin%20%E6%B3%9B%E5%9E%8B/"/>
      <url>//Kotlin/Kotlin%20%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-声明和实例化"><a class="markdownIt-Anchor" href="#1-声明和实例化"></a> 1. 声明和实例化</h2><p>和 Java 一样，Kotlin 使用类型参数来声明一个泛型类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="type">T</span>&gt;</span>(t: T) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在实例化时，我们需要显式给出类型参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> box: Box&lt;<span class="built_in">Int</span>&gt; = Box&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>但是，如果类型能够被推断出，那么类型参数可以被省略</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> box = Box(<span class="number">1</span>) <span class="comment">// 1 has type Int, so the compiler figures out that we are talking about Box&lt;Int&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-java-中的泛型可变性"><a class="markdownIt-Anchor" href="#2-java-中的泛型可变性"></a> 2. Java 中的泛型可变性</h2><p>在 Java 中，泛型是不可变的。<br>也就是说 <code>List&lt;Object&gt;</code> 不能接受一个 <code>String</code> 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line">List&lt;String&gt; strs = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;Object&gt; objs = strs; <span class="comment">// !!! The cause of the upcoming problem sits here. Java prohibits this!</span></span><br><span class="line"></span><br><span class="line">objs.add(<span class="number">1</span>); <span class="comment">// Here we put an Integer into a list of Strings</span></span><br><span class="line"></span><br><span class="line">String s = strs.get(<span class="number">0</span>); <span class="comment">// !!! ClassCastException: Cannot cast Integer to String</span></span><br></pre></td></tr></table></figure><p>但是我们又需要实现一个接受泛型对象的方法，例如 <code>addAll()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="comment">// Wrong implementation</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; ... </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(Collection&lt;E&gt; items)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于泛型不可变，这样的实现实际上是错误的。</p><p>所以 Java 引入了<strong>通配符</strong>(<code>?</code>)，使用 <code>extends</code> 和 <code>super</code> 来对通配符进行限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="comment">// Correct implementation</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; ... </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; items)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="211-extends-t-和-super-t-的区别"><a class="markdownIt-Anchor" href="#211-extends-t-和-super-t-的区别"></a> 2.1.1 <code>&lt;? extends T&gt;</code> 和 <code>&lt;? super T&gt;</code> 的区别</h3><p>何时使用 <code>extends</code> 和 <code>super</code>，Java 有一个 PECS 原则。</p><p>PECS 的意思是 <b>P</b>roducer <b>E</b>xtends, <b>C</b>onsumer <b>S</b>uper。</p><p>即对于生产者，使用 <code>extends</code>，<br>对于消费者，使用 <code>super</code>，<br>如果一个类既要生产，也要消费，那么就不对通配符进行限制。</p><p>究其原因，还是得从这两者特性说起。</p><h4 id="2111-extends-t"><a class="markdownIt-Anchor" href="#2111-extends-t"></a> 2.1.1.1 <code>&lt;? extends T&gt;</code></h4><p>实际上，对于使用了 <code>&lt;? extends T&gt;</code> 的类，编译器会阻止向其加入任何的元素。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</span><br><span class="line">List&lt;? extends Fruit&gt; fruits = apples; <span class="comment">//works, apple is a subclass of Fruit.</span></span><br><span class="line">fruits.add(<span class="keyword">new</span> Strawberry());        <span class="comment">//compile error</span></span><br></pre></td></tr></table></figure><p><code>fruits</code> 是一个 <code>Fruit</code> 的子类的 <code>List</code> ,由于 <code>Apple</code> 是 <code>Fruit</code> 的子类，因此将 <code>apples</code> 赋给 <code>fruits</code> 是合法的。</p><p>但是编译器会阻止将 <code>Strawberry</code> 加入 <code>fruits</code>。<br>因为编译器只知道 <code>fruits</code> 是 <code>Fruit</code> 的某个子类的 <code>List</code>，<br>但并不知道<strong>究竟是哪个子类</strong>，为了类型安全，只好阻止向其中加入任何子类。</p><p>那么可不可以加入 <code>Fruit</code> 呢？<br>很遗憾，也不可以。</p><p>但是由于编译器知道 <code>fruits</code> 中的元素总是 <code>Fruit</code> 的子类，<br>所以可以安全的将其取出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fruit fruit = fruits.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="2112-super-t"><a class="markdownIt-Anchor" href="#2112-super-t"></a> 2.1.1.2 <code>&lt;? super T&gt;</code></h4><p>使用 <code>super</code> 的原因其实并不如使用 <code>extends</code> 的原因那样复杂。</p><p>使用 <code>super</code> 只是为了为了保证能向其加入 <code>T</code>，或者是对其调用<strong>接受 <code>T</code> 作为参数的方法。</strong></p><p>有趣的是，编译器并没有禁止在这种类型上调用 <code>get()</code> 方法，<br>但是需要注意的是，如果调用 <code>get()</code>，返回的是 <code>Object</code> 而不是具体的 <code>T</code> 类型。</p><p>所以在 <code>&lt;? super T&gt;</code> 对象上，只能进行消费，即调用以 <code>T</code> 为参数的方法。</p><blockquote><p>神奇的是，虽然类型是 <code>super</code>，但是却不能加入一个具体的超类，而可以加入一个具体的子类。</p></blockquote><blockquote><p>其原因就是编译器无法确定加入的超类究竟是哪一个，而 <code>T</code> 作为参数时，可以接受一个子类。</p></blockquote><h2 id="3-kotlin-的改进-declaration-site-variance"><a class="markdownIt-Anchor" href="#3-kotlin-的改进-declaration-site-variance"></a> 3. Kotlin 的改进： Declaration-site variance</h2><p>在 Java 中，如果一个接口<strong>只返回泛型，而不对泛型进行操作</strong>，那么将其赋给超类泛型就是安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Source</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">nextT</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(Source&lt;String&gt; strs)</span> </span>&#123;</span><br><span class="line">  Source&lt;Object&gt; objects = strs; <span class="comment">// !!! Not allowed in Java</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 <code>Source&lt;T&gt;</code> 中只有<strong>返回 <code>T</code></strong> 的方法，所以即使对 <code>objects</code> 进行操作，也只能返回 <code>T</code>，<br>而 <code>Object</code> 是 <code>T</code> 的超类或者它本身，所以这是安全的。</p><p>但是在 Java 中不允许这样的写法，你依旧要使用 <code>Sorce&lt;? extends String&gt;</code>，这显得毫无意义。</p><p>在 Kotlin 中，对于这样的情形，定义了 <code>out</code> 标识符，使用 <code>out</code> 标识符来说明，类、接口<strong>只会返回泛型，而不会接受泛型作为参数。</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span>&lt;<span class="type">out T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextT</span><span class="params">()</span></span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(strs: <span class="type">Source</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> objects: Source&lt;Any&gt; = strs <span class="comment">// This is OK, since T is an out-parameter</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，定义了 <code>in</code> 标识符，用于表明类、接口<strong>只会接受 <code>T</code> 作为参数，而不会返回它。</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Comparable</span>&lt;<span class="type">in T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(x: <span class="type">Comparable</span>&lt;<span class="type">Number</span>&gt;)</span></span> &#123;</span><br><span class="line">  x.compareTo(<span class="number">1.0</span>) <span class="comment">// 1.0 has type Double, which is a subtype of Number</span></span><br><span class="line">  <span class="comment">// Thus, we can assign x to a variable of type Comparable&lt;Double&gt;</span></span><br><span class="line">  <span class="keyword">val</span> y: Comparable&lt;<span class="built_in">Double</span>&gt; = x <span class="comment">// OK!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 Java 不同的是，Kotlin 并没有定义一个口诀来帮助记忆，<code>out</code> 和 <code>in</code> 已经足够说明其属性。</p><blockquote><p><code>out</code> 代表着类、接口只会<strong>给出</strong><code>T</code>，相当于 <code>T</code> 的生产者；<br><code>in</code> 代表着类、接口只会<strong>接受</strong> <code>T</code>，相当于 <code>T</code> 的消费者。</p></blockquote><blockquote><p>这些词语的表意性已经十分明确了。</p></blockquote><h2 id="4-类型预测"><a class="markdownIt-Anchor" href="#4-类型预测"></a> 4. 类型预测</h2><p>对于一个既能生产又能消费的类，我们就不能在声明阶段限定它的泛型类型。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> size: <span class="built_in">Int</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(index: <span class="type">Int</span>, value: <span class="type">T</span>)</span></span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是对于如下方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">copy</span><span class="params">(from: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;, to: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;)</span></span> &#123;</span><br><span class="line">  assert(from.size == to.size)</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> from.indices)</span><br><span class="line">    to[i] = from[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的目的是将一个类的元素复制到另一个类中去，如果进行如下的调用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ints: Array&lt;<span class="built_in">Int</span>&gt; = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> any = Array&lt;Any&gt;(<span class="number">3</span>)</span><br><span class="line">copy(ints, any) <span class="comment">// Error: expects (Array&lt;Any&gt;, Array&lt;Any&gt;)</span></span><br></pre></td></tr></table></figure><p>一个 <code>Array&lt;Any&gt;</code> 当然可以接受一个 <code>Int</code> 的值，理论上来说这段代码是完全没有问题的。</p><p>但是编译器阻止这么使用的原因在于：<br><code>Array&lt;T&gt;</code> 类既可以生产又可以消费，<br>如果我们向 <code>from</code> 中<strong>添加一个 <code>Any</code> 对象</strong>（因为 <code>from</code> 的形参是 <code>Array&lt;Any&gt;</code>），<br>但是当前 <code>from</code> 是 <code>Int</code>， 当然这就会导致 <code>ClassCastException</code>。</p><p>为了防止这种不安全的事情发生，编译器就禁止了上述操作。</p><p>但是，<strong>只要 <code>from</code> 不进行消费操作，那么这段代码就是类型安全的。</strong></p><p>所以，Kotlin 除了提供在声明阶段进行泛型限制以外，还可以在调用阶段进行泛型限制。</p><p>在 <code>copy()</code> 方法中，如果我们限制 <code>from</code> 只会生产，而不会消费，那么上面的调用就是安全的了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">copy</span><span class="params">(from: <span class="type">Array</span>&lt;<span class="type">out</span> <span class="type">Any</span>&gt;, to: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;)</span></span> &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 的这种特性，我们称之为<strong>类型预测</strong>：<code>from</code> 不仅仅只是一个简单的 <code>Array</code>，而且它受到了限制，它的类型已经被预测了。</p><p>同样，我们也可以使用 <code>in</code> 来指明一个变量只会消费，而不会生产。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fill</span><span class="params">(dest: <span class="type">Array</span>&lt;<span class="type">in</span> <span class="type">String</span>&gt;, value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事实上， <code>&lt;out T&gt;</code> 相当于 Java 的 <code>&lt;? extends T&gt;</code>；<code>&lt;in T&gt;</code> 相当于 Java 的 <code>&lt;? super T&gt;</code></p></blockquote><h2 id="5-星号"><a class="markdownIt-Anchor" href="#5-星号"></a> 5. 星号</h2><p>除了上述的泛型类型限制外，Kotlin 还提供了一个星号类型(<code>*</code>)。<br>这和 Java 的通配符(<code>?</code>)很相似，当你不知道具体的泛型类型，而又想使用它时，那么就可以使用星号类型。</p><p>具体来说：</p><ul><li>对于 <code>Foo&lt;out T&gt;</code>，<code>Foo&lt;*&gt;</code> 意味着 <code>Foo&lt;out TUpper&gt;</code>，<code>TUpper</code> 指的是 <code>Foo()</code> 方法所给定的泛型上界。也就是说当 <code>T</code> 是未知的时候，你可以从 <code>Foo&lt;*&gt;</code>读取**<code>T</code> 的上界**</li><li>对于 <code>Foo&lt;in T&gt;</code>，<code>Foo&lt;*&gt;</code> 指的是 <code>Foo&lt;in Nothing&gt;</code>，意思是当 <code>T</code> 未知时，你不能向 <code>Foo&lt;*&gt;</code> 中写入任何东西。</li><li>对于 <code>Foo&lt;T&gt;</code>，<code>T</code> 是一个不可变的泛型类型，所以 <code>Foo&lt;*&gt;</code> 表示 <code>Foo&lt;out TUpper&gt;</code> 和 <code>Foo&lt;in Nothing&gt;</code></li></ul><p>一个更为通俗的解释如下：</p><p>对于接口声明 <code>interface Function&lt;in T, out U&gt;</code>：</p><ul><li><code>Function&lt;*, String&gt;</code> 表示 <code>Function&lt;in Nothing, String&gt;</code></li><li><code>Function&lt;String, *&gt;</code> 表示 <code>Function&lt;String, out Any?&gt;</code></li><li><code>Function&lt;*, *&gt;</code> 表示 <code>Function&lt;in Nothing, out Any?&gt;</code></li></ul><h2 id="6-泛型方法"><a class="markdownIt-Anchor" href="#6-泛型方法"></a> 6. 泛型方法</h2><p>与 Java 一样，Kotlin 中的方法也可以有泛型。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">singletonList</span><span class="params">(item: <span class="type">T</span>)</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">basicToString</span><span class="params">()</span></span> : String &#123;  <span class="comment">// extension function</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l = singletonList&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="7-泛型约束"><a class="markdownIt-Anchor" href="#7-泛型约束"></a> 7. 泛型约束</h2><p>与 Java 一样，Kotlin 也拥有泛型约束，这用在当泛型参数 <code>T</code> 未知时，用于对 <code>T</code> 的类型做出限制，即 <code>TUpper</code></p><p>最常用的泛型约束就是上界，Java 中使用 <code>extends</code> 来指明上界。</p><p>Kotlin 使用 冒号(<code>:</code>) 来指明上界。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">sort</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法举例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sort(listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// OK. Int is a subtype of Comparable&lt;Int&gt;</span></span><br><span class="line">sort(listOf(HashMap&lt;<span class="built_in">Int</span>, String&gt;())) <span class="comment">// Error: HashMap&lt;Int, String&gt; is not a subtype of Comparable&lt;HashMap&lt;Int, String&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>默认的上界是 <code>Any?</code>（<code>?</code> 说明可以为空<code>nullable</code>）。</p><p>只有<strong>一个</strong>上界可以在尖括号中被指定，如果需要对同一个泛型参数指定多个上界，则需要使用 <code>where</code> 语句。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">cloneWhenGreater</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, threshold: <span class="type">T</span>)</span></span>: List&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T : Comparable,</span><br><span class="line">          T : Cloneable &#123;</span><br><span class="line">  <span class="keyword">return</span> list.filter &#123; it &gt; threshold &#125;.map &#123; it.clone() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>Comparable</code> 和 <code>Cloneable</code> 都是接口。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 相等性</title>
      <link href="//Kotlin/Kotlin%20%E7%9B%B8%E7%AD%89%E6%80%A7/"/>
      <url>//Kotlin/Kotlin%20%E7%9B%B8%E7%AD%89%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Kotlin 中拥有两种相等性类型</p><ul><li>引用相等性：两个引用是否指向同一个对象</li><li>结构相等性：类似 Java 中的 <code>equals()</code></li></ul><a id="more"></a><h2 id="2-引用相等性"><a class="markdownIt-Anchor" href="#2-引用相等性"></a> 2. 引用相等性</h2><p>引用相等性使用 <code>===</code>（其否定判断为 <code>!==</code>）， 来进行判别，它只判断两个引用是否指向了同一个对象。</p><p><code>a === b</code> 为真当且仅当 <code>a</code> 和 <code>b</code> 指向了同一个对象。</p><h2 id="3-结构相等性"><a class="markdownIt-Anchor" href="#3-结构相等性"></a> 3. 结构相等性</h2><p>结构相等性的判断类似 Java 中的 <code>equals()</code>，<br>在 Kotlin 中，使用 <code>==</code> 操作符来进行判断（其否定为 <code>!=</code>）。</p><p>一个 <code>==</code> 操作符会被转换成以下的相应代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a?.equals(b) ?: (b === <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>也就是说，当 <code>a</code> 非空时，它会调用 <code>equal(Any?)</code>，当 <code>a</code> 为空时，它会检查 <code>b</code> 是否也为空。</p><p>注意，在空检查时，没有必要转换你的代码，编译器会自动将 <code>a == null</code> 优化为 <code>a === null</code></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 类型检查和造型</title>
      <link href="//Kotlin/Kotlin%20%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%92%8C%E9%80%A0%E5%9E%8B/"/>
      <url>//Kotlin/Kotlin%20%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%92%8C%E9%80%A0%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类型检查"><a class="markdownIt-Anchor" href="#1-类型检查"></a> 1. 类型检查</h2><p>使用 <code>is</code> 和 <code>!is</code> 来检查一个变量的类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">  print(obj.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj !<span class="keyword">is</span> String) &#123; <span class="comment">// same as !(obj is String)</span></span><br><span class="line">  print(<span class="string">"Not a String"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  print(obj.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-智能造型smart-cast"><a class="markdownIt-Anchor" href="#2-智能造型smart-cast"></a> 2. 智能造型(Smart Cast)</h2><p>智能造型指的是，当一个对象满足一个 <code>is</code> 表达式时，它就会被自动转换成这个类型。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(x: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">is</span> String) &#123;</span><br><span class="line">    print(x.length) <span class="comment">// x is automatically cast to String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，它也支持<strong>否定</strong>检查</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x !<span class="keyword">is</span> String) <span class="keyword">return</span></span><br><span class="line">print(x.length) <span class="comment">// x is automatically cast to String</span></span><br></pre></td></tr></table></figure><p>也支持 <code>&amp;&amp;</code> 和 <code>||</code> 表达式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x is automatically cast to string on the right-hand side of `||`</span></span><br><span class="line"><span class="keyword">if</span> (x !<span class="keyword">is</span> String || x.length == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x is automatically cast to string on the right-hand side of `&amp;&amp;`</span></span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">is</span> String &amp;&amp; x.length &gt; <span class="number">0</span>)</span><br><span class="line">    print(x.length) <span class="comment">// x is automatically cast to String</span></span><br></pre></td></tr></table></figure><p>同样，在 <code>when</code> 和 <code>while</code> 语句中也支持这个特性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">  <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; print(x + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">is</span> String -&gt; print(x.length + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">is</span> IntArray -&gt; print(x.sum())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，智能造型在编译器<strong>无法保证</strong>在检查和使用的过程中类型不会发生变化时，不能使用。</p><p>具体来说，智能造型在以下场景中有效：</p><ul><li><code>val</code> 局部变量：<strong>总是有效</strong></li><li><code>val</code> 属性<ul><li>这个属性是 <code>private</code> 或者 <code>internal</code>；</li><li>对于它的检查代码与它的声明在同一个模块中时</li><li>注意，智能造型不适用于具有自定义 getter 或者开放的变量(<code>public</code>)</li></ul></li><li><code>var</code> 局部变量<ul><li>这个变量没有在检查和使用代码间进行改动</li><li>这个变量没有被修改它的 lambda 表达式捕获</li></ul></li><li><code>var</code> 属性：<strong>总是无效</strong></li></ul><h2 id="3-不安全的造型"><a class="markdownIt-Anchor" href="#3-不安全的造型"></a> 3. 不安全的造型</h2><p>通常来说，当一个造型操作会丢出异常时，说明这个造型操作是不安全的。</p><p>对于这种造型操作，Kotlin 使用 <code>as</code> 关键字。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x: String = y <span class="keyword">as</span> String</span><br></pre></td></tr></table></figure><p>注意，<code>null</code> 不能强制转换成 <code>String</code>，如果 <code>y</code> 是 <code>null</code>，那么上述代码将会抛出异常。</p><p>我们可以使用一个 <code>nullable</code> 对象来进行造型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x: String? = y <span class="keyword">as</span> String?</span><br></pre></td></tr></table></figure><h2 id="4-安全的造型"><a class="markdownIt-Anchor" href="#4-安全的造型"></a> 4. 安全的造型</h2><p>为了避免在造型中抛出异常，我们可以使用一个安全的造型操作符 <code>as?</code>。</p><p>它会在造型失败时返回 <code>null</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x: String? = y <span class="keyword">as</span>? String</span><br></pre></td></tr></table></figure><p>注意，虽然 <code>as?</code> 右边是一个非空类型，但是造型返回的结果也可以为空。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 范围</title>
      <link href="//Kotlin/Kotlin%20%E8%8C%83%E5%9B%B4/"/>
      <url>//Kotlin/Kotlin%20%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>虽然 Kotlin 支持了简单易用的 <code>foreach</code> 语法，但是，有些时候也有必要获取下标，并显式的限定其范围，或者你需要判定一个值是否在一个范围内。</p><p>Kotlin 对此支持 Range 语法，它就是简单的使用 <code>..</code> 来表示范围，并且支持使用 <code>in</code> 和 <code>!in</code> 来进行判定；以及 <code>for</code> 进行遍历。</p><a id="more"></a><h2 id="2-判定"><a class="markdownIt-Anchor" href="#2-判定"></a> 2. 判定</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123; <span class="comment">// equivalent of 1 &lt;= i &amp;&amp; i &lt;= 10</span></span><br><span class="line">  println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-遍历"><a class="markdownIt-Anchor" href="#3-遍历"></a> 3. 遍历</h2><p>对于标准库中的范围（<code>IntRange</code> <code>LongRange</code> <code>CharRange</code>），Kotlin 支持遍历操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span>) print(i) <span class="comment">// prints "1234"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span>..<span class="number">1</span>) print(i) <span class="comment">// prints nothing</span></span><br></pre></td></tr></table></figure><p>上面的第二种写法不会打印出值，但是，如果你需要逆序遍历也很简单，只需要使用 <code>downTo()</code> 方法即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span> downTo <span class="number">1</span>) print(i) <span class="comment">// prints "4321"</span></span><br></pre></td></tr></table></figure><p>如果需要定义步长，使用 <code>step()</code> 方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span> step <span class="number">2</span>) print(i) <span class="comment">// prints "13"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span> downTo <span class="number">1</span> step <span class="number">2</span>) print(i) <span class="comment">// prints "42"</span></span><br></pre></td></tr></table></figure><h2 id="4-原理"><a class="markdownIt-Anchor" href="#4-原理"></a> 4. 原理</h2><p>范围需要实现一个 <code>ClosedRange&lt;T&gt;</code> 接口。</p><p><code>ClosedRange&lt;T&gt;</code> 代表着一个<strong>闭区间</strong>，<br>它有两个变量 <code>start</code> 和 <code>endInclusive</code>，分别代表着区间的两端。<br>它主要的方法是 <code>contains()</code> 一般应用在 <code>in</code> 和 <code>!in</code> 的范围检查中。</p><p>对于步长和逆序方法，它们主要是通过 <code>*Progression</code> 来实现的；<br>目前 Kotlin 拥有 <code>IntProgression</code>, <code>LongProgression</code>, <code>CharProgression</code></p><p><code>Progresssion</code> 接受三个参数，<code>first</code> 、<code>last</code> 和一个非零的 <code>increment</code>。</p><p><code>Progression</code> 主要实现了 <code>Iterable&lt;N&gt;</code> 接口，进行遍历的操作和以下的 Java 代码类似</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int i = first; i != last; i += increment) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Progression</code> 类主要通过以下方法进行构建</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntProgression.fromClosedRange(start, end, increment)</span><br></pre></td></tr></table></figure><p>注意 <code>increment</code> 不能是<strong>负的</strong>，也就是说不允许出现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(last - first) % increment == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="5-其他有用的方法"><a class="markdownIt-Anchor" href="#5-其他有用的方法"></a> 5. 其他有用的方法</h2><p>除了上面介绍的有用的方法外，还有一些比较有用的方法。</p><h3 id="51-reversed"><a class="markdownIt-Anchor" href="#51-reversed"></a> 5.1 <code>reversed()</code></h3><p>很简单，用于反转整个流程。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> IntProgression.<span class="title">reversed</span><span class="params">()</span></span>: IntProgression &#123;</span><br><span class="line">  <span class="keyword">return</span> IntProgression.fromClosedRange(last, first, -increment)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 调用 Java 代码</title>
      <link href="//Kotlin/Kotlin%20%E8%B0%83%E7%94%A8%20Java%20%E4%BB%A3%E7%A0%81/"/>
      <url>//Kotlin/Kotlin%20%E8%B0%83%E7%94%A8%20Java%20%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Kotlin 完美支持 Java，你可以无缝地在 Kotlin 中引入 Java 库，调用 Java 类等。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(source: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> list = ArrayList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">  <span class="comment">// 'for'-loops work for Java collections:</span></span><br><span class="line">  <span class="keyword">for</span> (item <span class="keyword">in</span> source)</span><br><span class="line">    list.add(item)</span><br><span class="line">  <span class="comment">// Operator conventions work as well:</span></span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>..source.size() - <span class="number">1</span>)</span><br><span class="line">    list[i] = source[i] <span class="comment">// get and set are called</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-调用-getter-和-setter"><a class="markdownIt-Anchor" href="#2-调用-getter-和-setter"></a> 2. 调用 getter 和 setter</h2><p>Java 中的 getter 和 setter 在 Kotlin 中都会被转换为 Kotlin 的格式，即只需要直接引用属性值即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calendarDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> calendar = Calendar.getInstance()</span><br><span class="line">    <span class="keyword">if</span> (calendar.firstDayOfWeek == Calendar.SUNDAY) &#123;  <span class="comment">// call getFirstDayOfWeek()</span></span><br><span class="line">        calendar.firstDayOfWeek = Calendar.MONDAY       <span class="comment">// call setFirstDayOfWeek()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-返回-void-的方法"><a class="markdownIt-Anchor" href="#3-返回-void-的方法"></a> 3. 返回 <code>void</code> 的方法</h2><p>Java 中返回 <code>void</code> 的方法，在 Kotlin 中会转换为返回 <code>Unit</code></p><h2 id="4-转义-java-方法"><a class="markdownIt-Anchor" href="#4-转义-java-方法"></a> 4. 转义 Java 方法</h2><p>Kotlin 中拥有一些 Java 没有的关键字（比如 <code>is</code> <code>in</code> <code>object</code> 等）。<br>对于这些关键字，如果 Java 代码中有相同的方法名或变量名，可以通过对其进行转义来调用它。</p><p>使用 <code>``</code> 来进行转义工作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.`<span class="keyword">is</span>`(bar)</span><br></pre></td></tr></table></figure><h2 id="5-null-safety-和-platform-type"><a class="markdownIt-Anchor" href="#5-null-safety-和-platform-type"></a> 5. Null Safety 和 Platform Type</h2><p>在 Java 中，任何引用都有可能为空，但是在 Kotlin 中，严格的类型系统不允许空值。</p><p>对于这种冲突，Kotlin 采用 Platform Type，也就是说在 Java 代码中的引用，Kotlin 类型系统会对其放松限制。</p><p>所以它们的安全性保障就和在 Java 代码中一样。</p><p>对于 Platform Type，我们可以使用一个 nullable 的 Kotlin 类型来承接它，也可以使用 non-nullable 对象。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> nullable: String? = item <span class="comment">// allowed, always works</span></span><br><span class="line"><span class="keyword">val</span> notNull: String = item <span class="comment">// allowed, may fail at runtime</span></span><br></pre></td></tr></table></figure><p>当我们使用 non-null 对象来承接 Platform Type 时，<br>Kotlin 会自动在赋值语句上方插入断言，来保证 Kotlin 变量的非空性。</p><p>同样的，当我们把 Platform Type 传个一个接受非空类型的函数参数时，<br>Kotlin 也会自动在函数调用前插入断言语句。</p><p>不过有时候也不一定会进行断言，特别是在使用泛型的时候。</p><h2 id="6-platform-type-的符号"><a class="markdownIt-Anchor" href="#6-platform-type-的符号"></a> 6. Platform Type 的符号</h2><p>由于 Platform Type 不能被显式确定，所以没有关于它们的语法。</p><p>但是有时候 IDE 需要生成函数提示，所以对于 Platfrom Type 也有一些符号用于说明。</p><ul><li><code>T!</code> 表示 <code>T</code> 或者 <code>T?</code></li><li><code>(Mutable)Collection&lt;T&gt;!</code> 表示关于 <code>T</code> 的 Java 集合，可能会被修改，也可能不会；可能为空，也可能不会</li><li><code>Array&lt;(out) T&gt;!</code> 表示关于 <code>T</code> 或者其子类型的 Java 数组，有可能为空，也可能不为空。</li></ul><h2 id="7-nullability-注解"><a class="markdownIt-Anchor" href="#7-nullability-注解"></a> 7. Nullability 注解</h2><p>使用了注解表明 nullability 的 Platform Type 会被当做真正的 Kotlin 变量来处理。</p><p>Kotlin 目前支持以下注解：</p><ul><li>JetBrains (<code>@Nullable</code> and <code>@NotNull</code> from the <code>org.jetbrains.annotations package</code>)</li><li>Android (<code>com.android.annotations</code> and <code>android.support.annotations</code>)</li><li>JSR-305 (<code>javax.annotation</code>)</li><li>FindBugs (<code>edu.umd.cs.findbugs.annotations</code>)</li><li>Eclipse (<code>org.eclipse.jdt.annotation</code>)</li><li>Lombok (<code>lombok.NonNull</code>).</li></ul><h2 id="8-类型的对应关系"><a class="markdownIt-Anchor" href="#8-类型的对应关系"></a> 8. 类型的对应关系</h2><p>由于 Kotlin 中没有原始类型，所以对于 Java 的原始类型，会被自动转换成对应的 Kotlin 类。</p><p>这个转换只会发生在<strong>编译期间</strong>，在运行期间是不变的，会保持 Platfrom Type。</p><table><thead><tr><th>Java type</th><th>Kotlin type</th></tr></thead><tbody><tr><td><code>byte</code></td><td><code>kotlin.Byte</code></td></tr><tr><td><code>short</code></td><td><code>kotlin.Short</code></td></tr><tr><td><code>int</code></td><td><code>kotlin.Int</code></td></tr><tr><td><code>long</code></td><td><code>kotlin.Long</code></td></tr><tr><td><code>char</code></td><td><code>kotlin.Char</code></td></tr><tr><td><code>float</code></td><td><code>kotlin.Float</code></td></tr><tr><td><code>double</code></td><td><code>kotlin.Double</code></td></tr><tr><td><code>boolean</code></td><td><code>kotlin.Boolean</code></td></tr></tbody></table><p>一些非原始类型的类也会被转换</p><table><thead><tr><th>Java type</th><th>Kotlin type</th></tr></thead><tbody><tr><td><code>java.lang.Object</code></td><td><code>kotlin.Any!</code></td></tr><tr><td><code>java.lang.Cloneable</code></td><td><code>kotlin.Cloneable!</code></td></tr><tr><td><code>java.lang.Comparable</code></td><td><code>kotlin.Comparable!</code></td></tr><tr><td><code>java.lang.Enum</code></td><td><code>kotlin.Enum!</code></td></tr><tr><td><code>java.lang.Annotation</code></td><td><code>kotlin.Annotation!</code></td></tr><tr><td><code>java.lang.Deprecated</code></td><td><code>kotlin.Deprecated!</code></td></tr><tr><td><code>java.lang.Void</code></td><td><code>kotlin.Nothing!</code></td></tr><tr><td><code>java.lang.CharSequence</code></td><td><code>kotlin.CharSequence!</code></td></tr><tr><td><code>java.lang.String</code></td><td><code>kotlin.String!</code></td></tr><tr><td><code>java.lang.Number</code></td><td><code>kotlin.Number!</code></td></tr><tr><td><code>java.lang.Throwable</code></td><td><code>kotlin.Throwable!</code></td></tr></tbody></table><p>集合类型在 Kotlin 有可变和不可变两种类型，<br>所以 Java 的集合类型也会进行相应的转换。</p><table><thead><tr><th>Java type</th><th>Kotlin read-only type</th><th>Kotlin mutable type</th><th>Loaded platform type</th></tr></thead><tbody><tr><td><code>Iterator&lt;T&gt;</code></td><td><code>Iterator&lt;T&gt;</code></td><td><code>MutableIterator&lt;T&gt;</code></td><td><code>(Mutable)Iterator&lt;T&gt;!</code></td></tr><tr><td><code>Iterable&lt;T&gt;</code></td><td><code>Iterable&lt;T&gt;</code></td><td><code>MutableIterable&lt;T&gt;</code></td><td><code>(Mutable)Iterable&lt;T&gt;!</code></td></tr><tr><td><code>Collection&lt;T&gt;</code></td><td><code>Collection&lt;T&gt;</code></td><td><code>MutableCollection&lt;T&gt;</code></td><td><code>(Mutable)Collection&lt;T&gt;!</code></td></tr><tr><td><code>Set&lt;T&gt;</code></td><td><code>Set&lt;T&gt;</code></td><td><code>MutableSet&lt;T&gt;</code></td><td><code>(Mutable)Set&lt;T&gt;!</code></td></tr><tr><td><code>List&lt;T&gt;</code></td><td><code>List&lt;T&gt;</code></td><td><code>MutableList&lt;T&gt;</code></td><td><code>(Mutable)List&lt;T&gt;!</code></td></tr><tr><td><code>ListIterator&lt;T&gt;</code></td><td><code>ListIterator&lt;T&gt;</code></td><td><code>MutableListIterator&lt;T&gt;</code></td><td><code>(Mutable)ListIterator&lt;T&gt;!</code></td></tr><tr><td><code>Map&lt;K, V&gt;</code></td><td><code>Map&lt;K, V&gt;</code></td><td><code>MutableMap&lt;K, V&gt;</code></td><td><code>(Mutable)Map&lt;K, V&gt;!</code></td></tr><tr><td><code>Map.Entry&lt;K, V&gt;</code></td><td><code>Map.Entry&lt;K, V&gt;</code></td><td><code>MutableMap.MutableEntry&lt;K,V&gt;</code></td><td><code>(Mutable)Map.(Mutable)Entry&lt;K, V&gt;!</code></td></tr></tbody></table><p>同样的，Java 的数组也会进行转换</p><table><thead><tr><th>Java type</th><th>Kotlin type</th></tr></thead><tbody><tr><td><code>int[]</code></td><td><code>kotlin.IntArray!</code></td></tr><tr><td><code>String[]</code></td><td><code>kotlin.Array&lt;(out) String&gt;!</code></td></tr></tbody></table><h2 id="9-java-泛型"><a class="markdownIt-Anchor" href="#9-java-泛型"></a> 9. Java 泛型</h2><p>Kotlin 中的泛型系统和 Java 有些不同，所以当使用的 Java 代码存在泛型时，做如下转换：</p><ul><li><p>Java 泛型通配符被转换成类型预测</p><ul><li><code>Foo&lt;? extends Bar&gt;</code> 转换为 <code>Foo&lt;out Bar!&gt;!</code></li><li><code>Foo&lt;? super Bar&gt;</code> 转换为 <code>Foo&lt;in Bar!&gt;!</code></li></ul></li><li><p>Java 的原始类型被转换成星形预测</p><ul><li><code>List</code> 转换为 <code>List&lt;*&gt;!</code>，也就是 <code>List&lt;out Any?&gt;!</code></li></ul></li></ul><p>和 Java 一样，Kotlin 的泛型在运行期间是不会保留的。<br>也就是说对象在构建的时候不会携带泛型的真正类型的信息。<br>也就说说 Kotlin 不能区分 <code>ArrayList&lt;Integer&gt;</code> 和 <code>ArrayList&lt;Character&gt;</code>。</p><p>这限制了 <code>is</code> 语句的使用，对于泛型，<code>is</code> 只能用于星形预测类型的检查，而不能应用于其他普通泛型类型的检查。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> List&lt;<span class="built_in">Int</span>&gt;) <span class="comment">// Error: cannot check if it is really a List of Ints</span></span><br><span class="line"><span class="comment">// but</span></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> List&lt;*&gt;) <span class="comment">// OK: no guarantees about the contents of the list</span></span><br></pre></td></tr></table></figure><h2 id="10-java-数组"><a class="markdownIt-Anchor" href="#10-java-数组"></a> 10. Java 数组</h2><p>与 Java 不同，数组在 Kotlin 中是不可变的。<br>也就是说 Kotlin 不允许将 <code>Array&lt;Int&gt;</code> 赋予 <code>Array&lt;Any&gt;</code>，这避免了一些运行期间的错误。</p><p>同样的，Kotlin 也不允许一个子类的数组传入一个超类数组的形参中。</p><p>在 Java 平台中，使用原生类型的数组能避免装箱和拆箱所带来的性能损失；<br>但是在 Kotlin 中，这些细节被隐藏了起来，所以在调用 Java 代码时就需要一些特殊方法来进行沟通。</p><p>Kotlin 对此为每个原始类型都提供了一个对应的数组类型，例如 <code>IntArray</code> <code>LongArray</code> <code>CharArray</code> 等，这些类和 <code>Array</code> 类<strong>没有关系</strong>。</p><p>在编译时，这些数组类型会被编译为 Java 的原生类型数组，以提高性能。</p><blockquote><p><code>IntArray</code> 和 <code>Array&lt;Int&gt;</code> 的区别：</p></blockquote><blockquote><p><code>IntArray</code> 相当于 Java 中的 <code>int[]</code>，不进行装箱和拆箱操作；<br><code>Array&lt;Int&gt;</code> 相当于 Java 中的 <code>Integer[]</code>，进行装箱和拆箱操作。</p></blockquote><blockquote><p>see <span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzUyNTM2MjYvNTczMDY0MQ==" title="http://stackoverflow.com/a/35253626/5730641">here<i class="fa fa-external-link"></i></span></p></blockquote><p>所以对于一个接受 <code>int[]</code> 的 Java 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaArrayExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeIndices</span><span class="params">(<span class="keyword">int</span>[] indices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// code here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>IntArray</code> 将参数传入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> javaObj = JavaArrayExample()</span><br><span class="line"><span class="keyword">val</span> array = intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">javaObj.removeIndices(array)  <span class="comment">// passes int[] to method</span></span><br></pre></td></tr></table></figure><p>当代码被编译为 JVM 字节码时，编译器会对以上类型进行优化，取消 getter 和 setter 的使用，而是<strong>直接取值赋值</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">array[x] = array[x] * <span class="number">2</span> <span class="comment">// no actual calls to get() and set() generated</span></span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> array) <span class="comment">// no iterator created</span></span><br><span class="line">  print(x)</span><br></pre></td></tr></table></figure><p>同样，在遍历这样的一个数组时，不会创建 <code>iterator</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> array.indices) <span class="comment">// no iterator created</span></span><br><span class="line">  array[i] += <span class="number">2</span></span><br></pre></td></tr></table></figure><p>最后，在 <code>in</code> 语句中，对于这样的数组也不会调用 <code>contains()</code> 方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i <span class="keyword">in</span> array.indices) &#123; <span class="comment">// same as (i &gt;= 0 &amp;&amp; i &lt; array.size)</span></span><br><span class="line">  print(array[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-java-不定参数"><a class="markdownIt-Anchor" href="#11-java-不定参数"></a> 11. Java 不定参数</h2><p>对于 Java 的不定参数，你需要像 Kotlin 中一样，使用 spread operator(<code>*</code>) 来传入一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaArrayExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeIndices</span><span class="params">(<span class="keyword">int</span>... indices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// code here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> javaObj = JavaArray()</span><br><span class="line"><span class="keyword">val</span> array = intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">javaObj.removeIndicesVarArg(*array)</span><br></pre></td></tr></table></figure><h2 id="12-操作符"><a class="markdownIt-Anchor" href="#12-操作符"></a> 12. 操作符</h2><p>由于 Java 没有操作符重载，所以 Kotlin 允许将任何的拥有正确命名和函数参数的 Java 方法<strong>当做操作符重载使用</strong>。</p><p>不过不允许在中缀函数中调用 Java 方法。</p><h2 id="13-已检查异常"><a class="markdownIt-Anchor" href="#13-已检查异常"></a> 13. 已检查异常</h2><p>由于 Kotlin 没有已检查异常，所以 Kotlin 不会强制要求你进行异常捕获；<br>即使你调用的 Java 方法声明了已检查异常<strong>也一样</strong>。</p><h2 id="14-java-object-类方法"><a class="markdownIt-Anchor" href="#14-java-object-类方法"></a> 14. Java Object 类方法</h2><p>引用 Java 代码时，Java 的 <code>Object</code> 类会被转换成 <code>Any</code>；<br>但是 <code>Any</code> 类只声明了 <code>toString()</code>，<code>hashCode()</code> 和 <code>equals()</code>方法，<br>所以，为了完整实现 <code>Object</code> 类的功能，我们使用<strong>扩展</strong>来实现。</p><h3 id="141-wait-和-notify"><a class="markdownIt-Anchor" href="#141-wait-和-notify"></a> 14.1 <code>wait()</code> 和 <code>notify()</code></h3><p>《Effective Java》第 69 条中强调：尽量使用多线程工具而不是使用 <code>wait()</code> 和 <code>notify()</code> 方法；<br>所以 <code>Any</code> 类中并没有实现这两个方法。</p><p>但是如果你真的需要使用这两个方法，可以把 <code>Any</code> 造型为 <code>Object</code> 来使用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(foo <span class="keyword">as</span> java.lang.Object).wait()</span><br></pre></td></tr></table></figure><h3 id="142-getclass-方法"><a class="markdownIt-Anchor" href="#142-getclass-方法"></a> 14.2 <code>getClass()</code> 方法</h3><p>在 Kotlin 中，我们使用 <code>javaClass</code> 变量来获取对应的 <code>Class</code> 变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fooClass = foo.javaClass</span><br></pre></td></tr></table></figure><p>对于 Java 中的 <code>Foo.class</code>，Kotlin 中使用 <code>Foo::class.java</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fooClass = Foo::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br></pre></td></tr></table></figure><h3 id="143-clone-方法"><a class="markdownIt-Anchor" href="#143-clone-方法"></a> 14.3 <code>clone()</code> 方法</h3><p>要重载 <code>clone()</code> 方法，你的类必须实现 <code>kotlin.Cloneable</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> : <span class="type">Cloneable &#123;</span></span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clone</span><span class="params">()</span></span>: Any &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要忘记 《Effective Java》的忠告，第 11 条：<strong>明智地重载 <code>clone()</code> 方法</strong></p><h3 id="144-finalize-方法"><a class="markdownIt-Anchor" href="#144-finalize-方法"></a> 14.4 <code>finalize()</code> 方法</h3><p>要重载 <code>finalize()</code> 方法，你只需要声明它即可，而不需要使用 <code>override</code> 。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">finalize</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// finalization logic</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>finalize()</code> 不能是 <code>private</code> 的。</p><h2 id="15-继承-java-类"><a class="markdownIt-Anchor" href="#15-继承-java-类"></a> 15. 继承 Java 类</h2><p>只能继承一个基类；<br>可以实现多个接口。</p><h2 id="16-访问静态成员"><a class="markdownIt-Anchor" href="#16-访问静态成员"></a> 16. 访问静态成员</h2><p>Java 类的静态成员会被自动转换成这个类的伴生对象。</p><p>我们不能直接将这个伴生对象作为参数或者变量；<br>但是我们依旧可以显式的调用它的静态成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Character.isLetter(a)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-java-反射"><a class="markdownIt-Anchor" href="#17-java-反射"></a> 17. Java 反射</h2><p>Java 的反射机制可以应用于 Kotlin 上，反之亦然。<br>刚才也提到，你可以使用 <code>instance.javaClass</code> 或者 <code>ClassName::class.java</code> 来使用 Java 的反射机制。</p><p>同样的，Kotlin 也支持使用 Java 方法来生成 getter、setter 和 backing field。<br><code>KProperty</code> 指代 Java 的字段，<code>KFunction</code> 指代 Java 方法，反之亦然。</p><h2 id="18-sam-方法"><a class="markdownIt-Anchor" href="#18-sam-方法"></a> 18. SAM 方法</h2><p>和 Java 8 一样，Kotlin 也支持 SAM 类型，这意味着 Kotlin 的直接函数定义（lambda 函数主体）可以被转换为一个只有单个方法的接口实现，只要函数接口能够对应的上的话，转换就能成功。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> runnable = Runnable &#123; println(<span class="string">"This runs in a runnable"</span>) &#125;</span><br></pre></td></tr></table></figure><p>也可以应用于方法调用中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> executor = ThreadPoolExecutor()</span><br><span class="line"><span class="comment">// Java signature: void execute(Runnable command)</span></span><br><span class="line">executor.execute &#123; println(<span class="string">"This runs in a thread pool"</span>) &#125;</span><br></pre></td></tr></table></figure><p>如果一个 Java 类有多个这种方法的重载，那么我们可以通过对 SAM 类型指定对应的转换器。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executor.execute(Runnable &#123; println(<span class="string">"This runs in a thread pool"</span>) &#125;)</span><br></pre></td></tr></table></figure><p>注意，SAM 只能应用于<strong>接口</strong>，而不能应用于抽象类，即使这个类只有一个方法。</p><p>还有，这个特性只支持 Java 代码，<br>Kotlin 拥有相应的函数类型，所以将其转换为 Kotlin 接口的实现是非必须的，所以也没有实现这个特性。</p><h2 id="19-使用-jni"><a class="markdownIt-Anchor" href="#19-使用-jni"></a> 19. 使用 JNI</h2><p>通过 <code>external</code> 关键字来指明一个方法会调用 native 的 C 或者 C++ 代码。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">external</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Double</span></span><br></pre></td></tr></table></figure><h2 id="20-其他方面"><a class="markdownIt-Anchor" href="#20-其他方面"></a> 20. 其他方面</h2><p>在其他方面，Kotlin 和 Java 工作程序一致。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 集合</title>
      <link href="//Kotlin/Kotlin%20%E9%9B%86%E5%90%88/"/>
      <url>//Kotlin/Kotlin%20%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>和许多其他语言不同的是， Kotlin 将集合分成了<strong>可变</strong>和<strong>不可变</strong>两大类。</p><p>理解和区分可变集合和不可变集合是很重要的，Kotlin 致力于尽量将事务显式化，所以 Kotlin 对这两种集合进行了区分。</p><a id="more"></a><h2 id="2-与-java-的区别"><a class="markdownIt-Anchor" href="#2-与-java-的区别"></a> 2. 与 Java 的区别</h2><p>与 Java 相比的很大的不同点在于，Kotlin 的 <code>List</code> 是 <code>List&lt;out T&gt;</code>，而不是 <code>List&lt;T&gt;</code>，也就是说 Kotlin 的 <code>List</code> 是只读的，而对应的 <code>MutableList&lt;T&gt;</code> 才是可写的。</p><p>其他的集合类型如 <code>Set</code>、<code>Map</code> 同样继承了这个特点。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers: MutableList&lt;<span class="built_in">Int</span>&gt; = mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> readOnlyView: List&lt;<span class="built_in">Int</span>&gt; = numbers</span><br><span class="line">println(numbers)        <span class="comment">// prints "[1, 2, 3]"</span></span><br><span class="line">numbers.add(<span class="number">4</span>)</span><br><span class="line">println(readOnlyView)   <span class="comment">// prints "[1, 2, 3, 4]"</span></span><br><span class="line">readOnlyView.clear()    <span class="comment">// -&gt; does not compile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> strings = hashSetOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>)</span><br><span class="line">assert(strings.size == <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="3-创建"><a class="markdownIt-Anchor" href="#3-创建"></a> 3. 创建</h2><p>Kotlin 没有专门的语法或者构造器来构建一个集合类型；反之，Kotlin 使用标准库中的方法对集合类型进行构建，比如说 <code>listOf()</code> <code>mutableListOf()</code> <code>setOf()</code> <code>mutableSetOf()</code></p><p>需要注意的是，上面的 <code>readOnlyView</code> 引用指向的是<strong>同一个列表</strong>，如果一个列表只有一个引用指向它，而且该引用是不可变类型的话，那么这个列表就是<strong>不可变的</strong>。</p><blockquote><p>也就说一个不可变的集合可以接受一个可变集合的引用</p></blockquote><p>生成这样的一个列表的简易方法是：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> items = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>目前，<code>listOf()</code> 方法返回的是一个 array list，以后可能会采用更为节省内存的实现方法。</p></blockquote><p>需要注意的是，不可变集合是<strong>协变的</strong>，也就是说一个 <code>List&lt;Shape&gt;</code> 可以接受一个 <code>List&lt;Rectangle&gt;</code> 变量，如果 <code>Rectangle</code> 是继承于 <code>Shape</code> 的话。</p><p>相反，可变类型的集合没有这个特性。</p><h2 id="4-返回一个只读列表的快照"><a class="markdownIt-Anchor" href="#4-返回一个只读列表的快照"></a> 4. 返回一个只读列表的快照</h2><p>有时候，虽然类中的列表在不断变动，但是你只想给调用者呈现一个<strong>某时刻的只读列表</strong>，可以使用如下方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _items = mutableListOf&lt;String&gt;()</span><br><span class="line">    <span class="keyword">val</span> items: List&lt;String&gt; <span class="keyword">get</span>() = _items.toList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>toList()</code> 方法只是简单的复制了列表中的元素，而且保证它是只读的，这样调用者就可以得到调用时列表的状态，而且是只读的。</p><h2 id="5-其他有用的方法"><a class="markdownIt-Anchor" href="#5-其他有用的方法"></a> 5. 其他有用的方法</h2><p>列表类中还拥有其他十分有用的扩展方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> items = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">items.first() == <span class="number">1</span></span><br><span class="line">items.last() == <span class="number">4</span></span><br><span class="line">items.filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;   <span class="comment">// returns [2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rwList = mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">rwList.requireNoNulls()        <span class="comment">// returns [1, 2, 3]</span></span><br><span class="line"><span class="keyword">if</span> (rwList.none &#123; it &gt; <span class="number">6</span> &#125;) println(<span class="string">"No items above 6"</span>)  <span class="comment">// prints "No items above 6"</span></span><br><span class="line"><span class="keyword">val</span> item = rwList.firstOrNull()</span><br></pre></td></tr></table></figure><p>同样，<code>Map</code> 也继承了这个特点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> readWriteMap = hashMapOf(<span class="string">"foo"</span> to <span class="number">1</span>, <span class="string">"bar"</span> to <span class="number">2</span>)</span><br><span class="line">println(readWriteMap[<span class="string">"foo"</span>])  <span class="comment">// prints "1"</span></span><br><span class="line"><span class="keyword">val</span> snapshot: Map&lt;String, <span class="built_in">Int</span>&gt; = HashMap(readWriteMap)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 高阶函数和 Lambda</title>
      <link href="//Kotlin/Kotlin%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C%20Lambda/"/>
      <url>//Kotlin/Kotlin%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C%20Lambda/</url>
      
        <content type="html"><![CDATA[<h2 id="1-高阶函数"><a class="markdownIt-Anchor" href="#1-高阶函数"></a> 1. 高阶函数</h2><p>Kotlin 允许函数接受一个<strong>函数引用</strong>作为参数，这样的函数被称作<strong>高阶函数</strong>。</p><p>这使得回调机制在 Kotlin 中更容易被实现。</p><a id="more"></a><h3 id="11-声明"><a class="markdownIt-Anchor" href="#11-声明"></a> 1.1 声明</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">lock</span><span class="params">(lock: <span class="type">Lock</span>, body: ()</span></span> -&gt; T): T &#123;</span><br><span class="line">  lock.lock()</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> body()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这个例子中，<code>body</code> 就是一个函数引用，它的类型是 <code>() -&gt; T</code>，表示该函数不接受参数，返回类型是 <code>T</code>。</p><p>可以看到，在这个高阶函数中，可以直接使用 <code>body()</code> 对 <code>body</code> 函数进行调用。</p><h3 id="12-调用"><a class="markdownIt-Anchor" href="#12-调用"></a> 1.2 调用</h3><p>调用高阶函数需要传入另一个函数作为其参数，这是 Kotlin 反射机制中的一部分。</p><p>Kotlin 使用<strong>函数引用</strong>来指明一个函数对象，其形式是 <code>::functionName</code>，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toBeSynchronized</span><span class="params">()</span></span> = sharedResource.operation()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = lock(lock, ::toBeSynchronized)</span><br></pre></td></tr></table></figure><p>这个例子中 <code>::toBeSynchronized</code> 就是函数 <code>toBeSynchronized()</code> 的函数引用。</p><p>除此之外，高阶函数还可以接受一个 Lambda 表达式作为其函数参数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = lock(lock, &#123; sharedResource.operation() &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Lambda 会在接下来的章节介绍，但是为了更好地理解高阶函数，先来几点简单的概述：</p></blockquote><ul><li>Lambda 表达式无论何时都使用 <code>{}</code> 和其他表达式分隔</li><li><code>-&gt;</code> 之前的是 Lambda 表达式的参数</li><li><code>-&gt;</code> 之后的是 Lambda 表达式的主体</li></ul><p>特别的，如果一个高阶函数的函数引用参数在最后一位，那么该参数能在括号外被指定。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock (lock) &#123;</span><br><span class="line">  sharedResource.operation()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个高阶函数的例子是 <code>map()</code> 函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> List<span class="type">&lt;T&gt;</span>.<span class="title">map</span><span class="params">(transform: (<span class="type">T</span>)</span></span> -&gt; R): List&lt;R&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> result = arrayListOf&lt;R&gt;()</span><br><span class="line">  <span class="keyword">for</span> (item <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">    result.add(transform(item))</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以这样被调用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> doubled = ints.map &#123; it -&gt; it * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>注意到，如果高阶函数只有唯一的一个参数，而且这个参数是一个函数类型的，那么调用它的圆括号也可以被省略。</p><h3 id="13-it-参数"><a class="markdownIt-Anchor" href="#13-it-参数"></a> 1.3 <code>it</code> 参数</h3><p>如果一个 Lambda 表达式只拥有一个参数，那么其参数的声明和箭头符号(<code>-&gt;</code>)都可以省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ints.map &#123; it * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>这个唯一的参数被命名为 <code>it</code>，这是一个隐式的默认单参数名称。<br>当 Lambda 表达式像上面那样被调用时，不能使用 <code>it</code> 以外的名称来指代唯一的参数。</p><h2 id="2-lambda-表达式"><a class="markdownIt-Anchor" href="#2-lambda-表达式"></a> 2. Lambda 表达式</h2><p>Lambda 表达式是一种<strong>匿名的函数</strong>，它只有<strong>文字上的函数定义</strong>，而没有实际的名称。</p><p>也就是说 Lambda 表达式是一种没有被声明，却会被立即执行的函数。</p><p>考虑如下的高阶函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(strings, &#123; a, b -&gt; a.length &lt; b.length &#125;)</span><br></pre></td></tr></table></figure><p>其中的 Lambda 表达式和 <code>compare()</code> 方法是等价的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">compare</span><span class="params">(a: <span class="type">String</span>, b: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> = a.length &lt; b.length</span><br></pre></td></tr></table></figure><blockquote><p>注意到，lambda 是一个表达式，所以它最后一个语句的执行结果就是它的返回值。</p></blockquote><h3 id="21-函数类型"><a class="markdownIt-Anchor" href="#21-函数类型"></a> 2.1 函数类型</h3><p>对于上面的 <code>max()</code> 方法，定义如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">max</span><span class="params">(collection: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;, less: (<span class="type">T</span>, T)</span></span> -&gt; <span class="built_in">Boolean</span>): T? &#123;</span><br><span class="line">  <span class="keyword">var</span> max: T? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">for</span> (it <span class="keyword">in</span> collection)</span><br><span class="line">    <span class="keyword">if</span> (max == <span class="literal">null</span> || less(max, it))</span><br><span class="line">      max = it</span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它是一个高阶函数，其中， <code>less</code> 的类型是一个<strong>函数</strong><code>(T, T) -&gt; Boolean</code>，意味着 <code>less</code> 函数接受两个 <code>T</code> 类型的参数，返回布尔值。</p><p>对于函数类型，除了上面的这种声明方法外，也可以给函数类型中的各个变量赋上名称。这将有助于说明该函数类型的调用方法和作用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> compare: (x: T, y: T) -&gt; <span class="built_in">Int</span> = ...</span><br></pre></td></tr></table></figure><h3 id="22-lambda-表达式的语法"><a class="markdownIt-Anchor" href="#22-lambda-表达式的语法"></a> 2.2 Lambda 表达式的语法</h3><p>一个 lambda 表达式总是在花括号内；<br>参数的定义在括号之内，<code>-&gt;</code> 之前，而且可以省略类型；<br>函数的主题在 <code>-&gt;</code> 之后。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sum: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123; x, y -&gt; x + y &#125;</span><br></pre></td></tr></table></figure><p>同时，只有一个参数的 lambda 表达式可以直接省略参数声明和 <code>-&gt;</code></p><p>如果高阶函数的函数类型参数在最后一位，那么 lambda 表达式可以在圆括号之外。</p><h3 id="23-匿名函数"><a class="markdownIt-Anchor" href="#23-匿名函数"></a> 2.3 匿名函数</h3><p>lambda 表达式语法中缺少对返回类型的指定，<br>在通常情况下，这是非必须的，因为大多数的返回类型都可以被自动推断出来。</p><p>当然，如果你需要<strong>显式地声明返回类型</strong>，可以使用<strong>匿名函数</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fun</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = x + y</span><br></pre></td></tr></table></figure><p>一个匿名函数和常规的函数声明很像，只不过它的名字被省略了。</p><p>匿名函数除了表达式之外，也可以使用语句块作为函数主体。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fun</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当匿名函数的参数类型能够被推断得出时，其参数类型可以被省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ints.filter(<span class="function"><span class="title">fun</span><span class="params">(item)</span></span> = item &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>同样的，匿名函数的返回类型也可以不显式指明，直接由函数主体推断得出。</p><p>需要注意的是，匿名函数的参数<strong>必须在圆括号之中</strong>，只有 Lambda 表达式材才允许在圆括号外传递参数。</p><p>匿名函数和 Lambda 表达式的一个主要区别是：<br>在 Lambda 表达式中的 <code>return</code> 语句会从其外部函数返回（即对应的高阶函数）；<br>而在匿名函数中的 <code>return</code> 将会在匿名函数自身返回。</p><blockquote><p>实际上，<code>return</code> 所对应的是<strong>最近的 <code>fun</code> 函数</strong>（这称为 local return），<br>但是根据<span class="exturl" data-url="aHR0cHM6Ly9kaXNjdXNzLmtvdGxpbmxhbmcub3JnL3QvcmV0dXJuLWZyb20tb3V0ZXItZnVuY3Rpb24vNTkwLzI=" title="https://discuss.kotlinlang.org/t/return-from-outer-function/590/2">这个帖子<i class="fa fa-external-link"></i></span>，<strong>非本地返回特性</strong>只支持内联函数，<br>所以从一个非内联的 lambda 使用 <code>return</code>，是不可能的。</p></blockquote><blockquote><p>但是匿名函数可以进行这种操作，当你需要从 lambda 使用 <code>return</code> 时，使用匿名函数来代替它。</p></blockquote><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL0tvdGxpbi9jb21tZW50cy8zeXlieWYvcmV0dXJuaW5nX2Zyb21fbGFtYmRhX2Z1bmN0aW9ucy8=" title="https://www.reddit.com/r/Kotlin/comments/3yybyf/returning_from_lambda_functions/">https://www.reddit.com/r/Kotlin/comments/3yybyf/returning_from_lambda_functions/<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="24-闭包"><a class="markdownIt-Anchor" href="#24-闭包"></a> 2.4 闭包</h3><p>闭包指的是内部函数可以访问外部变量，Kotlin 的 lambda 表达式、匿名函数、局部函数和 object expression 都支持这一特性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">ints.filter &#123; it &gt; <span class="number">0</span> &#125;.forEach &#123;</span><br><span class="line">  sum += it</span><br><span class="line">&#125;</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>而且和 Java 不同的是，被闭包捕获的外部变量是可以改变的。</p><h3 id="25-带接收者的函数"><a class="markdownIt-Anchor" href="#25-带接收者的函数"></a> 2.5 带接收者的函数</h3><p>Kotlin 还支持定义一个带<strong>接收者</strong>的函数字面量，这样就可以在 lambda 表达式和匿名函数内部调用接收者的成员。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum : <span class="built_in">Int</span>.(other: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span></span><br></pre></td></tr></table></figure><blockquote><p>与扩展函数的区别：带接收者的函数没有名字，只能通过匿名函数或者 lambda 表达式来使用</p></blockquote><p>这里定义了一个 <code>sum()</code> 函数，它的接收者是一个 <code>Int</code> 对象。</p><p>那么就可以像这样调用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.sum(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>通过匿名函数，我们可以定义一个带接收者函数的变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sum = <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">this</span> + other</span><br></pre></td></tr></table></figure><p>当接收者能从上下文被推断出来时，可以使用 lambda 表达式来调用接收者成员。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTML</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">body</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">html</span><span class="params">(<span class="keyword">init</span>: <span class="type">HTML</span>.()</span></span> -&gt; <span class="built_in">Unit</span>): HTML &#123;</span><br><span class="line">  <span class="keyword">val</span> html = HTML()  <span class="comment">// create the receiver object</span></span><br><span class="line">  html.<span class="keyword">init</span>()        <span class="comment">// pass the receiver object to the lambda</span></span><br><span class="line">  <span class="keyword">return</span> html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html &#123;       <span class="comment">// lambda with receiver begins here</span></span><br><span class="line">    body()   <span class="comment">// calling a method on the receiver object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP</title>
      <link href="//PHP/PHP/"/>
      <url>//PHP/PHP/</url>
      
        <content type="html"><![CDATA[<h2 id="1-basic"><a class="markdownIt-Anchor" href="#1-basic"></a> 1. Basic</h2><ol><li><p>Begins with <code>&lt;?php</code> and ends with <code>?&gt;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> strlen(<span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Comments</p><blockquote><p><code>//</code> and <code>#</code> for a single line.<br><code>/* */</code> for block.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Single line Comment.</span></span><br><span class="line"><span class="comment"># Also single line.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">And comment block,</span></span><br><span class="line"><span class="comment">Cross</span></span><br><span class="line"><span class="comment">multiple</span></span><br><span class="line"><span class="comment">lines.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Case Sensitivity</p></li></ol><ul><li><p>All the <code>function()</code> <code>class</code> and the <code>key word</code> is <strong>NOt cAse SenSiTivE</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// They all do the same things.</span></span><br><span class="line"><span class="keyword">ECHO</span> <span class="string">"Hello World!&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello World!&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">EcHo</span> <span class="string">"Hello World!&lt;br&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>But the <code>$variable</code> is <strong>CASE SENSITIVE</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Only the FIRST statement can do the right output.</span></span><br><span class="line">$color=<span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"My car is "</span> . $color . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"My house is "</span> . $COLOR . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"My boat is "</span> . $coLOR . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="2-variable"><a class="markdownIt-Anchor" href="#2-variable"></a> 2. Variable</h2><ol><li><p>The <code>$variable</code> begins with the <code>$</code> char.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// They are all variables</span></span><br><span class="line">$x = <span class="number">5</span>;</span><br><span class="line">$txt = <span class="string">"Hello, World!"</span>;</span><br><span class="line">$y = <span class="number">10.5</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Weak Type</p></li></ol><blockquote><p>PHP is an weak type language, you do not have to announce the type when you create the variable<br>As the above, <code>$x</code> is an <strong>int</strong>, <code>$txt</code> is an <strong>string</strong> and <code>$y</code> is an <strong>float</strong></p></blockquote><ol start="3"><li>Scope</li></ol><ul><li>Local<br>- The variable can only be konwn inside the function or the current statement</li><li>Global<br>- The variable can be konwn at any where</li><li>Static<br>- The variable whose value can be maintain</li></ul><ol start="4"><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit2 使用简明手册</title>
      <link href="//Android/Retrofit/Retrofit2%20%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%89%8B%E5%86%8C/"/>
      <url>//Android/Retrofit/Retrofit2%20%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>Retrofit 是 Square 公司出品的 Android 开源网络框架，使用注解和代理实现各项 HTTP 操作和 body 解析处理等。</p><p>Retrofit2 通过与 Square 公司的另一开源库 OkHttp3 合并，由 OkHttp 进行 HTTP 操作，重定向响应，以及缓存支持。</p><a id="more"></a><h2 id="2-初始化设置"><a class="markdownIt-Anchor" href="#2-初始化设置"></a> 2. 初始化设置</h2><h3 id="21-添加依赖"><a class="markdownIt-Anchor" href="#21-添加依赖"></a> 2.1 添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.squareup.retrofit2:retrofit:2.1.0&apos;</span><br></pre></td></tr></table></figure><p>注意现在已经是 <strong>Retrofit2</strong> 的年代了。</p><h3 id="22-配置-proguard"><a class="markdownIt-Anchor" href="#22-配置-proguard"></a> 2.2 配置 Proguard</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Platform calls Class.forName on types which do not exist on Android to determine platform.</span><br><span class="line">-dontnote retrofit2.Platform</span><br><span class="line"># Platform used when running on RoboVM on iOS. Will not be used at runtime.</span><br><span class="line">-dontnote retrofit2.Platform$IOS$MainThreadExecutor</span><br><span class="line"># Platform used when running on Java 8 VMs. Will not be used at runtime.</span><br><span class="line">-dontwarn retrofit2.Platform$Java8</span><br><span class="line"># Retain generic type information for use by reflection by converters and adapters.</span><br><span class="line">-keepattributes Signature</span><br><span class="line"># Retain declared checked exceptions for use by a Proxy instance.</span><br><span class="line">-keepattributes Exceptions</span><br></pre></td></tr></table></figure><h2 id="3-基本使用"><a class="markdownIt-Anchor" href="#3-基本使用"></a> 3. 基本使用</h2><h3 id="31-创建-apiservice-interface"><a class="markdownIt-Anchor" href="#31-创建-apiservice-interface"></a> 3.1 创建 ApiService interface</h3><p>创建一个 <code>interface</code>，用于储存需要进行的网络操作 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</span><br><span class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，方法的返回值是一个 <code>Call</code> 对象，泛型内部的 <code>List&lt;Repo&gt;</code> 是 GET 请求获取到的 HTTP Body 解析后的内容。<br>方法的参数通过注解来区分是 Request 的 URL 参数还是 Body 参数。</p><p>方法顶上的注解表明了该请求的 <strong>HTTP method</strong>，括号中的内容是请求<strong>所涉及到的 URL 部分</strong>。URL 的<strong>基础部分</strong>由 Retrofit 类构建时指定。</p><h3 id="32-构建-retrofit-类获取-apiservice-实例"><a class="markdownIt-Anchor" href="#32-构建-retrofit-类获取-apiservice-实例"></a> 3.2 构建 Retrofit 类，获取 ApiService 实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">    .baseUrl(<span class="string">"https://api.github.com/"</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">GitHubService service = retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure><h3 id="33-通过-apiservice-实例发起请求"><a class="markdownIt-Anchor" href="#33-通过-apiservice-实例发起请求"></a> 3.3 通过 ApiService 实例发起请求</h3><ol><li><p>发起同步请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos;</span><br><span class="line">repos.execute();</span><br></pre></td></tr></table></figure></li><li><p>发起异步请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos;</span><br><span class="line">repos.enqueue(<span class="keyword">new</span> CallBack());</span><br></pre></td></tr></table></figure></li></ol><h3 id="34-取消请求"><a class="markdownIt-Anchor" href="#34-取消请求"></a> 3.4 取消请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repos.cancel();</span><br></pre></td></tr></table></figure><h2 id="4-可变-url-和-get-请求参数"><a class="markdownIt-Anchor" href="#4-可变-url-和-get-请求参数"></a> 4. 可变 URL 和 GET 请求参数</h2><h3 id="41-可变-url"><a class="markdownIt-Anchor" href="#41-可变-url"></a> 4.1 可变 URL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</span><br><span class="line">Call&lt;List&lt;User&gt;&gt; groupList(<span class="meta">@Path</span>(<span class="string">"id"</span>) <span class="keyword">int</span> groupId);</span><br></pre></td></tr></table></figure><p>上面的 <code>id</code> 在程序运行时可能会动态变化，对于这种参数， retrofit2 采用 <code>{}</code> 将其包住进行区分，并在方法形参中使用 <strong>@Path</strong> 注解来指定动态参数。</p><h3 id="42-query-参数"><a class="markdownIt-Anchor" href="#42-query-参数"></a> 4.2 Query 参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</span><br><span class="line">Call&lt;List&lt;User&gt;&gt; groupList(<span class="meta">@Path</span>(<span class="string">"id"</span>) <span class="keyword">int</span> groupId, <span class="meta">@Query</span>(<span class="string">"sort"</span>) String sort);</span><br></pre></td></tr></table></figure><p>通过使用 <strong>@Query</strong> 注解来指定请求参数。</p><p>同时也可以直接在 URL 中添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"users/list?sort=desc"</span>)</span><br></pre></td></tr></table></figure><p>如果 query 参数过于复杂，可以使用 <code>Map</code> 对象来指定，此时需要使用 <strong>@QueryMap</strong> 注解来表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</span><br><span class="line">Call&lt;List&lt;User&gt;&gt; groupList(<span class="meta">@Path</span>(<span class="string">"id"</span>) <span class="keyword">int</span> groupId, <span class="meta">@QueryMap</span> Map&lt;String, String&gt; options);</span><br></pre></td></tr></table></figure><h2 id="5-通过-body-请求"><a class="markdownIt-Anchor" href="#5-通过-body-请求"></a> 5. 通过 Body 请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"users/new"</span>)</span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">createUser</span><span class="params">(@Body User user)</span></span>;</span><br></pre></td></tr></table></figure><p>POST 等方法均是通过 HTTP Body 来传输内容的， retrofit 中通过使用 <strong>@Body</strong> 注解来表示该参数通过 HTTP Body 来进行传输。</p><p>Body 的类型会通过转换器(converter)反序列化成对应的类，如果没有指定转换器，则只能使用 Okhttp 的 <strong>RequestBody</strong> 作为转换的对象。</p><h2 id="6-form-url-encode-数据"><a class="markdownIt-Anchor" href="#6-form-url-encode-数据"></a> 6. Form URL encode 数据</h2><p>使用 <strong>@FormUrlEncoded</strong> 注解来发送 <code>application/x-www-form-urlencoded</code> 类型的数据。</p><p>使用 <strong>@Field</strong> 注解来指示表单的项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"user/edit"</span>)</span><br><span class="line">Call&lt;User&gt; update: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">26</span></span><br></pre></td></tr></table></figure><blockquote><p><code>application/x-www-form-urlencoded</code> 和 <code>application/json</code> 的异同<br>前者说明，客户端会将表单参数通过 URL 加密传输，后者说明客户端会使用 HTTP Body 来传送 json。<br><code>application/x-www-form-urlendoced</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123; Name : &apos;John Smith&apos;, Age: 23&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>application/json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Name=John+Smith&amp;Age=23</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="7-上传文件"><a class="markdownIt-Anchor" href="#7-上传文件"></a> 7. 上传文件</h2><p>使用 <strong>@Multipart</strong> 注解来表示要上传文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"><span class="meta">@PUT</span>(<span class="string">"user/photo"</span>)</span><br><span class="line">Call&lt;User&gt; update: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">26</span></span><br></pre></td></tr></table></figure><h2 id="7-指定-header"><a class="markdownIt-Anchor" href="#7-指定-header"></a> 7. 指定 Header</h2><p>通过 <strong>@Header</strong> 注解来指定 HTTP Header</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Headers</span>(<span class="string">"Cache-Control: max-age=640000"</span>)</span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"widget/list"</span>)</span><br><span class="line">Call&lt;List&lt;Widget&gt;&gt; widgetList();</span><br></pre></td></tr></table></figure><p>这个方法只适合用于单独的一个或者几个 API 设置头，如果需要加入公有头，则需要使用 OkHttp 拦截器实现。</p><h2 id="8-指定转换器"><a class="markdownIt-Anchor" href="#8-指定转换器"></a> 8. 指定转换器</h2><p>retrofit 除了 okhttp 默认的 RequestBody 外，还提供了其他知名的序列化和反序列化的库用作转换器。<br>其中包括：</p><ul><li>Gson: <code>com.squareup.retrofit2:converter-gson</code></li><li>Jackson: <code>com.squareup.retrofit2:converter-jackson</code></li><li>Moshi: <code>com.squareup.retrofit2:converter-moshi</code></li><li>Protobuf: <code>com.squareup.retrofit2:converter-protobuf</code></li><li>Wire: <code>com.squareup.retrofit2:converter-wire</code></li><li>Simple XML: <code>com.squareup.retrofit2:converter-simplexml</code></li><li>Scalars (primitives, boxed, and String): <code>com.squareup.retrofit2:converter-scalars</code></li></ul><p>通过在构建 <code>Retorfit</code> 实例时，使用 <code>addConverterFactory()</code> 来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">    .baseUrl(<span class="string">"https://api.github.com"</span>)</span><br><span class="line">    .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">GitHubService service = retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure><hr><p>参考资料：</p><p>Retrofit 主页：<span class="exturl" data-url="aHR0cDovL3NxdWFyZS5naXRodWIuaW8vcmV0cm9maXQv" title="http://square.github.io/retrofit/">http://square.github.io/retrofit/<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Retrofit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network API</title>
      <link href="//Projects/MdzzProject/Network%20API/"/>
      <url>//Projects/MdzzProject/Network%20API/</url>
      
        <content type="html"><![CDATA[<h2 id="1-说明"><a class="markdownIt-Anchor" href="#1-说明"></a> 1. 说明</h2><p><strong>必须先看说明！！</strong></p><ol><li><p>所有的网络请求 API 均位于 <code>NetworkUtils</code> 类中，以静态方法形式呈现。</p></li><li><p>API 方法包括<strong>三个参数</strong>——发起请求的必要信息，一个结果回调监听器和一个错误回调监听器，并返回一个 <code>Request</code> 对象用于<strong>取消请求</strong></p><blockquote><p>如下，<code>registerInfo</code> 是存储注册信息的对象，<code>listener</code> 是结果监听器， <code>errorListener</code> 是错误监听器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">register</span><span class="params">(RegisterInfo registerInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Response.Listener listener,</span></span></span><br><span class="line"><span class="function"><span class="params">                    Response.ErrorListener errorListener)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>取消请求调用 <code>Request</code> 类的 <code>cancel()</code> 方法即可。</p></blockquote></li><li><p>API 方法中的两个监听器需要<strong>调用者自行实现</strong>对结果和错误的处理</p><p>如下是一个匿名类的监听器实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">register(registerInfo,</span><br><span class="line">    <span class="comment">// 这个是结果监听器</span></span><br><span class="line">    <span class="keyword">new</span> Response.Listener&lt;BaseResponse&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(BaseResponse response)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Do with response</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这个是错误监听器</span></span><br><span class="line">    <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Handle error</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>回调结果(<strong>Response</strong>)采用继承模型，所有网络结果均是或继承于<code>BaseResponse</code>，由其派生以增加相应字段。</p><p>即<strong>所有的回调结果都至少包含 <code>BaseResponse</code> 的字段</strong></p><blockquote><p><code>BaseResponse</code> 包括两个字段，<code>status</code> 和 <code>message</code>。</p></blockquote><blockquote><ul><li>BaseResponse<ul><li><code>status</code>(<strong>boolean</strong>): 用于表示请求的成功状态</li><li><code>message</code>(<strong>String</strong>): 用于描述结果信息，一般来说将其直接呈现给用户即可</li></ul></li></ul></blockquote><p>其余具有特殊相应字段的结果均继承自 <code>BaseResponse</code>，通过派生增加新字段。</p><blockquote><p>如登陆的回调结果需要包含 token，则通过建立新的 <code>LoginResponse</code> 继承 <code>BaseResponse</code> ，在 <code>LoginResponse</code> 中增加 <code>token</code> 字段。</p></blockquote><blockquote><p>回调结果类均存储在 <code>models.response</code> 包中。<br>关于各个 API 回调结果的说明，请参照<strong>服务器端文档</strong></p></blockquote></li><li><p>请通过使用 <code>VolleyErrorHelper</code> 类来获取网络错误信息的形式来处理网络错误，<strong>不要自己处理</strong>。</p><blockquote><p><code>VolleyErrorHelper</code> 类位于 <code>utils</code> 包中。<br>其中也包含了一个展示默认 Snackbar 的 <code>display()</code> 方法</p></blockquote></li></ol><a id="more"></a><h2 id="2-api-列表"><a class="markdownIt-Anchor" href="#2-api-列表"></a> 2. API 列表</h2><p>这里只列出<strong>发起请求的必要参数</strong>，剩下的两个监听器不予列出。<br>返回的 <code>Request</code> 对象同上，不予列出。</p><h3 id="21-注册"><a class="markdownIt-Anchor" href="#21-注册"></a> 2.1 注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register(RegisterInfo registerInfo)</span><br></pre></td></tr></table></figure><ul><li><code>registerInfo</code>：保存用户注册信息的容器类对象，仅包括用户在注册界面填写的信息。</li></ul><h3 id="22-获取验证码"><a class="markdownIt-Anchor" href="#22-获取验证码"></a> 2.2 获取验证码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getAuthCode(String phoneNumber)</span><br></pre></td></tr></table></figure><ul><li><code>phoneNumber</code>：用于获取验证码的用户手机号，要求 11 位，以 <code>1</code> 开头。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> MDZZ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> MDZZ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storage API</title>
      <link href="//Projects/MdzzProject/Storage%20API/"/>
      <url>//Projects/MdzzProject/Storage%20API/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><ol><li>所有的储存信息和操作均通过<strong>实体</strong>实现。</li><li>所有实体均存放在 <code>models</code> 包中。</li><li>SharedPreferences 存放在 <code>models/shared_preferences</code> 包中</li><li>数据库相关的实体存放在 <code>models/db</code> 包中。</li><li><strong>取消 Intant Run 再运行，否则程序将会报错！！！</strong></li></ol><a id="more"></a><h2 id="2-sharedpreferences-部分"><a class="markdownIt-Anchor" href="#2-sharedpreferences-部分"></a> 2. SharedPreferences 部分</h2><p>此部分的数据需要先获取实体 instance 之后再进行操作。</p><p>通过实体的 getter 和 setter 对数据进行获取和更改，更改后数据会自动进行持久化保存。</p><h3 id="21-储存的数据"><a class="markdownIt-Anchor" href="#21-储存的数据"></a> 2.1 储存的数据</h3><ol><li>用户的个人信息，包括注册信息和是否单身，<strong>是否第一次登陆</strong>等，实体为 <code>UserInfo</code></li><li>系统的信息，目前只包括<strong>是否第一次启动</strong>，实体为 <code>AppInfo</code></li></ol><h2 id="3-数据库部分"><a class="markdownIt-Anchor" href="#3-数据库部分"></a> 3. 数据库部分</h2><p>数据库使用 Sugar ORM，需要注意的是，此库需要取消 Instant Run 才能正常使用。</p><p>通过相应的 find 方法来获取相应的实体，对实体进行数据操作之后，使用 save() 方法对其进行更新。</p><p>此库已经极其简单，具体的使用说明请参照</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhdHlhbi9zdWdhciNleGFtcGxlcw==" title="https://github.com/satyan/sugar#examples">https://github.com/satyan/sugar#examples<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3NhdHlhbi5naXRodWIuaW8vc3VnYXIv" title="http://satyan.github.io/sugar/">http://satyan.github.io/sugar/<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> MDZZ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> MDZZ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式(Strategy Pattern)</title>
      <link href="//DesignPattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(Strategy%20Pattern)/"/>
      <url>//DesignPattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(Strategy%20Pattern)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>策略模式：定义算法族，分别封装起来，使它们可以相互替换。</p><p>此模式让算法的变化独立于使用算法的用户。</p><a id="more"></a><h2 id="2-oo-基础"><a class="markdownIt-Anchor" href="#2-oo-基础"></a> 2. OO 基础</h2><ul><li>抽象</li><li>封装</li><li>多态</li><li>继承</li></ul><h2 id="3-设计原则"><a class="markdownIt-Anchor" href="#3-设计原则"></a> 3. 设计原则</h2><ul><li><p>封装变化</p><blockquote><p>将应用（类）中有可能变化的部分封装出来，和稳定的部分相互隔离</p></blockquote></li><li><p>针对接口编程，而非针对 实现编程</p><blockquote><p>为了运行时能动态改变类的行为，我们应该<strong>针对接口编程</strong>，而非针对实现编程。</p><p>也就是说，使用接口来实现各个行为，而不是将行为固定在类的具体实现中。</p></blockquote></li><li><p>多用组合，少用继承</p><blockquote><p><code>has-a</code> 比 <code>is-a</code> 更好，能够得到更多的应用弹性。</p></blockquote></li></ul><h2 id="4-具体实现"><a class="markdownIt-Anchor" href="#4-具体实现"></a> 4. 具体实现</h2><p><strong>关键：使用委托，并使用 setter 实现行为的动态变化。</strong></p><h3 id="41-使用接口封装行为"><a class="markdownIt-Anchor" href="#41-使用接口封装行为"></a> 4.1 使用接口封装行为</h3><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6gw1f9psjbgdc1j20le0a6mxh.jpg"></p><h3 id="42-对象包含接口"><a class="markdownIt-Anchor" href="#42-对象包含接口"></a> 4.2 对象包含接口</h3><p><img alt data-src="https://ww4.sinaimg.cn/large/65e4f1e6gw1f9pszct1akj20tz0efab4.jpg"></p><h3 id="43-使用-setter-实现运行时更改行为"><a class="markdownIt-Anchor" href="#43-使用-setter-实现运行时更改行为"></a> 4.3 使用 Setter 实现运行时更改行为</h3><p><img alt data-src="https://ww3.sinaimg.cn/large/65e4f1e6jw1f9ptf31737j20tu0fcq43.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ModelDuck modelDuck = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">modelDuck.performFly();<span class="comment">// FlyNoWay</span></span><br><span class="line">modelDuck.setFlyBehavior(<span class="keyword">new</span> FlywithWings());</span><br><span class="line">modelDuck.performFly();<span class="comment">// FlywithWings</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式(Observer Pattern)</title>
      <link href="//DesignPattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F(Observer%20Pattern)/"/>
      <url>//DesignPattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F(Observer%20Pattern)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>观察者模式，是在对象间定义一个<strong>一对多</strong>的关系。</p><p>当“一个” 对象的改变状态，依赖它的对象都会<strong>收到通知</strong>，并自动更新。</p><p>其中，“一个” 对象称作<strong>主题、可观察者、被观察者</strong>；</p><p>“多个” 对象被称作<strong>观察者、倾听者、订阅者</strong>。</p><blockquote><p>这有点类似报社和读者的关系：发生新闻后，报社通过报纸来通知读者。</p><p>实际上就是一个典型的观察者模式。</p></blockquote><blockquote><p>事实上，观察者模式是 JDK 乃至实际程序和库中使用得最多的设计模式。</p><p>基本上所有的 Java GUI 均实现了观察者模式。（也就是 <code>Listener</code>）</p></blockquote><a id="more"></a><h2 id="2-实现方式"><a class="markdownIt-Anchor" href="#2-实现方式"></a> 2. 实现方式</h2><h3 id="21-实现思路"><a class="markdownIt-Anchor" href="#21-实现思路"></a> 2.1 实现思路</h3><ol><li><p>封装变化</p><blockquote><p>观察者模式中，主题的状态和观察者的种类和数量都会变化。</p><p>所以，需要对观察者进行封装。</p><p>同理，观察者也可能订阅多个主题，所以主题也需要进行封装。</p></blockquote></li><li><p>针对接口编程，不针对实现编程</p><blockquote><p>所以，我们使用接口，分别将主题和观察者进行封装。</p><p>实际上就是让各个主题实现统一的 <code>Subject</code> 接口；观察者实现统一的 <code>Observer</code> 接口。</p></blockquote></li><li><p>多用组合，少用继承</p><blockquote><p>观察者模式是一个一对多的<strong>依赖关系</strong>，这意味着，主题必须维护一个<strong>观察者列表</strong>。</p><p>状态改变后，通过调用通知方法来<strong>逐个</strong>通知观察者。</p><p>实际上，这意味着将观察者<strong>组合</strong>进了主题中。</p></blockquote></li></ol><h3 id="22-图解"><a class="markdownIt-Anchor" href="#22-图解"></a> 2.2 图解</h3><p><img alt data-src="https://www.plantuml.com/plantuml/png/oymhIIrAIqnELGWkJSfAJIvHgEPIK2XAJSyi1ahu9nMd5fMb5cbeWWLpyyjIKOJoyaioqofXGiL0iLgkJBY9C76maQK5AOabgM0LoJc9nSKAplbvoKMf9Qd8zYh4nsErNQ5QJq-l5eiRu18OBe7BwEa1YVJKak0IYFqA2iK83hfZi3ePrIXzVOMdhTkUx9xsRDhEPvkd0es0-S165-vbBdJV0UNGxK3egz7JGmyEBhXBK6HXeW00"></p><h2 id="3-新设计原则松耦合"><a class="markdownIt-Anchor" href="#3-新设计原则松耦合"></a> 3. 新设计原则——松耦合</h2><p><strong>为了交互对象之间的松耦合设计而努力！</strong></p><blockquote><p>所谓的<strong>松耦合</strong>，指的就是两个类、函数、模块之间相关度不高，改变其中的一个类不会造成另一个类的大幅变化。</p></blockquote><p>观察者模式通过<strong>接口</strong>的形式来进行交互，主题可以随时增加和删除观察者列表中的观察者；</p><p>观察者也不需要关心主题的内容，它只需要接受主题的通知就可以了。</p><h2 id="4-气象站例子的-uml-图解"><a class="markdownIt-Anchor" href="#4-气象站例子的-uml-图解"></a> 4. 气象站例子的 UML 图解</h2><p><img alt data-src="https://www.plantuml.com/plantuml/png/bLD1JiCm4Bpx5Jw2LD8FS44jY4j5fLRYM6sJRJ5gd6YzgOX2_ewRO9FOAL8lbkoPdPtPR9Hcf0EaA3VL_XDJbesG3UmD4wJSIiAZCfRojZT8PwIx-m3EYpDU0NN1wb0xq5Yq5KBvXWu8EbPb1emXUQbCUOBw-OGvwj1areDzJNe2O-Gx0dyWBO7XGfPojxDdd4OsIPAq7JHEue4eXKUIn1v7v2tc9H9mHHVRtTDhbQjCSUtkQq9ZUjnRN5H4DikYq9Qf2cr-CtP-tHJ6pNnGsSpdJg2rahtYXe5jFfNUBBM2hvbSAJsJe3FvP8F24Ti_hoy5OGg6RzLrTGEfxOUYR0t4zQrYNQKiBwMTdjlOnmU_IsButUtxjHc7l6Xo8I4OG0X7eGRklfDak8v2-CNleAiMnxJOuHWF3OxH2NyY-AN-DpD5ZYrDiK9ZKvp8tWy0"></p><h2 id="5-推和拉"><a class="markdownIt-Anchor" href="#5-推和拉"></a> 5. 推和拉</h2><p>实际上，主题向观察者发送通知并不只有<strong>主题向观察者推送</strong>这一个方法；</p><p>我们还可以<strong>让观察者主动从主题拉取数据</strong>。</p><p>它们的主要区别在于：推的通知方法包含数据，而拉的不包含，只负责传输主题的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Push</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (observer : list) &#123;</span><br><span class="line">    observer.update: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">25</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (observer : list) &#123;</span><br><span class="line">    observer.update: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">25</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉的方法实现起来也很方便：</p><ol><li>首先主题提供 getter</li><li>随后将<strong>主题本身</strong>作为参数传递给观察者即可。</li></ol><p>采用拉的好处在于，观察者种类繁多，需要的数据不尽相同，这样一来，观察者只需要获取自己感兴趣的数据即可，而不需要同时拿到一大堆自己不想要的数据。</p><p>书中提到</p><blockquote><p>如果采用拉，当扩展功能的时候，就不必要更新和修改观察者的调用，而只需改变自己来允许更多的 getter 方法来取得新增的状态。</p></blockquote><p>这个观点固然不错，但是实际上，我们可以通过将数据<strong>封装成一个类</strong>来解决调用的问题。</p><p>事实上，根据 OO 设计的原则，应该 <strong>Tell, Don’t Ask</strong> ，所以使用<strong>推的方法会更好。</strong></p><h2 id="6-java-内置的观察者模式"><a class="markdownIt-Anchor" href="#6-java-内置的观察者模式"></a> 6. Java 内置的观察者模式</h2><p>Java API 中内置了一个观察者模式，包含一个基本的 <code>Observer</code> 接口和一个 <code>Observable</code> <strong>类</strong>。</p><p>我们可以使用 Java 的内置 API 来快速的实现观察者模式，而不需要自己再造轮子。</p><p>基本的类图如下：</p><p><img alt data-src="https://raw.githubusercontent.com/wafer-li/UMLStorage/master/image/observer_java_built_in.png"></p><p>其中，<code>setChanged()</code> 方法是用来<strong>指示状态改变的</strong>。在调用 <code>notifyObservers()</code> 之前，需要先调用这个方法。</p><p>同时，Java 也实现了推和拉的方式。</p><p>不带参数的 <code>notifyObservers()</code> 使用的是<strong>拉的方法</strong>，而带参数的使用的是推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">notifyObservers</span><span class="params">(Objecgt arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">    <span class="keyword">for</span> (observer : list) &#123;</span><br><span class="line">      observer.update: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">25</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-java-内置观察者模式的缺陷"><a class="markdownIt-Anchor" href="#7-java-内置观察者模式的缺陷"></a> 7. Java 内置观察者模式的缺陷</h2><ol><li><p>违反面对接口编程原则</p><blockquote><p>由于 <code>Observable</code> 是一个<strong>类</strong>，并且实现了<strong>自己的通知方法</strong>，我们的通知途径就被绑定在了 <code>Observable</code> 的具体实现上，无法轻易改变。这也导致了对观察者的通知次序被绑定而无法改变。</p><p>同时，由于 Java 禁止多重继承，所以无法对 <code>Observable</code> 进行复用。</p></blockquote></li><li><p>违反多用组合，少用继承</p><blockquote><p><code>Observable</code> 中的 <code>setChanged()</code> 方法是 <code>protected</code> 的，</p><p>这意味着如果不继承 <code>Observable</code> 就无法修改 <code>setChanged()</code> 方法。</p></blockquote></li></ol><p>所以，如果应用要求弹性高，那么更好的方法应该是：</p><p><strong>自己重新造轮子！</strong></p>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code</title>
      <link href="//CleanCode/Clean%20Code/"/>
      <url>//CleanCode/Clean%20Code/</url>
      
        <content type="html"><![CDATA[<h2 id="1-观点"><a class="markdownIt-Anchor" href="#1-观点"></a> 1. 观点</h2><ol><li>代码混乱的代价十分庞大</li><li>写整洁代码是十分有必要的</li><li>我们是作者，代码是写给别人<strong>看的</strong>，要让人<strong>迅速看懂</strong></li></ol><a id="more"></a><h2 id="2-有意义的命名"><a class="markdownIt-Anchor" href="#2-有意义的命名"></a> 2. 有意义的命名</h2><ol><li><p>命名要体现本意</p><blockquote><p>避免使用<strong>模糊的</strong>名称</p></blockquote></li><li><p>命名要避免误导</p><blockquote><p>不应出现 List 或 Map 等指示变量<strong>类型</strong>的名称。<br>简单加个 s 或使用其他表示复数的表示法即可。</p></blockquote></li><li><p>命名要避免废话和冗余</p><blockquote><p><strong>缺乏明确约定的前提下</strong>，不应使用<strong>冠词</strong>和<strong>无意义的后缀</strong><br>如 <code>theMessage</code> 和 <code>message</code></p></blockquote></li><li><p>命名要简单<strong>易读</strong></p><blockquote><p>不要生造词，要使用易读的英文</p></blockquote></li><li><p>命名要<strong>易于搜索</strong></p><blockquote><p><strong>名称长短应与其作用域大小相对应</strong><br>大作用域内，不应直接使用数字常量。</p></blockquote></li><li><p>避免使用匈牙利命名法</p><blockquote><p>命名不应前缀或后缀变量类型</p></blockquote></li><li><p>避免使用成员前缀</p><blockquote><p>在现代 IDE 中，没有必要使用冗余的成员前缀。<br>在过多的使用前缀后，前缀将会被越来越多的忽略。</p></blockquote></li><li><p>避免使用接口前导字母</p><blockquote><p>原因和上条相同，只不过这里指的是类一级</p></blockquote></li><li><p>避免产生思维定式</p><blockquote><p>应使用较为直白的命名，而不是生造一些定式单字词</p></blockquote></li><li><p>关于类名</p><blockquote><p>类名是名词或者名词短语。<br>类名不应该是动词。</p></blockquote></li><li><p>方法名</p><blockquote><p>方法名是动词或者动词短语。<br>getter, setter 和 assert 应依照 Javabean 标准使用 get, set 和 is 前缀</p></blockquote></li><li><p>别扮可爱</p><blockquote><p>代码是<strong>严肃的，直白的</strong>。<br>不应当出现过于幽默或者恶搞的命名</p></blockquote></li><li><p>每个概念对应一个词</p><blockquote><p>对于每个抽象概念取一个词，并确定下来。</p></blockquote></li><li><p>不要使用双关</p><blockquote><p>时刻保证每一个词只会代表一种含义<br>如 <code>add</code> 方法用于连接两个现有值产生新值，则将单个值插入 collection 的方法就不能命名为 <code>add</code>，应命名为 <code>insert</code> 或者 <code>append</code></p></blockquote></li><li><p>使用技术性名称</p><blockquote><p>看代码的都是程序员，使用技术性名称会更加靠谱。</p></blockquote></li><li><p>使用源自问题领域的名称</p><blockquote><p>如果<strong>不能使用技术性的名称</strong>，则应使用<strong>源自问题领域的词汇</strong>。</p></blockquote></li><li><p>添加有意义的语境</p><blockquote><p>很少有名称能够自我说明，最好为命名添加语境。<br>只有一个变量时，可以为其添加前缀说明语境。<br>但同一语境的变量过多时，应<strong>优先选择类作为变量的语境</strong></p></blockquote></li><li><p>不要添加没用的语境</p><blockquote><p>只要短名称足够清楚，就不要使用长名称</p></blockquote></li></ol><h2 id="3-函数"><a class="markdownIt-Anchor" href="#3-函数"></a> 3. 函数</h2><ol><li><p>函数应<strong>尽可能</strong>短小</p><blockquote><p>最佳的函数逻辑行数应该在<strong>个位数</strong></p></blockquote></li><li><p>函数应该<strong>只做一件事</strong></p><blockquote><p>一个函数应该只做一项工作。<br>如果当前函数能够拆分出一个新函数，这说明其依然不够简洁。</p></blockquote></li><li><p>应确保 <code>switch</code> 埋藏在较低的抽象层级，并不重复</p><blockquote><p>很不幸的是， <code>switch</code> 语句没有办法避免。<br>所以只能将其尽量地包装起来，不要嵌套过深。</p></blockquote></li><li><p>函数应使用描述性的名称</p><blockquote><p>函数名称总比注释要好</p></blockquote></li><li><p>函数参数应尽量简洁</p><blockquote><p>参数个数越少越好。<br>尽量避免输出参数，应从返回值输出。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> CleanCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CleanCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Coding Standards</title>
      <link href="//CleanCode/Java%20Coding%20Standards/"/>
      <url>//CleanCode/Java%20Coding%20Standards/</url>
      
        <content type="html"><![CDATA[<h2 id="1-naming"><a class="markdownIt-Anchor" href="#1-naming"></a> 1. Naming</h2><h3 id="11-common"><a class="markdownIt-Anchor" href="#11-common"></a> 1.1 Common</h3><ol><li>Do not allow <code>a, an, the</code> appear in the name</li></ol><blockquote><p><code>theCode</code>, <code>anException</code>, <code>getTheResult()</code>, are all <strong>NOT</strong> correct.</p></blockquote><ol start="2"><li>Name should be divide into words</li></ol><blockquote><p><code>reSetStatus</code> are <strong>not</strong> correct, it should be <code>resetStatus</code></p></blockquote><a id="more"></a><ol start="3"><li>Not allow single character prefix of variable name</li></ol><blockquote><p>The <code>aName</code>, <code>kFlag</code>, <code>cBook</code> are all <strong>NOT</strong> correct</p><p>The name should be as meanningful as possible</p></blockquote><h3 id="12-special-for-identifiers"><a class="markdownIt-Anchor" href="#12-special-for-identifiers"></a> 1.2 Special for identifiers</h3><h4 id="121-class"><a class="markdownIt-Anchor" href="#121-class"></a> 1.2.1 Class</h4><p>ClassName use the <strong>UpperCamelCase</strong></p><h4 id="122-variable"><a class="markdownIt-Anchor" href="#122-variable"></a> 1.2.2 Variable</h4><ol><li>variableName use the <strong>lowCamelCase</strong></li><li>Single character name should <strong>only</strong> appears in the <strong>Iterator</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// They are okay</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : <span class="keyword">int</span>[])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">50</span>;i++) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// They are bad</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">50</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>But avoid using the single character name as possible</p></blockquote><ol start="3"><li>Not allow underscores</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// That's not allow</span></span><br><span class="line"><span class="keyword">int</span> red_color;</span><br></pre></td></tr></table></figure><h4 id="123-method"><a class="markdownIt-Anchor" href="#123-method"></a> 1.2.3 Method</h4><ol><li><p>methodName() use the <strong>lowCamelCase</strong></p></li><li><p>Do <strong>NOT</strong> allow single chracter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// That's not allow</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>Do <strong>NOT</strong> allow underscores</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// They are not allow</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ini_Data</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="124-paramater"><a class="markdownIt-Anchor" href="#124-paramater"></a> 1.2.4 Paramater</h4><ol><li>Do <strong>NOT</strong> allow 1 character paramater</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// That's not allow</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetPosition</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="125-constant"><a class="markdownIt-Anchor" href="#125-constant"></a> 1.2.5 Constant</h4><p>Constant name use <code>CONSTANT_NAME</code> style. All UPPERCASE character and sperated by underscores.<br>Every constant is in <strong>static</strong> <strong>final</strong> field, but not all static final field is constant</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constants</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMBER = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableList&lt;String&gt; NAMES = ImmutableList.of(<span class="string">"Ed"</span>, <span class="string">"Ann"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Joiner COMMA_JOINER = Joiner.on(<span class="string">','</span>);  <span class="comment">// because Joiner is immutable</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;</span><br><span class="line"><span class="keyword">enum</span> SomeEnum &#123; ENUM_CONSTANT &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Not constants</span></span><br><span class="line"><span class="keyword">static</span> String nonFinal = <span class="string">"non-final"</span>;</span><br><span class="line"><span class="keyword">final</span> String nonStatic = <span class="string">"non-static"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; mutableCollection = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(MyClass.getName());</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String[] nonEmptyArray = &#123;<span class="string">"these"</span>, <span class="string">"can"</span>, <span class="string">"change"</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="126-camel-case-defined"><a class="markdownIt-Anchor" href="#126-camel-case-defined"></a> 1.2.6 Camel case: defined</h4><p>With the defined name, should still obey the camelCase</p><table><thead><tr><th>Prose form</th><th>Correct</th><th>Incorrect</th></tr></thead><tbody><tr><td>“XML HTTP request”</td><td>XmlHttpRequest</td><td>XMLHTTPRequest</td></tr><tr><td>“new customer ID”</td><td>newCustomerId</td><td>newCustomerID</td></tr><tr><td>“inner stopwatch”</td><td>innerStopwatch</td><td>innerStopWatch</td></tr><tr><td>“supports IPv6 on iOS?”</td><td>supportsIpv6OnIos</td><td>supportsIPv6OnIOS</td></tr><tr><td>“YouTube importer”</td><td>YouTubeImporter</td><td></td></tr></tbody></table><h2 id="2-formatting"><a class="markdownIt-Anchor" href="#2-formatting"></a> 2. Formatting</h2><h3 id="21-braces"><a class="markdownIt-Anchor" href="#21-braces"></a> 2.1 Braces</h3><h4 id="211-braces-is-used-as-much-as-possible"><a class="markdownIt-Anchor" href="#211-braces-is-used-as-much-as-possible"></a> 2.1.1 Braces is used as much as possible</h4><p>Braces are used with <code>if</code>, <code>else</code>, <code>for</code>, <code>do</code> and <code>while</code> statements, even when the body is empty or contains only a single statement.</p><h4 id="212-non-empty-bracesuse-the-k-r-style"><a class="markdownIt-Anchor" href="#212-non-empty-bracesuse-the-k-r-style"></a> 2.1.2 Non-Empty braces:use the K &amp; R style</h4><blockquote><p><code>{</code> should after a space and appear at the end of line<br><code>(</code> of control statement should have a space before it<br><code>(</code> of method should have no space before it</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyClass() &#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        something();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ProblemException e) &#123;</span><br><span class="line">        recover();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="22-blank"><a class="markdownIt-Anchor" href="#22-blank"></a> 2.2 Blank</h3><p>Blank should appear:</p><ol><li><p>Between methods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOtherThing</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>Between Set of attrs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// That's attrs set of context and container</span></span><br><span class="line"><span class="keyword">protected</span> View mRootView;</span><br><span class="line"><span class="keyword">protected</span> SetPersonalizedInfoActivity mContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// That's attrs set of widget</span></span><br><span class="line"><span class="keyword">private</span> WheelView firstTypeLpv;</span><br><span class="line"><span class="keyword">private</span> WheelView secondTypeLpv;</span><br><span class="line"><span class="keyword">private</span> TextView nextQuestionTxt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// That's attrs set of data</span></span><br><span class="line"><span class="keyword">private</span> UserBean userBean = UserBean.getInstance();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CleanCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CleanCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VisualNav 编码规范</title>
      <link href="//CleanCode/VisualNav%20%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>//CleanCode/VisualNav%20%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="1-通用规范"><a class="markdownIt-Anchor" href="#1-通用规范"></a> 1. 通用规范</h2><p>VisualNav 项目的代码文件主要包含 Java、XML 以及 Gradle 三种。对于所有的代码文件，都需要遵守以下几条规范：</p><ol><li><p>所有代码文件都必须使用 <strong>UTF-8</strong> 进行编码；</p></li><li><p>使用空格而不是制表符进行缩进，每个缩进的单位为 4 字符（使用 Android Studio 默认配置即可，不要修改缩进配置）；</p></li><li><p>每行仅书写一条语句，多条语句不能写在同一行中；</p></li></ol><a id="more"></a><ol start="4"><li><p>限制代码行的长度，每行不应该超过 100 字符。如果一条语句的长度超过 100 字符，需要适当地进行断行，具体断行的方法会在不同文件类型的规范中进行规定；</p></li><li><p>注释详细。推荐使用英文注释，也可以使用中文进行注释。对注释的具体要求会在不同文件类型的规范中进行规定；</p></li><li><p>每个代码文件的末尾必须有且只有一个空行。</p></li></ol><h2 id="2-java-编码规范"><a class="markdownIt-Anchor" href="#2-java-编码规范"></a> 2. Java 编码规范</h2><h3 id="21-文件组织"><a class="markdownIt-Anchor" href="#21-文件组织"></a> 2.1 文件组织</h3><p>每个 Java 源文件都必须包含一个唯一的公共类或者接口，这个公共类或者接口与所在文件同名，并且必须是文件中的第一个类或者接口。与公共类相关的私有类和接口可以在公共类的定义之后进行定义。</p><h3 id="22-注释"><a class="markdownIt-Anchor" href="#22-注释"></a> 2.2 注释</h3><p>必须使用 <strong>Javadoc</strong> 标准注释。具体注释要求如下：</p><h4 id="221-类接口注释"><a class="markdownIt-Anchor" href="#221-类接口注释"></a> 2.2.1 类/接口注释</h4><p>对于每个类和接口，都应该在类和接口定义之前给出一条注释，介绍这个类的主要功能。注释可以是名词性质的短语，也可以是以第三人称的动词开头的句子</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A request for fetching user info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoRequest</span> <span class="keyword">extends</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="222-方法注释"><a class="markdownIt-Anchor" href="#222-方法注释"></a> 2.2.2 方法注释</h4><p>对于类中<strong>自建</strong>的方法，必须在方法定义之前给出一条注释，描述方法的用途、参数、返回值以及可能抛出的异常。注释是以第三人称的动词开头的句子。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses a &#123;<span class="doctag">@link</span> org.json.JSONObject&#125; into a User object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userObject &#123;<span class="doctag">@link</span> org.json.JSONObject&#125; to be parsed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a User object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> JSONException if JSON is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">parseJson</span><span class="params">(JSONObject userObject)</span> <span class="keyword">throws</span> JSONException </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下，类中属性的 get 和 set 方法不需要 Javadoc 注释。如果 get 和 set 方法会带来特殊的效果，或者对应的属性不容易理解，就需要提供注释。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the last name of user.</span></span><br><span class="line"><span class="comment"> * Name of user will also be update: 2016-11-18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mLastName = lastName;</span><br><span class="line">    <span class="keyword">this</span>.mName = <span class="keyword">this</span>.mFirstName + <span class="string">" "</span> + <span class="keyword">this</span>.mLastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="223-一般注释"><a class="markdownIt-Anchor" href="#223-一般注释"></a> 2.2.3 一般注释</h4><p>主要包括代码块注释和行尾注释。</p><ol><li><p>代码块注释</p><p>编写方法的时候，需要为每个代码块加上一条注释，描述这个代码块的功能。简单的代码块（如变量声明）无需注释。注释是以第三人称的动词开头的句子。如果注释只有一行，使用单行注释（<code>//</code>），否则使用块注释（<code>/* ... */</code>）。</p></li><li><p>语句注释</p><p>一些关键的、不易理解的语句需要加上注释进行解释。</p><ul><li><p>如果注释内容很短，使用单行注释（<code>//</code>）在行尾添加注释，并与语句之间留有一定的间隔使之可读。此时对注释的书写格式没有具体要求。</p></li><li><p>如果注释内容较长或者语句较长，使用单行注释（<code>//</code>）在语句之前添加独立的一行注释。注释的书写格式和代码块注释相同。</p></li></ul></li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prepares parameters for the request.</span></span><br><span class="line">JSONParams params = <span class="keyword">new</span> JSONParams();</span><br><span class="line">params.addParam(<span class="string">"name"</span>, mName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fills up the request.</span></span><br><span class="line">mRequest = <span class="keyword">new</span> JsonObjectRequest(mUrl, <span class="keyword">null</span>,</span><br><span class="line">        <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;() &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line">mRequest.setShouldCache(<span class="keyword">false</span>); <span class="comment">// disable caching</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Executes the request.</span></span><br><span class="line"><span class="keyword">super</span>.execure();</span><br></pre></td></tr></table></figure><h4 id="224-关于调试用注释"><a class="markdownIt-Anchor" href="#224-关于调试用注释"></a> 2.2.4 关于调试用注释</h4><p>master 分支或合并到 master 分支的代码不允许出现调试用的注释<br>所谓调试用的注释即为，为了<strong>调试目的</strong>而使某些代码<strong>暂时失效</strong>的注释<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    do1();</span><br><span class="line">    do2();</span><br><span class="line"><span class="comment">//    do3();    // 此即为调试用注释，master 分支上的代码不允许出现这种注释</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关 Git 的规范，请看下面的 Git 规范 部分</p><h3 id="23-缩进与排版"><a class="markdownIt-Anchor" href="#23-缩进与排版"></a> 2.3 缩进与排版</h3><p>除了第 1 节中提出的一些通用规范，还应该遵守以下缩进和排版的规范。</p><h4 id="231-换行"><a class="markdownIt-Anchor" href="#231-换行"></a> 2.3.1 换行</h4><p>对于长度过长的语句，必须按以下规则断行：</p><ol><li><p>可以在逗号后断行；</p></li><li><p>可以在运算符前面断行；</p></li><li><p>新的一行开头应该与上一行同一级别的表达式开头对齐；</p></li><li><p>如果满足以上规则导致代码较为混乱，新的一行开头可以改为缩进8个字符。</p></li></ol><p>以下是一些对长语句断行的例子：</p><ol><li><p>长度过长的方法定义和调用，可以在参数处进行断行，并保持参数对齐。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserInfoRequest</span><span class="params">(Context context, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                       RequestSuccessListener&lt;User&gt; successListener,</span></span></span><br><span class="line"><span class="function"><span class="params">                       RequestErrorListener errorListener)</span></span></span><br></pre></td></tr></table></figure></li><li><p>在运算符处断开较长的表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num1 = num2 * (num3 + num4 - num5) / num6</span><br><span class="line">        + (num7 - num8) * num9 / num10;</span><br><span class="line"><span class="keyword">if</span> ((condition1 || condition2)</span><br><span class="line">        &amp;&amp;  (condition3 || condition4)</span><br><span class="line">        &amp;&amp; !(condition5 || condition6)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>大括号的使用规则：在任何情况下，左大括号（<code>{</code>）都要与语句在同一行，右大括号（<code>}</code>）独占一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确                    错误</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>) &#123;             <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">    ...                   &#123;</span><br><span class="line">&#125;                             ...</span><br><span class="line">                          &#125;</span><br></pre></td></tr></table></figure><p>编写方法时，按功能、步骤对代码进行分块，以一个空行分开不同的代码块。每个代码块都需要给出解释其作用的注释，具体格式参考 2.2.3 节。</p><h4 id="232-空格与括号"><a class="markdownIt-Anchor" href="#232-空格与括号"></a> 2.3.2 空格与括号</h4><p>需要在适当的位置插入空格或使用括号，使代码更可读。</p><ol><li><p>除一元运算符和 <code>.</code> 之外，运算符与运算数之间需要以空格分隔。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确                    错误</span></span><br><span class="line">a = <span class="number">0</span>                     a=<span class="number">0</span></span><br><span class="line">a + b                     a+b</span><br><span class="line">a &lt; b                     a&lt;b</span><br><span class="line">a &amp;&amp; b                    a&amp;&amp;b</span><br><span class="line">!a                        ! a</span><br><span class="line">a++                       a ++</span><br><span class="line">user.getName()            user . getName()</span><br></pre></td></tr></table></figure><p><code>for</code> 循环头的写法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br></pre></td></tr></table></figure><p>括号与操作数之间不需要空格，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确                    错误</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)               <span class="keyword">if</span> ( a = <span class="number">1</span> )</span><br></pre></td></tr></table></figure><p>左大括号（<code>{</code>）之前需要一个空格，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确                    错误</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>) &#123;             <span class="keyword">if</span> (a == <span class="number">1</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;                         &#125;</span><br></pre></td></tr></table></figure></li><li><p>关键字与括号之间要添加 1 个空格，方法名、类名和括号之间不需要空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确                    错误</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)               <span class="keyword">if</span>(a == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> (b == <span class="keyword">true</span>)         <span class="keyword">while</span>(b == <span class="keyword">true</span>)</span><br><span class="line">User user = <span class="keyword">new</span> User();   User user = <span class="keyword">new</span> User ();</span><br><span class="line">user.setName(<span class="string">"Name"</span>);     user.setName (<span class="string">"Name"</span>);</span><br></pre></td></tr></table></figure></li><li><p>注释符号（<code>//</code>、<code>/*</code> 和 <code>*/</code>）与注释内容之间需要加一个空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释符号与注释之间有一个空格</span></span><br><span class="line"><span class="comment">/* 就像这样 */</span></span><br></pre></td></tr></table></figure></li><li><p>强制类型转换后需要有一个空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mTextView = (TextView) findViewById(R.id.text)</span><br></pre></td></tr></table></figure></li><li><p>必要时需要为一些表达式加上括号（即使并没有出现运算符优先级的问题），以增强代码的可读性。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((a &amp;&amp; b) || (c &amp;&amp; d) || e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="233-空行"><a class="markdownIt-Anchor" href="#233-空行"></a> 2.3.3 空行</h4><p>在适当的位置插入空行使得代码更具有可读性：</p><ol><li><p>在<strong>两个方法之间</strong>要空两行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// There</span></span><br><span class="line">    <span class="comment">// are</span></span><br><span class="line">    <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// lot</span></span><br><span class="line">    <span class="comment">// of</span></span><br><span class="line">    <span class="comment">// stuffs</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * I cannot</span></span><br><span class="line"><span class="comment">    * simply</span></span><br><span class="line"><span class="comment">    * count</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOtherThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// There</span></span><br><span class="line">    <span class="comment">// are</span></span><br><span class="line">    <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// lot</span></span><br><span class="line">    <span class="comment">// of</span></span><br><span class="line">    <span class="comment">// stuffs</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * I cannot</span></span><br><span class="line"><span class="comment">    * simply</span></span><br><span class="line"><span class="comment">    * count</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在类的<strong>不同的属性集合之间</strong>要有空行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上下文和视图 container</span></span><br><span class="line"><span class="keyword">protected</span> View mRootView;</span><br><span class="line"><span class="keyword">protected</span> SetPersonalizedInfoActivity mContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各视图组件</span></span><br><span class="line"><span class="keyword">private</span> WheelView firstTypeLpv;</span><br><span class="line"><span class="keyword">private</span> WheelView secondTypeLpv;</span><br><span class="line"><span class="keyword">private</span> TextView nextQuestionTxt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据域</span></span><br><span class="line"><span class="keyword">private</span> UserBean userBean = UserBean.getInstance();</span><br></pre></td></tr></table></figure></li><li><p>类的成员变量和方法之间要有空行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上下文和视图 container</span></span><br><span class="line"><span class="keyword">protected</span> View mRootView;</span><br><span class="line"><span class="keyword">protected</span> SetPersonalizedInfoActivity mContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各视图组件</span></span><br><span class="line"><span class="keyword">private</span> WheelView firstTypeLpv;</span><br><span class="line"><span class="keyword">private</span> WheelView secondTypeLpv;</span><br><span class="line"><span class="keyword">private</span> TextView nextQuestionTxt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据域</span></span><br><span class="line"><span class="keyword">private</span> UserBean userBean = UserBean.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOtherThing</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果有内部类或内部接口，内部类与上下文要空<strong>两行</strong></p><blockquote><p>若内部类或接口在所有代码的尾部，则不需要与下文有空行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOtherThing</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里是内部类的一些东西</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBehindInnerClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法内部<strong>不同功能</strong>的代码块要空行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrevFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pop back stack</span></span><br><span class="line">    fragmentManager.popBackStack();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find index</span></span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; fragmentTitles.length; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentFragmentTag.equals(fragmentTitles[index])) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set currentFragmentTag</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        currentFragmentTag = fragmentTitles[index - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set title</span></span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">getSupportActionBar</span><span class="params">()</span> !</span>= <span class="keyword">null</span>;</span><br><span class="line">    getSupportActionBar().setTitle(currentFragmentTag);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="24-命名规范"><a class="markdownIt-Anchor" href="#24-命名规范"></a> 2.4 命名规范</h3><h4 id="241-通用规范"><a class="markdownIt-Anchor" href="#241-通用规范"></a> 2.4.1 通用规范</h4><ol><li><p>将缩写词作为普通单词处理。<br>例如在类名中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlParser</span> </span>&#123;...&#125; <span class="comment">// 而不是 XMLParser</span></span><br></pre></td></tr></table></figure></li><li><p>不允许出现 <code>a, an, the</code> 等冠词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTheResult</span><span class="params">()</span>   <span class="comment">// 错误</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getResult</span><span class="params">()</span>    <span class="comment">// 正确</span></span></span><br></pre></td></tr></table></figure></li><li><p>除<strong>常量外</strong>，其余命名不允许出现下划线字符(<code>_</code>)</p></li></ol><h4 id="242-包名"><a class="markdownIt-Anchor" href="#242-包名"></a> 2.4.2 包名</h4><p>包名必须为全小写字母。如果出现多个单词构成的包名，不进行分隔。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.packagename</span><br></pre></td></tr></table></figure><h4 id="243-类名"><a class="markdownIt-Anchor" href="#243-类名"></a> 2.4.3 类名</h4><p>类名必须是名词或名词短语，每个单词首字母均大写。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageDownloader</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="244-接口名"><a class="markdownIt-Anchor" href="#244-接口名"></a> 2.4.4 接口名</h4><p>与类名规则相同。不需要加 <code>I</code> 前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 而不是IOnButtonClickListener</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OnButtonClickListener</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="245-方法名"><a class="markdownIt-Anchor" href="#245-方法名"></a> 2.4.5 方法名</h4><p>方法名是一个动词或动词短语，第一个单词的首字母小写，其余单词首字母均大写。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="246-变量与常量名"><a class="markdownIt-Anchor" href="#246-变量与常量名"></a> 2.4.6 变量与常量名</h4><p>常量名所有字母均大写，单词之间以下划线（<code>_</code>）分隔。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"..."</span>;</span><br></pre></td></tr></table></figure><p>类中的成员变量需要加前缀 <code>m</code>，每个单词首字母大写。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String mLastName;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> mAge;</span><br></pre></td></tr></table></figure><p>~<s>类的<strong>静态</strong>成员变量需要添加前缀 <code>s</code>，其余每个单词首字母大写。例如：</s>~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抛弃的旧规范</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sCountOfInstances;</span><br></pre></td></tr></table></figure><p>局部变量第一个单词首字母小写，其余每个单词首字母大写。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tempVariable;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-其他规范"><a class="markdownIt-Anchor" href="#25-其他规范"></a> 2.5 其他规范</h3><h4 id="251-异常处理"><a class="markdownIt-Anchor" href="#251-异常处理"></a> 2.5.1 异常处理</h4><ol><li><p>异常处理的首要原则是<strong>不能忽略异常</strong>。例如以下代码是不可取的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    JSONTokener jsonTokener = <span class="keyword">new</span> JSONTokener(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JSONException ex) &#123; &#125;</span><br></pre></td></tr></table></figure><p>捕获到异常，必须对异常进行处理。</p></li><li><p>不能捕获顶级异常（<code>Exception</code>）。</p><p>必须根据异常的种类分别进行捕获和处理，不能直接捕获 <code>Exception</code>。以下代码是不可取的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...  <span class="comment">// 这里会抛出多种异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确的做法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (OneKindOfException ex1) &#123;</span><br><span class="line">    <span class="comment">// 处理 ex1</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (AnotherKindOfException ex2) &#123;</span><br><span class="line">    <span class="comment">// 处理 ex2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="252-import-规范"><a class="markdownIt-Anchor" href="#252-import-规范"></a> 2.5.2 import 规范</h4><p>不要手动输入 <code>import</code> 语句或手动调整 <code>import</code> 之间的顺序，而应通过 Android Studio 提供的自动 import 功能来管理。</p><p>例如，如果需要导入 <code>java.util</code> 包的 <code>ArrayList</code> 类，只需要输入 <code>ArrayList</code>，根据 Android Studio 自动弹出的提示选择正确的类，即可自动添加一条 <code>import java.util.ArrayList;</code> 语句。</p><p>如果出现了导入之后没有使用的情况，应该对废弃的 <code>import</code> 语句进行清理。</p><h4 id="253-java-annotation-的使用规范"><a class="markdownIt-Anchor" href="#253-java-annotation-的使用规范"></a> 2.5.3 Java Annotation 的使用规范</h4><p>Annotation 必须出现在其他任何修饰符之前，每个 Annotation 独占一行。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要类中的一个方法覆盖了所在类或者父类中的方法，必须为这个方法加上 <code>@Override</code>。</p><h4 id="254-使用-todo-注释"><a class="markdownIt-Anchor" href="#254-使用-todo-注释"></a> 2.5.4 使用 TODO 注释</h4><p>TODO 注释用于标记和管理待办事项。在当前无法完成某项工作时，必须将待办的工作用 TODO 注释写在相应的位置。TODO 注释的用法是：只要在注释中出现独立的（作为一个独立单词的）<code>TODO</code>，即可生成 TODO 注释。</p><p>一般的做法是在注释开头标记 <code>TODO</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> add a click listener for button</span></span><br></pre></td></tr></table></figure><h2 id="3-xml-编码规范"><a class="markdownIt-Anchor" href="#3-xml-编码规范"></a> 3. XML 编码规范</h2><p>XML 文件的编码规范以 Android Studio 默认格式为准，主要包括以下几条要求：</p><ol><li><p>命名空间（<code>xmlns</code>）全部写在 XML 文件根元素的开始处，并按字母顺序排序；</p></li><li><p>元素的 <code>id</code> 属性必须位于其他所有属性之上，布局和尺寸属性位于 <code>id</code> 属性下方、其他属性之上；</p></li><li><p>不同元素之间必须以一个空行分隔；</p></li><li><p>元素的开始标签中，属性不能和元素出现在同一行，并且向右缩进4个字符；</p></li><li><p>所有字符串不允许硬编码，必须统一写入 <code>strings.xml</code> 资源文件并通过 <code>@string</code> 标记引用；</p></li><li><p>不含有内容的元素必须使用闭合标签（<code>&lt;name /&gt;</code>），不能使用标签对（<code>&lt;name&gt;&lt;/name&gt;</code>）；</p></li><li><p>编辑完成 XML 文件后，请使用 Android Studio 的 Code 菜单中的 <strong>Reformat Code</strong> 功能对格式进行自动调整。</p></li></ol><h2 id="4-git-规范"><a class="markdownIt-Anchor" href="#4-git-规范"></a> 4. Git 规范</h2><p>这里主要遵循的是 Git Flow 的简化版，主要包括以下几点要求：</p><h3 id="41-提交"><a class="markdownIt-Anchor" href="#41-提交"></a> 4.1 提交</h3><ol><li><p>请保证以下操作在 commit 之前完成</p><blockquote><p>进行代码分析，解决可以解决的 Warning。<br>优化 import 语句<br>Reformat 代码</p></blockquote></li><li><p>关于 Commit Message</p></li></ol><ul><li><p>以动词开头的祈使句，首字母大写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"Add GSON module"</span></span><br></pre></td></tr></table></figure></li><li><p>信息过多，应进行折行，而不能在一行内写完</p><blockquote><p>此时应使用 <code>git commit</code> 在弹出的编辑器中填写多行信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">Fix the moudule:</span></span><br><span class="line"><span class="string">1. Remove the unnessary method</span></span><br><span class="line"><span class="string">2. Replace the ListView with RecyclerView</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure></li><li><p>Commit Message 内容应要尽量意义丰富。</p><blockquote><p>尽量说明操作内容和所涉及到的部分</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Fix bug"</span> // 错误</span><br><span class="line"><span class="string">"Fix not render bug of the register page"</span>   // 正确</span><br></pre></td></tr></table></figure></li><li><p>建议采用 “Fix issue” 形式来让 Message 更加简洁</p><blockquote><p>相应的，在对应的 issue 就要对问题进行详细的描述</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 都是正确的</span><br><span class="line"><span class="string">"Fix #1"</span></span><br><span class="line"><span class="string">"Fix the bug of #2"</span></span><br><span class="line"><span class="string">"Fix the render bug of #3"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="42-拉取"><a class="markdownIt-Anchor" href="#42-拉取"></a> 4.2 拉取</h3><ol><li><p>养成良好习惯，编码前先同步 master 分支</p><blockquote><p>如果有重构相应事项，先进行处理后再编码</p></blockquote></li><li><p>采用 <code>git pull --rebase</code> 代替简单的 <code>git pull</code></p><blockquote><p>rebase 可以生成相对简洁的版本线图</p></blockquote></li></ol><h3 id="43-分支"><a class="markdownIt-Anchor" href="#43-分支"></a> 4.3 分支</h3><ul><li>不设立 develop 分支</li><li>master 分支应是<strong>随时可以运行</strong>的，不允许出现不可运行的错误（编译错误，打开即 Crash 等）</li><li>各分支的内容应基于<strong>最新的</strong> master 分支程序<strong>架构</strong>进行编写，可以随时无冲突的 merge 到 master</li></ul><h3 id="44-合并"><a class="markdownIt-Anchor" href="#44-合并"></a> 4.4 合并</h3><ol><li>向 master 分支的合并</li></ol><ul><li><p>原则</p><blockquote><p>必须通过 Pull Requet 进行<br>合并到 master 分支的代码不允许出现调试用的注释<br><strong>所有分支应保证彻底运行无误后，才能 merge 到 master</strong></p></blockquote></li><li><p>Feature 分支向 master 分支的合并</p><blockquote><p>原则上，管理员应在 <strong>18 小时</strong>之内回应<strong>项目组成员</strong>的 PullRequest，若管理员超时未进行回应或合并操纵，开发者可经测试后<strong>自行合并</strong>。<br>但仍然需要提出 Pull Request 并阐述分支的 Changelog, 以便代码审查。</p></blockquote></li><li><p>HotFix 分支向 master 分支的合并</p><blockquote><p>HotFix 分支的合并可以<strong>不经管理员批准或等待流程</strong>快速合并到 master 上。<br>但仍需要提出 Pull Request，保留 Changelog （紧急的可以合并后再写）</p></blockquote></li></ul><ol start="2"><li>其他分支的相互合并</li></ol><ul><li><p><strong>不允许</strong>使用 Pull Request 进行</p><blockquote><p>其他分支的相互合并由负责成员之间相互协商解决</p></blockquote></li><li><p>其他要求放宽</p><blockquote><p>可以存在不能运行的 bug，但是必须在 merge 到 master 分支之前解决。</p></blockquote></li></ul><h3 id="45-冲突"><a class="markdownIt-Anchor" href="#45-冲突"></a> 4.5 冲突</h3><ol><li><p>冲突<strong>必须立即解决</strong>，不允许忽视冲突 force push</p></li><li><p>由其他分支相互合并引起的冲突，由相应开发者进行协商处理</p></li><li><p>关于向 master 合并的冲突，请查看部分</p><blockquote><p>由于所有分支必须基于最新 master 程序架构编写，会出现此种冲突的场景仅存在于重构和 HotFix</p></blockquote></li></ol><h3 id="46-重构"><a class="markdownIt-Anchor" href="#46-重构"></a> 4.6 重构</h3><ol><li><p>重构前</p><blockquote><p>需要重构时,重构发起人 <strong>必须发起 Issue 阐述重构 TODO 事项和最终的 Changelog</strong></p></blockquote></li><li><p>重构中</p><blockquote><p>重构<strong>不允许</strong>直接在 master 分支进行修改，应<strong>新建分支</strong>进行重构 commit</p></blockquote></li><li><p>重构完成后</p><blockquote><p>重构完成后，向 master <strong>提交 Pull Request</strong>，视为 Feature 分支向 master 分支合并进行处理流程。<br>分支一旦被合并，合并操作者（<strong>管理员或相应重构开发者</strong>）应立即在各类有效平台通知各分支开发者。<br>各分支开发者应在接收到通知后<strong>立即</strong> merge master 分支，以保证基于最新 master 分支进行编写。</p></blockquote></li><li><p>关于冲突</p><blockquote><p>重构 Issue 应说明相应文件和目录结构变化情况<br>当各分支 merge master 出现冲突时，按照相应 Issue 的修改进行 resolve conflict.</p></blockquote></li></ol><h3 id="47-热修补-hotfix"><a class="markdownIt-Anchor" href="#47-热修补-hotfix"></a> 4.7 热修补 （HotFix）</h3><ol><li><p>热修补即是<strong>紧急的重构</strong></p></li><li><p>热修补发起人必须尽快通知管理员和项目组其他成员</p><blockquote><p>应使用可能的包括但不限于以下的通知方式:<br><strong>项目 Issue</strong>，QQ，微信，Telegram，邮件，电话，各协作平台等。<br>热修补可以不提出 Issue，但应在对应的 Pull Request 中说明对应的修改内容。</p></blockquote></li><li><p>热修补仍然需要在新分支进行操作，但合并时无需经等待或批准流程。</p><blockquote><p>但仍然需要提出 Pull Request，之后可自行合并。<br>注意，必须要在 Pull Request 中说明热修补的修改事项。（可以在合并后添加评论）</p></blockquote></li><li><p>其余事项均遵守重构相关规范</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CleanCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CleanCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我心中的全面小康社会</title>
      <link href="//Homework/%E6%88%91%E5%BF%83%E4%B8%AD%E7%9A%84%E5%85%A8%E9%9D%A2%E5%B0%8F%E5%BA%B7%E7%A4%BE%E4%BC%9A/"/>
      <url>//Homework/%E6%88%91%E5%BF%83%E4%B8%AD%E7%9A%84%E5%85%A8%E9%9D%A2%E5%B0%8F%E5%BA%B7%E7%A4%BE%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>“小康”，一个由儒家经典著作中引申而出的词语，经过中国改革开放的总设计师——邓小平的重新演绎——“我们的目标，第一步是到2000年建立一个小康社会，这是指在温饱的基础上，生活质量进一步提高，达到丰衣足食。”，成为了中国人在新世纪的奋斗目标。而习近平总书记提出的“确保到2020年实现全面建成小康社会的奋斗”更加充实了中国人民实现全面小康社会的信念和信心。2020 年，中国即将实现全面的小康社会，下面就来谈谈我自己对“全面小康社会”的理解。</p><a id="more"></a><p>首先，在经济方面，居民收入进一步提高，我国的人均 GDP 达到 10000 - 12000 美元 左右，正式进入中等收入国家。经济转型成功，新经济和第三产业发展迅猛，对中国经济的贡献比例飞速增长，达到或超过三分之二。城乡居民收入翻番，居民消费能力显著增长，国内经济由投资拉动为主变为国内消费和国内需求拉动为主。沿海的劳动密集型产业逐步升级或向中西部和东南亚迁移，经济重心逐步转为依托当地或周边大学发展高新科技产业，以高新科技指导的新型制造业基本成型。</p><p>其次，在文化方面，文化产品（小说，游戏，电影，电视剧等）的分级制度初现雏形，文化题材限制有所放宽，由此带来文化产业方面发展的大爆发，一时众多文化艺术形式、产品和相关产业纷纷涌现，中国的文化企业和相关事业单位迎来了前所未有的发展机遇。知识产权保护体系初步完善，公民的知识产权保护意识提升，从而进一步促进了文化产业的发展。</p><p>在法制方面，中国特色社会主义法律体系进一步完善，各行各业全面实现有法可依。法律相关工作者的从业门槛提升，考核标准提高，公民的法律意识水平提高，全面实现有法必依，执法必严，违法必究。</p><p>交通和城建方面，在 2020 年基本实现了中国中东部省份县级城市和城镇通高铁或动车组列车，原有铁路线路进行新一轮提速，基本消除了 100 KM/H 以下速度的客运列车。十八大后实施的大规模棚户区改造完成，城镇居民都住进了居民小区。</p><p>农业方面，由于城镇化程度提高，农村耕地流转出现集中化趋势，乡村企业规模迅速扩大，初步实现了农业机械化和集中化、规模化生产，中国的农业出现新一轮大发展趋势，粮食产量增速加快，农业科技得到进一步积累和发展。</p><p>在医疗领域，由于互联网的飞速发展以及其与医学的紧密结合，名医指导手术和远端会诊得到普及，同时，中国社区医院体系和医生自由流转体系全面建立</p>]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homework </tag>
            
            <tag> Situation and Policy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大创项目</title>
      <link href="//Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE/"/>
      <url>//Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>这是一个大创项目的备忘录</p><hr><h2 id="1-主题"><a class="markdownIt-Anchor" href="#1-主题"></a> 1. 主题</h2><p>暂定<strong>地下车库导航</strong></p><blockquote><p>利用室内定位技术，结合地下车库地图给予用户路线导航，车辆定位，车位定位等功能。</p></blockquote><blockquote><p>具体论文资料等由老师（的博士生）提供。</p></blockquote><a id="more"></a><h2 id="2-成员暂定"><a class="markdownIt-Anchor" href="#2-成员暂定"></a> 2. 成员（暂定）</h2><ol><li>李东霖</li><li>唐葛夫</li><li>刘聪</li><li>邢瑞斌</li></ol><h2 id="3-大致行程"><a class="markdownIt-Anchor" href="#3-大致行程"></a> 3. 大致行程</h2><ol><li>4 月底 - 5 月初，立项，项目文档</li><li>9 月份第一次检查</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> 大创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> 大创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的工具</title>
      <link href="//Tools/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
      <url>//Tools/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>这里收集一些好用的 WEB 生产力工具和网站。</p><p><span class="exturl" data-url="aHR0cDovL21hZGVieWV2YW4uY29tL2ZzbS8=" title="http://madebyevan.com/fsm/">自动机绘图<i class="fa fa-external-link"></i></span></p><blockquote><p>这是一个绘制自动机状态转移图的工具，做编译解析的一般都会用到。</p><p>使用上一般没什么问题，需要注意的就是<strong>拖动箭头</strong>，可以使它弯曲。</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHJvY2Vzc29uLmNvbS8=" title="https://www.processon.com/">Processon<i class="fa fa-external-link"></i></span></p><blockquote><p>一个在线的流程图、UML 图、UI 图等等的绘图工具。具有不错的界面，而且支持的图例也很多。强烈建议使用。</p><p>不过对于 UML 的类图方面的支持不是很好。但是对于流程图来说已经是很不错的了。</p></blockquote><p><span class="exturl" data-url="aHR0cDovL3d3dy5wbGFudHRleHQuY29tL3BsYW50dGV4dA==" title="http://www.planttext.com/planttext">PlantText<i class="fa fa-external-link"></i></span></p><blockquote><p>一个绘制 PlantUML 的在线网站，还支持导出 PNG 和 LaTex。</p><p>虽然不能实时渲染，不过 UML 对实时渲染的要求也不是很高。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="//DesignPattern/README/"/>
      <url>//DesignPattern/README/</url>
      
        <content type="html"><![CDATA[<p>本目录内容基于 <em>Head First 设计模式</em>。</p><p>代码实例点<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL0Rlc2lnblBhdHRlcm5FeGFtcGxl" title="https://github.com/wafer-li/DesignPatternExample">这里<i class="fa fa-external-link"></i></span></p><h2 id="为什么要学习设计模式"><a class="markdownIt-Anchor" href="#为什么要学习设计模式"></a> 为什么要学习设计模式</h2><ol><li>设计模式是程序员的共通语言，减少沟通成本</li><li>设计模式会让你保持高层级的观感</li><li>设计模式可以让开发团队和开发人员快速成长</li></ol><a id="more"></a><h2 id="有没有现成的设计模式轮子"><a class="markdownIt-Anchor" href="#有没有现成的设计模式轮子"></a> 有没有现成的设计模式轮子</h2><p>没有，学习设计模式以组织类来解决对应的问题是程序员责无旁贷的事情。</p><p>虽然库和框架可能使用了某种设计模式，但是不代表它就是一个设计模式的库</p><h2 id="如果找不到对应的设计模式怎么办"><a class="markdownIt-Anchor" href="#如果找不到对应的设计模式怎么办"></a> 如果找不到对应的设计模式怎么办</h2><p>记住设计原则，从设计原则出发来解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 官方 Navigation Drawer</title>
      <link href="//Android/Android%20%E5%AE%98%E6%96%B9%20Navigation%20Drawer/"/>
      <url>//Android/Android%20%E5%AE%98%E6%96%B9%20Navigation%20Drawer/</url>
      
        <content type="html"><![CDATA[<p> <a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a><br> <a href="#2-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96">2. 添加依赖</a><br> <a href="#3-%E8%AE%BE%E8%AE%A1-layoutactivity_mainxml">3. 设计 <code>layout/activity_main.xml</code></a><br> <a href="#4-%E6%9E%84%E5%BB%BA-layoutdrawer_headerxml">4. 构建 <code>layout/drawer_header.xml</code></a><br> <a href="#5-%E5%AE%9A%E4%B9%89-menudrawer_itemxml">5. 定义 <code>menu/drawer_item.xml</code></a><br> <a href="#6-%E6%98%BE%E7%A4%BA%E6%B1%89%E5%A0%A1%E5%8C%85%E5%9B%BE%E6%A0%87">6. 显示汉堡包图标</a><br> <a href="#7-%E4%BD%BF%E7%8A%B6%E6%80%81%E6%A0%8F%E9%80%8F%E6%98%8E">7. 使状态栏透明</a><br>  <a href="#71-%E5%8E%BB%E9%99%A4-actionbar">7.1 去除 Actionbar</a><br>  <a href="#72-v21-%E5%A2%9E%E5%8A%A0%E5%85%B3%E4%BA%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E5%B1%9E%E6%80%A7">7.2 v21 增加关于状态栏的属性</a><br>  <a href="#73-%E8%AE%BE%E7%BD%AE-drawerlayout-%E4%BD%BF%E7%94%A8-fitssystemwindow">7.3 设置 DrawerLayout 使用 <code>fitsSystemWindow</code></a><br>  <a href="#74-%E8%A1%A5%E5%85%85%EF%BC%9A%E5%8A%A8%E6%80%81%E6%94%B9%E5%8F%98-status-bar-%E9%A2%9C%E8%89%B2">7.4 补充：动态改变 status bar 颜色</a><br> <a href="#8-%E6%80%BB%E7%BB%93">8. 总结</a></p><h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Navigation drawer 作为 Android Material Design 中主流的一种导航方式，当然受到 Google 的重视，所以，作为 MD 设计推出的实现部分，Android 更新了 support library 增加了关于 Navigation Drawer 的支持。</p><p>下面就来看看如何进行 Navigation Drawer 的构建。</p><a id="more"></a><h2 id="2-添加依赖"><a class="markdownIt-Anchor" href="#2-添加依赖"></a> 2. 添加依赖</h2><p>官方的 Navigation Drawer 需要用到 <code>DrawerLayout</code> 和 <code>NavigationView</code>，它们都在 support design 包下。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.android.support:design:24.2.1'</span></span><br></pre></td></tr></table></figure><blockquote><p>这里不使用最新的 <code>25.0.0</code> 的原因在于，最新版在 UI Editor 渲染时存在 bug。Google 不愧是世界上最伟大的半成品公司。</p></blockquote><h2 id="3-设计-layoutactivity_mainxml"><a class="markdownIt-Anchor" href="#3-设计-layoutactivity_mainxml"></a> 3. 设计 <code>layout/activity_main.xml</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.wafer.toy.github_client.ui.activity.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Your main content --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_drawer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/drawer_header"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">"@menu/drawer_item"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>DrawerLayout</code> 是布局的<strong>根目录</strong>，同时要设置 <code>fitsSystemWindows=&quot;true&quot;</code>，否则，将会覆盖掉顶部状态栏。</p><p>还有，注意要设置 <code>NavigationView</code> 的 <code>layout_gravity=&quot;start&quot;</code>，否则不会生效。</p><h2 id="4-构建-layoutdrawer_headerxml"><a class="markdownIt-Anchor" href="#4-构建-layoutdrawer_headerxml"></a> 4. 构建 <code>layout/drawer_header.xml</code></h2><p>一般来说，Nav Drawer 都需要有一个 header 来存放用户头像等等有关用户账户的概览信息。</p><p>所以我们还要定义一个 header 的布局，然后像上面一样，将其赋予 <code>app:headerLayout</code></p><p>header 的布局注意满足 <span class="exturl" data-url="aHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL3BhdHRlcm5zL25hdmlnYXRpb24tZHJhd2VyLmh0bWw=" title="https://material.google.com/patterns/navigation-drawer.html">Material Design<i class="fa fa-external-link"></i></span> 即可；布局样式和摆放不限。</p><h2 id="5-定义-menudrawer_itemxml"><a class="markdownIt-Anchor" href="#5-定义-menudrawer_itemxml"></a> 5. 定义 <code>menu/drawer_item.xml</code></h2><p>是时候给我们的 Nav Drawer 加上一点内容了，通过在 <code>menu/drawer_item.xml</code> 中定义相应的组件即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_home"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_drawer_home"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/nav_home"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_about"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_drawer_about"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/nav_about"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_settings"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_drawer_settings"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/nav_settings"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/navigation_subheader"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/nav_sub_header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">menu</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_sub_item_1"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_drawer_about"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:title</span>=<span class="string">"@string/nav_sub_item_1"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_sub_item_2"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_drawer_home"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:title</span>=<span class="string">"@string/nav_sub_item_2"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，项目的分界通过内嵌的 <code>&lt;menu&gt;</code> 来实现。</p><p>需要注意的是，官方的 nav drawer 中的 item 没有 ripple，只有长按才能显示。</p><p>最后我们再将这个 <code>menu</code> 赋到 <code>NavgationView</code>的 <code>app:menu=&quot;@menu/drawer_item&quot;</code>上</p><h2 id="6-显示汉堡包图标"><a class="markdownIt-Anchor" href="#6-显示汉堡包图标"></a> 6. 显示汉堡包图标</h2><p>Drawer 到这里就完全搭建好了，但是，没有汉堡包图标，用户就不知道我们的应有有个 Nav Drawer。所以，我们就需要给 <code>toolbar</code> 加上一个汉堡包图标来凸显 Nav Drawer 的存在。</p><p>在这里，我们需要进入到 <code>java</code> 文件中进行修改了，由于我用的是 Kotlin，这里使用 Kotlin 来做演示。</p><p>下面就是增加显示汉堡包的方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> actionBarDrawerToggle: ActionBarDrawerToggle <span class="keyword">by</span> lazy &#123; createActionBarDrawerToggle() &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        initToolbar()</span><br><span class="line">        initActionBarDrawerToggle()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initActionBarDrawerToggle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        drawer_layout.addDrawerListener(actionBarDrawerToggle)</span><br><span class="line">        actionBarDrawerToggle.syncState()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initToolbar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setSupportActionBar(toolbar)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createActionBarDrawerToggle</span><span class="params">()</span></span>: ActionBarDrawerToggle &#123;</span><br><span class="line">        <span class="keyword">return</span> ActionBarDrawerToggle(</span><br><span class="line">                <span class="keyword">this</span>, drawer_layout, toolbar, R.string.open_drawer, R.string.close_drawer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getLayoutRes</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_main</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，使用 <code>DrawerLayout</code> 对象和 <code>toolbar</code> 对象来构建一个 <code>ActionBarDrawerToggle</code> 对象；</p><p>然后让 <code>ActionBarDrawerToggle</code> 成为 <code>drawer_layout</code> 的一个接口；</p><p>最后设置 <code>actionBarDrawerToggle.syncState()</code> 即可。</p><h2 id="7-使状态栏透明"><a class="markdownIt-Anchor" href="#7-使状态栏透明"></a> 7. 使状态栏透明</h2><p>我们已经成功的构建出了一个 Navigation Drawer，但是，其显示出来的效果是这样的</p><p><img alt data-src="https://img.readitlater.com/i/matthewwear.xyz/content/images/2016/05/Screenshot-2016-05-31-09-57-54/RS/w1408.png"></p><p>而官方的 MD 规范上，状态栏的效果是半透明的。</p><p>所以，我们还要做一些额外的步骤来让我们的 Nav Drawer 更符合规范。</p><h3 id="71-去除-actionbar"><a class="markdownIt-Anchor" href="#71-去除-actionbar"></a> 7.1 去除 Actionbar</h3><p>这个步骤通常已经在初步搭建构架的时候就完成了。也就是说为 <code>style.xml</code> 增加如下两项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且继承 <code>Theme.AppCompact.Light.DarkActionBar</code></p><h3 id="72-v21-增加关于状态栏的属性"><a class="markdownIt-Anchor" href="#72-v21-增加关于状态栏的属性"></a> 7.2 v21 增加关于状态栏的属性</h3><p>在 <code>value-21/style.xml</code> 中，增加另外的两项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="73-设置-drawerlayout-使用-fitssystemwindow"><a class="markdownIt-Anchor" href="#73-设置-drawerlayout-使用-fitssystemwindow"></a> 7.3 设置 DrawerLayout 使用 <code>fitsSystemWindow</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:insetForeground</span>=<span class="string">"@color/inset_color"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br></pre></td></tr></table></figure><p>OK，到这里就大功告成了！</p><p><img alt data-src="https://img.readitlater.com/i/matthewwear.xyz/content/images/2016/05/Screenshot-2016-05-31-10-24-05/RS/w1408.png"></p><h3 id="74-补充动态改变-status-bar-颜色"><a class="markdownIt-Anchor" href="#74-补充动态改变-status-bar-颜色"></a> 7.4 补充：动态改变 status bar 颜色</h3><p>如果你想动态改变状态栏颜色的话，也有相应的 Java 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drawerLayout.setStatusBarBackgroundColor(ContextCompat.getColor(<span class="keyword">this</span>, R.color.wierd_green));</span><br><span class="line"></span><br><span class="line">drawerLayout.setScrimColor(ContextCompat.getColor(<span class="keyword">this</span>, R.color.wierd_transparent_orange));</span><br></pre></td></tr></table></figure><h2 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8. 总结</h2><p>这样构造出来的 Nav Drawer 和 MaterialDrawer 不同的一个地方在于，Nav Drawer 是在设计层面上进行修改，而 MaterialDrawer 是在代码层面上进行修改，侵入性不强，不过也较为麻烦。</p><p>总的来说，如果要快速搭建，则选择 MaterialDrawer；<br>但是要选择使用清真的写法，那么 Nav Drawer 则会更好。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取屏幕尺寸</title>
      <link href="//Android/Android%20%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/"/>
      <url>//Android/Android%20%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<p>有时候为了实现 Respnsive 或者一些其他的需求，我们就需要拿到当前屏幕的尺寸。</p><p>那么在 Android 中该如何做到呢？请看如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScreenSizeDp</span><span class="params">(activity: <span class="type">Activity</span>)</span></span>: Pair&lt;<span class="built_in">Float</span>, <span class="built_in">Float</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> display: Display = activity.windowManager.defaultDisplay</span><br><span class="line">    <span class="keyword">val</span> displayMetrics = DisplayMetrics()</span><br><span class="line">    display.getMetrics(displayMetrics)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> density = activity.resources.displayMetrics.density</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Pair(displayMetrics.widthPixels / density, displayMetrics.heightPixels / density)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们使用 <code>Activity</code> 对象来获取到 <code>WindowManager</code> 的 <code>defaultDisplay</code>。</p><p>然后，我们构建一个 <code>DisplayMetrics</code> 对象，用来存储特定的尺寸数据。</p><p>注意，我们只能获取到屏幕的<strong>像素大小</strong>，而不能获取到 Android 常用的 dp。</p><p>所以，我们就要先拿到屏幕的像素密度，然后再用像素除以像素密度来得到屏幕的 dp 尺寸。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Drawer Tint Icon</title>
      <link href="//Android/MaterailDrawer/Material%20Drawer%20Tint%20Icon/"/>
      <url>//Android/MaterailDrawer/Material%20Drawer%20Tint%20Icon/</url>
      
        <content type="html"><![CDATA[<p>Material Drawer 是 GitHub 上有名的 Android Navigation Drawer 的实现库，目前有 6000 左右个星，充分说明它的流行和稳定性。</p><p>这里来说说它的 Account Header 的 Profile Icon 的染色问题。</p><p>目前，对于透明背景的图片，Profile Item 不会对背景进行染色；这样就可能导致在有背景图的时候，对于这种 Icon 有看不清的问题。</p><p>作者对此表示不想修复，于是提供了一个 workaround 进行图片的染色。</p><p>以下的 Kotlin 就是对一个默认的用户图标进行染色，然后返回染色后的 <code>Drawable</code> 的代码</p><a id="more"></a><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getTintDefaultProfileIcon</span><span class="params">(activity: <span class="type">Activity</span>)</span></span>: LayerDrawable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> res = activity.resources</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> background = ShapeDrawable()</span><br><span class="line">    background.paint.color = res.getColor(R.color.default_icon_bg, activity.theme)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> icon = res.getDrawable(R.drawable.default_user_icon, activity.theme)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> LayerDrawable(arrayOf(background, icon))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Materail Drawer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MaterailDrawer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Drawer Tutorial</title>
      <link href="//Android/MaterailDrawer/Material%20Drawer%20Tutorial/"/>
      <url>//Android/MaterailDrawer/Material%20Drawer%20Tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h2><p>按照<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pa2VwZW56L01hdGVyaWFsRHJhd2Vy" title="https://github.com/mikepenz/MaterialDrawer">官方网站<i class="fa fa-external-link"></i></span>上的依赖添加即可。</p><p>不过需要注意的是，必须等到 <code>MavenCentral</code> <strong>同步了最新版本</strong>才能使用最新版本，否则请退回前一个版本。</p><p>不然的话就要自己管理 Material Drawer 的依赖了。</p><a id="more"></a><h2 id="建立-drawer"><a class="markdownIt-Anchor" href="#建立-drawer"></a> 建立 Drawer</h2><h3 id="最简单的版本"><a class="markdownIt-Anchor" href="#最简单的版本"></a> 最简单的版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> DrawerBuilder().withActivity(<span class="keyword">this</span>).build();</span><br></pre></td></tr></table></figure><h3 id="带有汉堡包的版本"><a class="markdownIt-Anchor" href="#带有汉堡包的版本"></a> 带有汉堡包的版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Drawer drawer = <span class="keyword">new</span> DrawerBuilder()</span><br><span class="line">                            .withActivity(<span class="keyword">this</span>)</span><br><span class="line">                            .withToolbar(toolbar)</span><br><span class="line">                            .withActionbarToggle(<span class="keyword">true</span>)</span><br><span class="line">                            .build();</span><br></pre></td></tr></table></figure><h4 id="汉堡包会动的版本"><a class="markdownIt-Anchor" href="#汉堡包会动的版本"></a> 汉堡包会动的版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Drawer drawer = <span class="keyword">new</span> DrawerBuilder()</span><br><span class="line">                        .withActivity(<span class="keyword">this</span>)</span><br><span class="line">                        .withToolbar(toolbar)</span><br><span class="line">                        .withActionbarToggle(<span class="keyword">true</span>)</span><br><span class="line">                        .withActionBarDrawerToggleAnimated(<span class="keyword">true</span>)</span><br><span class="line">                        .build();</span><br></pre></td></tr></table></figure><h3 id="带有-header-的版本"><a class="markdownIt-Anchor" href="#带有-header-的版本"></a> 带有 Header 的版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Drawer drawer = <span class="keyword">new</span> DrawerBuilder()</span><br><span class="line">                            .withActivity(<span class="keyword">this</span>)</span><br><span class="line">                            .withAccountHeader(accountHeader)</span><br><span class="line">                            <span class="comment">// ...</span></span><br><span class="line">                            .build()</span><br></pre></td></tr></table></figure><h3 id="调整宽度"><a class="markdownIt-Anchor" href="#调整宽度"></a> 调整宽度</h3><p>可以通过 <code>DrawerBuilder</code> 中的 <code>withDrawerWidth*()</code> 来调整宽度。</p><p>其中 <code>*</code> 可以是 <code>dp</code> 也可以是 <code>px</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Drawer drawer = <span class="keyword">new</span> DrawerBuilder()</span><br><span class="line">                        .withActivity(<span class="keyword">this</span>)</span><br><span class="line">                        .withToolbar(toolbar)</span><br><span class="line">                        .withActionbarToggle(<span class="keyword">true</span>)</span><br><span class="line">                        .withActionBarDrawerToggleAnimated(<span class="keyword">true</span>)</span><br><span class="line">                        .withDrawerWidthDp(<span class="number">100</span>)</span><br><span class="line">                        .build();</span><br></pre></td></tr></table></figure><h2 id="建立-accountheader"><a class="markdownIt-Anchor" href="#建立-accountheader"></a> 建立 AccountHeader</h2><p>上面演示了如何建立带有 Header 的版本，但是，其中的 <code>accountHeader</code> 也是要我们自己建立和配置的。</p><h3 id="最简单的版本-2"><a class="markdownIt-Anchor" href="#最简单的版本-2"></a> 最简单的版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AccontHeader accountHeader = <span class="keyword">new</span> AccountHeaderBuilder()</span><br><span class="line">                                .withActivity(<span class="keyword">this</span>)</span><br><span class="line">                                .withHeaderBackground(R.drawable.header)</span><br><span class="line">                                .build()</span><br></pre></td></tr></table></figure><h3 id="单个账户时关闭下拉菜单"><a class="markdownIt-Anchor" href="#单个账户时关闭下拉菜单"></a> 单个账户时关闭下拉菜单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.withSelectionListEnabledForSingleProfile(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Materail Drawer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MaterailDrawer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ToolBar</title>
      <link href="//Android/ToolBar/"/>
      <url>//Android/ToolBar/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用"><a class="markdownIt-Anchor" href="#1-使用"></a> 1. 使用</h2><ol><li>1 定义风格</li></ol><p>在使用 Toolbar 之前，我们首先要对其风格进行一些调整。</p><ol><li><p>使用 <code>AppTheme.Base</code> 进行一些方便的全局设定</p><blockquote><p>5.0(API 21) 之后，Google 发表了 Material Design，由于和之前的风格有很大的不同， Google 采用了两个文件—— <code>res/values/style.xml</code> 和 <code>res/values-v21/style.xml</code></p></blockquote></li></ol><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme.Base"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Base"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 取消 ActionBar，使用 ToolBar 来代替 ActionBar --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&lt;!--</span></span><br><span class="line"><span class="undefined">用这条语句来防止复制粘贴时把 ToolBar 挤下去的问题；</span></span><br><span class="line"><span class="undefined">两句只能选一句来使用</span></span><br><span class="line"><span class="undefined">--&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 编译 API 低于 22 时，使用下面这条 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 使用 API Level 22 编译的话，使用下面这条 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-添加组件到界面"><a class="markdownIt-Anchor" href="#12-添加组件到界面"></a> 1.2 添加组件到界面</h3><p>在 <code>Activity</code> 或 <code>Fragment</code> 的布局 xml 文件中添加 Toolbar 控件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">  android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">  android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">  android:layout_width=&quot;match_parent&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.v7.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure><p>注意采用 <code>support v7</code> 包的 <code>toolbar</code> 否则只有 <strong>API 21</strong> 以后的版本才能使用，即不兼容 4.0</p><h3 id="13-自定义颜色等其他属性"><a class="markdownIt-Anchor" href="#13-自定义颜色等其他属性"></a> 1.3 自定义颜色等其他属性</h3><p>在上述的两个 style 文件中设定你想要的 Toolbar 的各种属性。添加属性时，在 <code>&lt;style&gt;</code> 下添加一个 <code>&lt;item&gt;</code> 即可。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Base"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- Actionbar color --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/accent_material_dark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--Status bar color--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/accent_material_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--Window color--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@color/dim_foreground_material_dark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以设定的属性有：</p><ul><li><code>App bar</code> : 即原来 <code>ActionBar</code> 的底色，通过添加 <code>colorPrimary</code> 属性即可。</li><li><code>navigationBarColor</code> : 此为导航栏底色，仅在 <strong>API 21 以上</strong> 才有效, 必须设置在 <code>res/values-v21/style.xml</code> 中</li><li><code>windowBackground</code> : 主视窗底色。</li></ul><p><img alt="Style" data-src="https://www.jcodecraeer.com/uploads/20141118/14162849281137.png"></p><h3 id="14-设置控件"><a class="markdownIt-Anchor" href="#14-设置控件"></a> 1.4 设置控件</h3><p>一般来说 ，<code>Toolbar</code> 有以下控件</p><p><img alt="Component" data-src="https://www.jcodecraeer.com/uploads/20141118/1416285884351.png"></p><p>有关的代码如下，文件为 <code>Activity</code> 的对应 <code>.java</code> 文件 <code>MainAcitivity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// App Logo</span></span><br><span class="line">toolbar.setLogo(R.drawable.ic_launcher);</span><br><span class="line"><span class="comment">// Title</span></span><br><span class="line">toolbar.setTitle(<span class="string">"My Title"</span>);</span><br><span class="line"><span class="comment">// Sub Title</span></span><br><span class="line">toolbar.setSubtitle(<span class="string">"Sub title"</span>);</span><br><span class="line"></span><br><span class="line">setSupportActionBar(toolbar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Navigation Icon 要设定在 setSupoortActionBar 之后才有作用</span></span><br><span class="line"><span class="comment">// 否則會出現 back button</span></span><br><span class="line">toolbar.setNavigationIcon(R.drawable.ab_android);</span><br></pre></td></tr></table></figure><p>菜单部分：</p><ol><li><p>先在相应的<code>menu</code> 文件设置<code>MenuItem</code> <code>res/menu/menu_main.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_edit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/action_edit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orderInCategory</span>=<span class="string">"80"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ab_edit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_share"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/action_edit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orderInCategory</span>=<span class="string">"90"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ab_share"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_settings"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/action_settings"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orderInCategory</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>java</code> 文件中设定 <code>OnMenuItemClickListener</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Toolbar.OnMenuItemClickListener onMenuItemClick = <span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">switch</span> (menuItem.getItemId()) &#123;</span><br><span class="line"><span class="keyword">case</span> R.id.action_edit:</span><br><span class="line">msg += <span class="string">"Click edit"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> R.id.action_share:</span><br><span class="line">msg += <span class="string">"Click share"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> R.id.action_settings:</span><br><span class="line">msg += <span class="string">"Click settings"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Listener 传给设置方法</span></span><br><span class="line"><span class="comment">// 其实也可以使用匿名类构造</span></span><br><span class="line">toolbar.setOnMenuItemClickListener(onMenuItemClick)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，<code>setOnMenuItemClickListener()</code> 需要在 <code>setActionBar()</code> 或 <code>setSupportActionBar()</code> 之后才能生效</p></blockquote></li></ol><h2 id="2-动态加载"><a class="markdownIt-Anchor" href="#2-动态加载"></a> 2. 动态加载</h2><p>这里所指的是 在使用 <code>Fragment</code> 时，由于不同 <code>Fragment</code> 可能需要不同的 <code>ActionBar</code> 标题或者其他组件，由此产生的动态加载问题。</p><h3 id="21-动态更改标题"><a class="markdownIt-Anchor" href="#21-动态更改标题"></a> 2.1 动态更改标题</h3><p>当 <code>Title</code> 需要根据 <code>Fragment</code> 的内容进行动态加载，<strong>不要直接使用 Toolbar 的</strong> <code>setTitle()</code>，而应该使用 <code>getActionBar()</code> 来进行标题更改。</p><blockquote><p>由于 Android Studio 会自动产生 Warning，认为 <code>getActionBar()</code> 有可能返回一个空值，可以使用 <code>assert</code> 来进行断言，说明其不会返回 <code>null</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处断言用于取消 Warnning，</span></span><br><span class="line"><span class="comment">// 但必须保证已经 setActionBar(toolbar);</span></span><br><span class="line"><span class="function"><span class="keyword">assert</span> <span class="title">getActionBar</span><span class="params">()</span> !</span>= <span class="keyword">null</span>;</span><br><span class="line">getActionBar().setTitle(<span class="string">"需要的标题"</span>);</span><br></pre></td></tr></table></figure><h3 id="22-动态加载-menuitem"><a class="markdownIt-Anchor" href="#22-动态加载-menuitem"></a> 2.2 动态加载 MenuItem</h3><p>需要动态加载 <code>MenuItem</code> 时，应该在各个 <code>Fragment</code> 重载 <code>onCreateOptionsMenu()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class="line">        inflater.inflate(R.menu.pictrue_list, menu);</span><br><span class="line">        <span class="keyword">super</span>.onCreateOptionsMenu(menu,inflater);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，需要在 <code>Fragment</code> 的 <code>onCreate()</code> 方法中添加 <code>setHasOptionMenu(true)</code>，指明 <code>Fragment</code> 应显示菜单并对菜单进行响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setHasOptionsMenu(<span class="keyword">true</span>);    <span class="comment">// 必须添加，否则无法显示 menu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是， <strong><code>Fragment</code> 会自动继承 <code>Activity</code> 已经 inflate 的 <code>MenuItem</code></strong>，所以如果 <code>Fragment</code> 需要一个全新的 <code>MenuItem</code> 那就最好<strong>重新 inflate 新的 xml</strong>。</p><blockquote><p>否则，MenuItem 将会重复出现，而且其点击事件也会同时在 <code>Activity</code> 和 <code>Fragment</code> 中得到响应</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consistent Hash</title>
      <link href="//DHT/Consistent%20Hash/"/>
      <url>//DHT/Consistent%20Hash/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>大多数 DHT 使用稳定散列方法(consistent hash)来将关键值对应到节点。</p><p>在使用稳定散列算法后，哈希表槽位数（大小）的改变平均只需要对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">K/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">K</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span> 个关键字重新映射，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">K</span></span></span></span> 是关键字的数量， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 是槽位数量。而不需要对整个哈希表进行重新映射。</p><p>下面就来介绍几种主流的 DHT 稳定散列协议算法。</p><a id="more"></a><h2 id="2-chord-算法"><a class="markdownIt-Anchor" href="#2-chord-算法"></a> 2. Chord 算法</h2><p>Chord 在 2001 年由 MIT 提出，它不关心资源是如何存储的，只关心资源的快速取得。</p><h3 id="21-散列计算方法"><a class="markdownIt-Anchor" href="#21-散列计算方法"></a> 2.1 散列计算方法</h3><p>Chord 使用 SHA-1 作为散列计算函数，保证了散列值的非重复性。SHA-1 会产生一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>160</mn></msup></mrow><annotation encoding="application/x-tex">2^{160}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> 的整数空间，每项为一个 160 bit 的大整数，它们首尾相连，形成 Chord 环。</p><p><img alt data-src="https://hi.csdn.net/attachment/201012/7/411087_12917375694L1p.jpg"></p><h3 id="22-查找算法"><a class="markdownIt-Anchor" href="#22-查找算法"></a> 2.2 查找算法</h3><p>显然任何查找只需要绕 Chord 环一圈即可完成，此时时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span>，这对于一个上百万节点，而且节点随时处于动态变化中的 P2P 网络是不可承受的，所以 Chord 提出如下的非线性查找算法：</p><ol><li>每个节点维护一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">m</span></span></span></span> 个其他节点信息的查询表，（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">m</span></span></span></span> 为位数，Chord 中为 160，表格中的节点的 ID 间距为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.824664em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.824664em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span>，这样实际形成了一个二分查找所需要的查找关系表</li><li>查询时，查询节点将请求发送到与键值最接近的节点上，收到请求的节点如果存储了信息，则返回；否则，按照查询表将请求转发到与键值最接近的节点上；直到找到相应节点为止。</li></ol><p>由于节点的查询表采用的是二分查找式的分布方式，不难看出，查询过程实际上就是二分查找的过程。</p><p>经过优化，Chord 查询所需的跳数由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 下降为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span></p><h3 id="23-优点"><a class="markdownIt-Anchor" href="#23-优点"></a> 2.3 优点</h3><ol><li><p>负载均衡</p><blockquote><p>所有的节点都以同样的几率负担系统负荷，从而可以避免某些节点负载过大。</p></blockquote></li><li><p>分布性</p><blockquote><p>所有的节点平等的完成同样的工作，所以 Chord 具有比较高的健壮性，能抵御 DoS 攻击</p></blockquote></li><li><p>可扩展性</p><blockquote><p>Chord 的系统开销按照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 增加，增加比例不大，因此它可以用于较大规模的系统</p></blockquote></li><li><p>可用性</p><blockquote><p>Chord 可以根据网络的变化更新查询表，及时恢复查找关系，使得查询可以可靠进行</p></blockquote></li><li><p>灵活性</p><blockquote><p>Chord 并未限制查询的内容结构，因此应用层可以灵活的将内容映射到键值空间，而不用受到协议的限制。</p></blockquote></li></ol><h2 id="3-can-算法"><a class="markdownIt-Anchor" href="#3-can-算法"></a> 3. CAN 算法</h2><p>CAN 是 2001 年由加州大学伯克利分校提出的。与 Chord 一样，也是 DHT 的一种实现形式。</p><h3 id="31-哈希算法"><a class="markdownIt-Anchor" href="#31-哈希算法"></a> 3.1 哈希算法</h3><p>在 CAN 中，每个节点自身的 ID 经过哈希后，能得到一个 d 维向量，所以整个 P2P 系统将被映射到一个 d 维的笛卡尔空间去。而 Chord 使用的 SHA-1 算法生成的结果是一维的。</p><blockquote><p>其中 d 为一个系统决定的常量</p></blockquote><h3 id="32-查找算法"><a class="markdownIt-Anchor" href="#32-查找算法"></a> 3.2 查找算法</h3><p>CAN 的节点通过维护一个相邻节点表来进行非线性搜索。<br>与 Chord 不同的是，CAN 不要求查询表的邻居节点保持 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.824664em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.824664em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> 的关系，而采用笛卡尔空间的相邻定义：</p><blockquote><p>在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">d</span></span></span></span> 维笛卡尔空间中，2个节点的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">d</span></span></span></span> 维坐标中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.77777em;vertical-align:-.08333em"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 维是相等的，剩余的一维是相邻的节点称之为相邻节点。</p></blockquote><p>在查询的过程中，查询节点首先计算出被查询内容的键值 (d 维向量)，然后在节点列表中查找与之最近的相邻节点，向其发送查询请求；如果被查询节点包含资源，则返回；否则，被查询节点就根据查询表转发到相应最近节点，直到查询完毕为止。</p><p>如果相邻节点表中没有可用的下一跳节点，则开始进行扩展环搜索（从最近的n个节点开始，层层转发直到找到目标或超出了跳数的上限为止），直到找到可用节点。</p><p>经过CAN的优化后，查询需要的跳数由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O (N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mclose">)</span></span></span></span> 减少到均值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>d</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mn>1</mn><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(d/4)(n1/d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord">4</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span> 的随机制，考虑到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">d</span></span></span></span> 为常数，这一值可以表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mn>1</mn><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n1/ d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span>。</p><h3 id="33-比较"><a class="markdownIt-Anchor" href="#33-比较"></a> 3.3 比较</h3><p>CAN 和 Chord 的主要区别在于查找算法不同。</p><p>相比之下，在节点数量非常大时，CAN 的平均查询跳数要比 Chord 增加得更快。</p><p>而且 CAN 查询过程中需要的运算量也要高于 Chord 。但 CAN 使用的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">d</span></span></span></span> 为预先设置的常量，因此并不假设系统节点数量。</p><p>但是在节点总数动态变化范围很大的系统中，CAN 的相邻节点表结构保持稳定，这在 P2P 这一时常在变化的网络系统中有很大优点。</p><h2 id="4-pastry"><a class="markdownIt-Anchor" href="#4-pastry"></a> 4. Pastry</h2><p>Pastry 于 2001 年位于英国剑桥的微软研究院和莱斯(Rice)大学提出。</p><h3 id="41-哈希算法"><a class="markdownIt-Anchor" href="#41-哈希算法"></a> 4.1 哈希算法</h3><p>在 Pastry 中，每个节点拥有一个 128 bit 的标识，为了保证 ID 的一致性，一般采用节点的 IP 地址进行哈希计算。</p><p>Pastry 并没有规定应该使用何种哈希算法，而只规定了哈希键值为一维。（实际上则是使用了 128 bit 的整数空间）</p><h3 id="42-查找算法"><a class="markdownIt-Anchor" href="#42-查找算法"></a> 4.2 查找算法</h3><p>在 Pastry 中，每个节点拥有一个路由表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span></span></span></span>，一个邻居节点表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span>，和一个叶子节点表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">L</span></span></span></span>，它们一起构成了节点的状态表。</p><p>路由表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span></span></span></span> 共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>B</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">logBN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 行，其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mn>2</mn><mi>b</mi></mrow><annotation encoding="application/x-tex">B = 2b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">2</span><span class="mord mathdefault">b</span></span></span></span> 为系统参数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 为节点的总数。每行包括 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">B - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 个项，每个项记录了一个邻居节点的信息。</p><p>叶子节点表存放的是在空间中与当前节点最近的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>L</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|L|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">L</span><span class="mord">∣</span></span></span></span> 个节点的信息；<br>其中，一半节点的标识大于当前节点，另一半小于当前节点。<br>一般取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>L</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>2</mn><mi>b</mi></mrow><annotation encoding="application/x-tex">|L| = 2b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">L</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">2</span><span class="mord mathdefault">b</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>b</mi></mrow><annotation encoding="application/x-tex">4b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">4</span><span class="mord mathdefault">b</span></span></span></span>。</p><p>邻居节点存放着在 <strong>真实网络</strong> 中与当前节点最近的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>M</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|M|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mord">∣</span></span></span></span> 个相邻节点的信息。距离在这里的定义指的是由多种因素综合得到的转发开销。</p><p>Pastry 并未提供距离节点的获取方法，而是由应用层来进行相邻节点的配置。</p><p><img alt="enter image description here" data-src="https://i2.read01.com/image.php?url=0DtV0ja4Qk"></p><p>具体的查找过程如下：</p><ol><li>首先，节点获取到被查询对象的 ID 后，检查 ID 是否在叶子节点的范围内</li><li>如果不在，则从路由表中按照最长前缀优先原则查找一个转发节点</li><li>如果不存在这样的节点，则从所有邻居节点集合（包括路由表中的子叶子表和邻居节点表）选择最近的节点进行消息转发，直到查询完毕为止。</li></ol><p>从过程中看，如果路由表不为空，则每步查找至少能夠增加一個前綴匹配数位，所以在路由表始终有效时，步数最多为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>B</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">logBN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span></p><h3 id="43-比较"><a class="markdownIt-Anchor" href="#43-比较"></a> 4.3 比较</h3><p>Pastry的查找利用了成熟的最大掩码匹配算法，因此实现时可以利用很多现成的软件算法和硬件框架，可以获得很好的效率。</p><p>与 Chord 和 CAN 相比，Pastry 引入了叶子节点和邻居节点集合的概念。</p><p>在应用层能够及时准确地获得这两个集合的节点信息时，可以大大加快查找查找的速度，同时降低因查找引起的网络传输开销；</p><p>不过在动态变化的 P2P 网络中如何理想地做到这一点有很大的难度。</p>]]></content>
      
      
      <categories>
          
          <category> DHT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit2 高级配置</title>
      <link href="//Android/Retrofit/Retrofit2%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/"/>
      <url>//Android/Retrofit/Retrofit2%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>有时候，retrofit 提供的基础功能不够我们使用，比如我们需要打网络日志、强制缓存，设置公有头等。<br>此时，我们就需要对 OkHttp 的 client 进行定制，随后让 retrofit 使用我们定制的 client，从而实现我们的需求。</p><a id="more"></a><h2 id="2-初始化操作"><a class="markdownIt-Anchor" href="#2-初始化操作"></a> 2. 初始化操作</h2><p>为了定制我们自己的 Okhttp client，需要先获取 <code>Okhttp.Builder</code> 对象，通过对 builder 的不断处理，从而构建出我们所需要的 client。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br></pre></td></tr></table></figure><h2 id="3-设置缓存"><a class="markdownIt-Anchor" href="#3-设置缓存"></a> 3. 设置缓存</h2><p>Retrofit 在很长的一段时间内，都没有内置的缓存处理框架，但是在 Retrofit2 强制使用 OkHttp 之后，这个问题就不再存在了。<br>我一开始入门 retrofit 的时候也是花了很长时间在找如何建立缓存处理机制，实际上这是没有必要的。</p><p><strong>只要服务端提供正确的头信息，OkHttp 就能对应的实现缓存功能，而不需要其他设置。</strong></p><p>当然，如果需要强制使用缓存的话，可以通过增加拦截器的办法设置 <code>Cache-Control</code> 头，从而构建客户端自己的缓存处理。</p><p>但是，只要服务端提供正确的头信息，这一步就可以省略，OkHttp 会自动进行缓存。</p><p>不过，我们还是需要通过 builder 的 <code>cache()</code> 方法来<strong>设置缓存的路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File cacheDir = getCacheDir();</span><br><span class="line">Cache cache = <span class="keyword">new</span> Cache(cacheDir);</span><br><span class="line">builder.cache(cache);</span><br></pre></td></tr></table></figure><h3 id="31-构建自己的缓存处理策略"><a class="markdownIt-Anchor" href="#31-构建自己的缓存处理策略"></a> 3.1 构建自己的缓存处理策略</h3><p>通过拦截器设置 <code>Cache-Control</code> 头，可以构建自己的缓存处理策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">File cacheFile = <span class="keyword">new</span> File(DemoApplication.getContext().getExternalCacheDir(), <span class="string">"WuXiaolongCache"</span>);</span><br><span class="line">Cache cache = <span class="keyword">new</span> Cache(cacheFile, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>);</span><br><span class="line">Interceptor cacheInterceptor = <span class="keyword">new</span> Interceptor() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = chain.request();</span><br><span class="line">        <span class="keyword">if</span> (!AppUtils.networkIsAvailable(DemoApplication.getContext())) &#123;</span><br><span class="line">            request = request.newBuilder()</span><br><span class="line">                    .cacheControl(CacheControl.FORCE_CACHE)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        Response response = chain.proceed(request);</span><br><span class="line">        <span class="keyword">if</span> (AppUtils.networkIsAvailable(DemoApplication.getContext())) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxAge = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 有网络时 设置缓存超时时间0个小时</span></span><br><span class="line">            response.newBuilder()</span><br><span class="line">                    .header(<span class="string">"Cache-Control"</span>, <span class="string">"public, max-age="</span> + maxAge)</span><br><span class="line">                    .removeHeader(<span class="string">"WuXiaolong"</span>)<span class="comment">// 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效</span></span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无网络时，设置超时为4周</span></span><br><span class="line">            <span class="keyword">int</span> maxStale = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">28</span>;</span><br><span class="line">            response.newBuilder()</span><br><span class="line">                    .header(<span class="string">"Cache-Control"</span>, <span class="string">"public, only-if-cached, max-stale="</span> + maxStale)</span><br><span class="line">                    .removeHeader(<span class="string">"nyn"</span>)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">builder.cache(cache).addInterceptor(cacheInterceptor);</span><br></pre></td></tr></table></figure><h2 id="4-头信息"><a class="markdownIt-Anchor" href="#4-头信息"></a> 4. 头信息</h2><p>有时候我们需要自己定义头信息；<br>包括最基本的 <code>Accept</code> 和 <code>Content-Type</code> 信息；<br>还有就是服务器要求验证的时候，我们需要提供 <code>Authentication</code> 信息。</p><p>头信息当然可以在 <code>ApiServices</code> 接口中通过注解来指定；<br>但是如果我们要所有的请求都带上头信息的话，使用注解来指定势必显得太过麻烦了。</p><p>此时，我们使用 OkHttp 的 <code>Interceptor</code> 来进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Interceptor interceptor = <span class="keyword">new</span> Interceptor() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 直接使用旧请求新建</span></span><br><span class="line">        Request originalRequest = chain.request();</span><br><span class="line"></span><br><span class="line">        Request request = originalRequest.newBuilder()</span><br><span class="line">                        .header(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">                        .header(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">builder.addInterceptor(interceptor);</span><br></pre></td></tr></table></figure><h2 id="5-日志"><a class="markdownIt-Anchor" href="#5-日志"></a> 5. 日志</h2><p>众所周知，网络如果没有日志打印是无法调 bug 的。<br>那么如何在使用 retrofit 时打印网络日志呢？</p><p>同样，我们使用还是 OkHttp 的 <code>Interceptor</code>。</p><p>但是，这次稍微有点不同，因为我们使用的是 retrofit 提供的官方打日志专用拦截器。</p><p><strong>注意，日志拦截器必须在第一位！</strong></p><h3 id="51-添加依赖"><a class="markdownIt-Anchor" href="#51-添加依赖"></a> 5.1 添加依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span></span><br></pre></td></tr></table></figure><h3 id="52-配置拦截器"><a class="markdownIt-Anchor" href="#52-配置拦截器"></a> 5.2 配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</span><br><span class="line">logging.setLevel(Level.BASIC);</span><br><span class="line"></span><br><span class="line">builder.addIntercetor(logging);</span><br></pre></td></tr></table></figure><h2 id="6-构建-client"><a class="markdownIt-Anchor" href="#6-构建-client"></a> 6. 构建 client</h2><p>当配置完毕后，就可以用我们的 Builder 生成 client 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = builder.build();</span><br></pre></td></tr></table></figure><h2 id="7-将-client-加入-retrofit-builder"><a class="markdownIt-Anchor" href="#7-将-client-加入-retrofit-builder"></a> 7. 将 client 加入 retrofit builder</h2><p>最后，要让我们的 retrofit 使用 client 才能达到效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retrofitBuilder.client(client);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Retrofit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin lateinit vs lazy</title>
      <link href="//Kotlin/Kotlin%20lateinit%20vs%20lazy/"/>
      <url>//Kotlin/Kotlin%20lateinit%20vs%20lazy/</url>
      
        <content type="html"><![CDATA[<p><code>lateinit</code> 和 <code>lazy</code> 是 Kotlin 中的两种不同的延迟初始化技术。</p><p>在 Kotlin 使用中，很可能搞不清楚它们的使用场景和方法。下面就来做一个理清：</p><ol><li><code>lateinit</code> 只用于 <code>var</code>，而 <code>lazy</code> 只用于 <code>val</code></li><li><code>lateinit</code> 和 <code>lazy</code> 都不能有 <strong>自定义的 getter 和 setter</strong>，但是可以对 getter 和 setter 进行可见符修饰</li><li><code>lazy</code> 应用于单例模式(<code>if-null-then-init-else-return</code>)，而且当且仅当变量被<strong>第一次调用</strong>的时候，委托方法才会执行。</li><li><code>lateinit</code> 则用于只能生命周期流程中进行获取或者初始化的变量，比如 Android 的 <code>onCreate()</code></li><li>当单例对象需要使用外界参数来进行构造时，内部的该参数对应的属性应使用 <code>lateinit</code><blockquote><p>比如说网络 <code>ApiManager</code> 需要 <code>context</code> 来进行获取缓存的操作；<br>那么，<code>ApiManager</code> 中的 <code>context</code> 属性就必须使用 <code>lateinit</code></p><p>这是因为，<code>lazy</code> 使用委托方法来进行变量初始化，而委托方法不能从外界获取参数，但是 <code>lateinit</code> 可以通过一个 <code>init(context: Context)</code> 来获取到相应的外界参数来初始化属性。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Design 高度和阴影</title>
      <link href="//MaterialDesign/Material%20Design%20%E9%AB%98%E5%BA%A6%E5%92%8C%E9%98%B4%E5%BD%B1/"/>
      <url>//MaterialDesign/Material%20Design%20%E9%AB%98%E5%BA%A6%E5%92%8C%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>在 Materail Design 中，物体的行为和真实世界中很相似。</p><center><img width="300/" data-src="http://ooo.0o0.ooo/2016/10/25/580f8d694233c.png"></center><a id="more"></a><p>在真实世界中，物体堆放和叠加在一起，但是不能穿过彼此，并且会投射出阴影。<br>Material Design 的实体与之类似，也需要投射阴影。</p><p>Material Design 实体具有以下三个高度属性：</p><ul><li><p>高度：指的是一个物体 <strong>表面</strong> 到另一物体表面的距离。物体的高度决定了它的阴影投射情况</p></li><li><p>默认高度：任何的实体都具有默认高度(Resting Elevation)，在一个平台中，组件的默认高度是 <strong>一致的</strong>，但是不同的 <strong>平台</strong> 或者 <strong>设备</strong> 可能具有不同的默认高度。</p></li><li><p>动态的高度偏移：这个属性指的是实体在 <strong>响应事件时</strong> 相对于 <strong>默认高度</strong> 的偏移量。</p></li></ul><h2 id="2-高度android"><a class="markdownIt-Anchor" href="#2-高度android"></a> 2. 高度（Android）</h2><h3 id="21-说明"><a class="markdownIt-Anchor" href="#21-说明"></a> 2.1 说明</h3><p>高度的表示单位也是 dp，与 x 和 y 坐标一样。</p><p>需要注意的是，由于实体也具有厚度(1 dp)，所以高度指的是从一个实体表面到另一个实体表面的距离。</p><center><img width="550/" data-src="http://ooo.0o0.ooo/2016/10/25/580f911c51c09.png"></center><p>同时，一个子对象的高度，指的是其 <strong>相对于父对象的距离</strong>。</p><h3 id="22-默认高度"><a class="markdownIt-Anchor" href="#22-默认高度"></a> 2.2 默认高度</h3><p>默认高度是不会变化的，当一个组件的高度变化时，它应该尽快的恢复默认高度。</p><p>各个 Android 组件的默认高度可以到<span class="exturl" data-url="aHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21hdGVyaWFsLWRlc2lnbi9lbGV2YXRpb24tc2hhZG93cy5odG1sI2VsZXZhdGlvbi1zaGFkb3dzLWVsZXZhdGlvbi1hbmRyb2lk" title="https://material.google.com/material-design/elevation-shadows.html#elevation-shadows-elevation-android">官网<i class="fa fa-external-link"></i></span>查看。</p><p>对于桌面环境来说，为了容纳鼠标和其他非触摸事件，它的组件的默认高度要比 Android 组件的默认高度低 2 dp。</p><p>组件的高度在不同的 App 之间应该相同，但是在不同设备之间不同。</p><p>比如说电视和 PC 就比手机具有更深的层次。</p><h3 id="23-感应高度和动态的高度偏移"><a class="markdownIt-Anchor" href="#23-感应高度和动态的高度偏移"></a> 2.3 感应高度和动态的高度偏移</h3><p>一些组件可能拥有感应高度，也就是说它会根据用户的输入（比如说触摸事件）来改变自己的高度。</p><p>一般来说，触摸，或者按压一个组件会使它的高度变高。</p><p>这些高度变化是通过 <strong>动态高度偏移</strong> 实现的。</p><p>动态高度偏移是相对于默认高度来说，组件需要移动的高度量。</p><p>动态高度偏移保证了在移动应用中组件高度偏移量的一致性。组件接受到触摸事件后，都能有一个不变的高度偏移量。</p><p>一旦触摸事件完毕，或者被取消，那么组件就必须恢复到其默认高度。</p><h3 id="24-避免高度冲突"><a class="markdownIt-Anchor" href="#24-避免高度冲突"></a> 2.4 避免高度冲突</h3><p>拥有感应高度的组件可能会导致其他组件随着其高度变化而变化，这是因为 <strong>组件不可以相互穿透</strong>。</p><p>避免冲突的方法有很多：</p><p>在某一元素水平上，元素可以在它们产生冲突前提前移动或者消失。比如说一个 FAB 就可以在用户选择一个卡片的时候消失或者移出屏幕。</p><p>在布局水平上，你需要通过设计你的 App 布局来减少冲突的可能性。</p><p>比如说将 FAB 置于卡片列表的一端来避免 FAB 与卡片出现的冲突。</p><h3 id="25-组件高度比较"><a class="markdownIt-Anchor" href="#25-组件高度比较"></a> 2.5 组件高度比较</h3><center><img data-src="http://ooo.0o0.ooo/2016/10/25/580f97a8896b0.png"></center><p>图中只有组件的高度是正确的，其他的属性(比如面积)不一定正确</p><center>![whatismaterial_3d_elevation3](https://ooo.0o0.ooo/2016/10/25/580f985cb48ba.png)</center>一个卡片，App Bar 和 FAB 的例子<center>![whatismaterial_3d_elevation4](https://ooo.0o0.ooo/2016/10/25/580f989bbcbd6.png)</center>另一个 Navigation Drawer 的例子<h2 id="3-阴影"><a class="markdownIt-Anchor" href="#3-阴影"></a> 3. 阴影</h2><p>阴影给物体的高度和其运动的方向给予了一个重要的视觉线索。</p><p>它们也是唯一的用于区分不同平面的视觉线索。</p><p>一个物体的阴影由其高度决定。</p><center><img width="300/" data-src="http://ooo.0o0.ooo/2016/10/25/580f99629c60b.png"></center><div style="color:#d32f2f;text-align:center">不可取，没有阴影，无法区分 FAB 和背景</div><center><img width="300/" data-src="http://ooo.0o0.ooo/2016/10/25/580f9a338a84a.png"></center><div style="color:#d32f2f;text-align:center">不可取，过于脆弱的阴影表示 FAB 和蓝色背景是在同一个平面的</div><center><img width="300/" data-src="http://ooo.0o0.ooo/2016/10/25/580f9afa716f2.png"></center><div style="color:#4caf50;text-align:center">可取，较大且柔软的阴影表示 FAB 的高度比蓝色背景要高。</div><p>当出现触摸事件时，阴影可以提供一个物体运动方向的视觉线索，以体现物体和平面之间的相对距离。</p><center><img width="300/" data-src="http://ooo.0o0.ooo/2016/10/27/581193071df86.png"></center><div style="color:#d32f2f;text-align:center">不可取，没有阴影无法指示物体是增大体积还是增加高度</div><center><img width="300/" data-src="http://ooo.0o0.ooo/2016/10/27/581193e7b8cfa.png"></center><div style="color:#4caf50;text-align:center">可取，阴影变得更大，更柔软表明了物体的高度在增加；<br>反之，阴影变得更小，更脆弱表明物体的高度在减少</div><center><img width="300/" data-src="http://ooo.0o0.ooo/2016/10/27/581194ad53a92.png"></center><div style="color:#4caf50;text-align:center">可取，阴影不改变，表明物体的高度没有增加，而只是体积增大了。</div><h3 id="31-组件参考高度"><a class="markdownIt-Anchor" href="#31-组件参考高度"></a> 3.1 组件参考高度</h3><p>下面列出一些组件的参考高度，它们应当作为高度的典范来使用。</p><h4 id="311-app-bar"><a class="markdownIt-Anchor" href="#311-app-bar"></a> 3.1.1 App Bar</h4><p><strong>4dp</strong></p><p><img alt="whatismaterial_3d_elevation_component06" data-src="https://ooo.0o0.ooo/2016/10/27/581197337063a.png"></p><h4 id="312-raised-button"><a class="markdownIt-Anchor" href="#312-raised-button"></a> 3.1.2 Raised Button</h4><p>默认高度： <strong>2dp</strong><br>按下高度： <strong>8dp</strong></p><p><img alt="whatismaterial_3d_elevation_component02" data-src="https://ooo.0o0.ooo/2016/10/27/581197947852f.png"></p><h4 id="313-floating-action-buttonfab"><a class="markdownIt-Anchor" href="#313-floating-action-buttonfab"></a> 3.1.3 Floating Action Button(FAB)</h4><p>默认高度： <strong>6dp</strong><br>按下高度： <strong>12dp</strong></p><p><img alt="whatismaterial_3d_elevation_component08" data-src="https://ooo.0o0.ooo/2016/10/27/581198129617a.png"></p><h4 id="314-card"><a class="markdownIt-Anchor" href="#314-card"></a> 3.1.4 Card</h4><p>按下高度： <strong>2dp</strong><br>抬起高度： <strong>8dp</strong></p><p><img alt="whatismaterial_3d_elevation_component03" data-src="https://ooo.0o0.ooo/2016/10/27/58119867c7e68.png"></p><h4 id="315-menus-and-sub-menus"><a class="markdownIt-Anchor" href="#315-menus-and-sub-menus"></a> 3.1.5 Menus and sub menus</h4><p>菜单： <strong>8dp</strong></p><p>每个子菜单相对于父菜单增加 1dp</p><p><img alt="whatismaterial_3d_elevation_component09" data-src="https://ooo.0o0.ooo/2016/10/27/581198f529dfc.png"></p><h4 id="316-dialogs"><a class="markdownIt-Anchor" href="#316-dialogs"></a> 3.1.6 Dialogs</h4><p><strong>24dp</strong></p><p><img alt="whatismaterial_3d_elevation_component12" data-src="https://ooo.0o0.ooo/2016/10/27/5811992fdb62f.png"></p><h4 id="317-nav-drawer-and-right-drawer"><a class="markdownIt-Anchor" href="#317-nav-drawer-and-right-drawer"></a> 3.1.7 Nav Drawer and Right Drawer</h4><p><strong>16dp</strong></p><p><img alt="whatismaterial_3d_elevation_component10" data-src="https://ooo.0o0.ooo/2016/10/27/5811998438b5d.png"></p><h4 id="318-modal-button-sheet"><a class="markdownIt-Anchor" href="#318-modal-button-sheet"></a> 3.1.8 Modal Button Sheet</h4><p><strong>16dp</strong></p><p><img alt="whatismaterial_3d_elevation_component11" data-src="https://ooo.0o0.ooo/2016/10/27/581199c05092c.png"></p><h4 id="319-refresh-indecator"><a class="markdownIt-Anchor" href="#319-refresh-indecator"></a> 3.1.9 Refresh indecator</h4><p><strong>3dp</strong></p><p><img alt="whatismaterial_3d_elevation_component05" data-src="https://ooo.0o0.ooo/2016/10/27/58119a02a62c2.png"></p><h4 id="3110-quick-entrysearch-bar"><a class="markdownIt-Anchor" href="#3110-quick-entrysearch-bar"></a> 3.1.10 Quick entry/Search bar</h4><p>默认高度： <strong>2dp</strong><br>滚动高度： <strong>3dp</strong></p><p><img alt="whatismaterial_3d_elevation_component04" data-src="https://ooo.0o0.ooo/2016/10/27/58119a4d3e9cd.png"></p><h4 id="3111-snackbar"><a class="markdownIt-Anchor" href="#3111-snackbar"></a> 3.1.11 Snackbar</h4><p><strong>6dp</strong></p><p><img alt="whatismaterial_3d_elevation_component07" data-src="https://ooo.0o0.ooo/2016/10/27/58119a7fe42f7.png"></p><h4 id="3112-switch"><a class="markdownIt-Anchor" href="#3112-switch"></a> 3.1.12 Switch</h4><p><strong>1dp</strong></p><p><img alt="whatismaterial_3d_elevation_component01" data-src="https://ooo.0o0.ooo/2016/10/27/58119aa685bdd.png"></p><h2 id="4-对象间关系"><a class="markdownIt-Anchor" href="#4-对象间关系"></a> 4. 对象间关系</h2><p>对象和对象集合间的关系和组织结构就决定了，当某个对象移动时，其他的对象是否随其移动。</p><p>对象可以独立的移动，也可以被其他上层对象的移动而随其移动</p><h3 id="41-对象的层次结构"><a class="markdownIt-Anchor" href="#41-对象的层次结构"></a> 4.1 对象的层次结构</h3><p>所有的对象都在一个 <strong>父子关系</strong> 的组织结构中。</p><blockquote><p>由于 Android 采用 XML 标签结构</p></blockquote><p>一个对象可以是系统的子对象，也可以是另一个对象的子对象。</p><p>父子关系的说明：</p><ul><li>任何一个对象都有一个父对象</li><li>任何一个对象可以拥有 0 或多个子对象</li><li>子对象从父对象中继承可变属性，例如位置，旋转角度，放大倍数，和高度</li><li>同一层级的两个对象称为兄弟对象</li></ul><p>如图，卡片上的按钮随着内容的滚动而滚动</p><p><img alt="ezgif-979248372" data-src="https://ooo.0o0.ooo/2016/10/27/5811aa8d33959.gif"></p><h3 id="42-例外"><a class="markdownIt-Anchor" href="#42-例外"></a> 4.2 例外</h3><p>父对象是根对象的对象，例如一些主要的 UI 组件，它们的移动是独立于其他对象的。</p><p>比如说，一个 FAB 是不会随着内容的移动而滚动的。</p><p>其他的这种对象还包括：</p><ul><li>Nav drawer</li><li>App bar</li><li>Dialogs</li></ul><p>如图，FAB 不随着内容的滚动而滚动</p><p><img alt="ezgif-3827406795" data-src="https://ooo.0o0.ooo/2016/10/27/5811b33c38ca6.gif"></p><h3 id="43-交互"><a class="markdownIt-Anchor" href="#43-交互"></a> 4.3 交互</h3><p>对象和其他对象的交互动作由它所在的结构位置决定。</p><p>例如：</p><ul><li>子对象具有一个能与父对象区分的最小 z 轴高度。其他的对象不能插入到这个父对象和子对象之间</li><li>滚动的卡片是兄弟对象，所以它们会一起移动。而控制它们移动的就是它们的父对象。</li></ul><h3 id="44-高度"><a class="markdownIt-Anchor" href="#44-高度"></a> 4.4 高度</h3><p>对象的高度取决于它的内容的结构还有它是否能独立于其他对象移动。</p>]]></content>
      
      
      <categories>
          
          <category> MaterialDesign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MaterialDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit 离线缓存</title>
      <link href="//Android/Retrofit/Retrofit%20%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/"/>
      <url>//Android/Retrofit/Retrofit%20%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Retrofit2 自从默认使用 OkHttp 库之后，自带了缓存功能；</p><p>但是，这个缓存功能是在线缓存，也就是<strong>向服务器发起请求，服务器返回 304</strong>，而不是直接从缓存读取而不发起网络请求。</p><p>这样，当我们的应用处在离线状态时候，就无法读取缓存中的内容了。</p><p>这对于用户体验来说显然是不好的，所以这篇文章就介绍一下如何配置 Retrofit 和 OkHttp 来进行<strong>离线缓存</strong></p><a id="more"></a><h2 id="2-设置缓存路径"><a class="markdownIt-Anchor" href="#2-设置缓存路径"></a> 2. 设置缓存路径</h2><p>为了使用 OkHttp 的缓存，我们就必须设置相应的缓存路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File cacheDir = getCacheDir();</span><br><span class="line">Cache cache = <span class="keyword">new</span> Cache(cacheDir);</span><br><span class="line"></span><br><span class="line">client = builder.cache(cacheDir).build();</span><br></pre></td></tr></table></figure><h2 id="3-配置拦截器"><a class="markdownIt-Anchor" href="#3-配置拦截器"></a> 3. 配置拦截器</h2><p>OkHttp 可以通过拦截器来实现对请求(<code>Request</code>)和响应(<code>Response</code>)的魔改。</p><p>我们实现离线缓存的方式，就是采用这个拦截器对响应进行魔改。</p><h3 id="31-通过-cachecontrol-配置缓存"><a class="markdownIt-Anchor" href="#31-通过-cachecontrol-配置缓存"></a> 3.1 通过 <code>CacheControl</code> 配置缓存</h3><p>首先，我们要对我们的缓存策略进行配置，最好的当然就是使用 OkHttp 自带的 <code>CacheControl</code> 进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CacheControl.Builder cacheBuilder = <span class="keyword">new</span> CacheControl.Builder();</span><br><span class="line">cacheBuilder.maxAge(<span class="number">0</span>, TimeUnit.SECONDS);<span class="comment">//这个是控制缓存的最大生命时间</span></span><br><span class="line">cacheBuilder.maxStale(<span class="number">365</span>,TimeUnit.DAYS);<span class="comment">//这个是控制缓存的过时时间</span></span><br><span class="line">CacheControl cacheControl = cacheBuilder.build();</span><br></pre></td></tr></table></figure><h3 id="32-建立拦截器"><a class="markdownIt-Anchor" href="#32-建立拦截器"></a> 3.2 建立拦截器</h3><p>和自定义 <code>Response</code> 缓存不同，对于离线缓存，我们对 <code>Request</code> 进行处理；</p><p>当离线时，给 <code>Request</code> 赋予一个缓存控制对象，然后直接 proceed 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Request request = chain.request();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 离线状态下才进行自定义缓存控制</span></span><br><span class="line"><span class="keyword">if</span>(!StateUtils.isNetworkAvailable(MyApp.mContext))&#123;</span><br><span class="line">    request = request.newBuilder()</span><br><span class="line">            .cacheControl(cacheControl)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response response = chain.proceed(request);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Retrofit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作总结报告</title>
      <link href="//Projects/BigInovation/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/"/>
      <url>//Projects/BigInovation/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>负责了地图 UI 界面的构建和与整个应用的集成，以及应用的网络模块、和后端交互的逻辑，还有整个项目工程的代码管理。</p><p>地图的 UI 界面使用了 GitHub 上的一个耦合度较低的表示层地图视图库，将其进行一定程度的优化后，应用到本项目中，之所以选择它是因为目前的优秀地图显示层均与对应的地图框架<strong>高度耦合</strong>，不方便二次开发和 Bug 修复。</p><p>应用网络模块采用了目前 Android 上最为优秀的 Retrofit 2 作为网络加载库，通过完全 <strong>RESTful</strong> 的网络调用和后端服务器进行交互，与后端的 Django 框架完美契合。</p><p>整个项目的工程代码使用了全球最大的代码托管网站 GitHub ，以<strong>私有仓库</strong>的方式将代码托管在其服务器上。</p><p>采用 Git 作为代码版本管理工具，并采用 GitHub 上最流行的 Pull Request 工作流，保证了成员即使采用远程工作模式，也可以无障碍的与组员沟通；同时，将主分支设置为保护分支，要求代码<strong>经过审查后</strong>方可合并，确保了代码的可用性，正确性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> 大创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> 大创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Asserts Folder</title>
      <link href="//Android/Create%20Asserts%20Folder/"/>
      <url>//Android/Create%20Asserts%20Folder/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>Android 如何创建 Asserts 文件夹，用来存储一些需要内置在 app 里的大资源呢？</p><p>步骤如下：</p><a id="more"></a><h2 id="1-右边栏移动到-android-视图"><a class="markdownIt-Anchor" href="#1-右边栏移动到-android-视图"></a> 1. 右边栏移动到 Android 视图</h2><p><img alt="QQ20161018-0@2x" data-src="https://ooo.0o0.ooo/2016/10/17/5804f86dc041d.png"></p><h2 id="2-在-app-处右键"><a class="markdownIt-Anchor" href="#2-在-app-处右键"></a> 2. 在 app 处右键</h2><p><strong>New -&gt; Folder -&gt; Asserts Folder</strong></p><p><img alt data-src="https://code2care.org/2015/create-assets-folder-in-android-studio/images//Click%20on%20New%20folder%20assets%20folder.png"></p><h2 id="3-按照对话框提示进行即可"><a class="markdownIt-Anchor" href="#3-按照对话框提示进行即可"></a> 3. 按照对话框提示进行即可</h2><p><img alt data-src="https://code2care.org/2015/create-assets-folder-in-android-studio/images//Create%20a%20source%20root%20for%20assets%20which%20will%20be%20incuded%20in%20APK.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 多个 icon 问题</title>
      <link href="//Android/Android%20%E5%A4%9A%E4%B8%AA%20icon%20%E9%97%AE%E9%A2%98/"/>
      <url>//Android/Android%20%E5%A4%9A%E4%B8%AA%20icon%20%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近在开发中遇到的 Android App 安装后，同一个 app 居然在应用列表里出现了<strong>两个或者以上的图标</strong>，这是怎么回事呢？</p><p>原来，Android 只要指定了 <code>action.MAIN</code> 的 <code>Activity</code> 就会显示一个图标，<br>而且图标的名字和 <code>Activity</code> 的 <code>android:label</code> 相同。</p><p>所以，解决办法就是只保留一个 <code>action.MAIN</code>。</p><p>同时，如果引入了其他 <code>module</code>，<strong>也要检查那个 <code>module</code> 的 manifest</strong>；</p><p>保证整个工程就只有一个 <code>action.MAIN</code></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Design 实体属性</title>
      <link href="//MaterialDesign/Material%20Design%20%E5%AE%9E%E4%BD%93%E5%B1%9E%E6%80%A7/"/>
      <url>//MaterialDesign/Material%20Design%20%E5%AE%9E%E4%BD%93%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p><strong>Material 具有某些不可变的特点和固有的行为模式</strong></p><center><img width="300" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0B7WCemMG6e0VU1RSV0tORnl5a2M/what_is_material_material_properties.png"></center><p>了解关于 Material 的特点能有助于你更好的利用 Material，以期与 Material Design 具有一致性。</p><a id="more"></a><h2 id="material-的特点"><a class="markdownIt-Anchor" href="#material-的特点"></a> Material 的特点</h2><ol><li>固体</li><li>占用空间中唯一的位置</li><li>不可穿透的</li><li>形状可改变</li><li>只在平面方向上改变大小</li><li>不可弯折</li><li>可以融入其他 Material</li><li>可以分割，分裂，和恢复</li><li>可以被创建和摧毁</li><li>可以在任何轴进行移动</li></ol><h2 id="物理特性"><a class="markdownIt-Anchor" href="#物理特性"></a> 物理特性</h2><h3 id="厚度"><a class="markdownIt-Anchor" href="#厚度"></a> 厚度</h3><p>实体具有可变化的长宽尺寸，和 1 dp 的厚度。</p><center><img width="300" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0B8v7jImPsDi-aTBFT1FDVEstenM/whatismaterial_materialproperties_physicalproperties_thickness_01_yes.png"></center><center><div style="color:#4caf50">Do，材料的长和宽可以变化</div></center><center><img width="300" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0B8v7jImPsDi-Sno0Qy1FY3UtaFk/whatismaterial_materialproperties_physicalproperties_thickness_02_no.png"></center><center><div style="color:#d32f2f">Don't，材料的厚度为 1 dp</div></center><h3 id="投射阴影"><a class="markdownIt-Anchor" href="#投射阴影"></a> 投射阴影</h3><p>投射阴影是用来表示两个实体之间的相对距离。</p><center><img width="500" data-src="http://i.imgur.com/sEbIYXv.gif"></center><center><div style="color:#4caf50">Do，材料的阴影是实体间距离的体现</div></center><center><img width="500" data-src="http://i.imgur.com/nlKqF3f.gif"></center><center><div style="color:#d32f2f">Don't，阴影不能用来描边</div></center><h3 id="内容"><a class="markdownIt-Anchor" href="#内容"></a> 内容</h3><p>内容能以任意的形状和颜色在实体上显示，内容不给实体增加厚度。</p><center><img width="500" data-src="http://i.imgur.com/iMyNv9h.gif"></center><center><div style="color:#4caf50">Do，内容能以任意的形状和颜色来展示</div></center><p>内容的行为可以独立于实体，但是被实体的大小所限制。</p><center><img width="500" data-src="http://i.imgur.com/gRC6fhQ.gif"></center><center><div style="color:#4caf50">Do，内容被实体大小所限制</div></center><h3 id="点击事件"><a class="markdownIt-Anchor" href="#点击事件"></a> 点击事件</h3><p>实体是<strong>固体</strong>。</p><p>点击事件不能穿过实体。</p><center><img width="400/" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0Bx4BSt6jniD7bDZac2JGV2RUNk0/whatismaterial_properties_physical3.png"></center><center><div style="color:#4caf50">Do, 点击事件只能影响前台实体</div></center><center><img width="400/" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0Bx4BSt6jniD7RVdsUWRKN2xlaGc/whatismaterial_properties_physical4.png"></center><center><div style="color:#d32f2f">Don't，点击事件不能穿过实体</div></center>]]></content>
      
      
      <categories>
          
          <category> MaterialDesign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MaterialDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 自动更新走代理</title>
      <link href="//windows%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%B5%B0%E4%BB%A3%E7%90%86/"/>
      <url>//windows%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%B5%B0%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本部校园网 v4 收费，windows 更新又是刚需，那么如何让 windows 自动更新走代理呢？</p><p>其实只需要一条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp <span class="built_in">set</span> proxy proxy-server=<span class="string">"proxyserver:8080"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>即可让 windows 的“设置”走代理。</p><p><strong>注意，设置中的代理选项对其本身是不起作用的。</strong></p><p>这点还是 *nix 好啊。</p><p>当然，也有想要直连的时候，使用如下命令即可恢复直连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网内网服务器简易开启方法</title>
      <link href="//%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E6%98%93%E5%BC%80%E5%90%AF%E6%96%B9%E6%B3%95/"/>
      <url>//%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E6%98%93%E5%BC%80%E5%90%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-windows"><a class="markdownIt-Anchor" href="#1-windows"></a> 1. Windows</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># python3</span><br><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>Windows 虽说自带局域网功能，但需要配置一大堆东西甚是麻烦。</p><p>装上 python，直接一条指令搞定。</p><a id="more"></a><h2 id="2-unix-like"><a class="markdownIt-Anchor" href="#2-unix-like"></a> 2. Unix-like</h2><p>*.nix 系统的同学应该很熟悉了，使用 <code>darkhttpd</code> 命令行工具就可以开启本地服务器。</p><p>当然也可以使用 python 的方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> LocalNetwork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14. 无向图</title>
      <link href="//Algorithm/14.%20%E6%97%A0%E5%90%91%E5%9B%BE/"/>
      <url>//Algorithm/14.%20%E6%97%A0%E5%90%91%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="141-术语"><a class="markdownIt-Anchor" href="#141-术语"></a> 14.1 术语</h2><p>图是由一组<strong>顶点</strong>和将点连接起来的<strong>边</strong>组成的。</p><ol><li><p>相邻：如果两个顶点被至少一条边连接，那么就称顶点<strong>相邻</strong>，并称边<strong>依附于</strong>顶点。</p></li><li><p>顶点的度：依附于它的<strong>边的条数</strong></p></li><li><p>子图：一幅图的子集（包括边和顶点）组成的图</p></li><li><p>路径：由边顺序连接的一组<strong>顶点</strong></p><blockquote><p>其中又分为<strong>简单路径</strong>和<strong>环</strong>：<br><strong>简单路径</strong>：没有重复顶点的路径<br><strong>简单环</strong>：起点和终点必须相同的没有重复顶点和边的环</p></blockquote></li></ol><a id="more"></a><ol start="5"><li><p>连通图：如果从任何一个顶点都存在一条路径到达另一个任意节点，那么称这幅图为<strong>连通图</strong></p><blockquote><p>如果一副<strong>非联通图</strong>由若干个<strong>连通部分</strong>组成，那么这些部分都叫做<strong>极大连通子图</strong></p></blockquote></li><li><p>无环图：就是没有环的图</p><blockquote><p>树是一幅无环连通图</p></blockquote></li><li><p>密度：已经连接的<strong>顶点对</strong>占所有<strong>可能被连接的顶点对</strong>的比例。</p><blockquote><p>这派生出了两个概念，<strong>稀疏图</strong>和<strong>稠密图</strong>。<br>一般来说，如果一幅图中不同的边的数量在顶点总数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span></span></span></span>的一个小常数倍内，那么这幅图就是稀疏的</p></blockquote></li><li><p>二分图：一种能够将所有顶点分成两部分的图，其中每条边都<strong>连着两个不同的顶点</strong></p></li></ol><h2 id="142-表示法"><a class="markdownIt-Anchor" href="#142-表示法"></a> 14.2 表示法</h2><h3 id="1420-api"><a class="markdownIt-Anchor" href="#1420-api"></a> 14.2.0 API</h3><p>为了解决有关图的问题，下面定义一个图的基本 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> V)</span> <span class="comment">// Create graph using the Vertex number</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">Graph</span><span class="params">(In in)</span> <span class="comment">// Create graph from input stream</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">V</span><span class="params">()</span></span>;      <span class="comment">// The number of Vertex</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">E</span><span class="params">()</span></span>;      <span class="comment">// The number of Edge</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add edge v-w into graph</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The vertexes adjacent to v</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>; <span class="comment">// The string explanation of graph</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1421-邻接矩阵"><a class="markdownIt-Anchor" href="#1421-邻接矩阵"></a> 14.2.1 邻接矩阵</h3><p>使用一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>×</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">V \times V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span></span></span></span> 的<strong>布尔矩阵</strong>来表示图，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span> 相邻时，将 <code>v</code> 行 <code>w</code> 列的元素标记为 <code>true</code>，否则为 <code>false</code></p><p>这种方法需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">V^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 个布尔值的空间，实际上十分耗费存储空间，不实用。</p><p>而且当图具有<strong>平行边</strong>时，邻接矩阵无法准确表示这一结构。</p><h3 id="1422-边的数组"><a class="markdownIt-Anchor" href="#1422-边的数组"></a> 14.2.2 边的数组</h3><p>我们可以定义一个 <code>Edge</code> 类，其中使用两个 <code>int</code> 变量来表示所连接的两个顶点。</p><p>但是这一结构无法实现 <code>adj()</code>，实现它需要检查图中所有的边。</p><h3 id="1423-邻接表数组"><a class="markdownIt-Anchor" href="#1423-邻接表数组"></a> 14.2.3 邻接表数组</h3><p>我们可以使用一个<strong>以顶点为索引</strong>的列表数组，其中每个元素都是和该顶点相邻的<strong>顶点列表</strong>。</p><p>即，每个数组元素既是一个<strong>顶点</strong>也是一个<strong>链表头</strong>，链表储存着与该顶点（链表头）相邻的<strong>所有顶点</strong>。</p><p><img alt="Adjacent Array" data-src="https://algs4.cs.princeton.edu/41graph/images/adjacency-lists.png"></p><p>它可以实现：</p><ol><li>使用的空间和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>+</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">V + E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span> 成正比</li><li>添加一条边所需的时间为常数</li><li>遍历顶点 v 的所有相邻顶点所需要的时间和 v 的度数成正比</li></ol><p>对于这些操作来说，这样的特性已经是最优的了，所以我们选择邻接表来作为图的数据结构</p><p>下面是图的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> V;        <span class="comment">// Vertex number</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> E;              <span class="comment">// Edge number</span></span><br><span class="line">    <span class="keyword">private</span> Bar&lt;Integer&gt;[] adj; <span class="comment">// adjacent array</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.V = V;</span><br><span class="line">        <span class="keyword">this</span>.E = <span class="number">0</span>;</span><br><span class="line">        adj = (Bag&lt;Integer&gt;[]) <span class="keyword">new</span> Bag[V];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            adj[v] = <span class="keyword">new</span> Bag&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(In in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(in.readInt());</span><br><span class="line">        <span class="keyword">int</span> E = in.readInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line">            <span class="comment">// Add Edge</span></span><br><span class="line">            <span class="keyword">int</span> v = in.readInt();</span><br><span class="line">            <span class="keyword">int</span> w = in.readInt();</span><br><span class="line">            addEdge(v, w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">E</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> E;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        adj[v].add(w);</span><br><span class="line">        adj[w].add(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 Puzzle</title>
      <link href="//Algorithm/8%20Puzzle/"/>
      <url>//Algorithm/8%20Puzzle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-intro"><a class="markdownIt-Anchor" href="#1-intro"></a> 1. Intro</h2><p>Give a 3-by-3 grid with 8 square blocks and 1 blank.<br>Rearrange the block to make it in order, using as <strong>few moves</strong> as possible.</p><p>Return the result of sequence. Like this below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   1  3        1     3        1  2  3        1  2  3        1  2  3</span><br><span class="line">4  2  5   =&gt;   4  2  5   =&gt;   4     5   =&gt;   4  5      =&gt;   4  5  6</span><br><span class="line">7  8  6        7  8  6        7  8  6        7  8  6        7  8</span><br><span class="line"></span><br><span class="line">initial        1 left          2 up          5 left          goal</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-best-first-search"><a class="markdownIt-Anchor" href="#2-best-first-search"></a> 2. Best-first search</h2><p>The best-first search is that from initial broad to the goal, we do our each step at the best, or small cost move.</p><h3 id="21-search-node"><a class="markdownIt-Anchor" href="#21-search-node"></a> 2.1 Search node</h3><p>First, we need to define our start and goal. We use a terminology called</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="//Algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>//Algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-二叉树的定义"><a class="markdownIt-Anchor" href="#1-二叉树的定义"></a> 1. 二叉树的定义</h2><p>二叉树是一种每个节点<strong>最多</strong>只能有两个子节点的树</p><blockquote><p>树是一种没有环的连通图</p></blockquote><p>在最顶层的节点叫做<strong>根节点</strong><br>没有子节点的节点叫叶节点，有子节点的节点叫做<strong>内部节点</strong></p><a id="more"></a><h2 id="2-二叉树的类型"><a class="markdownIt-Anchor" href="#2-二叉树的类型"></a> 2. 二叉树的类型</h2><h3 id="21-满二叉树"><a class="markdownIt-Anchor" href="#21-满二叉树"></a> 2.1 满二叉树</h3><p>国内定义：除了最后一层没有子节点以外，其他每一层的节点都有两个子节点</p><p>节点数和深度满足如下关系：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N_{leaf} = 2^{h} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.969438em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3361079999999999em"><span style="top:-2.5500000000000003em;margin-left:-.10903em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.01968em">l</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:.10764em">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.9824379999999999em;vertical-align:-.08333em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></span></p><p>国外定义 : 只有叶节点和度为 2 的节点的树就叫满二叉树</p><p>（在国内一般用国内定义（笑））</p><h3 id="22-完全二叉树"><a class="markdownIt-Anchor" href="#22-完全二叉树"></a> 2.2 完全二叉树</h3><p>至多只有最下面的两层上的节点的度数可以小于 2，并且最下层的节点都在最左边的若干位置上。</p><p>满二叉树：</p><p><img alt="Full Binary Tree" data-src="https://web.cecs.pdx.edu/~sheard/course/Cs163/Graphics/FullBinary.jpg"></p><p>完全二叉树:</p><p><img alt="Complete Binary Tree" data-src="https://web.cecs.pdx.edu/~sheard/course/Cs163/Graphics/CompleteBinary.jpg"></p><h2 id="3-实现"><a class="markdownIt-Anchor" href="#3-实现"></a> 3. 实现</h2><h3 id="31-数组实现"><a class="markdownIt-Anchor" href="#31-数组实现"></a> 3.1 数组实现</h3><p>这种实现方法就是按照完全二叉树的形式将节点置于相应的数组单元之中。<br>所以，如果一个节点的索引是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span>，那么，<br>它的父亲的索引是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mi>k</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor k \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">⌊</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">⌋</span></span></span></span>；<br>它的左子结点的索引是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>k</mi></mrow><annotation encoding="application/x-tex">2k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span>，右子结点的索引是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2k + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.77777em;vertical-align:-.08333em"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></p><p>这种实现方式最适合于<strong>完全二叉树</strong>，如果一个不完全的二叉树使用这种方法实现，会浪费许多的空间。</p><h3 id="32-链表实现"><a class="markdownIt-Anchor" href="#32-链表实现"></a> 3.2 链表实现</h3><p>相对于数组来说，使用链表实现能节省更多的空间。它的节点由三部分组成：<br>数据域，左子结点指针，和右子结点指针</p><p>Node:</p><table style="width:20em"><tr><td style="text-align:center;vertical-align:middle">leftChild</td><td style="text-align:center;vertical-align:middle">data</td><td style="text-align:center;vertical-align:middle">rightChild</td></tr></table><h2 id="4-遍历算法"><a class="markdownIt-Anchor" href="#4-遍历算法"></a> 4. 遍历算法</h2><p>一般来说，有三种方法可以遍历一个二叉树，它们是：</p><ol><li>先序遍历（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>L</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">DLR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:.00773em">R</span></span></span></span>）</li><li>中序遍历（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">LDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="mord mathdefault" style="margin-right:.00773em">R</span></span></span></span>）</li><li>后序遍历（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>R</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">LRD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mord mathdefault" style="margin-right:.02778em">D</span></span></span></span>）</li></ol><blockquote><p>它们都属于<strong>深度优先遍历</strong>方法<br>注意，只有三种方法的前提是<strong>左子结点比右子结点大</strong>，如果抛弃这个前提，则有至多六种方法</p></blockquote><h3 id="41-深度优先遍历"><a class="markdownIt-Anchor" href="#41-深度优先遍历"></a> 4.1 深度优先遍历</h3><blockquote><p>所谓的<strong>深度优先</strong>，指的是，<strong>优先搜索子孙节点，而不是优先搜索兄弟节点</strong></p></blockquote><h4 id="411-先序遍历"><a class="markdownIt-Anchor" href="#411-先序遍历"></a> 4.1.1 先序遍历</h4><ol><li>访问根节点</li><li>递归访问左子节点</li><li>递归访问右子结点</li></ol><h4 id="412-中序遍历"><a class="markdownIt-Anchor" href="#412-中序遍历"></a> 4.1.2 中序遍历</h4><ol><li>递归访问左子结点</li><li>访问根节点</li><li>递归访问右子结点</li></ol><h4 id="413-后序遍历"><a class="markdownIt-Anchor" href="#413-后序遍历"></a> 4.1.3 后序遍历</h4><ol><li>递归访问左子结点</li><li>递归访问右子结点</li><li>访问根节点</li></ol><h3 id="42-广度优先"><a class="markdownIt-Anchor" href="#42-广度优先"></a> 4.2 广度优先</h3><p>所谓的<strong>广度优先</strong>，就是<strong>优先访问兄弟节点，而不是子孙节点</strong><br>直到当前层访问完成前，都不进入下一层进行遍历</p><blockquote><p>一般使用队列来实现这种访问策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onVisit</span><span class="params">(Item item)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreadthFirst</span> </span>&#123;</span><br><span class="line">    Visitable&lt;Node&gt; visiter;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">breadFirstTraversal</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        Queue q = <span class="keyword">new</span> Queue();</span><br><span class="line">        q.enQueue(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Node node = q.deQueue();</span><br><span class="line">            visiter.onVisit(node);</span><br><span class="line">            <span class="keyword">if</span>(node.lChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                q.enQueue(node.lChild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.rChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                q.enQueue(node.rChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-线索二叉树"><a class="markdownIt-Anchor" href="#5-线索二叉树"></a> 5. 线索二叉树</h2><p>线索二叉树指的是，当我们使用链表来实现一个二叉树时，<br>使用一些节点的空的指针域来储存相应遍历策略的前一个或者后一个节点。</p><p>从而起到方便遍历和提高空间利用率的作用。</p><p>需要注意的是，一个线索二叉树是和它采用的<strong>访问策略</strong>相关的，同一个二叉树采用不同的访问策略，其对应的线索二叉树也会不同。</p><p>具体来说，对于两个子节点都为空的情况下，二叉树的左子树指向其遍历的前驱，右子树指向其遍历的后继。</p><h3 id="50-调整数据结构"><a class="markdownIt-Anchor" href="#50-调整数据结构"></a> 5.0 调整数据结构</h3><p>为了建立一个线索二叉树，我们需要对节点的数据域进行一些调整。</p><blockquote><p>增加了两个指示是否是子节点的 flag</p></blockquote><p>The Threaded Binary Tree Node:</p><table><tr><td style="text-align:center"><b>boolean</b> leftFlag</td><td style="text-align:center">leftChild</td><td style="text-align:center">Data</td><td style="text-align:center">rightChild</td><td style="text-align:center"><b>boolean</b> rightFlag</td></tr></table><h3 id="51-二叉树的中序线索化"><a class="markdownIt-Anchor" href="#51-二叉树的中序线索化"></a> 5.1 二叉树的中序线索化</h3><p>二叉树的线索化，实际上就是在遍历过程中，修改空链接的过程。</p><p>所以二叉树的线索化是和其遍历策略相关的。</p><p>对于中序遍历而言，就是在中序遍历过程中，将它的空链接给修改的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadedBinaryTree</span> </span>&#123;</span><br><span class="line">    Data data;</span><br><span class="line">    ThreadedBinaryTree leftChild;</span><br><span class="line">    <span class="keyword">boolean</span> leftFlag;</span><br><span class="line">    ThreadedBinaryTree rightChild;</span><br><span class="line">    <span class="keyword">boolean</span> rightFlag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用全局变量存储前驱</span></span><br><span class="line">ThreadedBinaryTree pre;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadingBinaryTree</span><span class="params">(ThreadedBinaryTree root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    threadingBinaryTree(root.leftChild);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.leftChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">        root.leftFlag = <span class="keyword">true</span>;</span><br><span class="line">        root.leftChild = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pre.rightChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">        pre.rightFlag = <span class="keyword">true</span>;</span><br><span class="line">        pre.rightChild = root; <span class="comment">// 指向后继，即当前节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pre = root;</span><br><span class="line"></span><br><span class="line">    threadingBinaryTree(root.rightChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面对于右子节点处理的时候要用 <code>pre</code> 的原因是：右子节点指向 <strong>后继</strong>，而后继是需要访问到下一个节点才能获取得到的；</p><p>所以对右子节点的处理才会使用 <code>pre</code>，是因为当前节点就是 <code>pre</code> 的后继。</p><h2 id="6-二叉树和森林"><a class="markdownIt-Anchor" href="#6-二叉树和森林"></a> 6. 二叉树和森林</h2><h3 id="61-森林的定义"><a class="markdownIt-Anchor" href="#61-森林的定义"></a> 6.1 森林的定义</h3><p>森林是由多个独立的二叉树组成的数据结构</p><p><img alt="Forest" data-src="https://helloacm.com/wp-images/acm/2012/data-structure/disjoint1.jpg"></p><blockquote><p>我们可以通过连接他们的根节点来构造一棵大型的树</p></blockquote><h3 id="62-森林的表示法"><a class="markdownIt-Anchor" href="#62-森林的表示法"></a> 6.2 森林的表示法</h3><p>为了能在物理上表示一个森林，我们首先会将其变成一棵大型的树，仅仅将它们的根节点连接起来即可。</p><h4 id="621-孩子兄弟表示法"><a class="markdownIt-Anchor" href="#621-孩子兄弟表示法"></a> 6.2.1 孩子兄弟表示法</h4><p>首先这个适用于链表实现的树。<br>森林的节点由三部分组成：</p><ol><li>数据域</li><li>左子结点指针</li><li>右边的兄弟节点指针</li></ol><p>Node:</p><table style="width:20em"><tr><td style="text-align:center;vertical-align:middle">leftChild</td><td style="text-align:center;vertical-align:middle">Data</td><td style="text-align:center;vertical-align:middle">brother</td></tr></table><p>既然，这个节点含有的域和一个二叉树的节点含有的域的数目和类型都是相同的。</p><p><strong>那么我们就可以在物理结构上将其认为是一个二叉树；</strong></p><p>这为我们提供了很大的便利性，由于森林可以转换为树，而任何的树都可以通过<strong>孩子兄弟表示法</strong>来转换为二叉树。</p><p>所以我们可以使用二叉树的遍历方法来对任何的树形结构进行遍历。</p><h2 id="7-哈夫曼树"><a class="markdownIt-Anchor" href="#7-哈夫曼树"></a> 7. 哈夫曼树</h2><p>哈夫曼树，也被叫做<strong>最优二叉树</strong>，是一种最小边权的加权二叉树</p><h3 id="71-特点"><a class="markdownIt-Anchor" href="#71-特点"></a> 7.1 特点</h3><ol><li>相同权重的哈夫曼树不是唯一的</li><li>哈夫曼树的子树可以随意调换，这个调换并不会影响到它的长度</li><li>具有权重的节点都是叶节点，其余节点的权重都是通过叶节点的权重相加得到的</li><li>拥有最大权重的节点，最靠近根节点</li><li>哈夫曼树没有度为 1 的节点</li><li>一个拥有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 个叶节点的哈夫曼树，拥有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2N - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 个节点</li></ol><h3 id="72-构造"><a class="markdownIt-Anchor" href="#72-构造"></a> 7.2 构造</h3><ol><li>将给出的加权节点置于一个集合中</li><li>从中选出 2 个最小权重的节点，将他们的权重相加，得到一个新的节点作为它们的根节点。</li><li>将这两个节点从集合中去除，同时将那个根节点加入到集合中</li><li>重复步骤 2 和 3，直到这个集合为空</li></ol><p>例如，假如我们有 5 个加权的节点</p><p><img alt="Huffman Nodes" data-src="https://ws3.sinaimg.cn/large/006tNc79ly1fnxgv39lwhj306901bgle.jpg"></p><p>根据上面的步骤，我们可以得到如下的树：</p><p><img alt data-src="https://ws4.sinaimg.cn/large/006tNc79ly1fnxgvuox7kj307706ywed.jpg"></p><p>或者如下的树：</p><p><img alt data-src="https://ws3.sinaimg.cn/large/006tNc79ly1fnxgw9hmylj307x073wed.jpg"></p><p>注意，具有相同权重的哈夫曼树不是唯一的。</p><h3 id="73-应用哈弗曼编码"><a class="markdownIt-Anchor" href="#73-应用哈弗曼编码"></a> 7.3 应用：哈弗曼编码</h3><p>哈夫曼编码是基于字词的使用频率对其赋予权重，使用哈弗曼树来减少编码大小的一种技术。</p><p>由于哈夫曼树的权重最大（频率最为频繁）的节点最靠近根节点，所以它能显著减少编码所需要的体积</p><p>综上所述，我们定义左斜的边为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，右斜的边为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>，<br>那么，上面的哈夫曼树对应的编码为：</p><ul><li>5 = ‘11’</li><li>4 = ‘10’</li><li>3 = ‘00’</li><li>2 = ‘011’</li><li>1 = ‘010’</li></ul><blockquote><p>注意，这样的定义是为了不出现识别冲突</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Gradle 介绍</title>
      <link href="//Android/Android%20Gradle%20%E4%BB%8B%E7%BB%8D/"/>
      <url>//Android/Android%20Gradle%20%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>Android Studio 使用 gradle 自动化编译工具用于替代老旧的 Ant Build。目前已经成为 Android App 构建的主流工具。</p><p>本篇文章简单介绍了 Android Gradle 的有关配置段和相关的简介。</p><p>Gradle 工具通过读取 <code>build.gradle</code> 文件的配置来对工程进行构建，同时，工程中的每一个分模块都有相应的 <code>build.gralde</code> 文件。</p><a id="more"></a><h2 id="2-顶层文件top-level"><a class="markdownIt-Anchor" href="#2-顶层文件top-level"></a> 2. 顶层文件（Top-Level）</h2><p>顶层的 <code>build.gradle</code> 存储在工程根目录，定义一些用于所有模块的属性和设置。其中包括</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* buildscript&#123;&#125; 是用于 gradle 自身的配置，在构建工程时，gradle 会首先读取构建必要的依赖用于构建工程。</span></span><br><span class="line"><span class="comment">* 不要将 APP 用的依赖项加到这里来！</span></span><br><span class="line"><span class="comment">* 通常包含 respositories&#123;&#125; 和 dependencies&#123;&#125; 块。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这个区块是定义 gradle 寻找所有依赖项的 Java 包库。</span></span><br><span class="line"><span class="comment">    * 默认为 jcenter。</span></span><br><span class="line"><span class="comment">    * 也可以添加一些自己的库进去。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 由于 jcenter 是 MavenCentral 的超集，所以直接使用 jcenter 即可</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    respositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这个区块是 gradle 构建用的依赖项，android 工程中，</span></span><br><span class="line"><span class="comment">    * 一般是与 AS 版本号对应的 gradle 版本。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* allprojects&#123;&#125; 区块用于定义所有模块构建共用的代码库和依赖项。</span></span><br><span class="line"><span class="comment">* 原则上应在各模块对应的 build.gradle 设定相应的代码库和依赖项。</span></span><br><span class="line"><span class="comment">* Android Studio 默认配置了 jcenter() 作为默认的代码库。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-模块级别文件"><a class="markdownIt-Anchor" href="#3-模块级别文件"></a> 3. 模块级别文件</h2><p>在各个模块的根目录中，也有对应的 <code>build.gradle</code> 文件，它是用来配置各个模块各自的编译构建项的，也是我们最常修改的文件。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsyncTask with Callback</title>
      <link href="//Android/AsyncTask%20with%20Callback/"/>
      <url>//Android/AsyncTask%20with%20Callback/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义一个用于回调的接口"><a class="markdownIt-Anchor" href="#1-定义一个用于回调的接口"></a> 1. 定义一个用于回调的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Object result)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-添加-listener-作为-task-的类成员"><a class="markdownIt-Anchor" href="#2-添加-listener-作为-task-的类成员"></a> 2. 添加 Listener 作为 Task 的类成员</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>,<span class="title">Void</span>,<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TaskListener taskListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(TaskListener taskListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskListener = taskListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3通过接口成员调用其方法"><a class="markdownIt-Anchor" href="#3通过接口成员调用其方法"></a> 3.通过接口成员调用其方法</h2><blockquote><p>为保证线程安全，应该在 Task 的 <code>onPostExecute()</code> 方法中完成该操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">onPostExecute</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">    taskListener.onResult(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-activity-实现该接口处理回调数据"><a class="markdownIt-Anchor" href="#4-activity-实现该接口处理回调数据"></a> 4. Activity 实现该接口处理回调数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTread</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="title">implement</span> <span class="title">TaskListener</span></span>&#123;</span><br><span class="line">    <span class="comment">//your stuff</span></span><br><span class="line">    Task task = <span class="keyword">new</span> Task(<span class="keyword">this</span>);</span><br><span class="line">    task.execute();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//UPDATE YOUR UI HERE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butter Knife</title>
      <link href="//Android/Butter%20Knife/"/>
      <url>//Android/Butter%20Knife/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装与配置"><a class="markdownIt-Anchor" href="#1-安装与配置"></a> 1. 安装与配置</h2><h3 id="11-添加-gradle-依赖"><a class="markdownIt-Anchor" href="#11-添加-gradle-依赖"></a> 1.1 添加 Gradle 依赖</h3><p>在 <code>app/build.gradle</code> 中加入如下语句</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.jakewharton:butterknife:7.0.1'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="12-压制-lint-warnning"><a class="markdownIt-Anchor" href="#12-压制-lint-warnning"></a> 1.2 压制 Lint Warnning</h3><p>在使用 Butter Knife 时，由于它是动态生成代码，Lint 由于没有检测到代码，所以会提示一些错误的警告，所以需要压制 Lint Warning。</p><p>在 <code>app/build.gradle</code> 中添加如下代码</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lintOptions &#123;</span><br><span class="line">  disable <span class="string">'InvalidPackage'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-配置-proguard"><a class="markdownIt-Anchor" href="#13-配置-proguard"></a> 1.3 配置 ProGuard</h3><p>由于 Android 在 Release apk 时，会使用 ProGuard 来进行代码优化和混淆，但是它很可能无法正确区分所需要的代码，从而将 Butter Knife 的代码删除，所以要配置一些 Keep 选项。</p><p>在 <code>proguard.cfg</code> 文件中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-keep class butterknife.** &#123; *; &#125;</span><br><span class="line">-dontwarn butterknife.internal.**</span><br><span class="line">-keep class **$$ViewBinder &#123; *; &#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    @butterknife.* &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    @butterknife.* &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2. 使用</h2><p>Butter Knife 最大的好处就是使用注解式开发，从而减少大量重复冗余的代码。</p><h3 id="21-绑定视图"><a class="markdownIt-Anchor" href="#21-绑定视图"></a> 2.1 绑定视图</h3><p>这里需要注意的是，<strong>重点是要调用 <code>ButterKnife.bind()</code> 方法</strong>，否则是无法起作用的。</p><h4 id="211-在-activity-中进行绑定"><a class="markdownIt-Anchor" href="#211-在-activity-中进行绑定"></a> 2.1.1 在 Activity 中进行绑定</h4><p>使用 <code>@Bind</code> 注释，并传入相应的视图 <code>id</code>，就可以将一个组件和它的视图快速绑定</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bind</span>(R.id.title) TextView title;</span><br><span class="line">  <span class="meta">@Bind</span>(R.id.subtitle) TextView subtitle;</span><br><span class="line">  <span class="meta">@Bind</span>(R.id.footer) TextView footer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.simple_activity);</span><br><span class="line">    <span class="comment">// 注意，这个必须在 setContentView之后执行</span></span><br><span class="line">    ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// TODO Use fields...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意， Butter Knife 的原理是通过生成代码来实现的，上面的使用相当于（生成了）以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(ExampleActivity activity)</span> </span>&#123;</span><br><span class="line">  activity.subtitle = (android.widget.TextView) activity.findViewById(<span class="number">2130968578</span>);</span><br><span class="line">  activity.footer = (android.widget.TextView) activity.findViewById(<span class="number">2130968579</span>);</span><br><span class="line">  activity.title = (android.widget.TextView) activity.findViewById(<span class="number">2130968577</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="212-在-fragment-中进行绑定"><a class="markdownIt-Anchor" href="#212-在-fragment-中进行绑定"></a> 2.1.2 在 Fragment 中进行绑定</h4><p>Butter Knife 提供了其 <code>bind()</code> 方法的几个重载，也可以通过接受一个根布局来进行绑定，所以在 Fragment 中应如下使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</span><br><span class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 通过提供一个根布局实现 Fragment 的绑定</span></span><br><span class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</span><br><span class="line">    <span class="comment">// TODO Use fields...</span></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="213-在-viewholder-中实现绑定"><a class="markdownIt-Anchor" href="#213-在-viewholder-中实现绑定"></a> 2.1.3 在 ViewHolder 中实现绑定</h4><p>Android APP 中， ListView 或 RecyclerView 是最为常见的视图组件，对此，Butter Knife 也实现了 ViewHolder 的绑定方法。如下：</p><p>这里使用的是 ListView, 但是由于绑定的实现都在 ViewHolder 内部类中，因而 RecyclerView 的使用同理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    ViewHolder holder;</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">      holder = (ViewHolder) view.getTag();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      view = inflater.inflate(R.layout.whatever, parent, <span class="keyword">false</span>);</span><br><span class="line">      holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">      view.setTag(holder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    holder.name.setText(<span class="string">"John Doe"</span>);</span><br><span class="line">    <span class="comment">// etc...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bind</span>(R.id.title) TextView name;</span><br><span class="line">    <span class="meta">@Bind</span>(R.id.job_title) TextView jobTitle;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">      ButterKnife.bind(<span class="keyword">this</span>, view);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="214-其他情形"><a class="markdownIt-Anchor" href="#214-其他情形"></a> 2.1.4 其他情形</h4><p>实际上，@Bind 注解只是起到了一个引入视图的作用，真正起到作用的是 <code>ButterKnife.bind</code> 方法，这一方法可以被放在任何你想使用 <code>findViewById</code> 的地方</p><h4 id="215-其他绑定-api"><a class="markdownIt-Anchor" href="#215-其他绑定-api"></a> 2.1.5 其他绑定 API</h4><ol><li><p>ButterKnife.bind(this, activity)</p><blockquote><p>这个方法可以在将导入的视图 xml 在任何地方进行绑定，如果采用了类似 <strong>MVC</strong> 的编程模式，那么就可以使用这个方法在 <code>Controller</code> 中进行绑定</p></blockquote></li></ol><h4 id="216-绑定-view-列表"><a class="markdownIt-Anchor" href="#216-绑定-view-列表"></a> 2.1.6 绑定 View 列表</h4><p>你可以一次性将多个 View 绑定到一个 List 或者数组上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bind</span>(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</span><br><span class="line">List&lt;EditText&gt; nameViews;</span><br></pre></td></tr></table></figure><p>可以使用统一的 apply() 方法来对 View 进行统一的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ButterKnife.apply(nameViews, DISABLE);</span><br><span class="line">ButterKnife.apply(nameViews, ENABLED, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码实际上就相当于对列表中的每一个元素都采用这样的操作。<br>注意，上面的 DISABLE 和 ENABLE 需要定义 Action 和 Setter 的接口方法之后才能有效</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Action&lt;View&gt; DISABLE = <span class="keyword">new</span> ButterKnife.Action&lt;View&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(View view, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    view.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = <span class="keyword">new</span> ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(View view, Boolean value, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    view.setEnabled(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时，也可以将 Android 的 Property 应用到 apply() 方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ButterKnife.apply(nameViews, View.ALPHA, <span class="number">0.0f</span>);</span><br></pre></td></tr></table></figure><h3 id="22-绑定监听器"><a class="markdownIt-Anchor" href="#22-绑定监听器"></a> 2.2 绑定监听器</h3><p>Butter Knife 也同时提供了绑定监听器的方法；<br>通过使用 @OnClick 注解，在随后的方法中实现监听处理即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO submit data to server...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听器的所有参数都是可选的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO submit data to server...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个其他的类型，Butter Knife 也能够识别，并进行自动 Cast</p><blockquote><p>为了尽量避免 Cast，所以应该尽量少使用这一种模式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span> </span>&#123;</span><br><span class="line">  button.setText(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的组件可以通过不传入 id 来实现监听器绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">  <span class="meta">@OnClick</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO do something!</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以绑定多个控件到同一个事件监听器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(&#123; R.id.door1, R.id.door2, R.id.door3 &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pickDoor</span><span class="params">(DoorView door)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (door.hasPrizeBehind()) &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You win!"</span>, LENGTH_SHORT).show();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"Try again"</span>, LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-取消绑定"><a class="markdownIt-Anchor" href="#23-取消绑定"></a> 2.3 取消绑定</h3><p>这个步骤通常在 Fragment 的使用中出现，由于 Fragment 的生命周期和 Activity 不同，我们可能需要在 <code>onCreateView()</code> 中构建视图，然后在 <code>onDestroyView()</code> 中将视图进行销毁。<br>这时候，我们就需要在 <code>onDestroyView()</code> 中将视图取消绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</span><br><span class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</span><br><span class="line">    <span class="comment">// TODO Use fields...</span></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">    ButterKnife.unbind(<span class="keyword">this</span>);   <span class="comment">// 在这里取消绑定</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24-可选的绑定"><a class="markdownIt-Anchor" href="#24-可选的绑定"></a> 2.4 可选的绑定</h3><p>在默认情况下， <code>@Bind</code> 和监听器的绑定都是需要的，如果目标 View 没有找到的话，Butter Knife 将会抛出一个异常。<br>可以通过设置 <code>@Nullable</code> 注解来取消这个绑定</p><blockquote><p>注意，<code>@Nullable</code> 注解来源于 Android 的 <code>support-annotations</code> 库</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="meta">@Bind</span>(R.id.might_not_be_there) TextView mightNotBeThere;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span> <span class="meta">@OnClick</span>(R.id.maybe_missing) <span class="function"><span class="keyword">void</span> <span class="title">onMaybeMissingClicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-对于多个方法的监听器绑定"><a class="markdownIt-Anchor" href="#25-对于多个方法的监听器绑定"></a> 2.5 对于多个方法的监听器绑定</h3><p>当一个监听器拥有多个回调方法时，使用 <code>callback</code> 参数来指定所需要绑定的回调方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnItemSelected</span>(R.id.list_view)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnItemSelected</span>(value = R.id.maybe_missing, callback = NOTHING_SELECTED)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26-简化的-findviewbyid"><a class="markdownIt-Anchor" href="#26-简化的-findviewbyid"></a> 2.6 简化的 findViewById()</h3><p>Butter Knife 同时还提供了一个简化版本的 <code>findViewById()</code> —— <code>findById()</code>；<br>用这个方法可以在 <code>View</code>, <code>Acitivity</code>, <code>Dialog</code> 中找到想要的 View；<br>同时，该方法通过泛型来对返回值进行转换，所以可以省去 <code>findViewById()</code> 的强制转换了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);</span><br><span class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</span><br><span class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</span><br><span class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Genymotion Problems and Solutions</title>
      <link href="//Android/Genymotion%20Problems%20and%20Solutions/"/>
      <url>//Android/Genymotion%20Problems%20and%20Solutions/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h2><p>这里是一些 Genymotion 安卓模拟器的问题解答集<br>虽然这个工具很出名，但是由于它使用 VirtualBox 来实现一个 x86 的虚拟机，<br>它在 Windows 上就显得有些烦人（和反人类）</p><a id="more"></a><h2 id="2-unable-connect-to-virtual_device"><a class="markdownIt-Anchor" href="#2-unable-connect-to-virtual_device"></a> 2. Unable connect to virtual_device</h2><p>当这个错误发生的时候，Genymotion 会让你在 VirtualBox 里面启动你的安卓虚拟机。请遵循这个执行，然后你就会获取到一个出错信息</p><p>这里有一些已知的情况：</p><h3 id="21-virtual-host-error"><a class="markdownIt-Anchor" href="#21-virtual-host-error"></a> 2.1 Virtual Host Error</h3><p>如果你收到了一个关于 Virtual Host 的出错信息，那它将会像这样子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed to open/create the internal network <span class="string">'HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter'</span> (VERR_INTNET_FLT_IF_NOT_FOUND).</span><br><span class="line">Failed to attach the network LUN (VERR_INTNET_FLT_IF_NOT_FOUND).</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>解决办法很简单，根据这个 <span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMzcyNTc3OS9mYWlsZWQtdG8tb3Blbi1jcmVhdGUtdGhlLWludGVybmFsLW5ldHdvcmstdmFncmFudC1vbi13aW5kb3dzMTA=" title="http://stackoverflow.com/questions/33725779/failed-to-open-create-the-internal-network-vagrant-on-windows10">stackoverflow<i class="fa fa-external-link"></i></span> :</p><ol><li><p>打开 Windows 网络与共享中心</p></li><li><p>点击<strong>更改适配器设置</strong></p></li><li><p>右键 VirtualBox 建立的 VirtualBox Host only adapter</p><blockquote><p>这个通常可以在 VirtualBox 的你的虚拟机选项中的网络选项查看。<br>也可以从 VirtualBox 的设置 -&gt; 网络中查看</p></blockquote></li><li><p>点击<strong>属性</strong></p></li><li><p>勾选 “VirtualBox NDIS6 Bridged Networking driver”</p></li><li><p>禁用并重新启用这个适配器</p></li></ol><p><img alt="Solution for Virtual Host Error" data-src="https://i.stack.imgur.com/Tkkws.png"></p><blockquote><p>When this error occurs, genymotion will ask you to start the virtual device on VirtualBox, plase follow the instruction, and then you will get a ERROR message.</p></blockquote><h2 id="3-虚拟机链接不上网络"><a class="markdownIt-Anchor" href="#3-虚拟机链接不上网络"></a> 3. 虚拟机链接不上网络</h2><p>这个有时会让人挺困惑——“为什么我的虚拟机连不上网络呢？”</p><p>解决办法：</p><p>其实并不是什么大事，在虚拟机中打开 wifi 选项，然后<strong>直接连接里面的 wifi</strong> 即可</p><blockquote><p>它<strong>不会连接到真实的 wifi</strong>，而仅仅是虚拟网络</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView</title>
      <link href="//Android/RecyclerView/"/>
      <url>//Android/RecyclerView/</url>
      
        <content type="html"><![CDATA[<h2 id="1-一般的使用"><a class="markdownIt-Anchor" href="#1-一般的使用"></a> 1. 一般的使用</h2><h3 id="11-添加编译依赖"><a class="markdownIt-Anchor" href="#11-添加编译依赖"></a> 1.1 添加编译依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:recyclerview-v7:+&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="12-界面的基本设置"><a class="markdownIt-Anchor" href="#12-界面的基本设置"></a> 1.2 界面的基本设置</h3><ol><li><p>将 RecyclerView 加入到 <code>layout.xml</code></p><blockquote><p><code>layout.xml</code> 指的是 <code>Activity</code> 或者 <code>Fragment</code> 的布局</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/recycler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:scrollbars</span>=<span class="string">"vertical"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Must define the scrollbars attr --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建一个 <code>item_layout.xml</code> 用于 <code>item</code> 的界面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/quest_item"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，在 <code>support-library 23.2.0</code> 之后，<code>LayoutManager</code> 提供了<strong>自动调整</strong>功能，所以对 <code>item</code> 的根布局应采用 <code>wrap_content</code> 的 <code>layout_hight</code></p></blockquote></li></ol><h3 id="13-设置-layoutmanager-和-adapter"><a class="markdownIt-Anchor" href="#13-设置-layoutmanager-和-adapter"></a> 1.3 设置 <strong>LayoutManager</strong> 和 <strong>Adapter</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    View v = inflater.inflate(R.layout.fragment_recyclerview, parent, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set the Recycler</span></span><br><span class="line">    mRecyclerView = (RecyclerView) v.findViewById(R.id.recycler_view);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set LayoutManager</span></span><br><span class="line">    mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getActivity()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DataSet</span></span><br><span class="line">    mCrimes = CrimeLab.get(getActivity()).getCrimes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set the Adapter</span></span><br><span class="line">    mRecyclerView.setAdapter(<span class="keyword">new</span> CrimeAdapter());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-定义-adapter-和重载方法"><a class="markdownIt-Anchor" href="#14-定义-adapter-和重载方法"></a> 1.4 定义 Adapter 和重载方法</h3><p>你需要自定义一个自己的 <code>MyAdapter</code> 并继承 <code>Adapter</code><br>注意以下几点：</p><ol><li><p>Adapter 储存着数据的集合，还有一个作为内部类的 <code>ViewHolder</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//The DataSet</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; mDatas;</span><br><span class="line">    <span class="comment">//...other stuff</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//The inner ViewHolder</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">Recycler</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">//The views</span></span><br><span class="line">        <span class="keyword">public</span> TextView textView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//The Ctor is Auto-Generate</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span> <span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            <span class="comment">//Just set the view as the @param is Ok</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重载方法的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> ViewType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Build a ViewHolder which is the inner class, and return it</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Notice: The ViewType is use to build the diffirent ViewHolder</span></span><br><span class="line"><span class="comment">    * to display diffirent ViewHolder</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(mLayoutInflater.inflate(R.layout.item_text, parent, <span class="keyword">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Bind the view with the DataSet</span></span><br><span class="line">    <span class="comment">// Just like the getView() method in ListView</span></span><br><span class="line">    <span class="comment">// But it's more easier</span></span><br><span class="line"></span><br><span class="line">    holder.mTextView.setText(mData[position]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Return the amount of item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-多-item-布局实现"><a class="markdownIt-Anchor" href="#2-多-item-布局实现"></a> 2. 多 Item 布局实现</h2><p>使用 <code>getItemViewType(int position)</code> 方法来获取每个 <code>position</code> 的 <code>ViewType</code></p><blockquote><p>RecyclerView 中取消了 <code>getItemViewTypeCount()</code> 方法</p></blockquote><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> position % <span class="number">2</span> == <span class="number">0</span> ? ITEM_TYPE.ITEM_TYPE_IMAGE.ordinal() :</span><br><span class="line">    ITEM_TYPE.ITEM_TYPE_TEXT.ordinal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用 <code>onCreateViewHolder()</code> 中的 <code>int ViewType</code> 属性来判别构建的 View 类型。</p><h2 id="3-设置-onitemclicklistener"><a class="markdownIt-Anchor" href="#3-设置-onitemclicklistener"></a> 3. 设置 OnItemClickListener</h2><blockquote><p>官方并没有为 RecyclerView 实现一个 OnItemClickListener，所以只能由开发者自行实现</p></blockquote><p>一般来说，我们使用回调来实现这个监听器<br>需要注意的是，官方并没有为 Item 实现一个点击的 feedback 动画（至少在 5.1.1(API 22)中），所以我们需要添加一个 <code>&lt;ripple&gt;</code> 的 <code>drawable</code> 然后将其设置为背景来实现一个点击回馈的效果。</p><h3 id="31-定义一个-listener-接口"><a class="markdownIt-Anchor" href="#31-定义一个-listener-接口"></a> 3.1 定义一个 Listener 接口</h3><p>通常作为 Adapter 的一个内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * This is the callback method.</span></span><br><span class="line"><span class="comment">    * Aimed to notify the context the Click Event.</span></span><br><span class="line"><span class="comment">    * To modify UI, also need to pass the position for UI updating or do othertings</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span> <span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-为-adapter-添加接口成员"><a class="markdownIt-Anchor" href="#32-为-adapter-添加接口成员"></a> 3.2 为 Adapter 添加接口成员</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> ... </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OnItemClickListener mOnItemClickListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener mOnItemClickListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mOnItemClickListener = mOnItemClickListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="33-设置点击响应并将其回调"><a class="markdownIt-Anchor" href="#33-设置点击响应并将其回调"></a> 3.3 设置点击响应并将其回调</h3><p>这里在 <code>onBindViewHolder()</code> 中设置 <code>ViewHolder</code> 中 <code>View</code> 的 <code>onClick()</code> 事件，并将这个事件回调到上面的接口成员中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span> <span class="params">(<span class="keyword">final</span> MyViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Bind the View with Data</span></span><br><span class="line">    holder.textView.setText(mDatas.get(position));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the Listener</span></span><br><span class="line">    <span class="comment">// Notice: if the callback was set,</span></span><br><span class="line">    <span class="comment">// then set the Click Event for the ViewHolder</span></span><br><span class="line">    <span class="keyword">if</span>(mOnItemClickLitener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        holder.textView.setOnClickListener (<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span> <span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> pos = holder.getLayoutPosition();</span><br><span class="line">                <span class="comment">// Call the callback method</span></span><br><span class="line">                mOnItemClickListener.onItemClick(hodler.textView, pos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-在-acitivity-或者-fragment-中响应回调"><a class="markdownIt-Anchor" href="#34-在-acitivity-或者-fragment-中响应回调"></a> 3.4 在 Acitivity 或者 Fragment 中响应回调</h3><p>注意，这个方法是在 Fragment 中进行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateView</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    mAdapter.setOnClickListener (<span class="keyword">new</span> OnItemClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View v, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//Update: 2016-10-14</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splash Screen</title>
      <link href="//Android/Splash%20Screen/"/>
      <url>//Android/Splash%20Screen/</url>
      
        <content type="html"><![CDATA[<h2 id="1-在-activity-中实现"><a class="markdownIt-Anchor" href="#1-在-activity-中实现"></a> 1. 在 Activity 中实现</h2><ul><li><p>将此 <code>Activity</code> 设置为 <strong>LANCHER</strong> <code>Activity</code></p></li><li><p>记得加载完之后要跳转到其他 <code>Activity</code> 同时 <code>finish()</code> 这个 Activity</p></li><li><p>使用 <code>Handler.postDelayed()</code> 方法去增强延迟，以免加载过快引起用户体验下降</p><blockquote><p>记得要在<strong>视图被加载之后</strong>使用</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Use it after</span></span><br><span class="line"><span class="comment">* setContentView() in onCreate() in Activity</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            goHome();</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;, SPLASH_DELAY_MILLIS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-在-fragment-中使用"><a class="markdownIt-Anchor" href="#2-在-fragment-中使用"></a> 2. 在 Fragment 中使用</h2><p>当在 Fragment 中时，与 Activity 并无显著区别，<strong>记住要在视图被加载之后使用</strong><br>所以一般在 <code>onCreateView()</code> 之后调用 delay。</p><p>根据 <code>Fragment</code> 生命周期来看，应该在 <code>onStart()</code> 方法中使用这个比较合适</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Style 和 Theme 的简明对比</title>
      <link href="//Android/Style%20%E5%92%8C%20Theme%20%E7%9A%84%E7%AE%80%E6%98%8E%E5%AF%B9%E6%AF%94/"/>
      <url>//Android/Style%20%E5%92%8C%20Theme%20%E7%9A%84%E7%AE%80%E6%98%8E%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h2 id="1-style-应用于局部而-theme-应用于整体"><a class="markdownIt-Anchor" href="#1-style-应用于局部而-theme-应用于整体"></a> 1. Style 应用于局部，而 Theme 应用于整体</h2><p>一个 <code>Style</code> 只对一个 <code>View</code> 组件有效；</p><p>而一个 <code>Theme</code> 对整个 <code>application</code> 或 <code>activity</code> 或者一个 <code>ViewGroup</code>(<code>View</code> 组件和它的子项) 有效。</p><a id="more"></a><h2 id="2-style-是组件多种属性的集合"><a class="markdownIt-Anchor" href="#2-style-是组件多种属性的集合"></a> 2. Style 是组件多种属性的集合</h2><p>实际上，一个组件的 style 就是其多种属性的集合。</p><p>也就是说，可以直接在 style 中设置 theme。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TextInputLayout 使用</title>
      <link href="//Android/TextInputLayout%20%E4%BD%BF%E7%94%A8/"/>
      <url>//Android/TextInputLayout%20%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p><code>TextInputLayout</code> 是 Android 6.0 提供的新的输入框架，可以显示一个更好的输入效果。</p><p>以下是 <code>TextInputLaout</code> 的显示效果</p><center>![](https://blog.incredibleandros.com/images/textInputlayout.gif)</center><a id="more"></a><h2 id="2-基本使用"><a class="markdownIt-Anchor" href="#2-基本使用"></a> 2. 基本使用</h2><h3 id="21-添加依赖框架"><a class="markdownIt-Anchor" href="#21-添加依赖框架"></a> 2.1 添加依赖框架</h3><p>TextInputLayout 是 Android design 库的控件，所以需要添加 Android 的 design 库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:appcompat-v7:23.3.0&apos;</span><br><span class="line">compile &apos;com.android.support:design:23.3.0&apos;</span><br></pre></td></tr></table></figure><h3 id="22-xml-代码"><a class="markdownIt-Anchor" href="#22-xml-代码"></a> 2.2 XML 代码</h3><p>在这里要注意， <code>TextInputLayout</code> 实际上是一个 <code>Layout</code> 控件，<strong>不能提供输入框功能</strong></p><p>输入框应由其中的 <code>TextInputEditText</code> 提供。</p><p>其实使用 <code>EditText</code> 代替也是可以的，但是 Google 官方更加推崇 TextInput 系列的配套使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.TextInputLayout</span><br><span class="line">          android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">          android:id=&quot;@+id/your_matchcode_holder&quot;</span><br><span class="line">          app:errorEnabled=&quot;true&quot;</span><br><span class="line">          android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.TextInputEditText</span><br><span class="line">            android:id=&quot;@+id/your_matchcode&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">&lt;/android.support.design.widget.TextInputLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="23-相应效果的设置"><a class="markdownIt-Anchor" href="#23-相应效果的设置"></a> 2.3 相应效果的设置</h3><p><code>TextInputLayout</code> 区别于 <code>EditText</code> 的一点在于，一些提示效果，如 Hint 和 Error Message 需要在 <strong>Java</strong> 代码中进行设置。</p><p>注意，因为 <code>TextInputLayout</code> 中内置了 <code>getEditText()</code> 方法，所以<strong>只需要给 <code>TextInputLayout</code> 设置 id 即可</strong>。</p><h4 id="231-hint-效果"><a class="markdownIt-Anchor" href="#231-hint-效果"></a> 2.3.1 Hint 效果</h4><p>设置 <code>TextInputLayout</code> 的 Hint 效果很简单，只需要调用 <code>setHint()</code> 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phoneWrapper.setHint(getString(R.string.login_hint_phone));</span><br></pre></td></tr></table></figure><h4 id="232-error-效果"><a class="markdownIt-Anchor" href="#232-error-效果"></a> 2.3.2 Error 效果</h4><p>设置 <code>TextInputLayout</code> 的 Error 效果则有点 tricky。</p><p>一般来说，设置 Error 效果和 Hint 一样，调用 <code>setError()</code> 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phoneWrapper.setError(phoneNumberErrorMessage);</span><br></pre></td></tr></table></figure><blockquote><p><code>setError(&quot;error message&quot;)</code> 会判断如果 Error 没有 Enable 的话，会先调用 <code>setErrorEnable(true)</code>，所以设置 Error <strong>不需要事先设置 <code>setErrorEnable(true)</code></strong></p></blockquote><p>但是，当需要清除 Error 效果时，则<strong>必须需要两步。</strong></p><ol><li>设置 <code>setError(null)</code></li><li>设置 <code>setErrorEnable(false)</code></li></ol><blockquote><p>原因在于，<code>setError(null)</code> 只会把 <code>Error</code> 设置为 <code>View.INVISIABLE</code>，不会消除错误信息所占的空间。<br>所以，我们需要使用 <code>setErrorEnable(false)</code> 去将显示错误的 <code>TextView</code> 删除掉，从而消除错误所占的空间。</p></blockquote><blockquote><p>那能不能<strong>只调用 <code>setErrorEnable(false)</code> 呢</strong>？<br>答案是<strong>不能</strong>。<br>原因在于，<code>setErrorEnable(false)</code>，不会消除存储错误信息的 <code>mError</code>，而当再次出现同样的错误，设置 <code>setError(&quot;error message&quot;)</code> 时，由于 <code>mError</code> 没有更新，导致 <code>setError()</code> 判断<strong>前后错误信息一致，直接返回，没有重新生成 <code>TextView</code>，从而错误信息就不会再显示了。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态加载 Fragment</title>
      <link href="//Android/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%20Fragment/"/>
      <url>//Android/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%20Fragment/</url>
      
        <content type="html"><![CDATA[<h2 id="1-步骤"><a class="markdownIt-Anchor" href="#1-步骤"></a> 1. 步骤</h2><h3 id="11-获取-fragmentmanager"><a class="markdownIt-Anchor" href="#11-获取-fragmentmanager"></a> 1.1 获取 <code>FragmentManager</code></h3><ul><li>当位于 <code>Activity</code> 时，调用 <code>getFragmentManager()</code> 方法即可获取到 <code>FragmentManager</code> 实例</li><li>当位于 <code>Fragment</code> 时，调用 <code>getActivity().getFragmentManager()</code> 获取 <code>FragmentManager</code> 实例</li><li>如果在 <code>Fragment</code> 内层，即 <code>Fragment</code> 的 <code>container</code> 也是 <code>Fragment</code> 时，调用 <code>getChildFragmentManager()</code> 来获取 <code>FragmentManager</code> 实例</li></ul><blockquote><p>注意： <code>getChildFragmentManager()</code> 仅用于两层 <code>FragmentManager</code> 的时候。如果仅仅只是一层 <code>Fragment</code>，那么应该将 <code>Fragment</code> 的切换操作回调到 <code>Activity</code> 进行</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when in the activity</span></span><br><span class="line">FragmentManager fragmentManager = getFragmentManager();</span><br><span class="line"></span><br><span class="line"><span class="comment">// when in the fragment</span></span><br><span class="line">FragmentManager fragmentManager = getActivity().getFragmentManager();</span><br><span class="line"></span><br><span class="line"><span class="comment">// When in the nested fragment</span></span><br><span class="line">FragmentManager fragmentManager = getChildFragmentManager();</span><br></pre></td></tr></table></figure><h3 id="12-调用-begintransaction-启动一个事务"><a class="markdownIt-Anchor" href="#12-调用-begintransaction-启动一个事务"></a> 1.2 调用 <code>beginTransaction()</code> 启动一个事务</h3><p>这个方法是 <code>FragmentManager</code> 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FragmentTransaction transcation = fragmentManager.beginTransaction();</span><br></pre></td></tr></table></figure><h3 id="13-将-fragment-加入到容器里面"><a class="markdownIt-Anchor" href="#13-将-fragment-加入到容器里面"></a> 1.3 将 <code>Fragment</code> 加入到容器里面</h3><p>我们有两种添加 <code>Fragment</code> 的方法， <code>add()</code> 和 <code>replace()</code><br>注意添加的时候带上 <code>tag</code> 参数，以方便后面的弹出和返回。</p><ol><li><p>使用 <code>replace()</code> 方法</p><p>一般的，我们使用 <code>replace()</code> 方法直接替换布局来将 <code>Fragment</code> 添加到 容器里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transaction.replace(R.id.container, fragment, tag);</span><br></pre></td></tr></table></figure><blockquote><p><code>replace()</code> 方法需要指定一个用于替换 <code>container</code> 的 <code>Fragment</code> 实例，同时还可以给其打上一个 <code>tag</code>（<code>String</code> 类型的）来方便以后寻找。<br>注意，<code>R.id.container</code>是 <code>Activity</code> 布局中的一个 <code>layout</code> 一般不将根布局替换，而是将其内部的一个子布局替换掉。<br>例如下面的 xml，一般不替换根目录，而是上面的 <code>&lt;RelativeLayout&gt;</code></p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/include_toolbar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>add()</code> 方法</p><p>另外还有另一种添加 <code>Fragment</code> 的方法 <code>add()</code>，与 <code>replace()</code> 的调用方式相同，将 <code>replace()</code> 替换成 <code>add()</code> 即可<br>一般来说，<code>add()</code> 方法的效果和 <code>replace()</code> 方法相同，但在一些情况下有所区别。</p></li></ol><h3 id="14-使用-commit-方法来提交事务"><a class="markdownIt-Anchor" href="#14-使用-commit-方法来提交事务"></a> 1.4 使用 <code>commit()</code> 方法来提交事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用这条语句来提交事务使得事务生效</span></span><br><span class="line">transaction.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然也可以连着写。</span></span><br><span class="line">fragmentManager.beginTransaction()</span><br><span class="line">               .replace(R.id.containe, fragment)</span><br><span class="line">               .commit();</span><br></pre></td></tr></table></figure><blockquote><p>另外，还有一个 <code>commitAllowingStateLoss()</code> 方法，关于这个方法和 <code>commit()</code> 方法的区别和注意事项，在下面有所介绍</p></blockquote><h2 id="2-补充部分"><a class="markdownIt-Anchor" href="#2-补充部分"></a> 2. 补充部分</h2><h3 id="21-添加-fragment-到返回栈"><a class="markdownIt-Anchor" href="#21-添加-fragment-到返回栈"></a> 2.1 添加 Fragment 到返回栈</h3><p>当有需要通过按返回键返回到上一个 Fragment 的时候，可以使用 <code>addToBackStack(null)</code> 方法将当前的 Fragment 添加到返回栈中，此时通过按返回键即可回到上一个 Fragment。<br><code>addToBackStack()</code> 方法还可以接受一个 <code>tag</code> 作为参数，添加具有特定 tag 的 Fragment 进入返回栈。</p><blockquote><p><code>Fragment</code> 的状态是最后离开这个 <code>Fragment</code> 的状态，也就是说它会保留最后的 <code>Fragment</code> 状态。</p></blockquote><h3 id="22-add-和-replace-的区别"><a class="markdownIt-Anchor" href="#22-add-和-replace-的区别"></a> 2.2 <code>add()</code> 和 <code>replace()</code> 的区别</h3><ul><li><p><code>replace()</code> 方法会<strong>删除当前的 Fragment</strong> 然后加入一个<strong>新的 Fragment</strong></p><ul><li>当前仅会存在一个 <code>Fragment</code> 在 <code>container</code> 中</li><li>此方法会<strong>重新实例化 Fragment</strong></li></ul></li><li><p><code>add()</code> 方法只是添加了一个实例到 container 中，而不会删除当前的 Fragment 实例</p><ul><li>当前有可能会存在多个 <code>Fragment</code> 在 <code>container</code> 中</li><li>此方法不会重新实例化 <code>Fragment</code>，<strong>当且仅当它没有被系统回收的时候</strong></li></ul></li><li><p>如何选用这两个方法</p><ul><li>一般来说，它们的效果都是一样的，但是为了避免 <code>Layout</code> 的冗余，我们一般使用 <code>replace()</code></li><li>但是，当你需要在 <code>Fragment</code> 的生命周期中启动一个<strong>异步任务</strong>或者加载一些<strong>大量的资源文件</strong>的时候，<code>replace()</code> 的重新实例化特性会使得<strong>资源被大量的消耗</strong>，所以在这种情况下，使用 <code>add()</code></li></ul></li></ul><h3 id="23-提交事务的注意事项"><a class="markdownIt-Anchor" href="#23-提交事务的注意事项"></a> 2.3 提交事务的注意事项</h3><ol><li><p><code>IllegalStateException</code> 异常</p><blockquote><p>这个异常通常会在 <code>Activity</code> 的状态保存之后，尝试去提交（即调用 <code>commit()</code> 方法）一个 <code>FragmentTransaction</code> 的时候发生，称为活动状态丢失（Activity State Loss）。<br>这是由于系统会在活动在被挂起或销毁之前会将其当前状态保留为一个快照（例如用户按下 <code>Home</code> 键），但是这个快照并没有将 <code>FragmentTransaction</code> 作为活动的一部分保留，而是<strong>将其丢失</strong>了，由于<strong>活动当前被销毁或挂起</strong>，所以无法提交一个 <code>FragmentTransaction</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 堆栈跟踪和异常代码</span><br><span class="line">java.lang.IllegalStateException:Can not perform this action after onSaveInstanceState</span><br><span class="line">    at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1341)</span><br><span class="line">    at android.support.v4.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1352)</span><br><span class="line">    at android.support.v4.app.BackStackRecord.commitInternal(BackStackRecord.java:595)</span><br><span class="line">    at android.support.v4.app.BackStackRecord.commit(BackStackRecord.java:574)</span><br></pre></td></tr></table></figure></li><li><p>异常抛出的时间点</p><blockquote><p>异常抛出的时间点通常和 <code>commit()</code> 的被调用时间点是一致的，总结为下表</p></blockquote><table><thead><tr><th>注：Honeycomb 即 3.0(API 11)</th><th>Honeycomb 之前的版本</th><th>Honeycomb 及更新的版本</th></tr></thead><tbody><tr><td><code>commit()</code> 在 <code>onPause()</code> 前被调用</td><td>OK</td><td>OK</td></tr><tr><td><code>commit()</code> 在 <code>onPause()</code> 和 <code>onStop()</code> 执行中间被调用</td><td>STATE LOSS(<strong>此时并没有异常</strong>)</td><td>OK</td></tr><tr><td><code>commit()</code> 在 <code>onStop()</code> 之后被调用</td><td>EXCEPTION</td><td>EXCEPTION</td></tr></tbody></table></li><li><p>如何避免异常</p><ol><li><p>谨慎的在除 <code>onCreate()</code> 的其他生命周期函数中提交 <code>Transaction</code></p><blockquote><p>你必须保证 <code>Acitivity</code> 被<strong>完全恢复之后</strong>才能提交 <code>Transaction</code>。<br>例如，你不应该在 <code>FragmentActivity</code> 的 <code>onResume()</code> 方法中提交 <code>Transactions</code>，有时候这个方法可能在 <code>Activity</code> 被恢复前调用，你应该在 <code>onPostResume()</code> 方法中提交，以保证 <code>Acitivity</code> 完全恢复</p></blockquote></li><li><p>避免在异步回调函数中提交 <code>Transaction</code></p><blockquote><p>例如，应该避免在 <code>AsyncTask</code> 的 <code>onPostExecute()</code> 方法和 <code>LoaderManager.LoaderCallbacks</code> 的 <code>onLoadFinished()</code> 方法中提交 <code>Transaction</code>。由于它们都没有考虑到 <code>Activity</code> 的实际状态，有可能在 <code>Activity</code> 已经被结束之后仍然被调用。</p></blockquote></li><li><p>使用 <code>commitAllowingStateLoss()</code> 方法</p><blockquote><p>此方法和 <code>commit()</code> 的唯一区别在于，当状态丢失出现的时候，其不会抛出一个异常。<br><strong>通常不应使用这个方法，除非状态丢失无可避免，否则就不应使用此方法</strong></p></blockquote></li></ol></li></ol><h2 id="3-fragment-管理"><a class="markdownIt-Anchor" href="#3-fragment-管理"></a> 3. Fragment 管理</h2><h3 id="31-返回到指定的-fragment"><a class="markdownIt-Anchor" href="#31-返回到指定的-fragment"></a> 3.1 返回到指定的 Fragment</h3><p>当我们开启了太多的 <code>Fragment</code>，想回到指定的某个 <code>Fragment</code> (比如说最开头的那一个) 时，使用 <code>popBackStack(String tag, int flags)</code> 通过指定一个 <code>Fragment</code> 的 <code>tag</code> 来返回到指定的那个 Fragment；</p><blockquote><p>第二个 flags 参数用来指定是否要将指定的 Fragment 也 pop 出去，此参数只能有两个值 <code>POP_BACK_STACK_INCLUSIVE</code> 或者 <code>0</code>，如果指定了 <code>POP_BACK_STACK_INCLUSIVE</code> 这个参数，那么就会将指定的 Fragment 也 pop 出去。</p></blockquote><p>注意事项：</p><ol><li><p>一般采用 <code>tag</code> 参数来定位一个 <code>Fragment</code></p><blockquote><p>当使用 <code>add()</code> 方法添加 <code>Fragment</code> 时，因为一个 <code>ViewGroup</code> 容器可以依附 <code>add()</code> 多个Fragment，它们的 <code>id</code> 自然是相同的。</p></blockquote></li><li><p><code>popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE)</code> 的真正作用。</p><blockquote><p>这个方法的官方文档似乎有一些错误（或者缺漏）<br>由于第二个参数的存在，方法会在返回栈中寻找是否存在一个 <code>tag</code> 为 <code>null</code> 的 <code>Fragment</code>，显然，这是找不到的。<br><strong>所以，这个方法实际上会清空返回栈</strong></p></blockquote></li></ol><h3 id="32-在-fragment-之间切换"><a class="markdownIt-Anchor" href="#32-在-fragment-之间切换"></a> 3.2 在 Fragment 之间切换</h3><h4 id="321-使用-add-show-hide-方法"><a class="markdownIt-Anchor" href="#321-使用-add-show-hide-方法"></a> 3.2.1 使用 <code>add() show() hide()</code> 方法</h4><blockquote><p><code>FragmentPagerAdapter</code> 采用这种模式，需要注意以下几种情况</p></blockquote><ol><li><p>只是显示和隐藏 <code>Fragment</code>，并不进入 <code>Fragment</code> 生命周期</p></li><li><p>当隐藏的时候，<code>Fragment</code> 仍然被激活，<strong>依旧会对点击事件作出反应</strong>。</p><blockquote><p>仍然会响应点击事件的原因在于，由于使用的是 add() 方法，所以当前 <code>container</code> 会有<strong>多个 Fragment 实例</strong>，然后 <code>show()</code> 和 <code>hide()</code> <strong>仅仅是将视图隐藏</strong>了，<code>Fragment</code> 实例依旧处于激活状态，所以会导致多个 Fragment 都会对点击事件做出响应。我们称为<strong>点击事件的泄露</strong></p></blockquote><blockquote><p>此时，需要一些技巧防止点击事件的泄露</p></blockquote><ol><li><p>使用 <code>xml</code> 截获点击事件</p><blockquote><p>将 <strong>内层 Fragment</strong> 的<strong>根布局</strong>设置为 <code>clickable=&quot;true&quot;</code> 即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">    android:layout_height=&quot;fill_parent&quot;</span><br><span class="line">    android:clickable=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>java</code> 截获点击事件</p><blockquote><p>为<strong>根布局</strong>设置 <code>OnTouchListener</code> 并重载一个空方法，返回 <code>true</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstance)&#123;</span><br><span class="line">    View root;</span><br><span class="line"></span><br><span class="line">    /*here is an implementation*/</span><br><span class="line"></span><br><span class="line">    root.setOnTouchListener(new View.OnTouchListener() &#123;</span><br><span class="line">        public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>解决 <code>Fragment already added</code> 错误</p><blockquote><p>在复杂的 <code>Fragment</code> 管理中，经常会遇到 <code>Fragment already added</code> 错误，所以每次在 <code>add Fragment</code> 之前，首先要判断 <code>fragment.isAdded()</code> 如果已经存在了那就不用再 <code>add()</code> 了</p></blockquote></li><li><p>解决由于屏幕旋转或其他原因引起的 <code>Activity</code> <strong>重构建</strong>导致 <code>Fragment</code> <strong>重复</strong>问题</p><blockquote><p>Android 系统中，Activity 可能在<strong>任何时刻</strong>被<strong>不被通知地销毁和重建</strong>，由此则会引起 Fragment 的重叠问题。<br>可以通过检查是否存在 Activity 的快照 <code>savedInstanceState</code> 来决定是否需要重新构建一个 Fragment 实例。<br>如果存在 <code>savedInstanceState</code>，则不需要重新构建，只重新显示最后的当前 Fragment 即可</p></blockquote></li></ol><p>这里是 <code>add()</code> <code>show()</code> <code>hide()</code> 模式的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This way aims at resolve the following problem</span></span><br><span class="line"><span class="comment">* 1. The reinstantiaiton of Fragment</span></span><br><span class="line"><span class="comment">* 2. The Layout redundancy of multiple Fragment</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Check the Fragment isAdded. Aim to #1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">switchContent</span><span class="params">(Fragment from, Fragment to)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The mContent is the current fragment</span></span><br><span class="line">    <span class="keyword">if</span> (mContent != to) &#123;</span><br><span class="line">        mContent = to;</span><br><span class="line">        FragmentTransaction transaction = mFragmentMan.beginTransaction().setCustomAnimations(</span><br><span class="line">                android.R.anim.fade_in, R.anim.slide_out);</span><br><span class="line">        <span class="keyword">if</span> (!to.isAdded()) &#123;    <span class="comment">// Judge if is added</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// if not added, hide the current Fragment and add the next to Activity</span></span><br><span class="line">            transaction.hide(from).add(R.id.content_frame, to).commit();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//if added, just show the next.</span></span><br><span class="line">            transaction.hide(from).show(to).commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Check the saveInstance to avoid the activity reinstance. Aim to #2</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span> <span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState == <span class="keyword">null</span>) &#123;</span><br><span class="line">        getFragmentManager().beginTransaction().add(android.R.id.content,</span><br><span class="line">            <span class="keyword">new</span> UIFragment(),<span class="string">"Tag"</span>).commit();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//if the instance does be recover,</span></span><br><span class="line">        <span class="comment">//use `findFragmentByTag()` to find the reference of the Fragment</span></span><br><span class="line">        UIFragment fragment1 = getFragmentManager().findFragmentById(R.id.fragment1);</span><br><span class="line">        UIFragment fragment2 = getFragmentManager().findFragmentByTag(<span class="string">"tag"</span>);</span><br><span class="line">        UIFragment fragment3 = ...</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//show one of them</span></span><br><span class="line">        getFragmentManager().beginTransaction()</span><br><span class="line">        .show(fragment1)</span><br><span class="line">        .hide(fragment2)</span><br><span class="line">        .hide(fragment3)</span><br><span class="line">        .hide(...)</span><br><span class="line">        .commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="322-使用-replace-方法"><a class="markdownIt-Anchor" href="#322-使用-replace-方法"></a> 3.2.2 使用 <code>replace()</code> 方法</h4><blockquote><p><code>FragmentStatePageAdapter</code> 采用这种模式</p></blockquote><ul><li><p>当前<strong>只会存在一个 fragment 实例</strong>，简单的使用 <code>replace()</code> 和 <code>popBackStack()</code> 的重载方法即可在 <code>Fragment</code> 之间进行切换</p></li><li><p>但是由于此方法在切换时<strong>每次都会重新构建 Fragment 实例</strong>，如果需要从网络加载资源的话，会造成很多的网络流量损失和性能浪费。</p></li></ul><h4 id="323-比较和使用场景"><a class="markdownIt-Anchor" href="#323-比较和使用场景"></a> 3.2.3 比较和使用场景</h4><ul><li><p>如果管理 <code>Fragment</code> 的开销比网络流量的开销要大，使用 <code>replace()</code> 方法较好。</p><blockquote><p>例如每次仅仅加载 几个k 或 几十b 的数据，就没有必要为了这点微不足道的流量节省从而进行复杂的 <code>Fragment</code> 管理，一是加大开发难度，二是容易出现错误。</p></blockquote></li><li><p>如果在 Fragment 中需要加载大量的网络资源，或者进行十分耗时的资源加载工作（比如3D绘图），那么就应使用 <code>add()</code> <code>show()</code> <code>hide()</code> 方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本部宿舍各物品尺寸</title>
      <link href="//Decoration/%E6%9C%AC%E9%83%A8%E5%AE%BF%E8%88%8D%E5%90%84%E7%89%A9%E5%93%81%E5%B0%BA%E5%AF%B8/"/>
      <url>//Decoration/%E6%9C%AC%E9%83%A8%E5%AE%BF%E8%88%8D%E5%90%84%E7%89%A9%E5%93%81%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>学九楼</p><p>未经特别说明单位均为厘米<br>立体物品顺序为 <strong>长 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 宽 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 高，</strong><br>容器物品为 <strong>高 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 宽 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 厚度</strong></p><a id="more"></a><h2 id="床"><a class="markdownIt-Anchor" href="#床"></a> 床</h2><p>193 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 92.3 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 112（下铺）/ 141（上铺）</p><h2 id="衣柜"><a class="markdownIt-Anchor" href="#衣柜"></a> 衣柜</h2><p>外：177.2 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 47.5 （中线为止） <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 54.7<br>内：144.4 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 44.2 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 52</p><h2 id="桌子"><a class="markdownIt-Anchor" href="#桌子"></a> 桌子</h2><p>70.5 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 63 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 77</p><p>书架 18，电脑空间 47.1</p><h2 id="床头架"><a class="markdownIt-Anchor" href="#床头架"></a> 床头架</h2><p>整长 82，可用 79<br>上架高 31，下架高 23.5</p><h2 id="鞋柜"><a class="markdownIt-Anchor" href="#鞋柜"></a> 鞋柜</h2><p>外： 29.2 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 48 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 55<br>内： 29 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 46.7 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 53.5</p><h2 id="储物柜"><a class="markdownIt-Anchor" href="#储物柜"></a> 储物柜</h2><p>外： 192 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 58 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 65<br>内： 31（单个） <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 54.5 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 63</p><h2 id="架床梯子"><a class="markdownIt-Anchor" href="#架床梯子"></a> 架床梯子</h2><p>161（高） <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">×</span></span></span></span> 26（整宽）</p>]]></content>
      
      
      <categories>
          
          <category> Decoration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Decoration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH clone GitHub Gist</title>
      <link href="//GitHub/SSH%20clone%20GitHub%20Gist/"/>
      <url>//GitHub/SSH%20clone%20GitHub%20Gist/</url>
      
        <content type="html"><![CDATA[<p>Tags: GitHub</p><hr><p>GitHub 会默认拒绝其 <strong>默认给出的</strong> Gist SSH 链接。</p><p>使用如下格式的链接来进行 Gist SSH clone。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:gist_id.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS X Using ShimakazeGo + Poi to play kancolle</title>
      <link href="//Kancolle/OS%20X%20Using%20ShimakazeGo%20+%20Poi%20to%20play%20kancolle/"/>
      <url>//Kancolle/OS%20X%20Using%20ShimakazeGo%20+%20Poi%20to%20play%20kancolle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-intro"><a class="markdownIt-Anchor" href="#1-intro"></a> 1. Intro</h2><p>This is the instruction of how to bulid a kancolle playing enviroment in Mac OS X.</p><p>My current OS X version is 10.11</p><p>Necessary tools: Automator</p><a id="more"></a><h2 id="2-install-shimakazego"><a class="markdownIt-Anchor" href="#2-install-shimakazego"></a> 2. Install ShimakazeGo</h2><p>ShimakazeGo is a proxy for playing Kancolle. Because DMM has banned the IP addresses of foreigners, you need to use a proxy to connect to the game site.</p><p>Here is the <span class="exturl" data-url="aHR0cDovL3VubG9ja2FjZ3dlYi5nYWxzdGFycy5uZXQv" title="http://unlockacgweb.galstars.net/">ShimakazeGo official site<i class="fa fa-external-link"></i></span>. There is a instruction how to install it on Mac OS X</p><h2 id="3-pack-shimakazego-as-a-os-x-app"><a class="markdownIt-Anchor" href="#3-pack-shimakazego-as-a-os-x-app"></a> 3. Pack ShimakazeGo as a OS X APP</h2><p><strong>This section is pretty important</strong>.</p><p>The ShimakazeGo developer offer a shell scipt to start the program.</p><p>Therefore, it’s very easy to convert it to a application by using <strong>Automator</strong>, a convient and easy-to-use app buliding tool on Mac OS X.</p><p>Open Automator, choose the <strong>Application</strong> and serch for <strong>Run Apple Script</strong> at the search bar.</p><p>And then paste this script inside the input frame.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on run</span><br><span class="line">do shell script &quot;/path/to/the/ShimakazeGo/run_mac &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">quit</span><br><span class="line">end run</span><br></pre></td></tr></table></figure><p>Save the App, copy to your <code>/Application</code> and close the Automator, using a text editor, such as vim to open the <strong>run_mac</strong> script and <strong>delete the last two line</strong></p><p>The script will appear like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">export LANG=&quot;zh-CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh-CN.UTF-8&quot;</span><br><span class="line"></span><br><span class="line">defaults write mono NSAppSleepDisabled -bool YES</span><br><span class="line"></span><br><span class="line">MONO_LIB=/Library/Frameworks/Mono.framework/Versions/Current/bin/mono</span><br><span class="line"></span><br><span class="line">dir=$(dirname $&#123;BASH_SOURCE:-$0&#125;)</span><br><span class="line">$MONO_LIB $dir/ShimakazeGo.exe &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure><p>And done. Start the app and you will see the ShimakazeGo window.</p><h2 id="4-supplement-change-app-icon"><a class="markdownIt-Anchor" href="#4-supplement-change-app-icon"></a> 4. Supplement: Change App Icon</h2><p>The app that we generate will come with a default Automator icon like a robot.<br>Some people may dislike it and want to changge to another icon.<br>It is very easy, <strong>just follow these instructions</strong>:</p><ol><li>Open the App info window(<code>cmd + i</code>)</li><li>Open the icon img you want to replace with.</li><li>Select the whole img(<code>cmd + a</code>) and copy(<code>cmd + c</code>)</li><li>Click the icon inside the App info window, and paste(<code>cmd + v</code>)</li><li>Done!</li></ol><h2 id="5-install-poi"><a class="markdownIt-Anchor" href="#5-install-poi"></a> 5. Install Poi</h2><p>Poi is a Scalable KanColle browser and tool.<br>Due to using the web techology, it is <strong>totally cross-platform</strong></p><p>Here is the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bvb29pL3BvaQ==" title="https://github.com/poooi/poi">GitHub repo<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Kancolle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kancolle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Android Getting Started</title>
      <link href="//Kotlin/Kotlin%20Android%20Getting%20Started/"/>
      <url>//Kotlin/Kotlin%20Android%20Getting%20Started/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>由于 Android Studio 基于 IntelliJ IDEA 开发，所以很容易在 Android Studio 上使用 Kotlin 开发 Android。</p><a id="more"></a><h2 id="2-创建工程"><a class="markdownIt-Anchor" href="#2-创建工程"></a> 2. 创建工程</h2><p>这步和普通的 Android 创建工程没有什么区别。</p><p>创建完毕后，你一般会拥有一个由 AS 创建的 Java Activity 类。</p><h2 id="3-将-java-代码转换成-kotlin-代码"><a class="markdownIt-Anchor" href="#3-将-java-代码转换成-kotlin-代码"></a> 3. 将 Java 代码转换成 Kotlin 代码</h2><p>IDEA 内建了代码转换功能，只需要通过 Find Action(<code>cmd + shift + a</code>) 即可找到 <strong>Convert Java File to Kotlin File</strong></p><p><img alt data-src="https://kotlinlang.org/assets/images/tutorials/kotlin-android/convert-java-to-kotlin.png"></p><p>经过转换之后，我们就能拥有一个使用 Kotlin 来编写的 Activity 类了。</p><h2 id="4-在工程中配置-kotlin"><a class="markdownIt-Anchor" href="#4-在工程中配置-kotlin"></a> 4. 在工程中配置 Kotlin</h2><p>由于 Kotlin 是一个外部库，所以我们需要对工程进行一些配置。</p><p>当然，Android Studio 内置了自动配置方法，只需要在 Find Action 中搜索 <strong>Configure Kotlin in Project</strong> 即可。</p><p><img alt data-src="https://kotlinlang.org/assets/images/tutorials/kotlin-android/configure-kotlin-in-project.png"></p><p>接下来会弹出一个对话框，选择最新的 Kotlin 版本即可。</p><p><img alt data-src="https://kotlinlang.org/assets/images/tutorials/kotlin-android/configure-kotlin-in-project-details.png"></p><p>最后，我们只需要同步一下 Gradle 即可。</p><p><img alt data-src="https://kotlinlang.org/assets/images/tutorials/kotlin-android/sync-project-with-gradle.png"></p><h2 id="5-剩下的工作"><a class="markdownIt-Anchor" href="#5-剩下的工作"></a> 5. 剩下的工作</h2><p>由于 Kotlin 最终还是会被编译成字节码，所以剩下的 UI 开发和 APK 构建与使用 Java 语言时并没有任何区别。</p><p>尽情享受 Kotlin 所带来的便利吧！</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 操作符重载</title>
      <link href="//Kotlin/Kotlin%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>//Kotlin/Kotlin%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p> <a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a><br> <a href="#2-%E5%85%AC%E7%BA%A6">2. 公约</a><br>  <a href="#21-%E4%B8%80%E5%85%83%E6%93%8D%E4%BD%9C%E7%AC%A6">2.1 一元操作符</a><br>  <a href="#22-%E4%BA%8C%E5%85%83%E6%93%8D%E4%BD%9C%E7%AC%A6">2.2 二元操作符</a><br>   <a href="#221-%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97%E4%B8%8E%E8%8C%83%E5%9B%B4">2.2.1 数学运算与范围</a><br>   <a href="#222-in-%E6%93%8D%E4%BD%9C%E7%AC%A6">2.2.2 <code>in</code> 操作符</a><br>   <a href="#223-%E6%96%B9%E6%8B%AC%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6">2.2.3 方括号操作符</a><br>   <a href="#224-%E5%9C%86%E6%8B%AC%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6">2.2.4 圆括号操作符</a><br>   <a href="#225-%E5%A4%8D%E5%90%88%E8%B5%8B%E5%80%BC%E6%93%8D%E4%BD%9C">2.2.5 复合赋值操作</a><br>   <a href="#226-%E7%9B%B8%E7%AD%89%E6%80%A7%E6%A3%80%E6%9F%A5">2.2.6 相等性检查</a><br>   <a href="#227-%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6">2.2.7 比较运算符</a><br> <a href="#3-%E4%B8%AD%E7%BC%80%E5%87%BD%E6%95%B0">3. 中缀函数</a></p><h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p>Kotlin 中的操作符都是由函数实现的，包括成员函数、扩展函数和中缀函数。</p><p>重载一个操作符，我们只要给对应的类提供一个成员函数或者扩展函数即可。</p><p>重载操作符的函数必须使用 <code>operator</code> 进行标识。</p><p>遗憾的是，Kotlin 不支持自定义操作符，只能对现有的操作符进行重载。</p><a id="more"></a><h2 id="2-公约"><a class="markdownIt-Anchor" href="#2-公约"></a> 2. 公约</h2><p>这里阐述的是 Kotlin 中各种操作符的对应函数和重载约定。</p><p>没有在以下列出的操作符，不允许被重载。</p><blockquote><p>关于 Kotlin 中所有的操作符，请查看<span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy9kb2NzL3JlZmVyZW5jZS9ncmFtbWFyLmh0bWwjcHJlY2VkZW5jZQ==" title="https://kotlinlang.org/docs/reference/grammar.html#precedence">这个链接<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="21-一元操作符"><a class="markdownIt-Anchor" href="#21-一元操作符"></a> 2.1 一元操作符</h3><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td>+a</td><td>a.unaryPlus()</td></tr><tr><td>-a</td><td>a.unaryMinus()</td></tr><tr><td>!a</td><td>a.not()</td></tr></tbody></table><p>当编译时，上面的操作符会被替换为对应的函数，步骤如下:</p><ol><li>确定 <code>a</code> 的类型，比如 <code>T</code></li><li>在 <code>T</code> 中寻找方法，比如说 <code>unaryPlus()</code></li><li>当寻找不到方法时，报错</li><li>如果 <code>unaryPlus()</code> 返回类型 <code>R</code>，那么 <code>+a</code> 的类型为 <code>R</code></li></ol><p>注意，所有的操作符都会对基本类型进行优化，以减少函数调用的开支。</p><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a++</code></td><td><code>a.inc()</code> + see below</td></tr><tr><td><code>a--</code></td><td><code>a.dec()</code> + see below</td></tr></tbody></table><p>这些操作符是用来改变它们的接收者的。</p><blockquote><p>注意，所谓的改变接收者指的是<strong>改变其内部的值</strong>，而不是改变其对象。<br>事实上，应该<strong>创建并返回一个拥有新值的对象</strong>，而不是对对象本身进行操作。</p></blockquote><p>编译器会对这样的操作符采取以下步骤的操作：</p><ol><li>确定 <code>a</code> 的类型 <code>T</code></li><li>在 <code>a</code> 中寻找 <code>inc()</code> 方法</li><li>如果 <code>inc()</code> 返回类型为 <code>R</code>，那么它必须是 <code>T</code> 的子类</li></ol><p>对于<strong>后缀</strong>操作符的计算过程如下(<code>a++</code>)：</p><ol><li>将 <code>a</code> 的初始值存储在临时对象 <code>a0</code> 中</li><li>将 <code>a.inc()</code> 的结果赋予 <code>a</code></li><li>返回 <code>a0</code></li></ol><p><code>a--</code> 与之相同</p><p>对于<strong>前缀</strong>操作符的计算过程如下(<code>++a</code>)：</p><ol><li>将 <code>a.inc()</code> 的结果赋予 <code>a</code></li><li>返回 <code>a</code></li></ol><h3 id="22-二元操作符"><a class="markdownIt-Anchor" href="#22-二元操作符"></a> 2.2 二元操作符</h3><h4 id="221-数学运算与范围"><a class="markdownIt-Anchor" href="#221-数学运算与范围"></a> 2.2.1 数学运算与范围</h4><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a + b</code></td><td><code>a.plus(b)</code></td></tr><tr><td><code>a - b</code></td><td><code>a.minus(b)</code></td></tr><tr><td><code>a * b</code></td><td><code>a.times(b)</code></td></tr><tr><td><code>a / b</code></td><td><code>a.div(b)</code></td></tr><tr><td><code>a % b</code></td><td><code>a.mod(b)</code></td></tr><tr><td><code>a..b</code></td><td><code>a.rangeTo(b)</code></td></tr></tbody></table><p>这些操作符在执行时会自动翻译成相应的函数执行。</p><h4 id="222-in-操作符"><a class="markdownIt-Anchor" href="#222-in-操作符"></a> 2.2.2 <code>in</code> 操作符</h4><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a in b</code></td><td><code>b.contains(a)</code></td></tr><tr><td><code>a !in b</code></td><td><code>!b.contains(a)</code></td></tr></tbody></table><p>对于这些方法，执行的步骤一样，但是只不过把调用关系颠倒了过来。</p><h4 id="223-方括号操作符"><a class="markdownIt-Anchor" href="#223-方括号操作符"></a> 2.2.3 方括号操作符</h4><table><thead><tr><th>Symbol</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a[i]</code></td><td><code>a.get(i)</code></td></tr><tr><td><code>a[i, j]</code></td><td><code>a.get(i, j)</code></td></tr><tr><td><code>a[i_1, ..., i_n]</code></td><td><code>a.get(i_1, ..., i_n)</code></td></tr><tr><td><code>a[i] = b</code></td><td><code>a.set(i, b)</code></td></tr><tr><td><code>a[i, j] = b</code></td><td><code>a.set(i, j, b)</code></td></tr><tr><td><code>a[i_1, ..., i_n] = b</code></td><td><code>a.set(i_1, ..., i_n, b)</code></td></tr></tbody></table><p>方括号操作符的对应方法为 <code>get()</code>，根据参数个数来调用不同的 <code>get()</code> 方法，如果有赋值操作则调用 <code>set()</code> 方法。</p><h4 id="224-圆括号操作符"><a class="markdownIt-Anchor" href="#224-圆括号操作符"></a> 2.2.4 圆括号操作符</h4><table><thead><tr><th>Symbol</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a()</code></td><td><code>a.invoke()</code></td></tr><tr><td><code>a(i)</code></td><td><code>a.invoke(i)</code></td></tr><tr><td><code>a(i, j)</code></td><td><code>a.invoke(i, j)</code></td></tr><tr><td><code>a(i_1, ..., i_n)</code></td><td><code>a.invoke(i_1, ..., i_n)</code></td></tr></tbody></table><p>圆括号操作符会根据参数调用相应的 <code>invoke()</code> 方法</p><h4 id="225-复合赋值操作"><a class="markdownIt-Anchor" href="#225-复合赋值操作"></a> 2.2.5 复合赋值操作</h4><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a += b</code></td><td><code>a.plusAssign(b)</code></td></tr><tr><td><code>a -= b</code></td><td><code>a.minusAssign(b)</code></td></tr><tr><td><code>a *= b</code></td><td><code>a.timesAssign(b)</code></td></tr><tr><td><code>a /= b</code></td><td><code>a.divAssign(b)</code></td></tr><tr><td><code>a %= b</code></td><td><code>a.modAssign(b)</code></td></tr></tbody></table><p>对于复合赋值操作，编译器做以下处理(<code>a += b</code>)：</p><ul><li><p>如果右边一列中的函数在类中存在，那么：</p><ul><li>检查对应的二元函数是否存在，比如 <code>plus()</code> 对应 <code>plusAssign()</code>，如果存在，报错</li><li>检查函数的返回值是否为 <code>Unit</code>，如果不是，报错</li><li>上面检查通过后，生成相应代码</li></ul></li><li><p>如果右边一列中的函数在类中不存在，那么<strong>尝试生成 <code>a = a + b</code></strong>，包括类型检查（<code>a + b</code> 的返回值必须是 <code>A</code> 或其子类型）</p></li></ul><blockquote><p>不允许 <code>plus()</code> 和 <code>plusAssign()</code> 同时存在的原因：<br>这是因为编译器会默认转为 <code>a = a + b</code> 进行处理，所以当存在 <code>plus()</code> 时，就没必要编写重复代码。</p></blockquote><p>需要注意的是，复合赋值是赋值语句的一种，而在 Kotlin 中，<br><strong>赋值不是一个表达式</strong></p><p>这主要是为了避免赋值语句和单行函数的冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun attachView(view: View) = this.view = view</span><br></pre></td></tr></table></figure><p>上面的代码出现了二义性。</p><p>但是在 Java 中，赋值是一种表达式，也就是说 Java 允许</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 1, b = 1, c = 1;</span><br><span class="line">if ((a = b) != c) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 Kotlin 只能将赋值语句移到括号外。</p><blockquote><p><span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNjg3OTIzNi9ob3ctdG8tY29udmVydC1qYXZhLWFzc2lnbm1lbnQtZXhwcmVzc2lvbi10by1rb3RsaW4=" title="http://stackoverflow.com/questions/36879236/how-to-convert-java-assignment-expression-to-kotlin">这个链接<i class="fa fa-external-link"></i></span>中还有更多方法</p></blockquote><h4 id="226-相等性检查"><a class="markdownIt-Anchor" href="#226-相等性检查"></a> 2.2.6 相等性检查</h4><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a == b</code></td><td><code>a?.equals(b) ?: b === null</code></td></tr><tr><td><code>a != b</code></td><td><code>!(a?.equals(b) ?: b === null)</code></td></tr></tbody></table><p>相等性检查只需要提供 <code>equals()</code> 方法即可。</p><p>注意：引用相等性检查 <code>===</code> 和 <code>!==</code> 是不允许重载的。</p><p>相等性检查被转换成如此复杂的表达式是为了筛选 <code>null</code> 值，而且保证 <code>null == null</code> 返回 <code>true</code></p><h4 id="227-比较运算符"><a class="markdownIt-Anchor" href="#227-比较运算符"></a> 2.2.7 比较运算符</h4><table><thead><tr><th>Symbol</th><th>Translated to</th></tr></thead><tbody><tr><td><code>a &gt; b</code></td><td><code>a.compareTo(b) &gt; 0</code></td></tr><tr><td><code>a &lt; b</code></td><td><code>a.compareTo(b) &lt; 0</code></td></tr><tr><td><code>a &gt;= b</code></td><td><code>a.compareTo(b) &gt;= 0</code></td></tr><tr><td><code>a &lt;= b</code></td><td><code>a.compareTo(b) &lt;= 0</code></td></tr></tbody></table><p>所有的比较运算符都会被转换成 <code>compareTo()</code> 方法；<br><code>compareTo()</code> 方法必须返回一个 <code>Int</code> 值。</p><h2 id="3-中缀函数"><a class="markdownIt-Anchor" href="#3-中缀函数"></a> 3. 中缀函数</h2><p>除此之外，我们还可以通过定义中缀函数来定义新的**“运算符”**</p><p>比如数字类型的位运算就是通过中缀函数实现的。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Linux Experiences</title>
      <link href="//Linux/My%20Linux%20Experiences/"/>
      <url>//Linux/My%20Linux%20Experiences/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-mint-installation-notes"><a class="markdownIt-Anchor" href="#linux-mint-installation-notes"></a> Linux Mint Installation Notes</h2><h3 id="1-using-the-usb-boot"><a class="markdownIt-Anchor" href="#1-using-the-usb-boot"></a> 1. Using the USB boot</h3><blockquote><p>Do not use the hard disk boot option, it will cause a lot of problems.<br>As I am known, if you do that, the battery will be some weird problems.</p></blockquote><a id="more"></a><h3 id="2-partition"><a class="markdownIt-Anchor" href="#2-partition"></a> 2. Partition</h3><blockquote><p>You could do the patition base on your needs, or follow the advice in the Internet.<br>Normally, I just use <code>/</code>, <code>/boot</code>, <code>/home</code> and <code>/swap</code> parts.</p></blockquote><blockquote><p>Maybe the <code>/usr</code> needs to mount into another space, for what the software is almost install by<br>the package manager.(such as <code>apt-get</code>)</p></blockquote><h3 id="3-dual-boot"><a class="markdownIt-Anchor" href="#3-dual-boot"></a> 3. Dual Boot</h3><blockquote><p>This is extremely important,<br>(for me ,because I still can not leave the big game which is only can be run in Windows)<br>If you want to have the bennifits from each of these OS</p></blockquote><h4 id="31-single-hard-disk"><a class="markdownIt-Anchor" href="#31-single-hard-disk"></a> 3.1 Single Hard Disk</h4><blockquote><p>That’s nothing to say about, if only have <strong>one</strong> hard disk,<br>you must be care of the order of the installation,<br>because the first installed boot loader will be covered by the secound.</p></blockquote><h4 id="32-dual-or-multiple-hard-disks"><a class="markdownIt-Anchor" href="#32-dual-or-multiple-hard-disks"></a> 3.2 Dual or Multiple Hard Disks</h4><blockquote><p><strong>you need to be awared of the boot loader’s position,<br>because if you install them into the same disk, the latter will cover the former</strong></p></blockquote><blockquote><p>I recomend to use the <strong>Win to load the Linux</strong>, because the linux is actually a bit annoying,<br>you need to <strong>reinstall the system for many times at the very first time</strong>. If you use the grup to<br>boot the Win, when you need to <strong>reinstall</strong> the linux, it will be difficult to do it.</p></blockquote><div style="font-size:25px;font-weight:700;color:red">Improtant:<p>Use the USB driver to install the Linux, do not just use the hard driver to install.</p><p>Keep the USB driver, it will be more convient to REINSTALL the system</p></div><ul><li><p>The install position of the boot loader</p><blockquote><p>The position must contain the name of the hard disk.<br>That is, you need to install it into <code>/dev/sda</code> or the <code>/dev/sdb</code><br>not the hard driver which has number with it.</p></blockquote><ul><li><p>If you want to let the <strong>Win to boot the linux</strong>, just place the boot loader into<br>where the Windows C driver is not in it.</p><blockquote><p>I have two hard disks, and my Windows C driver place in the SSD, if I want to<br>use win to load the linux, I just place it into the HDD</p></blockquote></li><li><p>If you want to do the oppsite, just let the Linux to boot the Windows, you need to install<br>the boot loader into the same disk which the Windows c driver has been installed.</p></li></ul></li><li><p>Supplement for Linux boot Windows</p></li></ul><div style="color:orange;font-weight:700;font-size:25px"><div style="text-align:center">DO NOT FORMAT THE LINUX PARTITION IN WINDOWS!!!</div>if so, the two systems will not be able to start neither.</div><h3 id="4-proxy"><a class="markdownIt-Anchor" href="#4-proxy"></a> 4. Proxy</h3><blockquote><p>Normally, I only use the socks proxy, but also the http proxy,<br>so, what I am using is the <code>Shadowsocks + Privoxy</code> to build up the<br><code>socks</code> proxy and the <code>http</code> proxy</p></blockquote><ol><li><p>Down <code>Shadowsocks-qt5</code> or install it by ppa</p></li><li><p>Using the <code>apt-get</code> to install <code>Privoxy</code></p><blockquote><p>Edit the <code>/etc/privoxy/config</code> for the configuration.</p></blockquote><blockquote><p>To enable the socks config, just edit the</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward-socks5     /       host:port .</span><br></pre></td></tr></table></figure><p>Usually, it will be</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward-socks5     /       127.0.0.1:1080 .</span><br></pre></td></tr></table></figure><p><strong>Do remenber the <code>&lt;space&gt;</code> of the <code>port</code> and the <code>.</code> is necessary</strong></p><p><strong>Use the <code>IP</code> instead of the <code>localhost</code></strong></p><p><strong>Defaultly, the HTTP listen port is <code>8118</code></strong></p></li><li><p>Using the following command to start an <code>service</code> of the privoxy</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service privoxy restart</span><br></pre></td></tr></table></figure><p><strong>Remember it’s <code>restart</code> not the <code>start</code>,sometime, the <code>start</code> won’t work.</strong></p><p><strong>And the socks proxy is <code>127.0.0.1:1080</code>, the http proxy is <code>127.0.0.1:8118</code></strong></p><h3 id="5-enviroment-variables"><a class="markdownIt-Anchor" href="#5-enviroment-variables"></a> 5. Enviroment Variables</h3><blockquote><p>Normally, the enviroment variables could be define and edit in the<br><code>~/.*shrc</code>, now I am using <code>Zsh</code>,so the file is <code>.zshrc</code>,<br>normally, it will be <code>.bashrc</code></p></blockquote><blockquote><p>Different from Ubuntu, when you need to run a program from the desktop enviroment,<br>such as <code>IntillJ IDEA</code>, you need to edit the <code>~/.profile</code> to define the enviroment variables,<br>such as <code>JAVA_HOME</code></p></blockquote><h3 id="6-about-the-unable-to-run-mate-settings-deamon"><a class="markdownIt-Anchor" href="#6-about-the-unable-to-run-mate-settings-deamon"></a> 6. About the <code>unable to run &quot;mate-settings deamon&quot;</code></h3><blockquote><p>It might be cause by the <strong>incorrect NVIDIA driver</strong>,<br>use the default is just fine.</p></blockquote><blockquote><p>Do not change the NV driver from the driver manager.</p></blockquote><h3 id="7-about-my-battery-problems"><a class="markdownIt-Anchor" href="#7-about-my-battery-problems"></a> 7. About my battery problems</h3><blockquote><p>It might due to some weird problems,<br>if the battery cannot be reconized, try to install<br><code>acpi</code>, it might be some help.</p></blockquote><p><span style="font-size:10px">Actually, I not quite sure.</span></p><h3 id="8-zsh"><a class="markdownIt-Anchor" href="#8-zsh"></a> 8. Zsh</h3><blockquote><p>Following the instruction of <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2g=" title="https://github.com/robbyrussell/oh-my-zsh">robbyrussell/oh-my-zsh<i class="fa fa-external-link"></i></span><br>to install the <code>zsh</code> is ok, and don’t forget to install <code>oh-my-zsh</code> to customze the zsh</p></blockquote><blockquote><p>To enable the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Fnbm9zdGVyL2Fnbm9zdGVyLXpzaC10aGVtZQ==" title="https://github.com/agnoster/agnoster-zsh-theme">agnoster<i class="fa fa-external-link"></i></span> bulit-in theme of the<br>oh-my-zsh, need to install the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bvd2VybGluZS9mb250cw==" title="https://github.com/powerline/fonts">Powerline-patched font<i class="fa fa-external-link"></i></span>, just<br>use the <code>install.sh</code> is okay.<br>And after that, change the terminal font to which has the powerline suffix.</p></blockquote><h3 id="9-vim"><a class="markdownIt-Anchor" href="#9-vim"></a> 9. Vim</h3><blockquote><p>The vim is almost the biggest problem for me.<br>After hours of hours test, I found a config that is suit with me.</p></blockquote><blockquote><p>What I use it the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwZjEzL3NwZjEzLXZpbQ==" title="https://github.com/spf13/spf13-vim">spf13/spf13-vim<i class="fa fa-external-link"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N1YW4vdmltLWluc3RhbnQtbWFya2Rvd24=" title="https://github.com/suan/vim-instant-markdown">suan/vim-instant-markdown<i class="fa fa-external-link"></i></span><br>for supporting my vim usage and do the notes.</p></blockquote><blockquote><p>Just follow the instruction in each repo, that is okay.</p></blockquote><p><strong>Supplements</strong>:</p><ul><li><p>Change the theme of the status line in spf13-vim</p><blockquote><p>The status line is using the ariline, the instruction is place at<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JsaW5nL3ZpbS1haXJsaW5lL3dpa2kvRkFR" title="https://github.com/bling/vim-airline/wiki/FAQ">https://github.com/bling/vim-airline/wiki/FAQ<i class="fa fa-external-link"></i></span>,<br>click the Screenshot, it will list its themes and the theme name.</p></blockquote><blockquote><p>What I like is the <code>badwolf</code>.</p></blockquote></li><li><p>Add <strong>MathJax</strong> support for the <code>vim-instant-markdown</code></p></li></ul><p>See this <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N1YW4vdmltLWluc3RhbnQtbWFya2Rvd24vaXNzdWVzLzY3" title="https://github.com/suan/vim-instant-markdown/issues/67">issue<i class="fa fa-external-link"></i></span></p><p><strong>Known Issue:</strong></p><ul><li>The <code>vim-instant-markdown</code> will remain the chrome tab when the vim is leave.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 14.04 LTS Installation Checklist</title>
      <link href="//Linux/Ubuntu%2014.04%20LTS%20Installation%20Checklist/"/>
      <url>//Linux/Ubuntu%2014.04%20LTS%20Installation%20Checklist/</url>
      
        <content type="html"><![CDATA[<h2 id="1-intro"><a class="markdownIt-Anchor" href="#1-intro"></a> 1. Intro</h2><p>This is the installation checklist of the lastest Ubuntu LTS version: Ubuntu 14.04 LTS</p><p>The reason of choosing Ubuntu is that the Ubuntu has the least problems with my hardware.<br>Actually, it’s only the Wireless Issue exist.</p><a id="more"></a><h2 id="2-before-install"><a class="markdownIt-Anchor" href="#2-before-install"></a> 2. Before Install</h2><ol><li><p>Backup all the <strong>proxy</strong> settings and the other software settings which cannot be synchronized.</p></li><li><p>Design the harddrive parttition</p><blockquote><p>The <code>/boot</code>, <code>/</code>, <code>/swap</code> and the <code>/home</code></p></blockquote></li></ol><h2 id="3-system-configuration"><a class="markdownIt-Anchor" href="#3-system-configuration"></a> 3. System Configuration</h2><ol><li><p>Change software source to mainland China</p><blockquote><p>In my home, the aliyun’s software source seems better.<br>In my school, the bjtu’s software source seems better.</p></blockquote></li><li><p>Upgrade software</p><blockquote><p>The Ubuntu Software Center will automatically upgrade the softwares.<br>Or, you can use<br><code>sudo apt-get update: 2016-10-14 sudo apt-get upgrade</code><br>to upgrade the softwares.</p></blockquote></li><li><p>Install fcitx input method frame</p><blockquote><p>Due to the account of my baidu is Chinese.<br>So I need to install the fcitx first to get the shadowsocks server info<br>Check this <span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5mc2ZlLm9yZy9zdGVmYW4uYS8yMDE0LzA5LzIzL3NldC11cC1mY2l0eC1jaGluZXNlLWFuZC1qYXBhbmVzZS1sYW5ndWFnZS1pbnB1dC11YnVudHUtMTQtMDQv" title="https://blogs.fsfe.org/stefan.a/2014/09/23/set-up-fcitx-chinese-and-japanese-language-input-ubuntu-14-04/">post<i class="fa fa-external-link"></i></span> for details</p></blockquote><blockquote><p>Telegram seems not support <code>super + space</code> as the switch shortcut.<br>Remenber use a secondary switch shortcut as <code>ctrl + super + space</code></p></blockquote></li><li><p>Fix the Wireless Issue of <strong>RTL8723BE</strong></p><blockquote><p>Need to install <strong>vim</strong> at first</p></blockquote><blockquote><p>This is the model of my Wireless Network Adapter.<br>It has a issue of network connection in Ubuntu.</p></blockquote><blockquote><p>The way how to fix is open the<br><code>/etc/modprobe.d/rtl8723be.conf</code><br>if it doesn’t exsit, create it.<br>And add such line in it:<br><code>options rtl8723be fwlps=N ips=N</code><br>And then reboot, it will fix this problem</p></blockquote><blockquote><p>Check this <span class="exturl" data-url="aHR0cDovL3d3dy5kZWRvaW1lZG8uY29tL2NvbXB1dGVycy91YnVudHUtdHJ1c3R5LXJlYWx0ZWsuaHRtbA==" title="http://www.dedoimedo.com/computers/ubuntu-trusty-realtek.html">post<i class="fa fa-external-link"></i></span> for details.</p></blockquote></li></ol><h2 id="4-the-necessary-softwares"><a class="markdownIt-Anchor" href="#4-the-necessary-softwares"></a> 4. The necessary softwares</h2><ol><li><p>Install shadowsocks</p><blockquote><p>The GUI client of linux is the shadowsocks-qt5</p></blockquote></li><li><p>Install Google Chrome</p><blockquote><p>I don’t know somehow the original firefox bulit in the system cannot play song of the neteasy cloud music.<br>So, install the Chrome is necessary.</p></blockquote></li><li><p>Install LastPass</p><blockquote><p>I store most of my passwords in the LastPass, including the Google account.</p></blockquote></li><li><p>Install <strong>git</strong> and the <strong>bulid-essntial</strong> package</p><blockquote><p>For the development needs</p></blockquote></li><li><p>Install <strong>zsh</strong> and <strong>oh-my-zsh</strong></p><blockquote><p>The best shell I have ever seen</p></blockquote></li><li><p>Install <strong>spf13-vim</strong></p><blockquote><p>The spf13 vim has problem of neocomplete plugin, but it’s still the best _vimrc.<br>Maybe the k-vim will be better.</p></blockquote></li></ol><h2 id="5-entertainment"><a class="markdownIt-Anchor" href="#5-entertainment"></a> 5. Entertainment</h2><p>The entertainment is almost the Kancolle game.</p><ol><li><p>Install the <strong>ShimakazeGo</strong></p><blockquote><p>Prerequisites:<br><strong>mono</strong>, <strong>openssl</strong>, <strong>libssl-dev</strong>, <strong>libssl0.9.8</strong>, <strong>p7zip-full</strong><br>The openssl is built in the system.<br>The p7zip-full is the command line version of 7z</p></blockquote></li><li><p>Install the <strong>poi</strong></p><blockquote><p>Prerequisites:<br><strong>electron</strong>, <strong>nodejs</strong>, <strong>npm</strong><br>The npm is the bulit-in module of nodejs</p></blockquote><blockquote><p>Install nodejs:<br>Download the archive and add it to the PATH in <code>~/.zshrc</code></p></blockquote><blockquote><p>Notes for npm:<br>The origin registry is extremely slow.<br>Recommand to change it to the <code>http://registry.cnpm.org</code></p></blockquote></li></ol><h2 id="6-java-jetbrains-ides"><a class="markdownIt-Anchor" href="#6-java-jetbrains-ides"></a> 6. Java &amp; Jetbrains’ IDEs</h2><ol><li><p>Using the <strong>oracle’s Java</strong> is recommended.</p><blockquote><p>use<br>`sudo update: 2016-10-14<br>This step should fix the Android SDK Manager not responding in Android Studio</p></blockquote></li><li><p>Enviroment Variable:</p><ul><li>For command line program, define it at <code>~/.zshrc</code></li><li>For desktop entry: Define at <code>/etc/enviroment</code></li></ul></li><li><p>Java Enviroment Settings Procedure: (in <code>/etc/enviroment</code>)</p><ol><li>Set <code>JAVA_HOME</code> (not include the <code>bin/</code>)</li><li>Set <code>CLASSPATH</code> (normally the <code>lib/</code> folder in <code>$JAVA_HOME</code>)</li><li>Add <code>$JAVA_HOME</code> to <code>$PATH</code></li></ol></li><li><p>Android Studio</p><blockquote><p>Prerequisites:<br>See this <span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjkyNDIxMjM=" title="http://stackoverflow.com/a/29242123">answer<i class="fa fa-external-link"></i></span> in StackOverflow.</p></blockquote><blockquote><p>Android SDK Manager:<br><s>It seems a issue that I cannot lanuch the standalone SDK Manager in Android Studio.<br>It wired, by far I have no idea how to solve it.</s><br><s>But the bulit-in manager works fine, so it’s not so important at this moment.</s></p></blockquote></li></ol><h2 id="7-desktop-entry"><a class="markdownIt-Anchor" href="#7-desktop-entry"></a> 7. Desktop Entry</h2><p>The desktop entry of per user store in<br><code>~/.local/share/applications</code></p><p>The format of desktop entry is :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name= # The name of the app, use camercal case</span><br><span class="line">Icon= # The icon</span><br><span class="line">Exec= # The execute path, must be absolute path</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=false</span><br><span class="line">Categories= # The categories</span><br></pre></td></tr></table></figure><h2 id="8-fonts"><a class="markdownIt-Anchor" href="#8-fonts"></a> 8. Fonts</h2><p>By far, the font settings seems acceptable.</p><p>As follow:</p><table><th colspan="2" style="text-align:center">My Unity Fonts Settings</th><tr><td>Default Font</td><td>Droid Sans Regular</td></tr><tr><td>Document font</td><td>Droid Sans Regular</td></tr><tr><td>Monospace font</td><td>Meslo LG S for Powerline Regular</td></tr><tr><td>Windows font</td><td>Ubuntu mono</td></tr><tr><td>Terminal font</td><td>Meslo LG S for Powerline Regular</td></tr></table><table><th colspan="2" style="text-align:center">My Chrome Fonts Settings</th><tr><td>Standard font</td><td>WenQuanYi Micro Hei 15px</td></tr><tr><td>Serif font</td><td>Droid Serif</td></tr><tr><td>Sans-serif font</td><td>DejaVu Sans</td></tr><tr><td>Fixed width font</td><td>Meslo LG S for Powerline</td></tr></table><p>Special: Jetbrains’ IDEs using <strong>Robono Mono for powerline</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Design 主体环境</title>
      <link href="//MaterialDesign/Material%20Design%20%E4%B8%BB%E4%BD%93%E7%8E%AF%E5%A2%83/"/>
      <url>//MaterialDesign/Material%20Design%20%E4%B8%BB%E4%BD%93%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h2><p><strong>Material Design 是一个三维环境，包括了灯光，实体，和投射阴影。</strong></p><center><img width="500" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0B7WCemMG6e0VVFpiZ041SmhwY2c/what_is_material_environment.png"></center><a id="more"></a><p>所有的实体对象都具有 x, y, z 三个坐标。</p><p>一个对象只能拥有一个 z 轴位置。（即不允许两个实体重叠）</p><p>主光源用于制造方向投影，散射光源用于制造柔和阴影。</p><ul><li>实体厚度： 1dp</li><li>阴影由重叠实体之间的高低差产生<blockquote><p>即阴影实际上就是高低差的代表</p></blockquote></li></ul><h2 id="2-3d-世界"><a class="markdownIt-Anchor" href="#2-3d-世界"></a> 2. 3D 世界</h2><p>Material Design 是一个 3D 世界。<br>这意味着所有的实体都具有 3 个维度的坐标；<br>z 轴垂直对齐于屏幕，正轴指向屏幕外侧。</p><center><img data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0Bx4BSt6jniD7UXpQYWltVjNPWXc/whatismaterial_environment_3d.png"></center><p>一个实体厚度为 1dp，并独享一个 z 轴坐标。</p><blockquote><p>dp = (像素宽度 * 160) / 像素密度</p></blockquote><p>在网页端，z 轴是用来分层而不是用来展示视角，z 轴的坐标通过操作 y 轴来模拟实现。</p><h2 id="3-灯光和阴影"><a class="markdownIt-Anchor" href="#3-灯光和阴影"></a> 3. 灯光和阴影</h2><p>在环境中，虚拟光源营造出了场景。</p><p>主光源用于投射方向投影，而散射光源用于在各个角度投射柔和的光影。</p><p>在环境中的阴影由以上这两种光源来实现。<br>在 Android 开发中，阴影的产生是因为光源被不同 z 轴坐标上的实体遮挡。在网页开发中，通过调整 y 轴来进行仿真实现。</p><p>下面是一个标高为 6 dp 的实体的例子。</p><center><img width="300" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0B6Okdz75tqQsSFZUZ01GTk13T28/whatismaterial_environment_shadow1.png"></center><center>直射光源投射的阴影</center><center><img width="300" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0B6Okdz75tqQsdDhaaTMwMTFVLTA/whatismaterial_environment_shadow2.png"></center><center>散射光源的阴影</center><center><img width="300" data-src="https://material-design.storage.googleapis.com/publish/material_v_9/0B6Okdz75tqQsNnVmbTNMUF9DR0U/whatismaterial_environment_shadow3.png"></center><center>两种光源的混合投影</center>]]></content>
      
      
      <categories>
          
          <category> MaterialDesign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MaterialDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Design 概述</title>
      <link href="//MaterialDesign/Material%20Design%20%E6%A6%82%E8%BF%B0/"/>
      <url>//MaterialDesign/Material%20Design%20%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>Material Design 是 Google 官方在 2014 I/O 上发布的设计语言。</p><p>事实上随着更多的 Android 设备进入到 5.0 以上系列，Material Design 的应用也愈加广泛。</p><a id="more"></a><h2 id="2-设计原则"><a class="markdownIt-Anchor" href="#2-设计原则"></a> 2. 设计原则</h2><h3 id="21-material-is-the-metaphor"><a class="markdownIt-Anchor" href="#21-material-is-the-metaphor"></a> 2.1 Material is the metaphor</h3><p>实体(Material) 是此设计语言的基本组成，与众不同的触感是实体的基础。</p><p>实体的表面和边缘提供了基于真实效果的体验，熟悉的<strong>触感</strong>能让用户快速的理解和感知，实体的多样性能更好反映真实世界的设计效果，而又不会脱离客观规律。</p><p><strong>光效</strong>、<strong>表面质感</strong>、<strong>运动感</strong>这三点是解释物体运动规律、交互方式、空间关系的关键。真实的光效可以解释物体之间的交合关系、空间关系，以及单个物体的运动。</p><h3 id="22-鲜明-形象-深思熟虑"><a class="markdownIt-Anchor" href="#22-鲜明-形象-深思熟虑"></a> 2.2 鲜明、形象、深思熟虑</h3><p>新的视觉语言，在基本元素的处理上，借鉴了传统的印刷设计——排版、网格、空间、比例、配色、图像使用——这些基础的平面设计规范。在这些设计基础上下功夫，不但可以愉悦用户，而且能够构建出视觉层级、视觉意义以及视觉聚焦。精心选择色彩、图像、选择合乎比例的字体、留白，力求构建出鲜明、形象的用户界面，让用户沉浸其中。</p><p>Material Design 设计语言强调根据用户行为凸显核心功能，进而为用户提供操作指引。</p><h3 id="23-有意义的动画效果"><a class="markdownIt-Anchor" href="#23-有意义的动画效果"></a> 2.3 有意义的动画效果</h3><p>动画效果(简称动效)可以有效地暗示、指引用户。动效的设计要根据用户行为而定，能够改变整体设计的触感。</p><p>动效应当在独立的场景呈现。通过动效，让物体的变化以更连续、更平滑的方式呈现给用户，让用户能够充分知晓所发生的变化。</p><p>动效应该是有意义的、合理的，动效的目的是为了吸引用户的注意力，以及维持整个系统的连续性体验。动效反馈需细腻、清爽。转场动效需高效、明晰。</p>]]></content>
      
      
      <categories>
          
          <category> MaterialDesign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MaterialDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插线板重构计划</title>
      <link href="//Plan/%E6%8F%92%E7%BA%BF%E6%9D%BF%E9%87%8D%E6%9E%84%E8%AE%A1%E5%88%92/"/>
      <url>//Plan/%E6%8F%92%E7%BA%BF%E6%9D%BF%E9%87%8D%E6%9E%84%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="1-设备清单"><a class="markdownIt-Anchor" href="#1-设备清单"></a> 1. 设备清单</h2><h3 id="11-目前拥有的设备"><a class="markdownIt-Anchor" href="#11-目前拥有的设备"></a> 1.1 目前拥有的设备</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> Mac</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 笔记本</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 3ds</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> kindle</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> hub</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 路由器</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 交换机</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 显示器</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 手机</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 平板</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 灯</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 移动电源</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 散热器</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 剃须刀</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 耳机</li></ul><a id="more"></a><h3 id="12-将要购置的设备"><a class="markdownIt-Anchor" href="#12-将要购置的设备"></a> 1.2 将要购置的设备</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> ps4</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 硬盘</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 风扇</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> <s>显示器</s></li></ul><p>显示器只会有一个得到供电。</p><h3 id="13-可以使用-usb-的设备"><a class="markdownIt-Anchor" href="#13-可以使用-usb-的设备"></a> 1.3 可以使用 USB 的设备</h3><ul><li>3ds</li><li>kindle</li><li>hub</li><li>平板</li><li>移动电源</li><li>风扇</li><li>散热器</li></ul><h2 id="2-供电接口计划"><a class="markdownIt-Anchor" href="#2-供电接口计划"></a> 2. 供电接口计划</h2><p><strong>原则：尽量使用 USB 口进行供电，避免占用插线口</strong></p><h3 id="21-可提供的供电接口"><a class="markdownIt-Anchor" href="#21-可提供的供电接口"></a> 2.1 可提供的供电接口</h3><p>目前计划购入 <span class="exturl" data-url="aHR0cDovL2l0ZW0uamQuY29tLzEyNjg2NDguaHRtbCNwcm9kdWN0LWRldGFpbA==" title="http://item.jd.com/1268648.html#product-detail">QIC 8 口 + 5 USB<i class="fa fa-external-link"></i></span> 插座，共有 8 个插口 + 5 个 USB 口，其中 2A 口为 2 个。</p><p>墙上固有插座： 2 三孔 + 2 二孔。</p><p>另外 Hub 也可提供 4 个 USB 充电接口。</p><p><strong>共 8 + 2 + 2（两孔） = 12 个电插口</strong> + <strong>9 个 USB 口</strong></p><h3 id="22-计划接入-usb-口的设备"><a class="markdownIt-Anchor" href="#22-计划接入-usb-口的设备"></a> 2.2 计划接入 USB 口的设备</h3><p>若 Hub 接入 USB 口，则有 4 + 4 = 8 个 USB 充电接口，其中 2A 口为 2 个。</p><ul><li>3ds</li><li>kindle</li><li>hub</li><li>移动电源(2A)</li><li>平板(2A)</li><li>风扇</li><li>散热器</li></ul><p>目前占用两个 2A 口，4 个普通口，共 6 个接口。</p><p>若风扇不用 USB 口，则用 5 个接口。</p><p><strong>通过</strong></p><h3 id="23-计划接入插口的设备"><a class="markdownIt-Anchor" href="#23-计划接入插口的设备"></a> 2.3 计划接入插口的设备</h3><ul><li><p>Mac</p></li><li><p>显示器</p></li><li><p>笔记本</p></li><li><p>路由器</p></li><li><p>交换机</p></li><li><p>灯</p></li><li><p>剃须刀</p></li><li><p>耳机</p></li><li><p>手机</p></li><li><p>PS4</p></li><li><p>硬盘</p></li></ul><p>共需要 11 个供电插口，若风扇使用电插口，则需要 12 个。</p><p><em>紧张</em></p><p>解决办法：</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> <s>1. 寻找更大的插座</s></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> <s>2. 与目前插座串联，增加可用量</s></li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 3. 购置多个插座（18 + 5）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Plan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Plan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio FAQ</title>
      <link href="//Android/AndroidStudio/Android%20Studio%20FAQ/"/>
      <url>//Android/AndroidStudio/Android%20Studio%20FAQ/</url>
      
        <content type="html"><![CDATA[<h2 id="1-gitignore-文件"><a class="markdownIt-Anchor" href="#1-gitignore-文件"></a> 1. .gitignore 文件</h2><blockquote><p>如果你想要尽量的减少冲突，就<strong>不要直接使用</strong> Android Studio 默认生成的 <code>.gitignore</code> 文件，而是要在 <code>.gitignore</code> 中添加一些项目，或者直接导入其内置的许多模板。</p></blockquote><a id="more"></a><p>这里有一些应该加入的项目:</p><ol><li><p><code>/.idea</code> 文件夹</p><blockquote><p><code>/.idea</code> 文件夹是 <code>gradle</code> 导入工程时生成的文件夹，它会被 gradle <strong>自动生成</strong>。在添加一个新依赖的时候，build 流程会自动添加依赖项的描述到 <code>/.idea</code> 文件夹里，所以很容易会引起冲突。</p></blockquote></li><li><p><code>.iml</code> 文件</p><blockquote><p><code>iml</code> 文件会在当你导入 gradle 工程的时候被 gradle <strong>自动生成</strong>，和上面一样，gradle 会自动添加一些描述到 <code>.iml</code> 文件里面，其中也包括了依赖项的描述</p></blockquote></li><li><p><code>/gradle.properties</code> 文件</p><blockquote><p>这个文件经常只保存了 gradle 的代理设置，1.5 版本以后的 Anroid Studio 会在当你进行 Gradle Sync 的时候自动将 Android Studio 的代理设置导入到这个文件里面。<br><strong>如果组员各自使用不同的代理设置，那么就应该忽略它</strong></p></blockquote></li><li><p>补充1：别忘记执行 <code>git rm -r --cached</code> 来删除 git 版本树中的版本</p><blockquote><p><code>.gitigonre</code> 仅对那些没有追踪的文件起作用，如果已经被 git 系统追踪了，仅将其加入到 <code>.gitignore</code> 是没有作用的。</p></blockquote></li><li><p>补充2：当你需要忽略一个文件夹的时候，别忘记添加 <code>/</code> 后缀</p><blockquote><p>例如：当你需要忽略 <code>.gradle</code> 文件夹的时候，你需要输入 <code>/.gradle/</code> ，这样，它才能忽略整个文件夹，否则，当你删除这个文件夹，然后被重新生成时， Android Studio 就不会识别出它是已经忽略掉的了。</p></blockquote></li></ol><p>综上所述，这里是我的 <code>.gitignore</code> 例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*.iml</span><br><span class="line">/.idea/</span><br><span class="line">/gradle.properties</span><br><span class="line">.gradle/</span><br><span class="line">/local.properties</span><br><span class="line">.DS_Store</span><br><span class="line">/build</span><br><span class="line">/captures</span><br></pre></td></tr></table></figure><h2 id="2-当出现-cannot-resolve-symbols-时"><a class="markdownIt-Anchor" href="#2-当出现-cannot-resolve-symbols-时"></a> 2. 当出现 cannot resolve symbols 时</h2><p>首先，你需要检查依赖是否已经被正确加载了，如果依赖项没有问题<br>那么请依照以下流程来尝试进行修复</p><ol><li><p>检查使用的 gradle 是否正确</p><blockquote><p>在 <code>Settings</code> 中检查 <code>gradle</code> 的选项，一般推荐使用 Anroid Studio 内置的 gradle。</p></blockquote></li><li><p>删除本地的代码库，重新克隆一份</p></li><li><p>尝试点击 <code>Gradle Sync</code> 按钮进行 <code>Gradle Sync</code></p></li><li><p>在 <code>Build</code> 菜单选择 <code>Clean the Project</code></p></li><li><p>在 <code>Build</code> 菜单选择 <code>Rebuild the Project</code></p></li></ol><blockquote><p>需要注意的是，当你克隆完毕后，使用 <code>Open existing Project</code> 或者 <code>Import from gradle</code> 来打开工程，而不是在 <code>recently projects</code> 中打开。</p></blockquote><h2 id="3-当不能识别出-android-框架时"><a class="markdownIt-Anchor" href="#3-当不能识别出-android-框架时"></a> 3. 当不能识别出 Android 框架时</h2><blockquote><p>如果你的 Android Studio 不能识别出 Gradle 或者整个 Anroid 框架的时候，例如，导航条没有 <code>app</code> module，在 Build 菜单只有一点点东西的时候。</p></blockquote><p><img alt="Poisonous" data-src="https://ww2.sinaimg.cn/large/8c1fca6bjw1eyyb1dvnnmj20zk0qotb3.jpg"></p><span style="font-size:1.5em;font-weight:700">备份你的代码库到远端，然后重新克隆它。 当你克隆完毕的时候， rebuild project.</span>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 卡 buliding gradle info</title>
      <link href="//Android/AndroidStudio/Android%20Studio%20%E5%8D%A1%20buliding%20gradle%20info/"/>
      <url>//Android/AndroidStudio/Android%20Studio%20%E5%8D%A1%20buliding%20gradle%20info/</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1. 问题</h2><p>有时候第一次使用 Android Studio 打开某个项目时，会出现项目一直卡在 <code>buliding gradle info</code> 的问题，如图所示：</p><center>![Building project info](https://i4.buimg.com/563021/c4ee7577d3d0bcde.jpg)</center><p>此问题的原因在于：<strong>用于下载 gradle 本体的网站被墙了，导致下载速度缓慢。</strong></p><a id="more"></a><h2 id="2-解决办法"><a class="markdownIt-Anchor" href="#2-解决办法"></a> 2. 解决办法</h2><p>打开 gradle 的 <code>gradle.properties</code>，然后直接从里面的链接下载 gradle，放入 gradle 的文件夹中即可。</p><p>当然，最靠谱的方法还是去翻墙啦。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Volley 库的基本使用</title>
      <link href="//Android/Volley/Android%20Volley%20%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>//Android/Volley/Android%20Volley%20%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-volley-介绍与基本使用场景"><a class="markdownIt-Anchor" href="#1-volley-介绍与基本使用场景"></a> 1. Volley 介绍与基本使用场景</h2><p>Volley 是 Google 在 2013 年 I/O 大会上发布的一个 Android 的网络框架库，用于简化 Android 构建网络连接的步骤，同时提供 <strong>缓存</strong>、<strong>网络优先级</strong>等功能。</p><p>Volley 适用于高频，小流量的网络访问，例如传输 Json 信息，前后端的小流量交互等。</p><p>对于上传和下载文件的需求，Volley 不适用。<br>这主要是由于 Volley 对请求队列采用的是<strong>在内存中的缓存</strong>，决定了 Volley 不适应大文件（二进制流）的传输。</p><a id="more"></a><h2 id="2-volley-的基本使用"><a class="markdownIt-Anchor" href="#2-volley-的基本使用"></a> 2. Volley 的基本使用</h2><h3 id="21-添加编译依赖"><a class="markdownIt-Anchor" href="#21-添加编译依赖"></a> 2.1 添加编译依赖</h3><p>Volley 在不久前加入了 <code>jCenter</code>，直接使用 <code>gradle</code> 的 <code>compile</code> 语句即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.volley:volley:1.0.0&apos;</span><br></pre></td></tr></table></figure><blockquote><p>如果不使用 compile 语句，则需要从 Git repository 中克隆，添加编译 module</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://android.googlesource.com/platform/frameworks/volley</span><br></pre></td></tr></table></figure><h3 id="22-添加网络访问权限"><a class="markdownIt-Anchor" href="#22-添加网络访问权限"></a> 2.2 添加网络访问权限</h3><p>为了使用 Volley 这一<strong>网络</strong>库，需要在 <code>Manifest</code> 中添加网络访问权限 <code>android.permission.INTERNET</code></p><h3 id="23-发起网络请求"><a class="markdownIt-Anchor" href="#23-发起网络请求"></a> 2.3 发起网络请求</h3><p>Volley 是通过<strong>优先队列</strong>来管理多个网络请求的，所以使用 Volley 即构建请求队列和相应的网络请求对象即可。</p><h4 id="231-例子"><a class="markdownIt-Anchor" href="#231-例子"></a> 2.3.1 例子</h4><p>Volley 提供了默认的静态方法用于构建一个请求队列的实例。<br>所以构建一个请求对象，设置好监听，并将其加入请求队列即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">final TextView mTextView = (TextView) findViewById(R.id.text);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// Instantiate the RequestQueue.</span><br><span class="line">RequestQueue queue = Volley.newRequestQueue(this);</span><br><span class="line">String url =&quot;http://www.google.com&quot;;</span><br><span class="line"></span><br><span class="line">// Request a string response from the provided URL.</span><br><span class="line">StringRequest stringRequest = new StringRequest(Request.Method.GET,</span><br><span class="line">url,</span><br><span class="line">new Response.Listener&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onResponse(String response) &#123;</span><br><span class="line">        // Display the first 500 characters of the response string.</span><br><span class="line">        mTextView.setText(&quot;Response is: &quot;+ response.substring(0,500));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, new Response.ErrorListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onErrorResponse(VolleyError error) &#123;</span><br><span class="line">        mTextView.setText(&quot;That didn&apos;t work!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Add the request to the RequestQueue.</span><br><span class="line">queue.add(stringRequest);</span><br></pre></td></tr></table></figure><p><code>StringRequest</code> 的最后两个参数是 <code>Response.Listener&lt;T&gt;</code> 和 <code>Response.ErrorListener</code>。</p><p>通过使用匿名的监听类来分别获得<strong>正常的服务器响应</strong>和<strong>网络错误时的响应</strong></p><h4 id="232-基本原理"><a class="markdownIt-Anchor" href="#232-基本原理"></a> 2.3.2 基本原理</h4><p>当请求被加入到队列后，Volley 会自动运行<strong>缓存处理线程</strong>和一个<strong>网络通信线程池</strong>。</p><p><strong>缓存处理进程</strong>将请求出列，并判断缓存是否命中，如果缓存命中，就直接返回主线程进行结果处理。</p><p>如果缓存没有命中，则将请求加入内置的<strong>网络通信队列</strong>，网络通信线程池中的第一个可用线程会对请求进行处理，建立 HTTP 连接，解析返回结果并将其写入缓存，随后将结果返回到主线程。</p><p>下图是具体的工作流程图解</p><p><img alt="Volley Request" data-src="https://i2.piimg.com/3b76b51675570a97.png"></p><h3 id="24-取消请求"><a class="markdownIt-Anchor" href="#24-取消请求"></a> 2.4 取消请求</h3><p>如果要取消一个网络请求，只需要调用 <code>Request</code> 的 <code>cancel()</code> 方法即可。</p><p>一经取消，Volley 会<strong>保证</strong>不会调用返回结果的处理器，这也就是说你可以在 <code>Activity</code> 的 <code>onStop()</code> 方法中取消所有正在处理的网络请求。</p><p>同时，还可以给请求打上 TAG，使用 <code>RequestQueue</code> 中的 <code>cancelAll()</code> 方法来取消对应的被打上 TAG 的请求。</p><p>TAG 的类型不限，甚至可以是 <code>Activty</code>，可以通过在 <code>onStop()</code> 中调用 <code>cancelAll(this)</code> 来取消所有跟这个 <code>Activty</code> 有关的 <code>Request</code></p><p>下面是一个使用 <code>String</code> 作为 TAG 的应用例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static final String TAG = &quot;MyTag&quot;;</span><br><span class="line">StringRequest stringRequest; // Assume this exists.</span><br><span class="line">RequestQueue mRequestQueue;  // Assume this exists.</span><br><span class="line"></span><br><span class="line">// Set the tag on the request.</span><br><span class="line">stringRequest.setTag(TAG);</span><br><span class="line"></span><br><span class="line">// Add the request to the RequestQueue.</span><br><span class="line">mRequestQueue.add(stringRequest);</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onStop () &#123;</span><br><span class="line">    super.onStop();</span><br><span class="line">    if (mRequestQueue != null) &#123;</span><br><span class="line">        mRequestQueue.cancelAll(TAG);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-构建队列单例"><a class="markdownIt-Anchor" href="#3-构建队列单例"></a> 3. 构建队列单例</h2><p>对于 APP 来说，使用多个网络队列是浪费性能的，最好是整个 APP 使用一个队列。</p><p>所以，我们使用单例模式来进行 Volley <code>RequestQueue</code> 的操作。</p><h3 id="31-自定义队列"><a class="markdownIt-Anchor" href="#31-自定义队列"></a> 3.1 自定义队列</h3><p><code>RequestQueue</code> 除了使用 Volley 的静态方法构建以外，还可以自己构建 <code>RequestQueue</code>。<br>这时，就可以对队列的缓存大小进行设定。</p><ol><li><p>初始化 <code>Cache</code> 实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// The first is the Context method</span><br><span class="line">// The second is the SIZE of the queue, described by BYTES</span><br><span class="line">Cache cache = new DiskBasedCache(getCacheDir(), 1024 * 1024);</span><br></pre></td></tr></table></figure></li><li><p>初始化 <code>Network</code> 实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Using the HttpUrlConnection</span><br><span class="line">Network network = new NetWork(new HurlStack());</span><br></pre></td></tr></table></figure></li><li><p>使用以上两个实例来构建请求队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mRequestQueue = new RequestQueue(cache, network);</span><br></pre></td></tr></table></figure></li><li><p>启动队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mRequestQueue.start();</span><br></pre></td></tr></table></figure></li></ol><h3 id="32-构建单例模型"><a class="markdownIt-Anchor" href="#32-构建单例模型"></a> 3.2 构建单例模型</h3><p>为了节省系统资源，我们构建一个单例模型，整个 App 只使用这一个请求队列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class NetworkSingleton &#123;</span><br><span class="line">    private static NetworkSingleton mInstance;</span><br><span class="line">    private static mContext;</span><br><span class="line"></span><br><span class="line">    private RequestQueue mRequestQueue;</span><br><span class="line"></span><br><span class="line">    // Use private constructor</span><br><span class="line">    private NetworkSingleton(Context context) &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mRequestQueue = getRequestQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized NetworkSingleton getInstance(</span><br><span class="line">                                                Context context) &#123;</span><br><span class="line">        if (mInstance == null) &#123;</span><br><span class="line">            mInstance = new NetworkSingleton(context);</span><br><span class="line">        &#125;</span><br><span class="line">        return mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RequestQueue getRequestQueue() &#123;</span><br><span class="line">        if (mRequestQueue == null) &#123;</span><br><span class="line"></span><br><span class="line">            // The request queue needs the Application context</span><br><span class="line">            // if someone pass a Activity context</span><br><span class="line">            // using the getApplicationContext() could prevent</span><br><span class="line">            // the wrong paramaters</span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(</span><br><span class="line">                            mContext.getApplicationContext());</span><br><span class="line">        &#125;</span><br><span class="line">        return mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; void addToRequestQueue(Request&lt;T&gt; request) &#123;</span><br><span class="line">        getRequestQueue().add(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用类似 Java Bean 的单例模型，我们在整个应用程序的生命周期中就只需要维护一个队列实例。<br>同时，还可以利用单例模型来进行请求的<strong>添加和删除</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Volley </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Volley 构建自定义请求</title>
      <link href="//Android/Volley/Android%20Volley%20%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82/"/>
      <url>//Android/Volley/Android%20Volley%20%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1. 介绍</h2><p>Volley 提供了基本的 <code>StringRequest</code>，<code>JsonObjectRequest</code> 和 <code>JsonArrayRequest</code> 来满足字符串请求和 JSON 请求。</p><p>但是有时候这可能还不能满足我们对网络通信的需求。<br>比如说使用 <code>Gson</code> 库来自动的对响应的 JSON 进行解析等。</p><p>此时就需要构建自定义的 Volley 请求。</p><a id="more"></a><h2 id="2-基本步骤"><a class="markdownIt-Anchor" href="#2-基本步骤"></a> 2. 基本步骤</h2><h3 id="21-继承-requestt-类"><a class="markdownIt-Anchor" href="#21-继承-requestt-类"></a> 2.1 继承 <code>Request&lt;T&gt;</code> 类</h3><p>自定义请求首先是通过继承基本的 <code>Request&lt;T&gt;</code> 类来实现的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class GsonRequst&lt;T&gt; extends Requst&lt;T&gt; &#123;</span><br><span class="line">    // class body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-实现构造器"><a class="markdownIt-Anchor" href="#22-实现构造器"></a> 2.2 实现构造器</h3><p>然后，我们要实现构造器满足基本的 Request 的构造方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public GsonRequest(String url, Class&lt;T&gt; clazz,</span><br><span class="line">                    Response.Listener&lt;T&gt; listener,</span><br><span class="line">                    Response.ErrorListener errorListener) &#123;</span><br><span class="line"></span><br><span class="line">    // Fulfill the super constructor</span><br><span class="line">    super(Method.GET, url, errorListener);</span><br><span class="line"></span><br><span class="line">    this.clazz = clazz;</span><br><span class="line">    this.listener = listenr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这里作为一个 <code>GsonRequest</code>，仅仅要求满足父类的构造参数是不够的，我们还要指定 Gson 转换的 class 类型，以及必要的 Response Listener</p><h3 id="23-重载必要方法"><a class="markdownIt-Anchor" href="#23-重载必要方法"></a> 2.3 重载必要方法</h3><p>为了实现 <code>GsonRequest</code> 我们要重载必要的方法<br><code>parseNetworkResponse()</code> 和 <code>deliverNetworkResponse()</code></p><ol><li><p>重载 <code>parseNetworkResponse(Response response)</code></p><p>顾名思义，这个方法是用来解析网络的回复的，对于我们的 <code>GsonRequest</code>，我们首先要将网络的回复（<strong>二进制流</strong>）转换成 JSON，然后由 Gson 解析成相应的类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Response&lt;T&gt; parseNetworkResponse(</span><br><span class="line">        NetworkResponse response) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        String json = new String(response.data,</span><br><span class="line">        HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">        return Response.success(gson.fromJson(json, clazz),</span><br><span class="line">                HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">    &#125;</span><br><span class="line">    // handle errors</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重载 <code>deliverNetworkResponse(T response)</code></p><p>这个方法是将 <code>parseNetworkResponse()</code> 的<strong>解析结果</strong>发送给我们的 Response listener 的。<br>所以，代码较为简单，直接把解析出来的 <code>response</code> 传给 <code>listener</code> 的回调方法即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void deliverResponse(T response) &#123;</span><br><span class="line">    listener.onResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="24-完整示例"><a class="markdownIt-Anchor" href="#24-完整示例"></a> 2.4 完整示例</h3><p>完整的可用代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class GsonRequest&lt;T&gt; extends Request&lt;T&gt; &#123;</span><br><span class="line">    private final Gson gson = new Gson();</span><br><span class="line">    private final Class&lt;T&gt; clazz;</span><br><span class="line">    private final Map&lt;String, String&gt; headers;</span><br><span class="line">    private final Listener&lt;T&gt; listener;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Make a GET request and return a parsed object from JSON.</span><br><span class="line">     *</span><br><span class="line">     * @param url URL of the request to make</span><br><span class="line">     * @param clazz Relevant class object, for Gson&apos;s reflection</span><br><span class="line">     * @param headers Map of request headers</span><br><span class="line">     */</span><br><span class="line">    public GsonRequest(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span><br><span class="line">            Listener&lt;T&gt; listener, ErrorListener errorListener) &#123;</span><br><span class="line">        super(Method.GET, url, errorListener);</span><br><span class="line">        this.clazz = clazz;</span><br><span class="line">        this.headers = headers;</span><br><span class="line">        this.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Map&lt;String, String&gt; getHeaders() throws AuthFailureError &#123;</span><br><span class="line">        return headers != null ? headers : super.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void deliverResponse(T response) &#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String json = new String(</span><br><span class="line">                    response.data,</span><br><span class="line">                    HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            return Response.success(</span><br><span class="line">                    gson.fromJson(json, clazz),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            return Response.error(new ParseError(e));</span><br><span class="line">        &#125; catch (JsonSyntaxException e) &#123;</span><br><span class="line">            return Response.error(new ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-关于-post-方法"><a class="markdownIt-Anchor" href="#3-关于-post-方法"></a> 3. 关于 POST 方法</h2><p>以上的例子是基于 <code>GET</code> 方法来介绍的，如果使用 POST 方法则略有不同。</p><p>仍然以 <code>GsonRequest</code> 举例子：</p><ol><li>首先，我们需要接受一个新的参数用来承接 POST 的实例对象</li><li>使用 Gson 将对象序列化成 JSON 字符串</li><li>将 JSON 字符串转换成 Params 或者直接 POST JSON 字符串</li></ol><p>此时，我们需要重载几个新方法。</p><h3 id="31-重载-getparams-或-getbody-方法"><a class="markdownIt-Anchor" href="#31-重载-getparams-或-getbody-方法"></a> 3.1 重载 <code>getParams()</code> 或 <code>getBody()</code> 方法</h3><p><code>getParams()</code> 方法实质上会在 <code>getBody()</code> 方法中<strong>被调用</strong>，<br>如果你只需要 POST 简单的 Params 形式(<code>key=val&amp;another_key=another_val</code>)，那么重载 <code>getParams()</code> 方法即可。</p><p>但如果普通的 Params 形式无法满足需要，那么就需要重载 <code>getBody()</code> 方法，其返回的内容会成为 HTTP POST 报文中的 Body。</p><p><strong>注意：两个方法只能选择重载其中一个</strong></p><h4 id="311-重载-getparams-方法"><a class="markdownIt-Anchor" href="#311-重载-getparams-方法"></a> 3.1.1 重载 <code>getParams()</code> 方法</h4><p>一般的 POST 使用，我们重载此方法即可，该方法返回类型是 <code>Map&lt;Sting, String&gt;</code>。</p><p>在 <code>GsonRequest</code> 中，我们只需要使用 <code>Gson</code> 将需要 POST 的对象序列化成 JSON，随后将 JSON 反序列化成 Map&lt;String, String&gt; 即可。<br>即 <code>Object -&gt; JSON -&gt; Map&lt;String, String&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override Map&lt;String, String&gt; getParmas() &#123;</span><br><span class="line">    String json = gson.toJson(mPostObject);</span><br><span class="line"></span><br><span class="line">    // Use TypeToken to avoid the unchecked cast</span><br><span class="line">    // and the floating number converted from primitive integer</span><br><span class="line">    return gson.fromJson(</span><br><span class="line">        json,</span><br><span class="line">        new TypeToken&lt;Map&lt;String, String&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="312-重载-getbody-方法"><a class="markdownIt-Anchor" href="#312-重载-getbody-方法"></a> 3.1.2 重载 <code>getBody()</code> 方法</h4><p>如果基本的 <code>getParams()</code> 方法不能满足需要，那么我们可以直接重载 <code>getBody()</code> 方法来实现对 HTTP body 的高度定制。</p><p>在 <code>GsonRequest</code> 中，假如碰到有时需要 POST 带 <code>List</code> 或者数组类型的对象，由于 <code>List</code> 不能被 cast 成 <code>Map&lt;String, String&gt;</code> 的类型，那么就不能使用 <code>getParams()</code> 方法。<br>应该要使用 <code>getBody()</code> 方法。</p><p>注意 <code>getBody()</code> 返回的是 <code>byte[]</code> 类型，我们需要使用 <code>String</code> 的 <code>getBytes()</code> 方法来将 JSON 转换成二进制流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public byte[] getBody() throws AuthFailureError &#123;</span><br><span class="line"></span><br><span class="line">    if (mPostObject != null) &#123;</span><br><span class="line">        String postJson = gson.toJson(mPostObject);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            return postJson.getBytes(PROTOCOL_CHARSET);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            VolleyLog.wtf(</span><br><span class="line">                    &quot;Unsupported Encoding while trying to get the byte of %s using %s&quot;,</span><br><span class="line">                    postJson, PROTOCOL_CHARSET);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-重载-getbodycontenttype-方法"><a class="markdownIt-Anchor" href="#32-重载-getbodycontenttype-方法"></a> 3.2 重载 <code>getBodyContentType()</code> 方法</h3><p>为了我们的 POST body 能被成功解析，我们还需要重载 <code>getBodyContentType()</code> 方法来指定我们 POST 的<strong>数据的类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String getBodyContentType() &#123;</span><br><span class="line">    return PROTOCOL_CONTENT_TYPE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Volley </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Randomized Queue Implemetation Idea</title>
      <link href="//Coursera/Algorithm/Randomized%20Queue%20Implemetation%20Idea/"/>
      <url>//Coursera/Algorithm/Randomized%20Queue%20Implemetation%20Idea/</url>
      
        <content type="html"><![CDATA[<h2 id="how-to-check-full-empty"><a class="markdownIt-Anchor" href="#how-to-check-full-empty"></a> How to check full &amp; empty?</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> Maintain a item size</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> Calculate from pointer</li></ul><a id="more"></a><h2 id="how-to-resize"><a class="markdownIt-Anchor" href="#how-to-resize"></a> How to resize?</h2><ol><li>Create a new array</li><li>Iterate the item in the origin array</li><li>Assign the new array to the old one</li></ol><h2 id="how-to-iterate"><a class="markdownIt-Anchor" href="#how-to-iterate"></a> How to iterate?</h2><ol><li>Initialization: begin at head</li><li>Next: <code>iterator = (iterator + 1) % array.length</code></li><li>HasNext: <code>iterator != last + 1</code></li></ol><h2 id="how-to-add"><a class="markdownIt-Anchor" href="#how-to-add"></a> How to add?</h2><ol><li>Check if is full, if so, double its size</li><li><code>last = (last + 1) % array.length</code></li><li>Place the item into the new last index position</li></ol><h2 id="how-to-remove"><a class="markdownIt-Anchor" href="#how-to-remove"></a> How to remove?</h2><ol><li>Generate a random integer within the range [0, Size)</li><li>Turn it to the index <code>randomInt + head</code></li><li>Swap the item of that index with the head</li><li>Dequeue</li></ol>]]></content>
      
      
      <categories>
          
          <category> Coursera </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Coursera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地库 API</title>
      <link href="//Projects/BigInovation/%E5%9C%B0%E5%BA%93%20API/"/>
      <url>//Projects/BigInovation/%E5%9C%B0%E5%BA%93%20API/</url>
      
        <content type="html"><![CDATA[<h2 id="global-rules"><a class="markdownIt-Anchor" href="#global-rules"></a> Global rules</h2><h3 id="request"><a class="markdownIt-Anchor" href="#request"></a> Request</h3><ol><li>Requests are MOSTLY without body, just <code>METHOD /example</code></li><li>Some request may need sending a JSON. The JSON MUST be put in HTTP body</li></ol><a id="more"></a><h3 id="response"><a class="markdownIt-Anchor" href="#response"></a> Response</h3><ol><li><p>All responses MUST be transported using JSON <code>object</code> as body</p></li><li><p>All responses MUST contain status as below</p><blockquote><p><code>&quot;success&quot;</code> MUST exists, type: <code>bool</code></p><p>if <code>&quot;success&quot; == false</code>, you CAN get error message via <code>&quot;error_msg&quot;: &quot;str&quot; and &quot;error_id&quot;: int</code></p></blockquote></li><li><p>The response content MUST be stored in the <code>result</code> element of <code>object</code> type</p></li></ol><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;success&quot;: true,</span><br><span class="line">    &quot;result&quot; : &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;success&quot;: false,</span><br><span class="line">    &quot;error_msg&quot;: &quot;error description&quot;,</span><br><span class="line">    &quot;errro_id&quot;: 23333</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map-apis"><a class="markdownIt-Anchor" href="#map-apis"></a> Map APIs</h2><h3 id="create-a-new-map-id"><a class="markdownIt-Anchor" href="#create-a-new-map-id"></a> Create a new map ID</h3><p>Request:</p><p><code>POST /map</code></p><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"id"</span>: <span class="number">1212</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="update-2016-10-14"><a class="markdownIt-Anchor" href="#update-2016-10-14"></a> Update: 2016-10-14</h3><p>Request:</p><p><code>PATCH /map/&lt;id&gt;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"desc"</span>: <span class="string">"str of description"</span>,</span><br><span class="line"><span class="attr">"lon"</span>: <span class="number">2.333333</span>,</span><br><span class="line"><span class="attr">"lat"</span>: <span class="number">-23.33333</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Response: (empty JSON object)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="upload-map-geojson"><a class="markdownIt-Anchor" href="#upload-map-geojson"></a> Upload map GeoJSON</h3><p>Request:</p><p><code>PUT /map/&lt;id&gt;/geojson</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;GeoJSON content&gt;</span><br></pre></td></tr></table></figure><p>Response: (empty JSON object)</p><h3 id="get-map-geojson"><a class="markdownIt-Anchor" href="#get-map-geojson"></a> Get map GeoJSON</h3><p>Request:</p><p><code>GET /map/&lt;id&gt;/geojson</code></p><p>Response:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;GeoJSON content&gt;</span><br></pre></td></tr></table></figure><h3 id="get-nearest-map-id"><a class="markdownIt-Anchor" href="#get-nearest-map-id"></a> Get nearest map ID</h3><p>Request:</p><p><code>GET /map/near/&lt;lat&gt;/&lt;lon&gt;</code></p><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">233</span>,</span><br><span class="line"><span class="attr">"distance"</span>: <span class="number">1212.2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>distance is the distance of your position and map by meters</p></blockquote><h3 id="delete-map"><a class="markdownIt-Anchor" href="#delete-map"></a> Delete map</h3><p>Request:</p><p><code>DELETE /map/&lt;id&gt;</code></p><p>Response: (empty JSON object)</p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> 大创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> 大创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大创项目——地下停车场导航</title>
      <link href="//Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%9C%B0%E4%B8%8B%E5%81%9C%E8%BD%A6%E5%9C%BA%E5%AF%BC%E8%88%AA/"/>
      <url>//Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%9C%B0%E4%B8%8B%E5%81%9C%E8%BD%A6%E5%9C%BA%E5%AF%BC%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<h2 id="1-平面图构建"><a class="markdownIt-Anchor" href="#1-平面图构建"></a> 1. 平面图构建</h2><ol><li><p>人群识别技术</p></li><li><p>照片分析技术</p><blockquote><p>SMF 和消失点检测</p></blockquote></li><li><p>图片平滑处理</p></li></ol><a id="more"></a><h2 id="2-室内定位"><a class="markdownIt-Anchor" href="#2-室内定位"></a> 2. 室内定位</h2><ol><li>三角定位</li><li>Benchmark Image 是否有来源？</li></ol><h2 id="3-载具追踪与导航"><a class="markdownIt-Anchor" href="#3-载具追踪与导航"></a> 3. 载具追踪与导航</h2><ol><li>手机姿态检测</li><li>机器学习方面（蒙特卡洛框架）</li><li>3D 模型 -&gt; 1D 模型</li></ol><h2 id="4-项目架构"><a class="markdownIt-Anchor" href="#4-项目架构"></a> 4. 项目架构</h2><h3 id="41-模块关系"><a class="markdownIt-Anchor" href="#41-模块关系"></a> 4.1 模块关系</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBDAyiioizDpIjHqDMrKmZE1Oe7PEJdfLef84bvvgNbvoQMPERdSN4Xb81rE0O4M2cuP1ONv2HMAfHaf2ha9PPbfeFLAcG2jM5e2CrBIIrAByelpKi9hYmkISt5PPD3QbuAq8a0">]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> 大创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> 大创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>室内定位部分</title>
      <link href="//Projects/BigInovation/%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E9%83%A8%E5%88%86/"/>
      <url>//Projects/BigInovation/%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-目的"><a class="markdownIt-Anchor" href="#1-目的"></a> 1. 目的</h2><p>随着我国汽车拥有量的上升，地库的数量、车位也在不断地增多。虽然这仍然不能满足人们的需求，但是立体化，大型化，复杂化的发展趋势，使得地库的环境越来越复杂和多样化，成为了限制地库应用效率提高的主要瓶颈。现代大型地库的停车位数超过400个。以上海浦东96广场为例，地下车库建筑面积超过20000㎡。一份网络上针对车迷（都市固定居民）的调查显示，约40% 的人无法准确在地库中找到自己的车辆。而这个比例在普通人群中将会更高。而随着寻车难和泊车难的不断出现和我国的城市化进程不断发展，更为复杂的地下停车系统将会越来越多的出现于城市之中。</p><p>所以我们需要让人们在最短的时间内寻找到自己的车辆。同时，快速而准确地地下（室内）车辆定位技术也是地库车辆导航的技术支撑点，如果不能准确定位当前车辆的所在位置，地库的导航规划就无法开展，在停车场的逆向寻车更是无从谈起。</p><a id="more"></a><h2 id="2-国内外现状"><a class="markdownIt-Anchor" href="#2-国内外现状"></a> 2. 国内外现状</h2><p>目前的室内定位技术由于室内缺乏 GPS 信号的引导，主要分为两类：</p><h3 id="一无线技术"><a class="markdownIt-Anchor" href="#一无线技术"></a> （一）无线技术</h3><p>无线技术包括许多不同种类的技术类型，但其主要的原理都为<strong>利用现有的广播通信设备</strong>来进行室内定位。</p><ol><li><p>基于 WiFi 的定位系统</p><blockquote><p>基于 WiFi 的定位系统主要是通过测量用户设备到几个不同的接入点的信号强度，通过信号的衰减程度，并结合设备的广播模式来进行定位<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。<br>同时也有通过测量信号强度，生成一个相关数据（称为 WiFi 指纹），当位置移动时，比对数据，找出相似度最高的数据解析后进行定位<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><p>但是，由于 WiFi 信号的衰减模型不确定，特别是在大型，立体化等复杂的地下车库和停车场中，由于存在行驶的汽车，使得信号的衰减呈现出动态随机的，使得定位的精度和可靠性较差。</p></blockquote></li><li><p>基于蓝牙、手机信号等大部分无线信号的定位系统</p><blockquote><p>基于蓝牙和其他无线信号（如 GSM/CDMA 等手机电信信号），由于信号穿透力不强，或地库系统过于复杂导致的信号覆盖率差，设备部署难等问题，其普遍的定位精度和可靠性都不是很高<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p></blockquote></li><li><p>基于被动式射频识别的定位系统</p><blockquote><p>被动式的射频识别系统通过在室内设置一些被动式射频识别设备，在接收到足够强的信号后，通过向读取器发送数据来向车辆反馈当前位置。</p><p>被动式射频设别较为便宜，但由于射频信号的特点，需要较为狭窄的通道才能达到良好的定位效果，这在一些较为广阔的地下停车场适用性不强。</p><p>同时，由于地下车库的立体化发展，当车辆在向下运动的过程中，射频定位就起不到相应的效果。</p></blockquote></li></ol><h3 id="二非广播技术"><a class="markdownIt-Anchor" href="#二非广播技术"></a> （二）非广播技术</h3><p>非广播技术是指<strong>不依靠现有的广播通信设备</strong>来进行室内定位的技术。</p><ol><li><p>磁场定位技术</p><blockquote><p>磁场定位技术是利用手机等移动设备的磁场感应器来获取磁场数据（包括建筑本身的磁场数据和地磁数据），从而进行室内定位的技术。由于其摆脱了对广播信号的依赖，较为适用于一些没有或者广播信号较为衰弱的场所。</p><p>但是，在 2012 年的室内定位和室内导航（IPIN）的国际峰会上，Binghao Li， Thomas Gallagher， Andrew G Dempster，Chris Rizos 共同发表的一篇文章<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>指出，室内的磁场会受到<strong>移动的金属物体</strong>的干扰。在大型地下停车场中，存在着较多的行驶的汽车和移动的升降梯，此时，仅仅依靠磁场定位的效果不良好。</p></blockquote></li><li><p>惯性定位技术</p><blockquote><p>惯性定位技术即使用移动设备的加速度感应器，获取物体的加速度信息，并通过速度和位置推算，从而进行室内定位的技术。</p><p>这种技术只能在物体<strong>移动时</strong>才能起到效果，在车辆停止时，由于缺乏加速度信息，因而无法进行位置推算。</p></blockquote></li></ol><h2 id="3-问题求解"><a class="markdownIt-Anchor" href="#3-问题求解"></a> 3. 问题求解</h2><p>基于我国目前城市中地下车库不断大型化，立体化，复杂化，同时，我国的电信建设仍有不足，地下深层停车场的手机信号差等特点。地下车库的车辆定位应摒弃蓝牙和手机信号等定位技术的使用。</p><p>基于上述特征，和目前现有技术的优缺点，我们决定通过智能手机中丰富的传感器资料，采用多种技术来进行地下车辆定位和相互验证。</p><p>当车辆在地库某一层时，通过获取气压和磁场数据，并结合贝叶斯算法从而确定车辆所在的地库层数，通过射频识别技术来获取大概位置，并通过结合磁场技术和加速度检测等惯性技术来对位置进行校正。</p><p>当车辆在行驶时，通过使用手机的加速度等传感器，在经过手机的姿态检测处理，消除手机姿态误差后，使用位置推算、路标和减速带碰撞处理等技术，并结合线性蒙特卡洛生成树算法来对车辆进行<strong>实时追踪演算</strong>，对原有定位数据进行校正。</p><p>当车辆进行转弯、上下层等运动时，通过采集手机的陀螺仪和气压变化和磁场变化数据判断车辆当前所进行的动作和位置。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcvbHBkb2NzL2VwaWMwMy93cmFwcGVyLmh0bT9hcm51bWJlcj01NDI1MjM3" title="http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5425237">“Indoor Localization Using Improved RSS-Based Lateration Methods” <i class="fa fa-external-link"></i></span>Yang, Jie; Chen, Yingying (2009-11-01) <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>P. Bahl and V. N. Padmanabhan, “RADAR: an in-building RF-based user location and tracking system,” in Proceedings of 19th Annual Joint Conference of the IEEE Computer and Communications Societies (INFOCOM ’00), vol. 2, pp. 775–784, Tel Aviv.Israel, March 2000. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS91cmw/c2E9dCZyY3Q9aiZxPSZlc3JjPXMmc291cmNlPXdlYiZjZD0yJmNhZD1yamEmdWFjdD04JnZlZD0wYWhVS0V3anoxY0tPdThqTUFoVUU5V01LSFFxRUJoc1FGZ2dzTUFFJnVybD1odHRwcyUzQSUyRiUyRnBkZnMuc2VtYW50aWNzY2hvbGFyLm9yZyUyRmQyMmYlMkZjNDZhNjA3ZGJjMTZkZmM5YTMyMDg0ZmRkOGIyNTU4ZGExN2MucGRmJnVzZz1BRlFqQ05HQWlWS1hpdnNFcFJ0cGg2bGVfNFZLOWlfZXpRJnNpZzI9SnFkRC1rT04xTWVydS04aXZqcGxCZw==" title="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0ahUKEwjz1cKOu8jMAhUE9WMKHQqEBhsQFggsMAE&url=https%3A%2F%2Fpdfs.semanticscholar.org%2Fd22f%2Fc46a607dbc16dfc9a32084fdd8b2558da17c.pdf&usg=AFQjCNGAiVKXivsEpRtph6le_4VK9i_ezQ&sig2=JqdD-kON1Meru-8ivjplBg">Survey of Wireless Based Indoor Localization Technologies<i class="fa fa-external-link"></i></span> Junjie Liu (2014-05-05) <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><span class="exturl" data-url="aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcveHBsL2xvZ2luLmpzcD90cD0mYXJudW1iZXI9NjQxODg4MCZ1cmw9aHR0cCUzQSUyRiUyRmllZWV4cGxvcmUuaWVlZS5vcmclMkZ4cGxzJTJGYWJzX2FsbC5qc3AlM0Zhcm51bWJlciUzRDY0MTg4ODA=" title="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=6418880&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6418880">How feasible is the use of magnetic field alone for indoor positioning?<i class="fa fa-external-link"></i></span> Binghao Li， Thomas Gallagher， Andrew G Dempster，Chris Rizos (13-15 Nov. 2012) <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> 大创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> 大创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络模块使用方法</title>
      <link href="//Projects/BigInovation/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>//Projects/BigInovation/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="调用步骤"><a class="markdownIt-Anchor" href="#调用步骤"></a> 调用步骤</h2><h3 id="1-获取-apiservices"><a class="markdownIt-Anchor" href="#1-获取-apiservices"></a> 1. 获取 ApiServices</h3><p>通过 <code>ApiManager.getServices()</code> 获取 Apiservice 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApiServices services = ApiManager.getServices();</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-通过-apiservices-获取对应-api-的-call-对象"><a class="markdownIt-Anchor" href="#2-通过-apiservices-获取对应-api-的-call-对象"></a> 2. 通过 ApiServices 获取对应 API 的 Call 对象</h3><p>第一步中获取到的 <code>ApiServices</code> 是 <code>ApiServices</code> 接口的实例化对象。<br>通过调用其接口所定义的方法，获取对应网络 API 的 <code>Call</code> 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;Response&gt; call = services.uploadMapGeoJsonCall(id, geoJsonObject);</span><br></pre></td></tr></table></figure><p>对应的网络 API 及其说明请查看相应的后端文档。</p><h3 id="3-通过-call-对象的方法来执行任务"><a class="markdownIt-Anchor" href="#3-通过-call-对象的方法来执行任务"></a> 3. 通过 Call 对象的方法来执行任务。</h3><p>获取到 <code>Call</code> 对象并不意味着开始执行任务，<br>需要调用 <code>Call</code> 对象的对应方法来开启这一个网络请求任务。</p><p>执行 <code>Call</code> 任务的方法有两个</p><ol><li><p>异步方法 <strong>推荐！！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call.enqueue(<span class="keyword">new</span> CallBack());</span><br></pre></td></tr></table></figure></li><li><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call.execute();</span><br></pre></td></tr></table></figure></li></ol><p>最好通过异步方法来开启任务。</p><h3 id="4-在-callback-中对结果进行响应"><a class="markdownIt-Anchor" href="#4-在-callback-中对结果进行响应"></a> 4. 在 CallBack 中对结果进行响应。</h3><h4 id="41-onresponse-方法"><a class="markdownIt-Anchor" href="#41-onresponse-方法"></a> 4.1 <code>onResponse()</code> 方法</h4><p><code>onResponse()</code> 方法用来处理连通网络后的返回结果，包括 200 结果和其他 5xx，4xx 结果。</p><p>本项目对任何可 handle 的结果均返回 200 ，<br><strong>请务必通过 body 中的 <code>isSuccess()</code>, <code>getErrorMsg()</code> 来获取真正的网络响应状态。</strong></p><h4 id="42-onfailure-方法"><a class="markdownIt-Anchor" href="#42-onfailure-方法"></a> 4.2. <code>onFailure()</code> 方法</h4><p>这个方法会回调任何的网络无法连通，body 解析错误的返回结果。</p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
          <category> 大创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程 </tag>
            
            <tag> 大创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学 下</title>
      <link href="//Reviews/AdvancedMathmatics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B/"/>
      <url>//Reviews/AdvancedMathmatics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-级数"><a class="markdownIt-Anchor" href="#1-级数"></a> 1. 级数</h2><h3 id="11-收敛半径和收敛域的计算"><a class="markdownIt-Anchor" href="#11-收敛半径和收敛域的计算"></a> 1.1 收敛半径和收敛域的计算</h3><h4 id="111-收敛半径的计算"><a class="markdownIt-Anchor" href="#111-收敛半径的计算"></a> 1.1.1 收敛半径的计算</h4><p>对于级数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">\sum_{n = 0}^\infty a_nx^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>，如果</p><a id="more"></a><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi mathvariant="normal">∣</mi><mfrac><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mi>n</mi></msub></mfrac><mi mathvariant="normal">∣</mi><mo>=</mo><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\lim_{n \to \infty}|\frac{a_{n + 1}}{a_n}| = \rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.94356em;vertical-align:-.8360000000000001em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em"><span style="top:-2.3139999999999996em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.208331em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.8360000000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">ρ</span></span></span></span></span></p><ol><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\rho \gt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.7335400000000001em;vertical-align:-.19444em"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 时，收敛半径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mfrac><mn>1</mn><mi>ρ</mi></mfrac></mrow><annotation encoding="application/x-tex">R = \frac{1}{\rho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-.481108em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ρ</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.481108em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\rho = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 时，收敛半径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">R = + \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span></li><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi><mo>=</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\rho = + \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span> 时，收敛半径 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">R = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></li></ol><blockquote><p>注意，<strong>收敛半径只与只带有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 的式子有关，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></strong>，与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">x</span></span></span></span> 无关。</p></blockquote><h4 id="112-收敛域的计算"><a class="markdownIt-Anchor" href="#112-收敛域的计算"></a> 1.1.2 收敛域的计算</h4>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 高数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Automata Theory and Formal Language</title>
      <link href="//Reviews/Automata/Automata%20Theory%20and%20Formal%20Language/"/>
      <url>//Reviews/Automata/Automata%20Theory%20and%20Formal%20Language/</url>
      
        <content type="html"><![CDATA[<h2 id="1-automata"><a class="markdownIt-Anchor" href="#1-automata"></a> 1. Automata</h2><h3 id="15-the-central-concept-of-automata-theory"><a class="markdownIt-Anchor" href="#15-the-central-concept-of-automata-theory"></a> 1.5 The Central Concept of Automata Theory</h3><h4 id="151-alphabet"><a class="markdownIt-Anchor" href="#151-alphabet"></a> 1.5.1 Alphabet</h4><blockquote><ul><li>Alphabet is the <strong>finite</strong>, <strong>non-empty</strong> <strong>Set</strong> of the symbol</li></ul></blockquote><ul><li>Using the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span> symbol stand for the Alphabet</li></ul><a id="more"></a><h2 id="152-string"><a class="markdownIt-Anchor" href="#152-string"></a> 1.5.2 String</h2><blockquote><p>String, sometime called <strong>word</strong> is a <strong>finite</strong> sequence of symbols, which choose from the Alphabet.</p></blockquote><ul><li>Empty String</li></ul><blockquote><p>If the string has no symbol, it is empty String, use the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">ϵ</span></span></span></span> stand for it.</p></blockquote><ul><li>String’s lenth</li></ul><blockquote><p>The number of symbol in the the string called the <strong>lenth</strong> of the string, use the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>w</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|w|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="mord">∣</span></span></span></span> stand for the lenth of string <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span></p></blockquote><ul><li>The power of Alphabet</li></ul><blockquote><p>Use the exponent of the Alphabet like <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">\sum^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.239018em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.9890079999999999em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span> stand for the Set of string, which lenth is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span>, in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span><br>Notice that <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mn>0</mn></msup><mo>=</mo><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\sum^0 = \{\epsilon\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.204018em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">ϵ</span><span class="mclose">}</span></span></span></span></p></blockquote><blockquote><p>The set of <strong>all</strong> strings in an Alphabet, use <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">\sum^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.078606em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.828596em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span><br>If remove the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">ϵ</span></span></span></span> in the normal Alphabet, the rest is called <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">\sum^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.161241em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.911231em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mo>+</mo></msup><mo>=</mo><msup><mo>∑</mo><mn>0</mn></msup><mo>⋃</mo><msup><mo>∑</mo><mn>1</mn></msup><mo>⋃</mo><msup><mo>∑</mo><mn>2</mn></msup><mo>⋃</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">\sum^+ = \sum^0\bigcup\sum^1\bigcup\sum^2\bigcup\dots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.161241em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.911231em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.204018em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span></p></blockquote><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mo>∗</mo></msup><mo>=</mo><msup><mo>∑</mo><mo>+</mo></msup><mo>⋃</mo><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\sum^*=\sum^+\bigcup\{\epsilon\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.078606em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.828596em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.161241em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.911231em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="mopen">{</span><span class="mord mathdefault">ϵ</span><span class="mclose">}</span></span></span></span></p></blockquote><h2 id="153-language"><a class="markdownIt-Anchor" href="#153-language"></a> 1.5.3 Language</h2>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动机考试</title>
      <link href="//Reviews/Automata/%E8%87%AA%E5%8A%A8%E6%9C%BA%E8%80%83%E8%AF%95/"/>
      <url>//Reviews/Automata/%E8%87%AA%E5%8A%A8%E6%9C%BA%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="填空选择问答"><a class="markdownIt-Anchor" href="#填空选择问答"></a> 填空选择问答</h2><h3 id="1-绪论"><a class="markdownIt-Anchor" href="#1-绪论"></a> 1. 绪论</h3><h4 id="11-语言和形式语言"><a class="markdownIt-Anchor" href="#11-语言和形式语言"></a> 1.1 语言和形式语言</h4><ol><li>语言是<strong>字集齐组合规则的统一体</strong></li></ol><h4 id="12-字母表"><a class="markdownIt-Anchor" href="#12-字母表"></a> 1.2 字母表</h4><ol><li><p>字母表是一个<strong>非空有穷</strong>集合，具有<strong>非空性</strong>、<strong>有穷性</strong></p></li><li><p>字符具有<strong>整体性</strong>和<strong>可辨认性</strong></p></li><li><p>正闭包：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mo>+</mo></msup><mo>=</mo><mo>∑</mo><mo>∪</mo><msup><mo>∑</mo><mn>2</mn></msup><mo>∪</mo><msup><mo>∑</mo><mn>3</mn></msup><mo>∪</mo><msup><mo>∑</mo><mn>4</mn></msup><mo>∪</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\sum^+ = \sum \cup \sum^2 \cup \sum^3 \cup \sum^4 \cup \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.161241em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.911231em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.204018em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span></span></span></span></p></li><li><p>克林闭包：正闭包 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∪</mo><msup><mo>∑</mo><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">\cup \sum^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.204018em;vertical-align:-.25001em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mo>∗</mo></msup><mo>=</mo><msup><mo>∑</mo><mn>0</mn></msup><mo>∪</mo><msup><mo>∑</mo><mo>+</mo></msup><mo>=</mo><msup><mo>∑</mo><mn>0</mn></msup><mo>∪</mo><mo>∑</mo><mo>∪</mo><msup><mo>∑</mo><mn>2</mn></msup><mo>∪</mo><msup><mo>∑</mo><mn>3</mn></msup><mo>∪</mo><msup><mo>∑</mo><mn>4</mn></msup><mo>∪</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\sum^* = \sum^0 \cup \sum^+ = \sum^0 \cup\sum \cup \sum^2 \cup \sum^3 \cup \sum^4 \cup \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.078606em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.828596em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.204018em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.911231em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.204018em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.954008em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">∪</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span></span></span></span></p></blockquote></li></ol><a id="more"></a><h4 id="13-句子"><a class="markdownIt-Anchor" href="#13-句子"></a> 1.3 句子</h4><ol start="5"><li>字符的总个数成为句子的长度，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|x|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span></span></span></span></li><li>前缀、后缀，公共前缀、公共后缀与集合中的<strong>子集</strong>相同</li><li>两个句子含有同一个串，这个串称为<strong>公共子串</strong>，如果这个串是<strong>最长的</strong>，那么称为<strong>最大公共子串</strong></li></ol><h3 id="2-文法"><a class="markdownIt-Anchor" href="#2-文法"></a> 2. 文法</h3><h4 id="21-形式定义"><a class="markdownIt-Anchor" href="#21-形式定义"></a> 2.1 形式定义</h4><p>文法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span></span></span></span> 是一个四元组：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>T</mi><mo separator="true">,</mo><mi>P</mi><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G = (V, T, P, S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span></span></span></span>——变量（variable），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>A</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">\forall A \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord">∀</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 叫做<strong>语法变量</strong>或者<strong>非终极符号</strong>或者<strong>语法范畴</strong><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span></span>——终极符号（terminal）是非空有穷集合。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>a</mi><mo>∈</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">\forall a \in T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord">∀</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">a</span></span></span></span> 称为终极符号，是组成一个串或者句子的元单位<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span></span></span></span>——产生式（production），形式为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha \to \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05278em">β</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span>——<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">S \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span></span></span></span>，文法 G 的开始符号，表示语言被定义的地方</p><h4 id="22-句型"><a class="markdownIt-Anchor" href="#22-句型"></a> 2.2 句型</h4><p>如果可以从开始符号推导出一个串，那么这个串称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span></span></span></span> 产生的一个<strong>句型</strong></p><h4 id="23-乔姆斯基体系"><a class="markdownIt-Anchor" href="#23-乔姆斯基体系"></a> 2.3 乔姆斯基体系</h4><ol><li><p>没有任何限制的文法称为 <strong>0 型文法</strong>，语言叫做 <strong>0 型语言</strong></p></li><li><p>对于 <strong>0 型文法</strong>，经过产生式后<strong>句子长度不减少</strong>，叫做<strong>上下文有关文法</strong>，语言叫做<strong>上下文有关语言</strong>，也被称为 <strong>1 型文法</strong>，语言叫做 <strong>1 型语言</strong></p><blockquote><p>对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>α</mi><mo>→</mo><mi>β</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">\forall \alpha \to \beta \in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span></span></span></span>，均有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>β</mi><mi mathvariant="normal">∣</mi><mo>≥</mo><mi mathvariant="normal">∣</mi><mi>α</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|\beta| \ge |\alpha|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mord">∣</span></span></span></span></p></blockquote></li><li><p>对于 <strong>1 型文法</strong>，如果<strong>左部都是变量</strong>，那么叫做<strong>上下文有关文法</strong>，<strong>语言叫做上下文有关语言</strong>，也被称为 <strong>2 型文法</strong>，语言叫做 <strong>2 型语言</strong></p><blockquote><p>对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>α</mi><mo>→</mo><mi>β</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">\forall \alpha \to \beta \in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span></span></span></span>，均有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>β</mi><mi mathvariant="normal">∣</mi><mo>≥</mo><mi mathvariant="normal">∣</mi><mi>α</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|\beta| \ge |\alpha|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mord">∣</span></span></span></span>，并且有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">\alpha \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.5782em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">V</span></span></span></span></p></blockquote></li><li><p>对于 <strong>2 型文法</strong>，如果产生式只产生<strong>终极符号</strong>和<strong>终极符号后接变量</strong>，那么叫做<strong>正则文法</strong>，语言叫做<strong>正则语言</strong>，也叫做 <strong>3 型文法</strong></p><blockquote><p>对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>α</mi><mo>→</mo><mi>β</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">\forall \alpha \to \beta \in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha \to \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05278em">β</span></span></span></span>均具有形式：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>→</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">A \to w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>→</mo><mi>w</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">A \to wB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span></p></blockquote><blockquote><p>注：正则文法又叫<strong>右线性文法</strong>；<br>如果变量在左边就叫<strong>左线性文法</strong>；<br>两个串中间夹一个变量就是<strong>线性文法</strong></p></blockquote></li></ol><blockquote><p>可以看到，文法的乔姆斯基体系是<strong>逐步收紧限制的</strong></p></blockquote><h4 id="24-推导-归约和文法构造"><a class="markdownIt-Anchor" href="#24-推导-归约和文法构造"></a> 2.4 推导、归约和文法构造</h4><p>这些都比较简单，慢慢推就行了。<br>构造看结构想想就行了。</p><h3 id="3-有穷状态自动机"><a class="markdownIt-Anchor" href="#3-有穷状态自动机"></a> 3. 有穷状态自动机</h3><h4 id="31-物理模型"><a class="markdownIt-Anchor" href="#31-物理模型"></a> 3.1 物理模型</h4><p>有穷状态自动机由以下结构构成：</p><ol><li>右端无穷<strong>输入带</strong></li><li>有穷状态<strong>控制器</strong></li><li>读头</li></ol><h4 id="32-形式定义"><a class="markdownIt-Anchor" href="#32-形式定义"></a> 3.2 形式定义</h4><p>有穷状态自动机是一个五元组</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mo>∑</mo><mo separator="true">,</mo><mi>δ</mi><mo separator="true">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M = (Q, \sum, \delta, q_0, F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">Q</span></span></span></span>——<strong>状态</strong>的非空有穷集合，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>q</mi><mo>∈</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">\forall q \in Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">Q</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 的一个<strong>状态</strong><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span>——输入字母表<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span></span></span></span>——状态转移函数，读入字符后经过转移函数处理进行状态转移<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">q_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>——开始状态<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span>——终止状态，又称接受状态</p><h4 id="33-dfa"><a class="markdownIt-Anchor" href="#33-dfa"></a> 3.3 DFA</h4><p>对于状态集合中的任何一个状态，状态转移函数均有一个<strong>确定的值</strong></p><h4 id="34-nfa"><a class="markdownIt-Anchor" href="#34-nfa"></a> 3.4 NFA</h4><ol><li><p>形式定义</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span></span></span></span>——状态转移函数，对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mo stretchy="false">(</mo><mi>q</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>Q</mi><mo>×</mo><mo>∑</mo><mo separator="true">,</mo><mi>δ</mi><mo stretchy="false">(</mo><mi>q</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>p</mi><mi>m</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\forall (q,a) \in Q \times \sum, \delta(q,a) = \{p_1, p_2, \cdots, p_m\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∀</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span><br>其余与 DFA 相同</p></blockquote></li><li><p>与 DFA 的区别</p><ol><li>并不是所有在状态集合中的状态对应某个输入都有状态转移函数结果与之对应</li><li>并不是对于所有的状态转移结果都只对应一个状态</li></ol></li></ol><h4 id="35-epsilon-nfa"><a class="markdownIt-Anchor" href="#35-epsilon-nfa"></a> 3.5 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi><mo>−</mo><mi>N</mi><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">\epsilon-NFA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mord mathdefault">A</span></span></span></span></h4><ol><li><p>形式定义</p><blockquote><p>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>q</mi><mo>∈</mo><mi>Q</mi><mo separator="true">,</mo><mi>δ</mi><mo stretchy="false">(</mo><mi>q</mi><mo separator="true">,</mo><mi>ϵ</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>p</mi><mi>m</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\forall q \in Q, \delta (q, \epsilon) = \{ p_1, p_2, \cdots, p_m \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>，表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 在状态 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span></span></span></span> 不读入任何字符的情况下也能<strong>选择进行状态转移</strong></p></blockquote></li></ol><h4 id="36-补充"><a class="markdownIt-Anchor" href="#36-补充"></a> 3.6 补充</h4><ol><li>FA 接受的语言是<strong>正则语言</strong></li></ol><h3 id="4-正则表达式"><a class="markdownIt-Anchor" href="#4-正则表达式"></a> 4. 正则表达式</h3><h4 id="41-形式定义"><a class="markdownIt-Anchor" href="#41-形式定义"></a> 4.1 形式定义</h4><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span> 上的正则表达式，表示语言<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">ϵ</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span> 上的正则表达式，表示语言 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{ \epsilon \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">ϵ</span><span class="mclose">}</span></span></span></span></p></li><li><p>对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>a</mi><mo>∈</mo><mo>∑</mo><mo separator="true">,</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">\forall a \in \sum , a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord">∀</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">a</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span> 上的正则表达式，它表示语言 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mi>a</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{ a \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">a</span><span class="mclose">}</span></span></span></span></p></li><li><p>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span></span></span></span> 分别是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span> 上的表达语言 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span> 的正则表达式，那么</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r + s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span> 表达的语言是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>∪</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">R \cup S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span>；<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(rs)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span> 表达的语言是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">RS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span>；<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>r</mi><mo>∗</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r^*)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.688696em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 表达的语言是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">R^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.688696em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.688696em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>只有满足以上四条，才是正则表达式</p></li></ol><h3 id="5-正则语言的性质"><a class="markdownIt-Anchor" href="#5-正则语言的性质"></a> 5. 正则语言的性质</h3><h4 id="51-封闭性"><a class="markdownIt-Anchor" href="#51-封闭性"></a> 5.1 封闭性</h4><p>RL 在<strong>交、并、补，乘积、闭包</strong>运算都是封闭的</p><h4 id="52-myhill-nerode-定理"><a class="markdownIt-Anchor" href="#52-myhill-nerode-定理"></a> 5.2 Myhill-Nerode 定理</h4><p>如下三个命题<strong>等价</strong>：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>⊆</mo><msup><mo>∑</mo><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">L \subseteq \sum^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8193em;vertical-align:-.13597em"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.078606em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.828596em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> 是 RL</li><li>L 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mo>∑</mo><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">\sum^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.078606em;vertical-align:-.25001em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.828596em"><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> 上的某个具有有穷指数的又不变等价关系 R 的某些等价类的并</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">R_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.32833099999999993em"><span style="top:-2.5500000000000003em;margin-left:-.00773em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 具有无穷指数</li></ol><h3 id="6-上下文无关语言"><a class="markdownIt-Anchor" href="#6-上下文无关语言"></a> 6. 上下文无关语言</h3><h4 id="61-二义性"><a class="markdownIt-Anchor" href="#61-二义性"></a> 6.1 二义性</h4><p>对于 CFG <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>T</mi><mo separator="true">,</mo><mi>P</mi><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G = (V, T, P, S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mclose">)</span></span></span></span>，如果存在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo>∈</mo><mi>L</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w \in L(G)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.5782em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span> 至少有两颗不同的派生树，则称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span></span></span></span> 为<strong>二义性的</strong>，否则则为非二义性的</p><p>如果语言 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">L</span></span></span></span> <strong>不存在非</strong>二义性文法，则称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">L</span></span></span></span> 为<strong>固有二义性的</strong>，或者<strong>先天二义性的</strong></p><h4 id="62-乔姆斯基范式cnf"><a class="markdownIt-Anchor" href="#62-乔姆斯基范式cnf"></a> 6.2 乔姆斯基范式（CNF）</h4><p>形式定义：</p><p>如果 CFG <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>T</mi><mo separator="true">,</mo><mi>P</mi><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G = (V, T, P, S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mclose">)</span></span></span></span>中的所有产生式都具有形式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>A</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>→</mo><mi>B</mi><mi>C</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>A</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>→</mo><mi>a</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} A &amp;\to BC \\ A &amp;\to a \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em"><span style="top:-3.91em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">A</span></span></span><span style="top:-2.41em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em"><span style="top:-3.91em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span><span style="top:-2.41em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>则称为乔姆斯基文法或者乔姆斯基范式</p><h4 id="63-格雷巴赫范式"><a class="markdownIt-Anchor" href="#63-格雷巴赫范式"></a> 6.3 格雷巴赫范式</h4><p>形式定义：</p><p>如果 CFG <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>T</mi><mo separator="true">,</mo><mi>P</mi><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G = (V, T, P, S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.22222em">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mclose">)</span></span></span></span> 具有形式</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>→</mo><mi>a</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">A \to a\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.0037em">α</span></span></span></span></span></p><p>则称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">G</span></span></span></span> 为<strong>格雷巴赫范式文法</strong>，简称<strong>格雷巴赫范式</strong></p><h3 id="7-下推自动机"><a class="markdownIt-Anchor" href="#7-下推自动机"></a> 7. 下推自动机</h3><h4 id="71-物理模型"><a class="markdownIt-Anchor" href="#71-物理模型"></a> 7.1 物理模型</h4><p>下推自动机有三个基本结构：</p><ol><li>存放输入符号串的<strong>输入带</strong></li><li>存放<strong>文法符号</strong>的<strong>栈</strong></li><li><strong>有穷状态控制器</strong></li></ol><h4 id="72-形式定义"><a class="markdownIt-Anchor" href="#72-形式定义"></a> 7.2 形式定义</h4><p>下推自动机是一个七元组：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mo>∑</mo><mo separator="true">,</mo><mi mathvariant="normal">Γ</mi><mo separator="true">,</mo><mi>δ</mi><mo separator="true">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>Z</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M = (Q,\sum, \Gamma, \delta, q_0, Z_0, F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">Γ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">Q</span></span></span></span>——状态集合<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span>——输入字母表<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi></mrow><annotation encoding="application/x-tex">\Gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Γ</span></span></span></span>——栈符号表<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span></span></span></span>——状态转移函数<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">q_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>——开始状态<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Z</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">Z_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>——开始<strong>符号</strong><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span>——终止状态</p><h3 id="8-上下文无关语言性质"><a class="markdownIt-Anchor" href="#8-上下文无关语言性质"></a> 8. 上下文无关语言性质</h3><h4 id="81-封闭性"><a class="markdownIt-Anchor" href="#81-封闭性"></a> 8.1 封闭性</h4><ol><li><p>交运算、补运算<strong>不封闭</strong></p></li><li><p>并、乘积、闭包运算<strong>封闭</strong></p></li></ol><h3 id="9-图灵机"><a class="markdownIt-Anchor" href="#9-图灵机"></a> 9. 图灵机</h3><h4 id="91-物理模型"><a class="markdownIt-Anchor" href="#91-物理模型"></a> 9.1 物理模型</h4><p>基本模型包括：</p><ol><li>有穷状态控制器（FSC）</li><li>含有无穷多个带方格的<strong>输入带</strong></li><li>读头</li></ol><h4 id="92-形式定义"><a class="markdownIt-Anchor" href="#92-形式定义"></a> 9.2 形式定义</h4><p>图灵机是一个七元组：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mo>∑</mo><mo separator="true">,</mo><mi mathvariant="normal">Γ</mi><mo separator="true">,</mo><mi>δ</mi><mo separator="true">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M = (Q, \sum, \Gamma, \delta, q_0, B, F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">Γ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">Q</span></span></span></span>——状态集合<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span>——字母表<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi></mrow><annotation encoding="application/x-tex">\Gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Γ</span></span></span></span>——带符号表，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>X</mi><mo>∈</mo><mi mathvariant="normal">Γ</mi></mrow><annotation encoding="application/x-tex">\forall X \in \Gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Γ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 上的一个带符号，表示在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 的运行过程中， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 可以在某一时刻出现在输入带上<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span></span></span></span>——转移函数<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">q_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>——开始状态<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span>——空白符<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span>——终止状态</p><h4 id="93-即时描述"><a class="markdownIt-Anchor" href="#93-即时描述"></a> 9.3 即时描述</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>M</mi><mtext> </mtext><mi>M</mi><mo>=</mo><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mtext> </mtext><mo>∑</mo><mo separator="true">,</mo><mtext> </mtext><mi mathvariant="normal">Γ</mi><mo separator="true">,</mo><mtext> </mtext><mi>δ</mi><mo separator="true">,</mo><mtext> </mtext><msub><mi>q</mi><mn>0</mn></msub><mo separator="true">,</mo><mtext> </mtext><mi>B</mi><mo separator="true">,</mo><mtext> </mtext><mi>F</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mo>∈</mo><msup><mi mathvariant="normal">Γ</mi><mo>∗</mo></msup><mo separator="true">,</mo><mi>q</mi><mo>∈</mo><mi>Q</mi><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">TM\ M = (Q, \ \sum, \ \Gamma, \ \delta, \ q_0, \ B, \ F), a_1a_2 \in \Gamma^*, q \in Q, a_1a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord">Γ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8831359999999999em;vertical-align:-.19444em"></span><span class="mord"><span class="mord">Γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.688696em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></p><p>称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span> 的<strong>即时描述</strong></p><h3 id="10-上下文有关语言"><a class="markdownIt-Anchor" href="#10-上下文有关语言"></a> 10. 上下文有关语言</h3><h4 id="101-线性有界自动机的形式定义"><a class="markdownIt-Anchor" href="#101-线性有界自动机的形式定义"></a> 10.1 线性有界自动机的形式定义</h4><p>线性有界自动机是一种<strong>非确定的图灵机</strong>，满足如下两个条件：</p><ol><li>输入字母表(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span></span></span></span>) 中包含两个人特殊的符号 (<strong>打不出来，C 画一条斜线</strong>) 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.80556em;vertical-align:-.05556em"></span><span class="mord">$</span></span></span></span>， 其中，（<strong>C 画一条斜线</strong>）作为输入符号串的左端标识，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.80556em;vertical-align:-.05556em"></span><span class="mord">$</span></span></span></span>，作为输入符号串的右端标识</li><li>LBA 的读头只能在上面两个符号之间移动，而且 LBA 不能在上面两个断点符号上面打印另外一个符号</li></ol><p>LBA 可以被看做一个八元组，其接受的语言为：</p><p><img alt="Hehe" data-src="https://ww2.sinaimg.cn/large/8c1fca6bjw1f0b1nys23oj20em01paa3.jpg"></p><p><strong>线性有界自动机和上下文有关文法等价</strong></p><h2 id="大题"><a class="markdownIt-Anchor" href="#大题"></a> 大题</h2><h3 id="大题考点"><a class="markdownIt-Anchor" href="#大题考点"></a> 大题考点</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">ϵ</span></span></span></span>-NFA 转 NFA</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> NFA 转 DFA</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 正则语言转 FA</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> DFA 转正则语言</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 泵引理证明一个语言不是 RL</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> DFA 极小化</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 上下文无关语言的文法化简</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 泵引理证明一个语言不是上下文无关语言</li></ul><h3 id="1-epsilon-nfa-转-nfa"><a class="markdownIt-Anchor" href="#1-epsilon-nfa-转-nfa"></a> 1. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">ϵ</span></span></span></span>-NFA 转 NFA</h3><p>步骤：</p><ol><li>先找空闭包（<strong>包括它本身</strong>），得到一个集合</li><li>寻找这个集合的对于某个特定输入的转移，得到另一个集合</li><li>对于 2 的集合寻找其空闭包（<strong>包括它本身</strong>），得到第三个集合</li></ol><p>第三个集合即为某个状态对于上面的<strong>特定输入</strong>的状态转移</p><p>找出所有非空输入的状态为止</p><h3 id="2-nfa-转-dfa"><a class="markdownIt-Anchor" href="#2-nfa-转-dfa"></a> 2. NFA 转 DFA</h3><p>步骤：</p><ol><li><p>由 NFA 的初始状态出发，找出初始状态对应输入的集合</p></li><li><p>由对应的输入集合出发，继续根据输入写出对应的转移</p></li><li><p>重复 2 直到找完所有集合为止</p></li><li><p>含有终止状态的集合均为终止状态</p></li><li><p>勾出可达状态。</p><blockquote><p>可达状态即为从初始状态能到达的所有状态集合</p></blockquote></li></ol><h3 id="3-正则语言转-fa"><a class="markdownIt-Anchor" href="#3-正则语言转-fa"></a> 3. 正则语言转 FA</h3><h4 id="31-dfa-转正则文法"><a class="markdownIt-Anchor" href="#31-dfa-转正则文法"></a> 3.1 DFA 转正则文法</h4><ol><li><p>由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">q_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 开始状态开始</p></li><li><p>根据输入和相应的转移状态写文法</p><blockquote><p>每一个转移对应文法为：输入，状态（没有逗号）</p></blockquote></li><li><p>如果转移到终止状态，则写终止符号</p><blockquote><p>终止符号为转移到终止状态的输入</p></blockquote></li><li><p>如果终止状态有闭包，则除了终止符号外，还要加上相应的 【输入，状态】</p></li><li><p>终止状态有转移则写终止状态，没有则不用写</p></li><li><p>如果有不可达状态，写出之后要删去</p><blockquote><p>不可达状态即只能写出自身闭包的文法</p></blockquote></li></ol><h4 id="32-正则文法转-fa"><a class="markdownIt-Anchor" href="#32-正则文法转-fa"></a> 3.2 正则文法转 FA</h4><p>根据相应文法写出状态转移函数即可</p><ol><li><p>引入一个终止状态 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">Z</span></span></span></span></p></li><li><p>根据文法写出状态转移函数</p><blockquote><p>形式如下：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">\delta(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mopen">(</span></span></span></span>变量，输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mclose">)</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">=</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo></mrow><annotation encoding="application/x-tex">\{</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span></span></span></span>转移后状态<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mclose">}</span></span></span></span><br>例如：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>→</mo><mn>0</mn><mi>A</mi></mrow><annotation encoding="application/x-tex">E \to 0A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">0</span><span class="mord mathdefault">A</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>E</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>A</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\delta(E,0) = \{A\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">A</span><span class="mclose">}</span></span></span></span></p></blockquote></li><li><p>如果遇到终止符号，则在右方集合中写上终止状态<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">Z</span></span></span></span></p><blockquote><p>例如：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>→</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mn>1</mn><mi>C</mi></mrow><annotation encoding="application/x-tex">A \to 1|1C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord">1</span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>Z</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\delta(A,1) = \{Z,C\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07153em">Z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">}</span></span></span></span></p></blockquote></li></ol><h4 id="33-正则表达式转-fa"><a class="markdownIt-Anchor" href="#33-正则表达式转-fa"></a> 3.3 正则表达式转 FA</h4><p>分析结构，有以下几种状况</p><ol><li>遇到加号就分叉</li><li>乘号在后面加一段相应字符的转移</li><li>克林闭包意味着循环和<strong>可跳过</strong></li><li>正闭包意味着循环和至少需要经过一次（即不可跳过）</li><li>最后合并到终止状态</li></ol><h4 id="34-dfa-转正则表达式"><a class="markdownIt-Anchor" href="#34-dfa-转正则表达式"></a> 3.4 DFA 转正则表达式</h4><p>根据 DFA 的图转换成正则表达式</p><ol><li><p>预处理</p><ol><li><p>用状态 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">Y</span></span></span></span> 将图“括起来”</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 用空转移指向初始状态，所有的终止状态用空转移指向 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">Y</span></span></span></span></p></blockquote></li><li><p>去掉所有的不可达状态</p></li></ol></li><li><p>并弧</p><blockquote><p>将两个状态的平行弧（方向一致），或者有逗号的，将其输入用<strong>加号</strong>连起来</p></blockquote></li><li><p>去掉点</p><blockquote><p>对于到达 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">Y</span></span></span></span> 的路径，将输入拼起来即可<br>关于消去这个点之后，将其他经过这个点到达的路径的输入拼起来<br>如果有闭包，则在对应的输入上使用克林闭包<br>如果除了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">Y</span></span></span></span> 只有一种状态，而且没有经过这种状态从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 到达 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">Y</span></span></span></span> 的路径，则将这个点和对应的路径<strong>直接删去即可</strong></p></blockquote></li><li><p>不断重复 2 和 3</p></li><li><p>最后只剩下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.22222em">Y</span></span></span></span>，则输入则为正则表达式</p></li></ol><h3 id="4-泵引理证明一个语言不是-rl"><a class="markdownIt-Anchor" href="#4-泵引理证明一个语言不是-rl"></a> 4. 泵引理证明一个语言不是 RL</h3><p>利用泵引理反证法证明一个语言不是 RL</p><ol><li><p>利用正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 构造一个特殊的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.04398em">z</span></span></span></span></p><blockquote><p>一般将语言中的未知数替换成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 即可，有时也需动点脑筋</p></blockquote></li><li><p>利用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>v</mi><mi mathvariant="normal">∣</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|v| \ge 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>u</mi><mi>v</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">|uv| \le N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> 说明 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span></span></span></span> 必定为某个式子。</p><blockquote><p>式子为符号的幂，下同</p></blockquote></li><li><p>由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mi>u</mi><mi>v</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">z = uvw</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.04398em">z</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span> 得出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">u</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span> 的对应的式子</p></li><li><p>由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><msup><mi>v</mi><mi>i</mi></msup><mi>w</mi></mrow><annotation encoding="application/x-tex">uv^iw</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.824664em;vertical-align:0"></span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.824664em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.02691em">w</span></span></span></span> 得出化简后的相应式子</p><blockquote><p>注意不要消掉 2 中的设定的参数</p></blockquote></li><li><p>选择一个恰当的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 说明 4 中的关系和 1 中的关系矛盾</p></li><li><p>证明完成</p></li></ol><h3 id="5-dfa-的极小化"><a class="markdownIt-Anchor" href="#5-dfa-的极小化"></a> 5. DFA 的极小化</h3><p>对于一个 DFA 的图进行简化</p><ol><li><p>去掉不可达状态</p></li><li><p>在可区分状态表标记所有<strong>终止状态</strong>的行和列</p><blockquote><p><strong>对于交界的格子，不进行标记</strong></p></blockquote></li><li><p>对于空的格子，根据相应转移函数算出对应结合</p><blockquote><p>相应转移函数：状态集合对应输入所得到的状态集合的函数<br>对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>q</mi><mn>4</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[q_0,q_4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，进行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\delta(q_0,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span>输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mclose">)</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mn>4</mn></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\delta(q_4,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03785em">δ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span> 输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mclose">)</span></span></span></span> 来进行<br>所得出的新的两个状态则为相应的转移后状态集合</p></blockquote><blockquote><p>建议先算出所有的转移函数结果</p></blockquote></li><li><p>如果算出来的集合未被标记，增加到关联表中</p><blockquote><p>关联表：算出的新集合 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">→</span></span></span></span> 原集合<br>如果新的“原集合”算出一个<strong>已经算出过的“新集合”</strong>，继续接到后面去<br>注意，以某个集合为<strong>起点</strong>的关联表才是它的关联表。</p></blockquote></li><li><p>如果算出来的集合已经被标记了，那么就把它标记，并根据标记的集合的关联表进行递归标记</p><blockquote><p><strong>如果根据某个输入得出该组集合已经被标记，就没有必要去看另一组输入的结果了。</strong></p></blockquote></li><li><p>如果算出的集合跟原集合相等，不进行任何操作</p></li><li><p>如果转移函数得到相等结果，不进行任何操作</p></li><li><p>此时算法结束，根据可区分状态表中没有标记的组，列出来，说明它们恒等</p><blockquote><p>如果没有未标记的组，说明当前图已经是最简了</p></blockquote></li><li><p>根据 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.46375em;vertical-align:0"></span><span class="mrel">≡</span></span></span></span> 的传递性进行状态分组</p><blockquote><p>恒等的分成一组</p></blockquote></li><li><p>如果还有落单的状态，另分组</p></li><li><p>分组完毕，根据原图根据分组的状态来画出简化图</p></li></ol><h3 id="6-上下文无关文法的化简"><a class="markdownIt-Anchor" href="#6-上下文无关文法的化简"></a> 6. 上下文无关文法的化简</h3><p>步骤：</p><ol><li>清除无用符号</li><li>清除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">ϵ</span></span></span></span> 产生式</li><li>清除单一产生式</li><li>清除无用符号（如果有的话）</li></ol><h4 id="61-去无用符号"><a class="markdownIt-Anchor" href="#61-去无用符号"></a> 6.1 去无用符号</h4><ol><li><p>先清除非产生的</p><blockquote><p>非产生的：从这个符号开始，进行推导不能得出<strong>只有终结符号</strong>的，被称为非产生的</p></blockquote><blockquote><p>注意含有非产生符号的式子要一并清除</p></blockquote></li><li><p>再清除不可达的</p><blockquote><p>不可达的，即由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span> 不能达到的</p></blockquote></li></ol><h4 id="62-清除-epsilon-产生式"><a class="markdownIt-Anchor" href="#62-清除-epsilon-产生式"></a> 6.2 清除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">ϵ</span></span></span></span> 产生式</h4><p>注意，如果清除之后出现无用符号，那么就应该为它加上某个它自身能推导出来的终结符<br>并考虑到它的可能为空的特性，在上级符号中加入不含这个符号的产生式</p><h4 id="63-清除单一产生式"><a class="markdownIt-Anchor" href="#63-清除单一产生式"></a> 6.3 清除单一产生式</h4><p>形如 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \to B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 即为单一产生式，可以将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 的内容合并到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 中。<br>不断重复，直到没有单一产生式为止</p><h3 id="7-用泵引理证明一个语言不是上下文无关语言"><a class="markdownIt-Anchor" href="#7-用泵引理证明一个语言不是上下文无关语言"></a> 7. 用泵引理证明一个语言不是上下文无关语言</h3><p>这里的泵引理是 CFL 的泵引理</p>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Organization and Architecture</title>
      <link href="//Reviews/COA/Computer%20Organization%20and%20Architecture/"/>
      <url>//Reviews/COA/Computer%20Organization%20and%20Architecture/</url>
      
        <content type="html"><![CDATA[<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><h3 id="1basic-concepts"><a class="markdownIt-Anchor" href="#1basic-concepts"></a> 1.Basic Concepts</h3><ul><li>Architecture: such as <strong>Instruction set</strong>, <strong>I/O mechanisms</strong> (Visiable to programmer)</li><li>Organization: such as the <strong>Control singals</strong>, <strong>interfaces</strong>, <strong>memory technology</strong> (NOT visiable to the programmer)</li></ul><a id="more"></a><ul><li>Family of computer models(系列机): All with the same architecture but with differences in organization. Such as <strong>Intel 286</strong> and <strong>Intel 386</strong></li><li>Organization is the high-level aspect of computer design, Hardware is the specific mechine.</li><li>The computer system include:<ul><li>Hardware</li><li>Software</li><li>Peripheral device<ul><li>Keyboard and mouse and so on.</li></ul></li></ul></li><li>The computer consist of:<ul><li>CPU(or processor)</li><li>Input &amp; Output</li><li>Main Memory</li><li>System Bus</li></ul></li><li>The <strong>CPU</strong> consist of:<ul><li>Control Unit(CU)</li><li>Arithmetic and Logic Unit(ALU)</li><li>Registers</li><li>Internal Bus</li></ul></li></ul><h2 id="computer-performance-design-and-assessment"><a class="markdownIt-Anchor" href="#computer-performance-design-and-assessment"></a> Computer Performance design and assessment</h2><h3 id="1-designing-for-performance"><a class="markdownIt-Anchor" href="#1-designing-for-performance"></a> 1. Designing for performance</h3><blockquote><ul><li>Three things affect the performance:<br>- Microprocessor speed<br>- Performance balance<br>- Improvements in chip organization and architecture</li></ul></blockquote><h4 id="11-the-microprocessor-speed"><a class="markdownIt-Anchor" href="#11-the-microprocessor-speed"></a> 1.1 The Microprocessor Speed</h4><p>By adding these things to improve the performance:</p><ul><li>Branch prediction</li><li>Data flow analysis</li><li>Speculative execution</li></ul><h4 id="12-the-balance-balance-is-the-key"><a class="markdownIt-Anchor" href="#12-the-balance-balance-is-the-key"></a> 1.2 The balance (Balance is the key)</h4><blockquote><p>With the microprocessor speed increasing rapily refer to the Mooore’s Law, the Memory accessing sppeding is on the contrary, cannot catch the speed of the microporcessor increase.</p></blockquote><p>Solutions for memory access:</p><ul><li><p>Make DRAM “wider” rather than “deeper”<br>Increase number of bits retrieved at one time</p></li><li><p>Change DRAM interface (by using cache)</p></li><li><p>Reduce frequency of memory access</p><ul><li>more complex cache and cache on chip</li></ul></li><li><p>Increase interconnection bandwith</p><ul><li>High speed buese</li><li>Hierarchy of buses</li></ul></li></ul><blockquote><p>The I/O devices are much more slow than the memory access</p></blockquote><p>Solutions for I/O devices:</p><ul><li>Caching</li><li>Buffering</li><li>Higher-speed interconnection buses</li><li>More elaborate bus structures</li><li>Multiple-processor configurations</li></ul><h4 id="13-imporve-the-chip-oa"><a class="markdownIt-Anchor" href="#13-imporve-the-chip-oa"></a> 1.3 Imporve the chip O&amp;A</h4><ul><li>Increase hardware speed of processor<ul><li>Power</li><li>RC delay</li><li>Memory latency</li></ul></li><li>Increase size and speed of caches<ul><li>Multiple levels of caches</li><li>Increase the chip density</li></ul></li><li>Change processor organization and architecture<ul><li>Enable parallel execution of instructions</li><li>Pipeline works like assembly line</li><li>Superscalar allows <strong>multiple pipelines within single processor</strong><ul><li>Instructions that do not depend on the other can be executed in parallel</li></ul></li></ul></li></ul><blockquote><p>Supplement: Using the <strong>multiple cores</strong> can be more efficiency</p></blockquote><h3 id="2-performance-assessment"><a class="markdownIt-Anchor" href="#2-performance-assessment"></a> 2. Performance Assessment</h3><h4 id="21-clock-speed"><a class="markdownIt-Anchor" href="#21-clock-speed"></a> 2.1 Clock Speed</h4><p><strong>The clock speed is not every thing</strong></p><h4 id="22-instruction-execution-rate"><a class="markdownIt-Anchor" href="#22-instruction-execution-rate"></a> 2.2 Instruction Execution Rate</h4><blockquote><p>There are three index of the rate, CPI, MIPS and MFLOPS</p></blockquote><ul><li>CPI: The time cycle with one instruction needed (Cycle Per Instruction)</li><li>MIPS: The number(million) of the instructions within in one second being executed.</li><li>MFLOPS: Like the MIPS, it is the floating point calculate instruction.</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>P</mi><mi>I</mi><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mi>C</mi><mi>P</mi><msub><mi>I</mi><mi>i</mi></msub><mo>×</mo><msub><mi>I</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><msub><mi>I</mi><mi>c</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">CPI = {\frac{\sum_{i = 1}^n(CPI_i \times I_i)}{I_c}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.3300020000000004em;vertical-align:-.8360000000000001em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.494002em"><span style="top:-2.3139999999999996em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.6897100000000003em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.8360000000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">I_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> is the number of the instruction</p><p>The processing time <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span></span> is:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>=</mo><msub><mi>I</mi><mi>c</mi></msub><mo>×</mo><mi>C</mi><mi>P</mi><mi>I</mi><mo>×</mo><mi>γ</mi></mrow><annotation encoding="application/x-tex">T = I_c \times CPI \times \gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.07847em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord mathdefault" style="margin-right:.07847em">I</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05556em">γ</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05556em">γ</span></span></span></span> is the constant cycle, which means <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">1/f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:.10764em">f</span></span></span></span></p><p>So, the MIPS is:</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲MIPS &amp;= {\frac…">\begin{align} MIPS &amp;= {\frac{I_c}{T \times 10^6}} \\ &amp;= {\frac{f}{CPI \times 10^6}} \end{align}</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>F</mi><mi>L</mi><mi>O</mi><mi>P</mi><mi>S</mi><mo>=</mo><mfrac><mrow><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>e</mi><mi>x</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext> </mtext><mi>f</mi><mi>l</mi><mi>o</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>−</mo><mi>p</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>s</mi><mtext> </mtext><mi>i</mi><mi>n</mi><mtext> </mtext><mi>a</mi><mtext> </mtext><mi>p</mi><mi>r</mi><mi>o</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi></mrow><mrow><mi>E</mi><mi>x</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">MFLOPS = {\frac{Number \ of\ execute\ floating-point\ operations\ in\ a\ program}{Execution\ time \times 10^6 }}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:.02778em">O</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.14077em;vertical-align:-.7693300000000001em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.740108em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.03588em">g</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p><h4 id="23-amdahls-law"><a class="markdownIt-Anchor" href="#23-amdahls-law"></a> 2.3 Amdahl’s Law</h4><blockquote><p>The speed up rate between the single core machine and the multiple cores machine.</p></blockquote><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲Speedup &amp; = {\…">\begin{align} Speedup &amp; = {\frac{time\ to\ execute\ program\ on\ a\ single\ processor}{time\ to\ execute\ program\ on N\ parallel\ processors}} \\ &amp; = {\frac{T{(1 - f)} + Tf}{T{(1-f)} + {\frac{Tf}{N}}} } \\ &amp; = {\frac{1}{(1-f) + {\frac{f}{N}}}} \end{align}</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span></span></span></span> refer to the code infinitely parallelizable with <strong>no scheduling overhead</strong>.</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>f</mi><mo stretchy="false">)</mo><mi>o</mi><mi>f</mi><mi>c</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>i</mi><mi>n</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>l</mi><mi>y</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">(1-f) of code inherently serial</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mclose">)</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:.01968em">l</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span></span> is the total execution time for program on single processor</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span></span> is number of processors that fully exploite parallel portions of code</p><p>Conclusion:</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span></span></span></span> small, parallel processor has little effect</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>∼</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">N \sim \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord">∞</span></span></span></span>, the speedup bound by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1/(1-f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mclose">)</span></span></span></span></li></ul><h4 id="24-supplement"><a class="markdownIt-Anchor" href="#24-supplement"></a> 2.4 Supplement</h4><p>Some important terminology:</p><ul><li>Bit is the binary digit rather 0 or 1.</li><li>A byte is defined as 8 bits</li><li>A <strong>word</strong> is a set of bits constituting the samllest unit of addressable memory</li><li>A kilobyte (KB) is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> bytes.</li><li>A megabyte (MB) is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> bytes.</li><li>A gigabyte (GB) is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> bytes.</li></ul><h2 id="computer-system"><a class="markdownIt-Anchor" href="#computer-system"></a> Computer System</h2><h3 id="1-computer-components"><a class="markdownIt-Anchor" href="#1-computer-components"></a> 1. Computer Components</h3><ul><li>CPU<ul><li>PC: programming counter, store the next instruction’s address.</li><li>IR: instruction register, store the instruction</li><li>MAR: the memory address register, exchange data with the main memory</li><li>I/O AR: input and output address register</li><li>I/O BR: input and output buffer register</li></ul></li><li>Mian Memory</li></ul>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组复习</title>
      <link href="//Reviews/COA/%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0/"/>
      <url>//Reviews/COA/%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="大题考点"><a class="markdownIt-Anchor" href="#大题考点"></a> 大题考点</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> CPI MIPS Speedup</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> Cache &amp; Memory Organization</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> Hard disk</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> 浮点数运算</li><li class="task-list-item"><input class="task-list-item-checkbox" checked disabled type="checkbox"> 寻址，指令设计</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> 流水，时序图，加速比，优化</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> 超标量，超流水，冲突，指令发射</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled type="checkbox"> 微操作，微指令，微指令设计</li></ul><a id="more"></a><h2 id="2-存储组织"><a class="markdownIt-Anchor" href="#2-存储组织"></a> 2. 存储组织</h2><h3 id="21-cache-存储映射"><a class="markdownIt-Anchor" href="#21-cache-存储映射"></a> 2.1 Cache 存储映射</h3><p>Cache 以</p><table><thead><tr><th>Tag</th><th>Data</th></tr></thead><tbody></tbody></table><p>形式存储数据，数据段很宽，<strong>可以存储主存（Memory）中几行的数据</strong></p><p>下面所讨论的都是不同映射方式下的<strong>地址构成</strong></p><h4 id="211-直接映射"><a class="markdownIt-Anchor" href="#211-直接映射"></a> 2.1.1 直接映射</h4><p>直接映射主存地址为</p><table><thead><tr><th style="text-align:center">Tag</th><th style="text-align:center">行号</th><th style="text-align:center">字</th></tr></thead><tbody></tbody></table><blockquote><p>Tag 就是 Cache 的 Tag；<br>行号是 Cache 的对应行号；<br>字指代了这一行中要取用 Cache 的哪个分段的数据</p></blockquote><p>寻址时，首先查找<strong>对应行号</strong>，检查标记，如果命中，那么则根据字来取数据</p><h4 id="212-全相连映射"><a class="markdownIt-Anchor" href="#212-全相连映射"></a> 2.1.2 全相连映射</h4><p>全相连主存地址构成为</p><table><thead><tr><th style="text-align:center">Tag</th><th style="text-align:center">字</th></tr></thead><tbody></tbody></table><blockquote><p>由于存储数据和行号无关，使用 Tag 作为唯一的标记，字用于标记数据段</p></blockquote><p>需要并行电路不断比对 Tag 内容，如果命中了，那么根据字来取对应数据段</p><h4 id="213-组相连映射"><a class="markdownIt-Anchor" href="#213-组相连映射"></a> 2.1.3 组相连映射</h4><p>组相连映射地址构成如下：</p><table><thead><tr><th style="text-align:center">Tag</th><th style="text-align:center">组号</th><th style="text-align:center">字</th></tr></thead><tbody></tbody></table><blockquote><p>Tag 和字同上<br>组号是指将 Cache的行分组后的对应组号</p></blockquote><p>结合直接映射和全相连映射，将 Cache 的行分为很多的组，先根据组号查找对应组，然后再在组内比对标记。<br>减少了由于直接映射的抖动问题，又避免了全相连映射的不断寻找导致的性能浪费</p><blockquote><p>抖动问题：由于程序需要不断访问<strong>映射到同一行但来自不同块</strong>的字，那么就会导致内存块不断载入载出，造成性能浪费</p></blockquote><p>N 路总相连指的就是一个组内有 N 行</p><h4 id="214-相关计算问题"><a class="markdownIt-Anchor" href="#214-相关计算问题"></a> 2.1.4 相关计算问题</h4><p>由 Cache 和 Memory 的行数和块数等数据来指明地址构成</p><blockquote><p>这里需要注意，地址不只是用来算 Cache 映射，<strong>还要能通过地址在 Memory 中寻找到正确的内存块</strong></p></blockquote><ol><li>地址的寻址长度能<strong>覆盖主存的容量</strong>，确定地址<strong>总长度</strong></li><li>根据 Cache 数据算出 Cache <strong>行数</strong>，<strong>组数</strong>。</li><li>Cache 的一行就是 Memory 的一块，根据这个算出 Memory 有多少块</li></ol><blockquote><p>除了“字”以外的地址位加起来就是这个数</p></blockquote><ol start="4"><li>“字”的部分要能覆盖块的<strong>字节容量</strong></li><li>如果出现“字（Word）”的描述，那么字的位数就是<strong>地址的总长</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="//Reviews/LinearAlgebra/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
      <url>//Reviews/LinearAlgebra/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-行列式"><a class="markdownIt-Anchor" href="#1-行列式"></a> 1. 行列式</h2><h3 id="11-性质"><a class="markdownIt-Anchor" href="#11-性质"></a> 1.1 性质</h3><h4 id="111-转置"><a class="markdownIt-Anchor" href="#111-转置"></a> 1.1.1 转置</h4><p>行列式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">D</span></span></span></span> 与它的转置行列式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>D</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">D^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8413309999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span></span></span></span> 的值<strong>相等</strong></p><blockquote><p>将行列式的行转成列即可得到其转置行列式</p></blockquote><a id="more"></a><h4 id="112-交换"><a class="markdownIt-Anchor" href="#112-交换"></a> 1.1.2 交换</h4><p>交换行列式的任意两行（或者两列），行列式的值<strong>改变符号</strong>！</p><h4 id="113-比例"><a class="markdownIt-Anchor" href="#113-比例"></a> 1.1.3 比例</h4><p>如果行列式的某行或者某列都乘以同一个数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span>，那么其值等同于用数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span> 乘以同一个行列式</p><blockquote><p>其实就是可以把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span> 提到竖线外面！</p></blockquote><h4 id="114-值为-0"><a class="markdownIt-Anchor" href="#114-值为-0"></a> 1.1.4 值为 0</h4><ol><li>如果行列式中有两行相同，那么行列式的值为 0</li><li>如果某一行或者某一列的元素<strong>均为 0</strong>，那么行列式的值为 0</li><li>如果某两行的元素成比例，那么行列式的值为 0</li></ol><h4 id="115-拆分"><a class="markdownIt-Anchor" href="#115-拆分"></a> 1.1.5 拆分</h4><p>如果某行元素为一个<strong>和式</strong>或者<strong>差式</strong>，那么就可以把这个行列式拆分成两个行列式的<strong>和</strong>与<strong>差</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mo>=</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mo>+</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \begin{vmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ a_{i1} + b_{i1} &amp; a_{i2} + b_{i2} &amp; \cdots &amp; a_{in} + b_{in} \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\ \end{vmatrix} = \\ \\ \begin{vmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ a_{i1} &amp; a_{i2} &amp; \cdots &amp; a_{in} \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\ \end{vmatrix} + \begin{vmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ b_{i1} &amp; b_{i2} &amp; \cdots &amp; b_{in} \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\ \end{vmatrix} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:16.76388em;vertical-align:-8.13194em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.63194em"><span style="top:-10.63194em"><span class="pstrut" style="height:5.921939999999999em"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.921939999999999em"><span style="top:.7440600000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.1380600000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.4679399999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0739399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6799399999999993em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.285939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8919399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4979399999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10394em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.315939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.921939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35006em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.570000000000001em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.71em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-3.5099999999999993em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.6499999999999992em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-.449999999999999em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.921939999999999em"><span style="top:.7440600000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.1380600000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.4679399999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0739399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6799399999999993em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.285939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8919399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4979399999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10394em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.315939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.921939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35006em"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span></span></span><span style="top:-6.0819399999999995em"><span class="pstrut" style="height:5.921939999999999em"></span><span class="mord"></span></span><span style="top:-1.5em"><span class="pstrut" style="height:5.921939999999999em"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.921939999999999em"><span style="top:.7440600000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.1380600000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.4679399999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0739399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6799399999999993em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.285939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8919399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4979399999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10394em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.315939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.921939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35006em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.570000000000001em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.71em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-3.5099999999999993em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.6499999999999992em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-.449999999999999em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.921939999999999em"><span style="top:.7440600000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.1380600000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.4679399999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0739399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6799399999999993em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.285939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8919399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4979399999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10394em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.315939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.921939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35006em"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.921939999999999em"><span style="top:.7440600000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.1380600000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.4679399999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0739399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6799399999999993em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.285939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8919399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4979399999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10394em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.315939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.921939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35006em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.570000000000001em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.71em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-3.5099999999999993em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.6499999999999992em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-.449999999999999em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.9100000000000006em"><span style="top:-6.757500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.8975em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-3.6974999999999993em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-1.8374999999999992em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.6374999999999991em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.410000000000001em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.921939999999999em"><span style="top:.7440600000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.1380600000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.4679399999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0739399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6799399999999993em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.285939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8919399999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4979399999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10394em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.315939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.921939999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35006em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.13194em"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="116-变换"><a class="markdownIt-Anchor" href="#116-变换"></a> 1.1.6 变换</h4><p>将行列式的某一行的所有元素都乘以同一个数以后加到另一行的对应元素上去，所得行列式仍然为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">D</span></span></span></span></p><blockquote><p>这里指的是行列式本身都不会变，包括其余子式<br>注意，产生改变的是<strong>另一行</strong>，而不是乘上数的那一行</p></blockquote><h4 id="117-余子式相关"><a class="markdownIt-Anchor" href="#117-余子式相关"></a> 1.1.7 余子式相关</h4><p>划去某个元素的所在行和所在列之后，留下的行列式称为元素的余子式</p><p>例如</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mn>2</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mn>2</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mn>2</mn></msup></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \\ \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.636em;vertical-align:-1.5500299999999998em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em"><span style="top:-1.05597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">y</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.04398em">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.04398em">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em"><span style="top:-1.05597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>划除第一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 的所在行和所在列之后:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mn>2</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mn>2</mn></msup></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix}y &amp; y^2 \\ z &amp; z^2 \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.424em;vertical-align:-.9500199999999999em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em"><span style="top:-1.65598em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500199999999999em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">y</span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.04398em">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.04398em">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500000000000004em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em"><span style="top:-1.65598em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9500199999999999em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>即为第一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> 的余子式，记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.969438em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:-.10903em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span>；</p><p>带上正负号后叫做<strong>代数余子式</strong>，记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.969438em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span></p><p>则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>i</mi><mo>+</mo><mi>j</mi></mrow></msup><msub><mi>M</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{ij} = (-1)^{i + j} M_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.969438em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.160772em;vertical-align:-.286108em"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.874664em"><span style="top:-3.1130000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:-.10903em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span></span></p><p><strong>特别要注意题意，给出和要求的到底是余子式还是代数余子式</strong></p><p>定理</p><ol><li><p>行列式等于它的任一行（列）的个元素与其对应的<strong>代数余子式</strong>的<strong>乘积之和</strong></p><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>n</mi></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><msub><mi>A</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub><msub><mi>A</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><msub><mi>A</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">D_n = a_{i1} A_{i1} + a_{i2} A_{i2} + \cdots + a_{in} A_{in}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.02778em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></span></p></blockquote><blockquote><p>据此可以将行列式进行<strong>降阶计算</strong>。</p></blockquote></li><li><p>行列式的某一行的元素与另一行的对应元素的<strong>代数余子式</strong>的乘积之和等于 0</p><blockquote><p>如第一行的<strong>元素</strong>和第三行的元素的<strong>代数余子式</strong>的<strong>乘积之和</strong>为 0</p></blockquote><p>这是一个很重要的等价关系，有关行列式的余子式相关计算都会用到</p></li></ol><h4 id="118-范德蒙德行列式"><a class="markdownIt-Anchor" href="#118-范德蒙德行列式"></a> 1.1.8 范德蒙德行列式</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>n</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mn>1</mn></msub><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mn>2</mn></msub><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mi>n</mi></msub><mn>2</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mn>1</mn></msub><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mn>2</mn></msub><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mi>n</mi></msub><mn>3</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mn>1</mn></msub><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mn>2</mn></msub><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><msub><mi>a</mi><mi>n</mi></msub><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mo>=</mo><munder><mo>∏</mo><mrow><mn>1</mn><mo>≤</mo><mi>j</mi><mo>&lt;</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow></munder><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix} 1 &amp; 1 &amp; \cdots &amp; 1 \\ a_1 &amp; a_2 &amp; \cdots &amp; a_n \\ {a_1}^2 &amp; {a_2}^2 &amp; \cdots &amp; {a_n}^2 \\ {a_1}^3 &amp; {a_2}^3 &amp; \cdots &amp; {a_n}^3 \\ \vdots &amp; \vdots &amp; \vdots &amp; \vdots \\ {a_1}^{n - 1} &amp; {a_2}^{n - 1} &amp; \cdots &amp; {a_n}^{n - 1} \\ \end{vmatrix} = \prod_{1 \le j \lt i \le n} (a_i - a_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.907934999999999em;vertical-align:-3.6799999999999997em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2279349999999996em"><span style="top:1.0440649999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.4380649999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.16793499999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.7739349999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.3799349999999997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9859349999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.5919349999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.1979349999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.8039349999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.409934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.015934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.621934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-6.227934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6500649999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1800000000000015em"><span style="top:-7.027500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.8275000000000015em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.627500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.4275000000000007em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.3675000000000003em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6799999999999997em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1800000000000015em"><span style="top:-7.027500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.8275000000000015em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.627500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.4275000000000007em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.3675000000000003em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6799999999999997em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1800000000000015em"><span style="top:-7.027500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.8275000000000015em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.627500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.4275000000000007em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.3675000000000003em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6799999999999997em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1800000000000015em"><span style="top:-7.027500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.8275000000000015em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.627500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.4275000000000007em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.3675000000000003em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6799999999999997em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2279349999999996em"><span style="top:1.0440649999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:.4380649999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.16793499999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.7739349999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.3799349999999997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9859349999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.5919349999999994em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.1979349999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.8039349999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.409934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.015934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.621934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-6.227934999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6500649999999997em"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.463782em;vertical-align:-1.413777em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em"><span style="top:-1.8723309999999997em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight">i</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>注意，结果的展开等于</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mi>n</mi></msub><mo>−</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>⋯</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>2</mn></msub><mo>−</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo><munder><mo>∏</mo><mrow><mn>2</mn><mo>≤</mo><mi>j</mi><mo>&lt;</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow></munder><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a_n - a_1) (a_{n - 1} - a_1) \cdots (a_2 - a_1) \prod_{2 \le j \lt i \le n} (a_i - a_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.208331em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.463782em;vertical-align:-1.413777em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em"><span style="top:-1.8723309999999997em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight">i</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.85396em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span></span></span></span> 并不是同时增长，而是<strong>嵌套式增长</strong></p><p><strong>通常用于求根计算，找准 1 次项的行即可</strong></p><h4 id="119-克拉默法则"><a class="markdownIt-Anchor" href="#119-克拉默法则"></a> 1.1.9 克拉默法则</h4><p>线性方程组的<strong>零解问题</strong>，找克拉默法则</p><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 个方程 n 个未知量的非齐次线性方程组</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>11</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mi>a</mi><mn>12</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>11</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mi>a</mi><mn>12</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>                          </mtext><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>11</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mi>a</mi><mn>12</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases} a_{11}x_1 + a{12}x_2 + \cdots + a_{1n}x_n = b_1 \\ a_{11}x_1 + a{12}x_2 + \cdots + a_{1n}x_n = b_1 \\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \vdots \\ a_{11}x_1 + a{12}x_2 + \cdots + a_{1n}x_n = b_1 \\ \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.252000000000001em;vertical-align:-2.876em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500199999999997em"><span style="top:-1.2999899999999998em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.2999899999999998em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5999899999999998em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8999899999999998em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999997em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90001em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20001em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.500019999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75002em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3760000000000003em"><span style="top:-6.0555em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord">1</span><span class="mord">2</span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.615500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord">1</span><span class="mord">2</span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.6835000000000004em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.2435em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord">1</span><span class="mord">2</span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.876em"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>的系数行列式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">)</mo><mi mathvariant="normal">≠</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">D=det(a_{ij}) \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-.286108em"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="rlap"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.19444em"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span><br>则方程组必有唯一解</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub><mo>=</mo><mfrac><msub><mi>D</mi><mi>j</mi></msub><mi>D</mi></mfrac><mo separator="true">,</mo><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>n</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">x_j = \frac{D_j} {D}, j = 1, 2, \cdots, n.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.716668em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02778em">D</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:-.02778em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span><span class="mord">.</span></span></span></span></span></p><p><strong>若齐次线性方程组有非零解，则其系数行列式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">D = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></strong></p><h3 id="12-计算"><a class="markdownIt-Anchor" href="#12-计算"></a> 1.2 计算</h3><p>通常有两种计算方法，一是<strong>直接用定义地算</strong>（交叉相乘等），二是<strong>经过变换之后降阶计算</strong></p><p>通常是将式子变换成<strong>某一列的开头为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>，其余全为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></strong>，然后按照行列式的展开原则。</p><p>下面讲一些特殊题型的解法。</p><h4 id="121-1-型"><a class="markdownIt-Anchor" href="#121-1-型"></a> 1.2.1 “1 + 型”</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix} 1 + a_1 &amp; 1 &amp; \cdots &amp; 1 \\ 1 &amp; 1 + a_2 &amp; \cdots &amp; 1 \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ 1 &amp; 1 &amp; \cdots &amp; 1 + a_n \\ \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.483955em;vertical-align:-2.4799999999999995em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.003955em"><span style="top:-.1559550000000005em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.7619550000000004em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.3679550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9739550000000001em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.579955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.1859550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.791955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.397955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.0039549999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500449999999994em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.8275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.8275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.6275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.64em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.44em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-2.5799999999999996em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-1.3800000000000006em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.8275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.6275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.003955em"><span style="top:-.1559550000000005em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.7619550000000004em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.3679550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9739550000000001em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.579955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.1859550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.791955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.397955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.0039549999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500449999999994em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>注意到每列元素之和为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mn>1</mn><msub><mi>a</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">1 + \sum_{i = 1}^n \frac{1}{a_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.2902079999999998em;vertical-align:-.44509999999999994em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3280857142857143em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.44509999999999994em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，所以变化并提出公因式，得</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><msub><mi>a</mi><mn>2</mn></msub></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><msub><mi>a</mi><mn>2</mn></msub></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><msub><mi>a</mi><mi>n</mi></msub></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><msub><mi>a</mi><mi>n</mi></msub></mfrac></mrow></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix} 1 &amp; 1 &amp; \cdots &amp; 1 \\ {1\over{a_2}} &amp; 1 + {1 \over {a_2}} &amp; \cdots &amp; 1 \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ {1\over{a_n}} &amp; 1 &amp; \cdots &amp; 1 + {1 \over a_n} \\ \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.640416em;vertical-align:-2.570208em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.003955em"><span style="top:-.1559550000000005em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.7619550000000004em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.3679550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9739550000000001em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.579955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.1859550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.791955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.397955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.0039549999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500449999999994em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.070208em"><span style="top:-5.917708em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.7126em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31731428571428577em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.44509999999999994em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.562392em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.16454285714285719em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.44509999999999994em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.570208em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.070208em"><span style="top:-5.917708em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.7126em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31731428571428577em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.44509999999999994em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.562392em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.570208em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.070208em"><span style="top:-5.730208em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.5251em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-2.5799999999999996em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-1.374892em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.570208em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.070208em"><span style="top:-5.917708em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.7126em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.562392em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.16454285714285719em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.44509999999999994em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.570208em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.003955em"><span style="top:-.1559550000000005em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.7619550000000004em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.3679550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9739550000000001em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.579955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.1859550000000003em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.791955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.397955em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.0039549999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500449999999994em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>分别乘上 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mfrac><mn>1</mn><msub><mi>a</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">-{1 \over a_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2902079999999998em;vertical-align:-.44509999999999994em"></span><span class="mord">−</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3280857142857143em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.44509999999999994em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span> 后加到第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 行得</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mo>⋯</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mn>1</mn><msub><mi>a</mi><mi>i</mi></msub></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_1 a_2 \cdots (1 + \sum_{i = 1}^n {1 \over a_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.3139999999999996em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.8360000000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">)</span></span></span></span></span></p><h4 id="122-类似范德蒙德类型"><a class="markdownIt-Anchor" href="#122-类似范德蒙德类型"></a> 1.2.2 类似范德蒙德类型</h4><blockquote><p>构造范德蒙德行列式来解</p></blockquote><p>形如</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>a</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>b</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>c</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>d</mi><mn>2</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>a</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>b</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>c</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>d</mi><mn>4</mn></msup></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\ a &amp; b &amp; c &amp; d \\ a^2 &amp; b^2 &amp; c^2 &amp; d^2 \\ a^4 &amp; b^4 &amp; c^4 &amp; d^4 \\ \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.847999999999999em;vertical-align:-2.1500399999999997em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6979599999999997em"><span style="top:-.45596000000000014em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.06196em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6679599999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2739599999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.48596em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.69796em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500399999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em"><span style="top:-4.8100000000000005em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em"><span style="top:-4.8100000000000005em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em"><span style="top:-4.8100000000000005em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">c</span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em"><span style="top:-4.8100000000000005em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">d</span></span></span><span style="top:-2.4099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6979599999999997em"><span style="top:-.45596000000000014em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.06196em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6679599999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2739599999999998em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.48596em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.69796em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500399999999997em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>构造范德蒙德行列式</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>a</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>b</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>c</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>d</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mn>2</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>a</mi><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>b</mi><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>c</mi><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>d</mi><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mn>3</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>a</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>b</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>c</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>d</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mn>4</mn></msup></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">f(x) = \begin{vmatrix} 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1\\ a &amp; b &amp; c &amp; d &amp; x\\ a^2 &amp; b^2 &amp; c^2 &amp; d^2 &amp; x^2 \\ a^3 &amp; b^3 &amp; c^3 &amp; d^3 &amp; x^3 \\ a^4 &amp; b^4 &amp; c^4 &amp; d^4 &amp; x^4\\ \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:6.059999999999999em;vertical-align:-2.75005em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3099499999999993em"><span style="top:.14405em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.46194999999999986em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0679499999999997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6739499999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2799499999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.88595em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4919499999999997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.097949999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.703949999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.309949999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75005em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em"><span style="top:-5.410000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.01em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-.6099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em"><span style="top:-5.410000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.01em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-.6099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em"><span style="top:-5.410000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">c</span></span></span><span style="top:-3.01em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-.6099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em"><span style="top:-5.410000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">d</span></span></span><span style="top:-3.01em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-.6099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em"><span style="top:-5.410000000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.01em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-.6099999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3099499999999993em"><span style="top:.14405em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-.46194999999999986em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0679499999999997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6739499999999996em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2799499999999995em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.88595em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4919499999999997em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.097949999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.703949999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-5.309949999999999em"><span class="pstrut" style="height:2.606em"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75005em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>则所求行列式为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">x^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 的代数余子式的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 倍<br>按照范德蒙德行列式展开并求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">x^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 的系数即可</p><h2 id="2-矩阵"><a class="markdownIt-Anchor" href="#2-矩阵"></a> 2. 矩阵</h2><p>矩阵不一定是正方形的，行和列相同的矩阵被称为<strong>方阵</strong></p><h3 id="21-矩阵的四则运算"><a class="markdownIt-Anchor" href="#21-矩阵的四则运算"></a> 2.1 矩阵的四则运算</h3><h4 id="211-矩阵的加和减"><a class="markdownIt-Anchor" href="#211-矩阵的加和减"></a> 2.1.1 矩阵的加和减</h4><p>矩阵的加和减满足<strong>交换律</strong>，<strong>结合律</strong>，<strong>数乘分配律</strong></p><blockquote><p>矩阵的数乘是<strong>所有元素都乘以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span>，和行列式不同</strong>。<br>行列式只需要一行或者一列乘就可以了。<br>所以后面的方阵的行列式要特别注意指数。</p></blockquote><h4 id="212-矩阵的乘法"><a class="markdownIt-Anchor" href="#212-矩阵的乘法"></a> 2.1.2 矩阵的乘法</h4><p>矩阵的乘法很特殊，其计算方法为：<br><strong>行元素乘以对应列元素得到新矩阵的某行某列的一个元素</strong></p><p>例如：<br>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>B</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">AB = C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span><br>矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span> 的第一行第一列的元素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>11</mn></msub></mrow><annotation encoding="application/x-tex">c_{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 的<strong>第一行</strong>乘以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 的<strong>第一列</strong>的<strong>乘积之和</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>13</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>×</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>31</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \begin{bmatrix} a_{11} &amp; a_{12} &amp; a_{13} &amp; \cdots &amp; a_{1n} \\ \cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\ \cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\ \end{bmatrix} \times \begin{bmatrix} b_{11} &amp; \cdots \\ b_{21} &amp; \cdots \\ b_{31} &amp; \cdots \\ \vdots &amp; \\ b_{n1} &amp; \cdots \\ \end{bmatrix} \\ \\ &amp; = \begin{bmatrix} c_{11} &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\ \cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\ \cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\ \end{bmatrix} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:12.360040000000001em;vertical-align:-5.930020000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.430020000000001em"><span style="top:-8.430019999999999em"><span class="pstrut" style="height:5.58em"></span><span class="mord"></span></span><span style="top:-4.21002em"><span class="pstrut" style="height:5.58em"></span><span class="mord"></span></span><span style="top:-1.5000000000000002em"><span class="pstrut" style="height:5.58em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.93002em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.430020000000001em"><span style="top:-8.430019999999999em"><span class="pstrut" style="height:5.58em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em"><span style="top:-2.2500000000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em"><span style="top:-2.2500000000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.554995em"><span style="top:-.7499750000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.9049750000000003em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.5059750000000003em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1069750000000003em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7079750000000002em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.308975em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.554995em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em"><span style="top:-6.427500000000001em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.0275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675000000000004em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-.9675em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em"><span style="top:-6.240000000000001em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.04em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.84em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.9800000000000006em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-.78em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.554995em"><span style="top:-.7499750000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.9049750000000003em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.5059750000000003em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1069750000000003em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7079750000000002em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.308975em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.554995em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em"><span></span></span></span></span></span></span></span></span></span><span style="top:-1.4999999999999993em"><span class="pstrut" style="height:5.58em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em"><span style="top:-2.2500000000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em"><span style="top:-4.21em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.0099999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.8099999999999994em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em"><span style="top:-2.2500000000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.930020000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>矩阵的乘法满足</p><ol><li>结合律</li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mi>C</mi><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mi>B</mi><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(AB)C = A(BC)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span></span></span></span></span></p><ol start="2"><li>左分配律和右分配律</li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>B</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mi>A</mi><mi>C</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>B</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo><mi>A</mi><mo>=</mo><mi>B</mi><mi>A</mi><mo>+</mo><mi>C</mi><mi>A</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} A(B + C) = AB + AC \\ (B + C)A = BA + CA \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em"><span style="top:-3.91em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span><span style="top:-2.41em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mord mathdefault">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em"><span></span></span></span></span></span></span></span></span></span></span></span></p><pre><code>&gt; 注意保证顺序不能变，特别是在多个矩阵一起乘的时候。</code></pre><p><strong>矩阵的乘法不满足交换律</strong></p><h3 id="22-矩阵的转置"><a class="markdownIt-Anchor" href="#22-矩阵的转置"></a> 2.2 矩阵的转置</h3><p>矩阵的转置就是<strong>行变成列</strong></p><p>性质：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>A</mi><mi>T</mi></msup><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">(A^T)^T = A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo>+</mo><msup><mi>B</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(A + B)^T = A^T + B^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.924661em;vertical-align:-.08333em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8413309999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mi>A</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>=</mo><mi>k</mi><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(kA)^T = k A^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mord mathdefault">A</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8413309999999999em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>=</mo><msup><mi>B</mi><mi>T</mi></msup><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(AB)^T = B^T A^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8413309999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8413309999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.13889em">T</span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>注意，乘法这里的顺序是倒过来的。</p></blockquote></li></ol><h3 id="23-方阵的行列式"><a class="markdownIt-Anchor" href="#23-方阵的行列式"></a> 2.3 方阵的行列式</h3><p>方阵的行列式没有什么大的要点<br>需要注意的就是数乘<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>k</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mo>=</mo><msup><mi>k</mi><mi>n</mi></msup><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|kA| = k^n|A|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord">∣</span></span></span></span></p><p><strong>矩阵的积的行列式等于行列式的积</strong></p><h3 id="24-逆矩阵"><a class="markdownIt-Anchor" href="#24-逆矩阵"></a> 2.4 逆矩阵</h3><h4 id="241-逆矩阵的定义和判定"><a class="markdownIt-Anchor" href="#241-逆矩阵的定义和判定"></a> 2.4.1 逆矩阵的定义和判定</h4><p>如果存在矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 使得矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 满足</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>B</mi><mo>=</mo><mi>B</mi><mi>A</mi><mo>=</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">AB = BA = E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span></span></p><p>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 为可逆矩阵</p><p><strong>在证明时抓住已知条件，往 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span> 方向构造</strong></p><h4 id="242-性质"><a class="markdownIt-Anchor" href="#242-性质"></a> 2.4.2 性质</h4><ol><li><p>逆矩阵的逆为它本身</p></li><li><p>转置矩阵的逆为逆矩阵的转</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">AA^{-1} = E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mi>A</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mi>k</mi></mfrac><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(kA)^{-1} = \frac{1}{k} A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mord mathdefault">A</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant="normal">∣</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><mo>=</mo><mi mathvariant="normal">∣</mi><mi>A</mi><msup><mi mathvariant="normal">∣</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">|A^{-1}| = {1 \over {|A|} } = |A|^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-.52em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight">A</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.52em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>B</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(AB)^{-1} = B^{-1}A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol><blockquote><p>注意抓准性质来计算，特别是第四条</p></blockquote><h4 id="243-计算"><a class="markdownIt-Anchor" href="#243-计算"></a> 2.4.3 计算</h4><ol><li>伴随矩阵法<br>由性质<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><msup><mi>A</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">A^{-1} = {\frac{1}{|A|}} {A^*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-.52em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight">A</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.52em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.688696em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span></span>求解出伴随矩阵即可。<br>伴随矩阵等于<strong>对应的代数余子式所组成的矩阵</strong></li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mo>∗</mo></msup><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A^* = \begin{bmatrix} A_{11} &amp; A_{12} &amp; \cdots &amp; A_{1n} \\ A_{12} &amp; A_{22} &amp; \cdots &amp; A_{n2} \\ \vdots &amp; \vdots &amp; &amp; \vdots \\ A_{1n} &amp; A_{2n} &amp; \cdots &amp; A_{nn} \\ \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.738696em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.738696em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em"><span style="top:-1.3499850000000007em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.5049850000000005em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1059850000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7069850000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.953005em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.8275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.8275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.64em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.44em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-2.5799999999999996em"><span class="pstrut" style="height:3.5em"></span><span class="mord"></span></span><span style="top:-1.3800000000000006em"><span class="pstrut" style="height:3.5em"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span><span class="arraycolsep" style="width:.5em"></span><span class="arraycolsep" style="width:.5em"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em"><span style="top:-5.8275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0;border-top-width:1.5em;bottom:0"></span></span></span></span><span style="top:-1.5675000000000006em"><span class="pstrut" style="height:3.6875em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em"><span style="top:-1.3499850000000007em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.5049850000000005em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1059850000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7069850000000004em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.953005em"><span class="pstrut" style="height:3.1550000000000002em"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em"><span></span></span></span></span></span></span></span></span></span></span></span></p><ol start="2"><li><p>初等变换法</p><ol><li>在矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span>后面接一个<strong>单位矩阵</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span></li><li>经过初等变换后，将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span></li><li>此时，<strong>原来的</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span> 就变成了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></li></ol></li><li><p>分块法</p><p>利用分块矩阵将大矩阵分成小块，求解每个小矩阵的逆矩阵，再拼接起来，就求出了大矩阵的逆矩阵</p></li></ol><h3 id="25-特殊矩阵"><a class="markdownIt-Anchor" href="#25-特殊矩阵"></a> 2.5 特殊矩阵</h3><ol><li><p>零矩阵：每个元素均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.02778em">O</span></span></span></span></p></li><li><p>单位矩阵：从左往右对角线上的元素均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>，其余为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span></p></li><li><p>数量矩阵： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span> 乘以单位矩阵的积</p></li><li><p>对角矩阵：<strong>非对角线上</strong>的值全为 0 的矩阵称为对角矩阵</p></li><li><p>上（下）三角矩阵：对角线以上或者对角线以下的值全部为 0 的矩阵称为上（下）三角矩阵</p><blockquote><p>三角矩阵的行列式的值等于对角线上的值的乘积</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 线代 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛泽东思想概论</title>
      <link href="//Reviews/MaoTheory/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA/"/>
      <url>//Reviews/MaoTheory/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>八七会议的意义</p><ol><li>土地革命和武装斗争</li><li>枪杆子里出政权</li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 毛概 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 毛概 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统复习</title>
      <link href="//Reviews/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
      <url>//Reviews/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-operating-system"><a class="markdownIt-Anchor" href="#1-operating-system"></a> 1. Operating System</h2><ol><li><p>What does a Mordern OS do?</p><blockquote><p>Provide abstractions<br>Provide Standard Interface<br>Mediates Resource Usage<br>Consumes Resources</p></blockquote></li></ol><a id="more"></a><h2 id="2-processes-and-threads"><a class="markdownIt-Anchor" href="#2-processes-and-threads"></a> 2. Processes and Threads</h2><h3 id="21-what-is-process-and-threads"><a class="markdownIt-Anchor" href="#21-what-is-process-and-threads"></a> 2.1 What is process and threads</h3><p>Process is an execution stream in the context of a particular process state.<br>Thread is an execution stream in the context of a thread state.</p><p>The key difference: Multiple threads <strong>share</strong> parts of their state.</p><p>Allowing read write the same memory, but each thread still have own registers.</p><p>Reason:</p><ol><li>The threads must corrdinate their activities very closely.</li><li>It is much easier to coordinate activities.</li></ol><h3 id="22-process-state-information"><a class="markdownIt-Anchor" href="#22-process-state-information"></a> 2.2 Process state information</h3><ol><li>Register</li><li>Stack</li><li>Memory</li><li>Open file tables</li><li>Singal management information</li></ol><h3 id="23-multiprogramming"><a class="markdownIt-Anchor" href="#23-multiprogramming"></a> 2.3 Multiprogramming</h3><p>Multiple processes at <strong>a time</strong>.<br>Allow system to separate out activites cleanly.</p><h3 id="24-context-switch"><a class="markdownIt-Anchor" href="#24-context-switch"></a> 2.4 Context switch</h3><p>Because multiprogamming, there needs to <strong>share</strong> the resource, such as CPU.</p><p>Therefore, OS needs the ability to switch from one process to another.<br>That is <strong>Context Switch</strong></p><h3 id="25-pcb"><a class="markdownIt-Anchor" href="#25-pcb"></a> 2.5 PCB</h3><p>The way to implement the <em>Context Switch</em> is to <strong>save</strong> and <strong>restore</strong> the hardware state in PCB (Process Control Block).</p><h4 id="251-pcb-depends-on-hardward"><a class="markdownIt-Anchor" href="#251-pcb-depends-on-hardward"></a> 2.5.1 PCB depends on hardward</h4><ol><li><p>Register</p></li><li><p>Porcessor Status Word</p></li><li><p>Memory</p><blockquote><p>Some machine needs the Memory Management Unit(<strong>MMU</strong>)</p></blockquote><blockquote><p>But the older PC switch all the process’s memory <strong>out to disk</strong></p></blockquote></li></ol><h3 id="26-event-driven"><a class="markdownIt-Anchor" href="#26-event-driven"></a> 2.6 Event-driven</h3><p>OS is fundamentally event-driven.</p><p>That is to wait for an event to happen, response appropriately to the event, then wait for the next event</p><h3 id="27-thread-control-block"><a class="markdownIt-Anchor" href="#27-thread-control-block"></a> 2.7 Thread Control Block</h3><p>It is tipically <strong>register</strong>.</p><p>Don’t need to do anything to the MMU when switch threads.</p><h3 id="28-each-user-process-is-backed-by-kernel-thread"><a class="markdownIt-Anchor" href="#28-each-user-process-is-backed-by-kernel-thread"></a> 2.8 Each user process is backed by kernel thread</h3><p>That is the OS will have a <strong>separate</strong> thread for <strong>each</strong> process.<br>And perform the OS activities on behalf of the process.</p><p>Advantages:</p><ol><li><p>Allow the programmer to program the actions associate with that activity as a <strong>single</strong> serial stream of actions and events</p></li><li><p>Programmer does not have to deal with the complexity of interleaving multiple activities on the same thread</p></li></ol><h3 id="29-asyncorony"><a class="markdownIt-Anchor" href="#29-asyncorony"></a> 2.9 Asyncorony</h3>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 基本概念</title>
      <link href="//Reviews/Probability/1.%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>//Reviews/Probability/1.%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="11-随机试验"><a class="markdownIt-Anchor" href="#11-随机试验"></a> 1.1 随机试验</h2><ol><li>可重复</li><li>结果不唯一</li><li>结果不确定</li></ol><p>随机性：包括上述性质以外还有</p><ol><li>结果范围确定</li><li>试验完成，必有一个确定结果</li></ol><a id="more"></a><h2 id="12-样本空间"><a class="markdownIt-Anchor" href="#12-样本空间"></a> 1.2 样本空间</h2><p>样本空间是随机试验的所有可能结果<strong>集合</strong></p><h2 id="13-随机事件"><a class="markdownIt-Anchor" href="#13-随机事件"></a> 1.3 随机事件</h2><p>样本空间的<strong>子集</strong>叫做随机事件，元素称为<strong>样本点</strong></p><p>基本事件：单点集合<br>必然事件：样本空间本身，记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span></span></span></span><br>不可能事件：空集 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span></p><h2 id="14-事件关系与运算"><a class="markdownIt-Anchor" href="#14-事件关系与运算"></a> 1.4 事件关系与运算</h2><h3 id="141-关系"><a class="markdownIt-Anchor" href="#141-关系"></a> 1.4.1 关系</h3><ol><li><p>相等：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>⊂</mo><mi>B</mi><mo separator="true">,</mo><mi>B</mi><mo>⊂</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A \subset B, B \subset A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A = B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span></p></li><li><p>和事件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>=</mo><mo stretchy="false">{</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>∈</mo><mi>A</mi><mtext> </mtext><mi>o</mi><mi>r</mi><mtext> </mtext><mi>x</mi><mo>∈</mo><mi>B</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">A \cup B = \{x|x \in A\ or\ x \in B\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mspace"> </span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">}</span></span></span></span></p></li><li><p>积事件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mo stretchy="false">{</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>∈</mo><mi>A</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>x</mi><mo>∈</mo><mi>B</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">A \cap B = \{x|x \in A\ and\ x \in B\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">}</span></span></span></span></p></li><li><p>互斥事件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">A \cap B = \varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span>，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> <strong>不能同时发生</strong></p></li><li><p>对立事件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>=</mo><mi>S</mi><mo separator="true">,</mo><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">A \cup B = S, \ and \ A \cap B = \varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> <strong>必有一个发生</strong></p><blockquote><p>对立事件<strong>一定是</strong>互斥事件</p></blockquote></li><li><p>差事件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mo stretchy="false">{</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>∈</mo><mi>A</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>x</mi><mi mathvariant="normal">∉</mi><mi>B</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">A - B = \{x|x \in A \ and \ x \notin B\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.75em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="llap"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:.05555555555555555em"></span></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.25em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">}</span></span></span></span></p><blockquote><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mtext> </mtext><mo>⊂</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A-B = A\overline{B}\ \subset A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.9224300000000001em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mspace"> </span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span></li><li>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>⊂</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \subset B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 则，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">A - B = \varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi>A</mi><mo>−</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">A - B = A - AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span></li></ol><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>−</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">A - B = A\overline B = A(1-B) = A - AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.76666em;vertical-align:-.08333em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span></p></blockquote><ol start="4"><li>总有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mi>A</mi><mi>B</mi><mo>∪</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">A = AB \cup A \overline B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>=</mo><mi>A</mi><mo>∪</mo><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>B</mi><mo>∪</mo><mo stretchy="false">(</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A \cup B = A \cup (\overline A B) = B \cup (A \overline B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ol></blockquote></li></ol><h3 id="142-运算"><a class="markdownIt-Anchor" href="#142-运算"></a> 1.4.2 运算</h3><h4 id="1421-运算律"><a class="markdownIt-Anchor" href="#1421-运算律"></a> 1.4.2.1 运算律</h4><ol><li><p>交换律：</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>=</mo><mi>B</mi><mo>∪</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A \cup B = B \cup A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span>; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mi>B</mi><mo>∩</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A \cap B = B \cap A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span></p></blockquote></li><li><p>结合律：</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∪</mo><mo stretchy="false">(</mo><mi>B</mi><mo>∪</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo><mo>∪</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A \cup (B \cup C) = (A \cup B) \cup C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∩</mo><mo stretchy="false">(</mo><mi>B</mi><mo>∩</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy="false">)</mo><mo>∩</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A \cap (B \cap C) = (A \cap B) \cap C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span></p></blockquote></li><li><p>分配律:</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∪</mo><mo stretchy="false">(</mo><mi>B</mi><mo>∩</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo><mo>∩</mo><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A \cup (B \cap C) = (A \cup B) \cap (A \cup C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∩</mo><mo stretchy="false">(</mo><mi>B</mi><mo>∪</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy="false">)</mo><mo>∪</mo><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A \cap (B \cup C) = (A \cap B) \cup (A \cap C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span></span></span></span></p></blockquote></li><li><p>德摩根律：</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mo>∪</mo><mi>B</mi></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo>∩</mo><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{A \cup B} = \overline A \cap \overline B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo>∪</mo><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{A \cap B} = \overline A \cup \overline B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8833300000000001em;vertical-align:0"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span></span></span></span></p></blockquote></li></ol><h4 id="1422-术语"><a class="markdownIt-Anchor" href="#1422-术语"></a> 1.4.2.2 术语</h4><ol><li>“至少” —— 加法运算</li><li>“同时” —— 乘法运算</li></ol><p>例： 设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A, B, C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span> 三个事件，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A, B,C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span> 的运算：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 发生，B,C 不发生</p><blockquote><p>A!B!C</p></blockquote></li><li><p>A与B都发生，而C 不发生</p></li><li><p>ABC中至少有一个发生</p></li><li><p>ABC都发生</p></li><li><p>ABC都不发生</p></li><li><p>ABC不多于一个发生</p></li><li><p>ABC不多于两个发生</p></li><li><p>ABC至少两个发生</p><blockquote><p>AB + AC + BC</p></blockquote></li><li><p>ABC恰有一个发生</p><blockquote><p>A!B!C + !AB!C + !A!BC</p></blockquote></li><li><p>ABC 恰有两个发生</p><blockquote><p>AB!C + !ABC + A!BC</p></blockquote></li></ol><p>例2：在班上，任选一名学生：<br>A: 男生<br>B：二年级<br>C: 登山队员</p><ol><li>AB!C =</li><li>在什么条件下，ABC = C（C 包含于 AB）</li><li>在什么条件下，C 包含于 B</li></ol><h2 id="15-频率和概率"><a class="markdownIt-Anchor" href="#15-频率和概率"></a> 1.5 频率和概率</h2><h3 id="151-频率"><a class="markdownIt-Anchor" href="#151-频率"></a> 1.5.1 频率</h3><p>频率 = 频数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">/</span></span></span></span> 试验总数</p><p>频数：在 n 次试验中，发生某事件的<strong>次数</strong></p><p>基本性质</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \le f_n(A) \ge 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.78041em;vertical-align:-.13597em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f_n(S) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></li><li>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_1, A_2 \cdots A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 是两两不相容事件，则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><mo>⋯</mo><mo>∪</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_n(A_1 \cup A_2 \cup \cdots \cup A_n) = f_n(A_1) + f_n(A_2) + \cdots + f_n(A_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.55556em;vertical-align:0"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ol><h3 id="152-概率"><a class="markdownIt-Anchor" href="#152-概率"></a> 1.5.2 概率</h3><h4 id="1521-统计定义"><a class="markdownIt-Anchor" href="#1521-统计定义"></a> 1.5.2.1 统计定义</h4><p>在一组<strong>相同</strong>条件下，重复地做 n 次试验，记, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">n_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.32833099999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>为 n 次试验中，事件 A 发生的次数。</p><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">n \to \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord">∞</span></span></span></span>，频率（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msub><mi>n</mi><mi>A</mi></msub><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">n_A \over n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0566969999999998em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.7116969999999999em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.410305em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3448em"><span style="top:-2.3567071428571427em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.14329285714285717em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>）稳定在某一个常数 P 附近。<br>且随着 n 的增大，摆动的幅度越来越小，此时称 A 为<strong>随机事件</strong>，称 p 为事件 A 发生的概率，记作：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">P(A) = p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span></p><h4 id="1522-数学定义"><a class="markdownIt-Anchor" href="#1522-数学定义"></a> 1.5.2.2 数学定义</h4><p>对于随即试验赋予一个实数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>, 称为<strong>概率</strong>，满足已下条件</p><ol><li><p>对于任何事件 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span>，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(A) \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></p></li><li><p>对于必然事件 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span>，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P(S) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></p><blockquote><p>也可以表示为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P(\Omega) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord">Ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></p></blockquote></li><li><p>可列可加性：对于两两不相容事件，则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><mo>⋯</mo><mo>∪</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A_1 \cup A_2 \cup \cdots \cup A_n) = P(A_1) + P(A_2) + \cdots + P(A_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.55556em;vertical-align:0"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><blockquote><p>也称为<strong>完全可加性</strong></p></blockquote></li></ol><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span> 表征事件 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 在一次试验中发生的可能性大小。</p><blockquote><p>上述要点也是概率的性质。<br>注意，概率是<strong>趋近得到的</strong>，概率为 1 的事件<strong>不一定</strong>是必然事件。<br>同理，概率为 0 的事件<strong>不一定</strong>是必然事件。</p></blockquote><h4 id="1523-性质"><a class="markdownIt-Anchor" href="#1523-性质"></a> 1.5.2.3 性质</h4><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∅</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(\varnothing) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord amsrm">∅</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></p></li><li><p>有限可加：对于<strong>两两不相容</strong>事件<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><mo>⋯</mo><mo>∪</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A_1 \cup A_2 \cup \cdots \cup A_n) = P(A_1) + P(A_2) + \cdots + P(A_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.55556em;vertical-align:0"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><blockquote><p>可以推广到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">n = \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord">∞</span></span></span></span> 的可列可加性</p></blockquote></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>⊂</mo><mi>B</mi><mo>⇒</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A \subset B \Rightarrow P(B) \ge P(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span></p></li><li><p>任何事件 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 都有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P(A) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></p></li><li><p>逆事件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(\overline A) = 1 - P(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span></p></li><li><p>加法：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A \cup B) = P(A) + P(B) - P(AB)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span></p></li><li><p>对于一般事件，有</p></li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><mo>⋯</mo><mo>∪</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><munder><mo>∑</mo><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>&lt;</mo><mi>j</mi><mo>≤</mo><mi>n</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>A</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>+</mo><munder><mo>∑</mo><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>&lt;</mo><mi>j</mi><mo>&lt;</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>A</mi><mi>j</mi></msub><msub><mi>A</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A_1 \cup A_2 \cup \cdots \cup A_n) = \sum_{i = 1}^nP(A_i) - \sum_{1 \le i \lt j \le n}P(A_iA_j) + \sum_{1 \le i \lt j \lt k \le n}P(A_i A_j A_k) + \cdots + (-1)^{n - 1}P(A_1 \cdots A_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.55556em;vertical-align:0"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.463782em;vertical-align:-1.413777em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em"><span style="top:-1.8723309999999997em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">i</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.488226em;vertical-align:-1.438221em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em"><span style="top:-1.8478869999999998em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">i</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.438221em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.864108em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h3 id="153-概率空间"><a class="markdownIt-Anchor" href="#153-概率空间"></a> 1.5.3 概率空间</h3><h4 id="1531-sigma-代数"><a class="markdownIt-Anchor" href="#1531-sigma-代数"></a> 1.5.3.1 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03588em">σ</span></span></span></span> 代数</h4><p>称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span></span></span></span> 样本空间的一些子集所成的集合 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span>，若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span> 满足：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">\Omega \in F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span></li><li>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">A \in F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span> ,则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo>∈</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">\overline A \in F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.9224300000000001em;vertical-align:-.0391em"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span></li><li>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub><mo>∈</mo><mi>F</mi><mo separator="true">,</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">A_n \in F, n = 1, 2, \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span>，则称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msub><mi>A</mi><mi>n</mi></msub><mo>∈</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">\bigcup_{i = 1}^\infty A_n \in F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span></li></ol><p>则称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mi mathvariant="normal">Ω</mi><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\Omega, F\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord">Ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mclose">}</span></span></span></span> 为可测空间，称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo>−</mo></mrow><annotation encoding="application/x-tex">\sigma -</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="mord mathdefault" style="margin-right:.03588em">σ</span><span class="mord">−</span></span></span></span>代数</p><h4 id="1532-样本空间"><a class="markdownIt-Anchor" href="#1532-样本空间"></a> 1.5.3.2 样本空间</h4><p>称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mi mathvariant="normal">Ω</mi><mo separator="true">,</mo><mi>F</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\Omega, F, p\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord">Ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">p</span><span class="mclose">}</span></span></span></span> 为样本空间，其中：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span></span></span></span> 样本空间</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span></span></span></span> 事件域</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 概率</li></ol><h4 id="1533-性质"><a class="markdownIt-Anchor" href="#1533-性质"></a> 1.5.3.3 性质</h4><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∅</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(\varnothing) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord amsrm">∅</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></p></li><li><p>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>∈</mo><mi>F</mi><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">A_i \in F, i = 1,2, \ldots, n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><msub><mi>A</mi><mi>j</mi></msub><mo>=</mo><mi mathvariant="normal">∅</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">!</mo><mo>=</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A_iA_j = \varnothing (i != j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.969438em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord amsrm">∅</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">!</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05724em">j</span><span class="mclose">)</span></span></span></span></p></li><li><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>B</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">AB = \varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span> 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A \cup B) = P(A) + P(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span></p><blockquote><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A, B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 为任意事件，那么， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A \cup B) = P(A) + P(B) - P(A B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span><br>将上式推广到 n 个，则有</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><munder><mo>∑</mo><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>&lt;</mo><mi>j</mi><mo>≤</mo><mi>n</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>A</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo>∑</mo></mrow><annotation encoding="application/x-tex">P(\bigcup_{i = 1}^n A_i) = \sum_{i = 1}^nP(A_i) - \sum_{1\le i \lt j \le n} P(A_iA_j) + \sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">⋃</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:2.463782em;vertical-align:-1.413777em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em"><span style="top:-1.8723309999999997em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">i</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-.55001em"></span><span class="mop op-symbol large-op" style="position:relative;top:-.000004999999999977245em">∑</span></span></span></span></span></p><p>// TODO</p></li><li><p>单调不减性：若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>⊂</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \subset B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(B - A) = P(B) - P(A) \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(B) \ge P(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(\overline A) = 1 - P(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span></p></li><li><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub><mo>∈</mo><mi>F</mi><mo separator="true">,</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">A_n \in F, n = 1,2, \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span>，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⊂</mo><msub><mi>A</mi><mn>2</mn></msub><mo>⊂</mo><mo>…</mo><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_1 \subset A_2 \subset \ldots A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msubsup><mo>⋃</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">P(\bigcup_{n = 1}^\infty A_n) = \lim_{n \to \infty} A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.84444em;vertical-align:-.15em"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></p><blockquote><p>称为<strong>下连续</strong></p></blockquote></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub><mo>∈</mo><mi>F</mi><mo separator="true">,</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">A_n \in F, n = 1,2,\ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span>，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>⊃</mo><msub><mi>A</mi><mn>2</mn></msub><mo>⊃</mo><mo>…</mo><mo>⊃</mo><msub><mi>A</mi><mi>n</mi></msub><mo>⊃</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">A_i \supset A_2 \supset \ldots \supset A_n \supset \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.5782em;vertical-align:-.0391em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.12em;vertical-align:0"></span><span class="minner">…</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msubsup><mo>⋂</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(\bigcap_{n = 1}^\infty A_n) = \lim_{n \to \infty} P(A_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋂</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><blockquote><p>称为<strong>上连续</strong><br>6 和 7 也称作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 的连续性</p></blockquote></li></ol><h4 id="1534-例题"><a class="markdownIt-Anchor" href="#1534-例题"></a> 1.5.3.4 例题</h4><ol><li><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A, B, C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span> 为三事件，已知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>8</mn></mrow><annotation encoding="application/x-tex">P(A) = P(B) = P(C) = 1/4, P(AB) = 0 = P(AC), \ P(BC) = 1/8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">8</span></span></span></span> 求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>B</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">ABC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span>中至少有一个发生的概率。</p><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo>∪</mo><mi>C</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>C</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mi>C</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>−</mo><mfrac><mn>1</mn><mn>8</mn></mfrac><mo>+</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0.625</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(A \cup B \cup C) &amp;= P(A) + P(B) + P(C) \\ &amp; - P(AB) - P(AC) - P(BC) + P(ABC) \\ &amp;= \frac{1}{4} + \frac{1}{4} + \frac{1}{4} - \frac{1}{8} + 0 \\ &amp;= 0.625 \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.80744em;vertical-align:-3.1537200000000003em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.65372em"><span style="top:-6.13516em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span></span></span><span style="top:-4.63516em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-2.6537199999999994em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-.8277199999999998em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.1537200000000003em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.65372em"><span style="top:-6.13516em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span></span></span><span style="top:-4.63516em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span></span></span><span style="top:-2.6537199999999994em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">0</span></span></span><span style="top:-.8277199999999998em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mord">2</span><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.1537200000000003em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>将编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">1, 2, 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">3</span></span></span></span> 的三本书任意地排在了书架上，求至少有一本书从左到右的排列序号与之编号相同的概率。</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">A_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>: 第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span> 本书在第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span> 个位置上， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>…</mo></mrow><annotation encoding="application/x-tex">k = 1,2,3 \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">3</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span><br>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">A = A_1 \cup A_2 \cup A_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>1</mn><mo stretchy="false">(</mo><mn>3</mn><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><mrow><mn>3</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">P(A_k) = \frac{1 (3 - 1)!}{3!} = 1/3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.485em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mopen mtight">(</span><span class="mord mtight">3</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mclose mtight">!</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">3</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>A</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mo stretchy="false">(</mo><mn>3</mn><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><mrow><mn>3</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">P(A_iA_j) = \frac{1 \times 1 \times (3 - 2)!}{3!} = 1/6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-.286108em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.485em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">×</span><span class="mord mtight">1</span><span class="mbin mtight">×</span><span class="mopen mtight">(</span><span class="mord mtight">3</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mclose mtight">)</span><span class="mclose mtight">!</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">6</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><msub><mi>A</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mrow><mn>3</mn><mo stretchy="false">!</mo></mrow></mrow><annotation encoding="application/x-tex">P(A_1A_2A_3) = 1 / {3!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord">3</span><span class="mclose">!</span></span></span></span></span></p></blockquote></li><li><p>（匹配问题） 某人写了 n 封信，并将它们随机放入写着 n 封信收信人地址的信封内，求：</p><ol><li>至少有一封信正确的概率</li><li>n 个信封上的地址均不正确的概率</li><li>恰有 r 个信封上的地址正确的概率</li></ol><blockquote><p>B:至少有一封信是对的。<br>B_r：恰有 r 个是对的<br>A_i: 第 i 封信对的</p></blockquote><blockquote><p>1）</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><mo>−</mo><msub><mi>S</mi><mn>2</mn></msub><mo>+</mo><msub><mi>S</mi><mn>3</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><msub><mi>S</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo separator="true">,</mo><mtext> </mtext><msub><mi>S</mi><mn>1</mn></msub><mo>=</mo><mi>n</mi><mo>×</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>A</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><mtext> </mtext><msub><mi>S</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">!</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>S</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi><mo stretchy="false">!</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(B) &amp;= S_1 - S_2 + S_3 + \cdots + (-1)^{n - 1}S_n \\ \\ P(A_i) &amp;= \frac{1}{n}, \ S_1 = n \times \frac{1}{n} = 1 \\ \\ P(A_iA_j) &amp;= \frac{(n - 2)!}{n!} = \frac{1}{n(n - 1)}, \ S_2 = 1/2! \\ \cdots \\ \\ S_n &amp;= 1/n! \\ \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.994548000000002em;vertical-align:-6.747274000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.247274em"><span style="top:-9.810166em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span><span style="top:-8.310166em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:-6.328725999999999em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.502725999999999em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:-2.4157259999999994em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-.3397259999999993em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:1.1602740000000007em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span><span style="top:2.6602740000000007em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.747274000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.247274em"><span style="top:-9.810166em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.864108em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-6.3287260000000005em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span></span></span><span style="top:-2.415726000000001em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.936em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05764em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">!</span></span></span><span style="top:2.660273999999999em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.747273999999999em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>则</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mrow><mn>3</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>−</mo><mo>…</mo><mo>+</mo><mo>…</mo><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(B) &amp;= 1 - \frac{1}{2!} + \frac{1}{3!} - \ldots + \ldots + (-1)^{n + 1}\frac{1}{n!} \\ &amp;= \sum_{k =1 }^n \frac{(-1)^{k + 1}}{k!} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.56095em;vertical-align:-2.530475em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.030475em"><span style="top:-5.360432em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span><span style="top:-2.7230350000000003em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.530475em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.030475em"><span style="top:-5.360432em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.864108em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.7230350000000003em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.8478869999999998em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261079999999998em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8491079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.530475em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\lim_{n \to \infty} P(B) = 1 - e^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><blockquote><ol start="2"><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(B_0) = 1 - P(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span></li></ol></blockquote><blockquote><ol start="3"><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><msub><mi>i</mi><mn>1</mn></msub></msub><msub><mi>A</mi><msub><mi>i</mi><mn>2</mn></msub></msub><mo>⋯</mo><msub><mi>A</mi><msub><mi>i</mi><mi>r</mi></msub></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>…</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(A_{i_1}A_{i_2}\cdots A_{i_r}) = \frac{1}{n(n -1) \ldots (n - r + 1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-.2501em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31731428571428577em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.2501em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31731428571428577em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.2501em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.16454285714285719em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.143em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.2501em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-.52em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="minner mtight">…</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.52em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>而其余 r 个不对，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mi>r</mi></mrow></msubsup><mfrac><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{k = 0}^{n -r} \frac{(-1)}{k!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-.345em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.911231em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.485em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>所以</li></ol></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mi>r</mi></msubsup><mo>×</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>…</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mo>×</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mi>r</mi></mrow></munderover><mfrac><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>r</mi><mo stretchy="false">!</mo></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mi>r</mi></mrow></munderover><mfrac><mrow><mo>−</mo><mn>1</mn></mrow><mi>k</mi></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(B_r) &amp;= C_n^r \times \frac{1}{n(n - 1)\ldots (n - r + 1)} \times \sum_{k =0}^{n -r} \frac{(-1)}{k!} \\ &amp;= \frac{1}{r!} \sum_{k= 0}^{n -r} \frac{-1}{k} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.720898000000001em;vertical-align:-3.1104490000000005em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.6104490000000005em"><span style="top:-5.610449em"><span class="pstrut" style="height:3.7583360000000003em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.7583360000000003em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.1104490000000005em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.6104490000000005em"><span style="top:-5.610449em"><span class="pstrut" style="height:3.7583360000000003em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.936em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7583360000000003em"><span style="top:-1.8478869999999998em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.7583360000000003em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7583360000000003em"><span style="top:-1.8478869999999998em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.1104490000000005em"><span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∏</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">P(Time) = \prod P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em"></span><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∏</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msubsup><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(\bigcup_{i = 1}^{n}) = \prod_{i = 1}^n (P(A_i))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p></blockquote></li></ol><h2 id="16-等可能概型"><a class="markdownIt-Anchor" href="#16-等可能概型"></a> 1.6 等可能概型</h2><h3 id="161-定义"><a class="markdownIt-Anchor" href="#161-定义"></a> 1.6.1 定义</h3><ol><li>元素有限</li><li>基本事件发生概率相同</li></ol><p>由上，基本事件概率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mo stretchy="false">{</mo><msub><mi>e</mi><mi>i</mi></msub><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>⋯</mo></mrow><annotation encoding="application/x-tex">P(\{e_i\}) = 1 / n , i = 1, 2, 3 \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">3</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><mo stretchy="false">{</mo><msub><mi>e</mi><msub><mi>i</mi><mi>j</mi></msub></msub><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mi mathvariant="normal">/</mi><mi>n</mi><mo>=</mo><mfrac><mrow><mi>B</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>c</mi><mtext> </mtext><mi>E</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>i</mi><mi>n</mi><mtext> </mtext><mi>A</mi></mrow><mrow><mi>B</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>c</mi><mtext> </mtext><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mi>i</mi><mi>n</mi><mtext> </mtext><mi>S</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(A) = \sum_{j = 1}^k P(\{e_{i_j}\}) = k / n = \frac{Basic \ Events \ in \ A}{Basic\ event \ in \ S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:3.2498900000000006em;vertical-align:-1.4137769999999998em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000006em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166400000000005em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3280857142857143em"><span style="top:-2.357em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.2818857142857143em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.34731999999999996em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mord">/</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>实际推断原理：概率很小的事件在<strong>一次试验</strong>中<strong>几乎</strong>不发生</p><h3 id="162-例题"><a class="markdownIt-Anchor" href="#162-例题"></a> 1.6.2 例题</h3><p>例1： 一个袋里有 5 个球，3 个白，2 个黑，从中任取三个：</p><ol><li>求全是白球</li><li>全是黑球</li><li>一黑一白</li></ol><p>改变上例为放回操作，重做题目。</p><p>例2： 产品检验模型，有 N 件，D 件次品，N - D 件正品<br>问任取 n 件，恰有 k 件是次品的概率</p><p>例3： 打牌（去除大小王），4 人，求某人拿到 4 张黑桃，且其他花色都是 3 张的概率</p><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msubsup><mi>C</mi><mn>13</mn><mn>4</mn></msubsup><msubsup><mi>C</mi><mn>13</mn><mn>3</mn></msubsup><msubsup><mi>C</mi><mn>13</mn><mn>3</mn></msubsup><msubsup><mi>C</mi><mn>13</mn><mn>3</mn></msubsup></mrow><msubsup><mi>C</mi><mn>52</mn><mn>13</mn></msubsup></mfrac></mrow><annotation encoding="application/x-tex">P(A) = \frac{ C^4_{13} C^3_{13} C^3_{13} C^3_{13} } {C^{13}_{52}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.443416em;vertical-align:-.9523079999999999em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911079999999999em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.7959080000000001em"><span style="top:-2.433692em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.0448000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.26630799999999993em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9523079999999999em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></blockquote><p>例4： 把一副牌洗透了，求 4 张 A 连在一起的概率。</p><blockquote><p>捆绑 + 插空。</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msubsup><mi>A</mi><mn>4</mn><mn>4</mn></msubsup><msubsup><mi>C</mi><mn>49</mn><mn>1</mn></msubsup><msubsup><mi>A</mi><mn>50</mn><mn>50</mn></msubsup></mrow><msubsup><mi>A</mi><mn>52</mn><mn>52</mn></msubsup></mfrac></mrow><annotation encoding="application/x-tex">P(A) = \frac{A_4^4 C_{49}^1 A_{50}^{50}}{A_{52}^{52}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.443416em;vertical-align:-.9523079999999999em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911079999999999em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.7959080000000001em"><span style="top:-2.433692em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.0448000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.26630799999999993em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">9</span></span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9523079999999999em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>例5：分房模型</p><p>将 n 个小球随机地放到 N 个大盒子中，求下列事件概率：</p><p>A：某指定的 n 个盒子中各有一个球；</p><blockquote><p>球选盒子</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><msup><mi>N</mi><mi>n</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">P(A) = \frac{n!}{N^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.590392em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>B：每个盒子中至多有一个球；</p><blockquote><p>先把 n 个 盒子选出来，然后球选盒子</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msubsup><mi>C</mi><mi>N</mi><mi>n</mi></msubsup><msup><mi>N</mi><mi>n</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">P(B) = \frac{C_N^n}{N^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.590392em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-2.424669em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.275331em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>C：某指定的一个盒子中恰有 m（m 小于等于 n） 个球</p><blockquote><p>先将指定的 m 个球选出来，然后让剩下的小球到剩余的盒子中去</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>m</mi></mrow></msup></mrow><msup><mi>N</mi><mi>n</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">P(C) = \frac{C_n^m (N - 1)^{n - m}}{N^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.134331em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.448331em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.590392em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.771331em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>例6：假设没人的生日在 365 天中任一天，等可能，则随机选取 n 个人：</p><ol><li><p>他们的生日各不相同的概率</p><blockquote><p>分房模型。</p></blockquote></li><li><p>至少有两人相同的概率</p><blockquote><p>间接法，通过求解对立事件的概率来求解。</p></blockquote></li></ol><p>例7：摸球问题<br>设盒中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.0037em">α</span></span></span></span> 个白球，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.05278em">β</span></span></span></span> 个黑球，现采用放回和不放回两种抽样方式。<br>从中任取 a + b 个球，问摸过的球中恰有 a 个白，b 个黑球的概率。</p><h2 id="16-补充几何概型"><a class="markdownIt-Anchor" href="#16-补充几何概型"></a> 1.6 补充：几何概型</h2><h3 id="16sp1-背景约会问题"><a class="markdownIt-Anchor" href="#16sp1-背景约会问题"></a> 1.6sp.1 背景：约会问题</h3><p>甲，乙两人相约在 0 到 T 这短时间内在预订的地点会面。先到的人等另外一人 t 时间，之后离开。<br>求甲、乙两人能会面的概率。</p><blockquote><p>设 x, y 为到达的时刻，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>≤</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo>≤</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">x \le 0, y \le T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.7719400000000001em;vertical-align:-.13597em"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span></span><br>“会面” <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">=</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo>−</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">|x - y| \le t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mord">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.61508em;vertical-align:0"></span><span class="mord mathdefault">t</span></span></span></span>，通过画平面直角坐标系解决。</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><msup><mi>T</mi><mn>2</mn></msup><mo>−</mo><mo stretchy="false">(</mo><mi>T</mi><mo>−</mo><mi>t</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><msup><mi>T</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mi>t</mi><mi>T</mi></mfrac><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(A) &amp;= \frac{T^2 - (T - t)^2}{T^2} \\ &amp;= 1 - (1 - \frac{t}{T})^2 \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.755188em;vertical-align:-2.127594em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.627594em"><span style="top:-4.627594em"><span class="pstrut" style="height:3.491108em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-2.349514em"><span class="pstrut" style="height:3.491108em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.127594em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.627594em"><span style="top:-4.627594em"><span class="pstrut" style="height:3.491108em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.740108em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.13889em">T</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">t</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.349514em"><span class="pstrut" style="height:3.491108em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.29208em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.127594em"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="16sp2-定义"><a class="markdownIt-Anchor" href="#16sp2-定义"></a> 1.6sp.2 定义</h3><p>试验 E 具有:</p><ol><li>样本空间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span></span></span></span> 是一、二、三维中的度量(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(\Omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord">Ω</span><span class="mclose">)</span></span></span></span>)</li><li>样本点在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span></span></span></span> 中均匀分布</li></ol><p>则称 E 为几何概型，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><mrow><mi>L</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(A) = \frac{L(A)}{L(\Omega)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-.52em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em"><span style="top:-2.655em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mopen mtight">(</span><span class="mord mtight">Ω</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.485em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">A</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.52em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 叫做几何概率</p><h3 id="16sp3-例题"><a class="markdownIt-Anchor" href="#16sp3-例题"></a> 1.6sp.3 例题</h3><ol><li><p>平面上画有某距离为 a 的一些平行线，想平面上任意投一长为 l 的针，试求针与平行线相交的概率。</p><blockquote><p>取针的中点 M，中点到相交平行线的距离为 x ，与相交平行线的夹角为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">ϕ</span></span></span></span><br>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mfrac><mi>a</mi><mn>2</mn></mfrac><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><mi>ϕ</mi><mo>≤</mo><mi>π</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\Omega = \{(x, \phi)| 0 \le x \le \frac{a}{2}, 0 \le \phi \le \pi \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.7719400000000001em;vertical-align:-.13597em"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03588em">π</span><span class="mclose">}</span></span></span></span><br>相交 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo>≤</mo><mfrac><mi>l</mi><mn>2</mn></mfrac><mi>S</mi><mi>i</mi><mi>n</mi><mi>ϕ</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo><mo>∈</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">= \{(x, \phi)|x \le \frac{l}{2}Sin\phi, (x, \phi) \in \Omega\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8801079999999999em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.01968em">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">ϕ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">Ω</span><span class="mclose">}</span></span></span></span></p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><mrow><mi>L</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><msubsup><mo>∫</mo><mn>0</mn><mi>π</mi></msubsup><mfrac><mi>l</mi><mn>2</mn></mfrac><mi>S</mi><mi>i</mi><mi>n</mi><mi>ϕ</mi><mi>d</mi><mi>ϕ</mi></mrow><mrow><mfrac><mi>a</mi><mn>2</mn></mfrac><mi>π</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mn>2</mn><mi>l</mi></mrow><mrow><mi>π</mi><mi>a</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>2</mn><mi>π</mi></mfrac><mo>×</mo><mfrac><mi>l</mi><mi>a</mi></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(A) &amp;= \frac{L(A)}{L(\Omega)} \\ \\ &amp;= \frac{\int_0^\pi \frac{l}{2}Sin\phi d\phi}{\frac{a}{2} \pi} \\ &amp;= \frac{2l}{\pi a} \\ \\ &amp;= \frac{2}{\pi} \times \frac{l}{a} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.334808000000002em;vertical-align:-6.417404000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.917404000000001em"><span style="top:-9.116332000000002em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-7.040332000000001em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"></span></span><span style="top:-4.754404000000001em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"></span></span><span style="top:-2.0519639999999995em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"></span></span><span style="top:-.2259639999999994em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"></span></span><span style="top:1.805476000000001em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.417404000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.917404000000001em"><span style="top:-9.116332000000002em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord">Ω</span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.936em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-4.754404000000001em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.625928em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:.03588em">π</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.74582em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="margin-right:.19445em;position:relative;top:-.0005599999999999772em">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8592920000000001em"><span style="top:-2.34418em;margin-left:-.19445em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.35582em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8801079999999999em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.01968em">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">ϕ</span><span class="mord mathdefault">d</span><span class="mord mathdefault">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0310000000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.0519639999999995em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">π</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.01968em">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:1.805476000000001em"><span class="pstrut" style="height:3.625928em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03588em">π</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.01968em">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.417404000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol><h2 id="17-条件概率"><a class="markdownIt-Anchor" href="#17-条件概率"></a> 1.7 条件概率</h2><h3 id="171-定义"><a class="markdownIt-Anchor" href="#171-定义"></a> 1.7.1 定义</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 是两个事件，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(A) \gt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>，则称</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(B|A) = \frac{P(AB)}{P(A)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-.936em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.936em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>称为事件 A 发生下，事件 B 发生的概率</p><p>由于条件概率仍然是概率，则满足概率加法</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>B</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><msub><mi>B</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">P(B_1 \cup B_2 | A) = P(B_1|A) + P(B_2 |A) - P(B_1B_2|A) \varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mord amsrm">∅</span></span></span></span></span></p><p><strong>解题要点：从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> 中寻找属于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 的元素，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 的交集</strong></p><h3 id="172-全概率公式和贝叶斯公式"><a class="markdownIt-Anchor" href="#172-全概率公式和贝叶斯公式"></a> 1.7.2 全概率公式和贝叶斯公式</h3><h4 id="1721-样本空间的划分"><a class="markdownIt-Anchor" href="#1721-样本空间的划分"></a> 1.7.2.1 样本空间的划分</h4><p>满足以下条件的称为样本空间的划分</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub><msub><mi>B</mi><mi>j</mi></msub><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">B_iB_j = \varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.969438em;vertical-align:-.286108em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.66334em;vertical-align:-.08167em"></span><span class="mord amsrm">∅</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>B</mi><mn>2</mn></msub><mo>∪</mo><mo>⋯</mo><mo>∪</mo><msub><mi>B</mi><mi>n</mi></msub><mo>=</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">B_1 \cup B_2 \cup \cdots \cup B_n = S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.55556em;vertical-align:0"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span></li></ol><p>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>B</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>B</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">B_1, B_2 \cdots B_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 称为样本空间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span> 的 <strong>划分</strong></p><h4 id="1722-全概率公式"><a class="markdownIt-Anchor" href="#1722-全概率公式"></a> 1.7.2.2 全概率公式</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><msub><mi>B</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><msub><mi>B</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(A) &amp;= P(A|B_1)P(B_1) + P(A|B_2)P(B_2) + \cdots + P(A|B_n)P(Bn) \\ &amp;= \sum_{i =1}^nP(A_i)P(B|A_i) \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.729066em;vertical-align:-2.114533em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.614533em"><span style="top:-5.42593em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-3.1145329999999998em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.114533em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.614533em"><span style="top:-5.42593em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-3.1145329999999998em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.114533em"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="1723-贝叶斯公式"><a class="markdownIt-Anchor" href="#1723-贝叶斯公式"></a> 1.7.2.3 贝叶斯公式</h4><p>假设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_1 \cdots A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span></span></span></span> 的一个划分，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(A_i) \gt 0,\ P(B) \gt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>, 则有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><msub><mi>B</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(B_i|A) = \frac{P(A|B_i)P(B_i)}{\sum_{j = 1}^nP(A|B_j)P(B_j)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.55711em;vertical-align:-1.1301100000000002em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.305708em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.43581800000000004em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1301100000000002em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>以上两个公式的关键，事件，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord">Ω</span></span></span></span>的划分</strong></p><h4 id="1724-乘法公式"><a class="markdownIt-Anchor" href="#1724-乘法公式"></a> 1.7.2.4 乘法公式</h4><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(B) \gt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> 则有<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(AB) = P(B)P(A|B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span><br>推广 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>3</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⋯</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>n</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A_1A_2\cdots A_n) = P(A_1)P(A_2|A_1)P(A_3|A_1A_2)\cdots P(A_n|A_1 \cdots A_{n - 1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.208331em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> , 当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(A_1A_2 \cdots A_{n - 1}) \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.208331em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></p><h4 id="1725-例题"><a class="markdownIt-Anchor" href="#1725-例题"></a> 1.7.2.5 例题</h4><ol><li>盒子里有 16 个球，6 个玻璃球， 10 个木头球。玻璃球有 2 红 4 蓝，木头球有 3 红 7 蓝。问题：摸一个球，已知是玻璃球，问是蓝色的概率</li></ol><table><thead><tr><th>\</th><th>玻璃</th><th>木头</th></tr></thead><tbody><tr><td>红</td><td>2</td><td>3</td></tr><tr><td>蓝</td><td>4</td><td>7</td></tr><tr><td>\</td><td>6</td><td>10</td></tr></tbody></table><blockquote><p>观察可知 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mi mathvariant="normal">/</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">P(A|B) = 4/6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">4</span><span class="mord">/</span><span class="mord">6</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mi mathvariant="normal">/</mi><mn>16</mn></mrow><annotation encoding="application/x-tex">p(AB) = 4/16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">4</span><span class="mord">/</span><span class="mord">1</span><span class="mord">6</span></span></span></span></p></blockquote><ol start="2"><li><p>某人忘了电话号码的最后一位，因而随意拨号，求拨号不超过 2 次就能接通的概率</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>:</mo></mrow><annotation encoding="application/x-tex">A_1:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">:</span></span></span></span> 第一次通<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>:</mo></mrow><annotation encoding="application/x-tex">A_2:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">:</span></span></span></span> 第二次通<br>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A = A_1 \cup \overline A_1 A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-.15em"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>10</mn></mfrac><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mn>1</mn></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><msub><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>2</mn><mn>10</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \therefore P(A) &amp;= P(A_1) + P(\overline A_1 A_2) \\ &amp;= \frac{1}{10} + P(\overline A_1 )P(A_2|\overline A_1) \\ &amp;= \frac{2}{10} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.1582099999999995em;vertical-align:-2.8291049999999998em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3291049999999998em"><span style="top:-5.767215em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-3.7857749999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-1.4783350000000004em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8291049999999998em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3291049999999998em"><span style="top:-5.767215em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.7857749999999997em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.4783350000000004em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8291049999999998em"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>抓阄：有 5 张条，其中 3 张有，2 张无。现从中任取一张，不放回，问第一个人抽到有的概率</p><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>3</mn><mn>5</mn></mfrac></mrow><annotation encoding="application/x-tex">P(A) = \frac{3}{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">Ω</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi>A</mi><mo>∪</mo><mi>B</mi><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>3</mn><mn>5</mn></mfrac><mo>×</mo><mfrac><mn>2</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>2</mn><mn>5</mn></mfrac><mo>×</mo><mfrac><mn>3</mn><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>3</mn><mn>5</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(B) &amp;= P(B \Omega) = P(B(A\cup \overline A)) \\ \\ &amp; = P(BA\cup B\overline A) = P(BA) + P(B \overline A) \\ \\ &amp; = P(A)P(B|A) + P(\overline A)P(B | \overline A) \\ \\ &amp; = \frac{3}{5} \times \frac{2}{4} + \frac{2}{5} \times \frac{3}{4} \\ \\ &amp; = \frac{3}{5} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:15.244870000000002em;vertical-align:-7.372435000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.872435000000001em"><span style="top:-10.310545000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span><span style="top:-8.810545000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-7.267215000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-5.767215000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-4.223885000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-2.723885em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-.7424449999999986em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:1.0835550000000014em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:3.064995000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.372435000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.872435000000001em"><span style="top:-10.310545000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">Ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-7.267215000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.223885000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-.7424449999999986em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:3.064995000000001em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.372435000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>某实验室的晶体管由三个厂家提供，有下表：</p></li></ol><table><thead><tr><th>厂家</th><th>次品率</th><th>份额</th></tr></thead><tbody><tr><td>1</td><td>0.02</td><td>15%</td></tr><tr><td>2</td><td>0.01</td><td>80%</td></tr><tr><td>3</td><td>0.03</td><td>5%</td></tr></tbody></table><ol><li>随机取一支，它是次品的概率</li><li>随机取一支，已知是次品，是出自 1 厂的概率</li></ol><blockquote><p>常识： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0.02</mn><mo>×</mo><mn>15</mn><mi mathvariant="normal">%</mi><mo>+</mo><mn>0.01</mn><mo>×</mo><mn>80</mn><mi mathvariant="normal">%</mi><mo>+</mo><mn>0.03</mn><mo>×</mo><mn>5</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">P(B) = 0.02 \times 15\% + 0.01 \times 80\% + 0.03 \times 5\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">%</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.08333em"></span><span class="mord">8</span><span class="mord">0</span><span class="mord">%</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">3</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.80556em;vertical-align:-.05556em"></span><span class="mord">5</span><span class="mord">%</span></span></span></span><br>1): <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>: 拿到的次品来自于第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 个厂家生产的</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(B) = P(A_i)P(B|A_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>2):</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mn>15</mn><mi mathvariant="normal">%</mi><mo>×</mo><mn>0.02</mn></mrow><mn>0.0125</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(A_i|B) &amp;= \frac{P(A_i)P(B|A_1)}{P(B)} \\ &amp;= \frac{15\% \times 0.02}{0.0125} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.0760000000000005em;vertical-align:-2.2880000000000007em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.788em"><span style="top:-4.788em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span><span style="top:-2.1249999999999996em"><span class="pstrut" style="height:3.427em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2880000000000007em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.788em"><span style="top:-4.788em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.936em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.1249999999999996em"><span class="pstrut" style="height:3.427em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">2</span><span class="mord">5</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mord">5</span><span class="mord">%</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2880000000000007em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><h2 id="18-独立性"><a class="markdownIt-Anchor" href="#18-独立性"></a> 1.8 独立性</h2><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 两事件，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A|B) = P(A)P(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span>, 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A|B) = P(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span><br>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> <strong>相互独立</strong>，简称独立</p><h3 id="181-独立性定理"><a class="markdownIt-Anchor" href="#181-独立性定理"></a> 1.8.1 独立性定理</h3><ol><li><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 独立，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A|B) = P(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span></p></li><li><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span> 独立，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo separator="true">;</mo><mtext> </mtext><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mi>B</mi><mo separator="true">;</mo><mtext> </mtext><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">A,\overline B;\ \overline A, B;\ \overline A, \overline B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-.19444em"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">;</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span></span></span></span></p><blockquote><p>推广：若<strong>积事件</strong>的概率都等于<strong>事件概率的积</strong>。那么事件相互独立</p></blockquote></li></ol><h3 id="182-推论"><a class="markdownIt-Anchor" href="#182-推论"></a> 1.8.2 推论</h3><ol><li>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_1, A_2, \cdots A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 相互独立，那么其中的<strong>任意 k 个事件也相互独立</strong></li><li>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_1, A_2, \cdots A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 相互独立，将其中<strong>任意多个</strong>转换为<strong>对立事件</strong>，也相互独立</li></ol><h3 id="183-例题"><a class="markdownIt-Anchor" href="#183-例题"></a> 1.8.3 例题</h3><ol><li><p>质地均匀的正四面体，分别染上红色，黄色，蓝色，第四个面染上红、黄、蓝三种颜色。试验：扔一次，观察接触桌子的一面所对应的颜色。</p><blockquote><p>假设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span></span></span></span>：有红色，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span>：有黄色，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span></span></span></span>：有蓝色<br>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>：第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 个面接触桌子<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">P(A_i) = 1/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">A = A_1 \cup A_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">B = A_2 \cup A_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><msub><mi>A</mi><mn>3</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">C = A_3 \cup A_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><br>有</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(A) &amp;= P(B) = P(C) = P(A_1) + P(A_4) \\ &amp;= \frac{1}{4} + \frac{1}{4} = \frac{1}{2} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.8074399999999997em;vertical-align:-1.6537199999999999em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.15372em"><span style="top:-4.63516em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-2.6537200000000003em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6537199999999999em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.15372em"><span style="top:-4.63516em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.6537200000000003em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6537199999999999em"><span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">P(AB) = P(A_4) = \frac{1}{4} = P(A) + P(B) = \frac{1}{2} + \frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>又<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69224em;vertical-align:0"></span><span class="mrel amsrm">∵</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>4</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">P(ABC) = P(A_4) = 1/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span></span></span></span></p></blockquote><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">\therefore</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69224em;vertical-align:0"></span><span class="mrel amsrm">∴</span></span></span></span> 两两独立不代表三个以上的事件组独立</p></blockquote></li><li><p>n 个人同时射击某一个目标，假设每人击中目标的概率为 p， 且各人是否击中目标相互独立，求目标被击中的概率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span>。</p><blockquote><p>假设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span></span>：目标被击中<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>：第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span></span></span></span> 个击中，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><msubsup><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mi>i</mi></mrow><mi>n</mi></msubsup><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">B = \bigcup_{i = i}^nA_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">⋃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><mo>⋯</mo><mo>∪</mo><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \therefore P(B) &amp;= P(\bigcup_{i = 1}^n A_i) \\ &amp;= 1 - P(A_1 \cup A_2 \cup \cdots \cup A_n) \\ &amp;= 1- P(\prod_{i = 1}^n \overline A_i) \\ &amp;= 1- (1 - p)^n \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.458132em;vertical-align:-4.479066em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.979066em"><span style="top:-6.979066em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span><span style="top:-4.561397em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"></span></span><span style="top:.16766900000000007em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.479066em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.979066em"><span style="top:-6.979066em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">⋃</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.561397em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:.16766900000000007em"><span class="pstrut" style="height:3.6513970000000002em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.479066em"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol><h2 id="19-第一章例题"><a class="markdownIt-Anchor" href="#19-第一章例题"></a> 1.9 第一章例题</h2><ol><li><p>从 5 双不同的鞋子中任取 4 只，4 只鞋子中至少有 2 只配成一双的概率。</p><blockquote><p>间接法：没有任何两只配成一双<br>排列法：</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mn>10</mn><mo>×</mo><mn>8</mn><mo>×</mo><mn>6</mn><mo>×</mo><mn>4</mn></mrow><mrow><mn>10</mn><mo>×</mo><mn>9</mn><mo>×</mo><mn>8</mn><mo>×</mo><mn>7</mn></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mn>8</mn><mn>21</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(A) &amp;= 1 - P(\overline A) \\ &amp;= 1 - \frac{10 \times 8 \times 6 \times 4}{10 \times 9 \times 8 \times 7} \\ &amp;= 1 - \frac{8}{21} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.24154em;vertical-align:-2.87077em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.37077em"><span style="top:-5.80888em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-3.82744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-1.4366700000000003em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.87077em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.37077em"><span style="top:-5.80888em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.82744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">9</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">8</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">7</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">8</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">6</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7693300000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.4366700000000003em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.87077em"><span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>组合法：</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>n</mi><mo>=</mo><msubsup><mi>C</mi><mn>10</mn><mn>4</mn></msubsup><mo separator="true">,</mo><mtext> </mtext><msub><mi>m</mi><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover></msub><mo>=</mo><msubsup><mi>C</mi><mn>5</mn><mn>4</mn></msubsup><mo>×</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mi>m</mi><mi>n</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><msubsup><mi>C</mi><mn>10</mn><mn>4</mn></msubsup><mrow><msubsup><mi>C</mi><mn>5</mn><mn>4</mn></msubsup><mo>×</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>2</mn></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} n = C_{10}^4, \ m_{\overline A} = C_5^4 \times 2 \times 2 \times 2 \times 2 \\ \\ \begin{aligned} P(A) &amp;= 1 - P(\overline A) \\ &amp;= 1 - \frac{m}{n} \\ &amp;= 1 - \frac{C_{10}^4}{C_5^4 \times 2 \times 2 \times 2 \times 2} \end{aligned} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.704414000000002em;vertical-align:-4.602207000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.102207em"><span style="top:-9.678252em"><span class="pstrut" style="height:5.4401530000000005em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3448em"><span style="top:-2.694969em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord overline mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.9283300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault mtight">A</span></span><span style="top:-3.83033em"><span class="pstrut" style="height:3em"></span><span class="overline-line mtight" style="border-bottom-width:.049em"></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.30503100000000005em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span></span></span><span style="top:-8.178252em"><span class="pstrut" style="height:5.4401530000000005em"></span><span class="mord"></span></span><span style="top:-4.078098999999999em"><span class="pstrut" style="height:5.4401530000000005em"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.4401530000000005em"><span style="top:-6.047931em"><span class="pstrut" style="height:3.4911079999999997em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span><span style="top:-4.280371em"><span class="pstrut" style="height:3.4911079999999997em"></span><span class="mord"></span></span><span style="top:-1.8032629999999996em"><span class="pstrut" style="height:3.4911079999999997em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.940153em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.4401530000000005em"><span style="top:-6.047931em"><span class="pstrut" style="height:3.4911079999999997em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.280371em"><span class="pstrut" style="height:3.4911079999999997em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.8032629999999996em"><span class="pstrut" style="height:3.4911079999999997em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911079999999999em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.7959080000000001em"><span style="top:-2.433692em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.0448000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.26630799999999993em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9523079999999999em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.940153em"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.602207000000002em"><span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>直接法：</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>m</mi><mi>A</mi></msub><mo>=</mo><msubsup><mi>C</mi><mn>5</mn><mn>1</mn></msubsup><msubsup><mi>C</mi><mn>8</mn><mn>2</mn></msubsup><mo>−</mo><msubsup><mi>C</mi><mn>5</mn><mn>2</mn></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>n</mi><mo>=</mo><msubsup><mi>C</mi><mn>10</mn><mn>4</mn></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>d</mi></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} m_A = C_5^1 C_8^2 - C_5^2 \\ n = C_{10}^4 \\ d \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.548216em;vertical-align:-2.024108em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em"><span style="top:-4.66em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.32833099999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span></span></span><span style="top:-3.135892em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span></span></span><span style="top:-1.6358920000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>设 A B 两事件， 已知 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0.5</mn><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0.6</mn><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mn>0.4</mn></mrow><annotation encoding="application/x-tex">P(A) = 0.5, P(B) = 0.6, P(B|\overline A) = 0.4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span></span></span></span><br>求 (1) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(\overline A B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span> (2) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(AB)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span> (3) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A \cup B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>×</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mn>0.2</mn></mrow><annotation encoding="application/x-tex">P(\overline A B) = P(\overline A) \times P(B|\overline A ) = 0.2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mord">∣</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span></span></span></span></p></blockquote><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∵</mo><mi>A</mi><mi>B</mi><mo>=</mo><mi>B</mi><mo>−</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo separator="true">,</mo><mi>B</mi><mo>⊃</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∴</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \because AB = B - \overline A B, B \supset \overline A B \\ \\ &amp; \therefore P(AB) = P(B) - P(\overline A B) \\ \\ &amp; P(A \cup B) = P(A) + P(B) - P(AB) \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.58666em;vertical-align:-3.54333em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.04333em"><span style="top:-6.04333em"><span class="pstrut" style="height:2.88333em"></span><span class="mord"></span></span><span style="top:-4.54333em"><span class="pstrut" style="height:2.88333em"></span><span class="mord"></span></span><span style="top:-3em"><span class="pstrut" style="height:2.88333em"></span><span class="mord"></span></span><span style="top:-1.5em"><span class="pstrut" style="height:2.88333em"></span><span class="mord"></span></span><span style="top:0"><span class="pstrut" style="height:2.88333em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.54333em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.04333em"><span style="top:-6.16em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05017em">B</span></span></span><span style="top:-3.11667em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord mathdefault">A</span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span><span style="top:-.11667000000000005em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.54333em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>设考生的报名表来自三个地区各有 10 份， 15 份， 25 份，其中女生分别为 3 份， 7 份， 5 份。随机从一地区，先后任取两份报名表。</p><p>求<br>(1) 先取出一份是女生的概率；<br>(2) 已知后取出的一份为男生的，而先取出的一份为女生的概率。</p><blockquote><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">B_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>：第 k 次取出的是女生 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">k = 1, 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>：考生第 i 个地区，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">i = 1, 2, 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.65952em;vertical-align:0"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">3</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(B_1) = P(B_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></munderover><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>×</mo><mfrac><mn>3</mn><mn>10</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>×</mo><mfrac><mn>7</mn><mn>15</mn></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>×</mo><mfrac><mn>5</mn><mn>25</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>29</mn><mn>90</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P(B_1) &amp;= \sum_{i = 1}^3 P(A_i)P(B_1|A_i) \\ \\ &amp;= \frac{1}{3} \times \frac{3}{10} + \frac{1}{3} \times \frac{7}{15} + \frac{1}{3} \times \frac{5}{25} \\ \\ &amp;= \frac{29}{90} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.993662em;vertical-align:-5.246831em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.746831em"><span style="top:-7.746831em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-5.329162em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span><span style="top:-3.347722em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span><span style="top:-1.5217219999999996em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span><span style="top:.45971799999999974em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.246831em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.746831em"><span style="top:-7.746831em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.347722em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mord">5</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mord">5</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.45971799999999974em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">9</span><span class="mord">0</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.246831em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><blockquote><p>条件概率</p></blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∵</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∴</mo><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mn>29</mn><mn>90</mn></mfrac><mo>=</mo><mfrac><mn>61</mn><mn>90</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; P(B_1|\overline {B_2}) = \frac{P(B_1 \overline {B_2})}{P(\overline {B_2})} \\ \\ &amp; \because P(B_1) = P(B_2) \\ \\ &amp; \therefore P(\overline {B_2}) = 1 - \frac{29}{90} = \frac{61}{90} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.6911em;vertical-align:-4.59555em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.09555em"><span style="top:-7.095550000000001em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"></span></span><span style="top:-4.932220000000001em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"></span></span><span style="top:-3.4322200000000005em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"></span></span><span style="top:-1.9322200000000005em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"></span></span><span style="top:.04922000000000015em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.59555em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.09555em"><span style="top:-7.095550000000001em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.56033em"><span style="top:-2.22667em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.02333em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.4322200000000005em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:.04922000000000015em"><span class="pstrut" style="height:3.56033em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">9</span><span class="mord">0</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">9</span><span class="mord">0</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">6</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.59555em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><mo>∪</mo><msub><mi>A</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo>∪</mo><msub><mi>A</mi><mn>2</mn></msub><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo>∪</mo><msub><mi>A</mi><mn>3</mn></msub><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \therefore B_1\overline {B_2} &amp;= \Omega(B_1 \overline {B_2}) \\ \\ &amp;= (A_1 \cup A_2 \cup A_3)(B_1 \overline {B_2}) \\ \\ &amp;= A_1B_1 \overline {B_2} \cup A_2 B_1 \overline {B_2} \cup A_3 B_1 \overline {B_2} \\ \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.62999em;vertical-align:-3.5649950000000006em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.064995em"><span style="top:-6.181665em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span><span style="top:-4.681665em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-3.1383349999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-1.6383349999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-.09500499999999956em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5649950000000006em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.064995em"><span style="top:-6.181665em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.1383349999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-.09500499999999956em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.5649950000000006em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></munderover><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>B</mi><mn>1</mn></msub><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></munderover><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mover accent="true"><msub><mi>B</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><msub><mi>B</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>7</mn><mn>9</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \therefore P(B_1 \overline {B_2}) &amp;= \sum_{i = 1}^3 P(A_i B_1 B_2) \\ \\ &amp;= \sum_{i = 1}^3 P(A_i)P(B_1 | A_i)P(\overline {B_2}| A_i B_1) \\ \\ &amp;= \frac{7}{9} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:12.065004000000002em;vertical-align:-5.782502000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.282502em"><span style="top:-8.282502000000001em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-5.864833000000001em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span><span style="top:-3.4037200000000007em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span><span style="top:-.9860510000000011em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span><span style="top:.9953890000000004em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.782502000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.282502em"><span style="top:-8.282502000000001em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.4037200000000016em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em"><span style="top:-1.872331em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8833300000000001em"><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em"><span class="pstrut" style="height:3em"></span><span class="overline-line" style="border-bottom-width:.04em"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:.9953889999999986em"><span class="pstrut" style="height:3.8011130000000004em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">9</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.782501999999999em"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>在 AB 电路中，元件的损坏是相互独立的。在 T 内，元件损坏的概率为</p></li></ol><table><thead><tr><th>元件</th><th>k1</th><th>k2</th><th>A_1</th><th>A_2</th><th>A_3</th></tr></thead><tbody><tr><td>几率</td><td>0.1</td><td>0.2</td><td>0.4</td><td>0.7</td><td>0.5</td></tr></tbody></table><blockquote><p>设 B 为断路事件</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>B</mi><mo>=</mo><msub><mi>k</mi><mn>1</mn></msub><mo>∪</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><msub><mi>A</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo>∪</mo><msub><mi>k</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} B = k_1 \cup (A_1A_2A_3) \cup k_2 \\ \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5000000000000002em;vertical-align:-.5000000000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1em"><span style="top:-3.16em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03148em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.03148em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.5000000000000002em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 随机变量及其分布</title>
      <link href="//Reviews/Probability/2.%20%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/"/>
      <url>//Reviews/Probability/2.%20%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="21-随机变量"><a class="markdownIt-Anchor" href="#21-随机变量"></a> 2.1 随机变量</h2><p>样本空间是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mi>e</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{e\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">{</span><span class="mord mathdefault">e</span><span class="mclose">}</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mi>X</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X = X(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span> 是定义在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span> 上的<strong>实值单值函数</strong>，则称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 为随机变量。<br>定义域是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span>，值域是实数集合<br><strong>注意是单值函数</strong>，也就是说，随机变量就是一个数。</p><p>可以使用随机变量来表示事件</p><blockquote><p>例如 1 表示 true , 0 表示 false</p></blockquote><a id="more"></a><h2 id="211-例题"><a class="markdownIt-Anchor" href="#211-例题"></a> 2.1.1 例题</h2><ol><li><p>盒子里有 5 个球， 2 白 ，3 黑，从中任取 3 个球</p><blockquote><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 为抽取黑球的个数，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">A:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">:</span></span></span></span> 全是黑球 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇒</mo><mi>X</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\Rightarrow X = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">3</span></span></span></span></p></blockquote></li></ol><h2 id="22-离散随机变量及其分布律"><a class="markdownIt-Anchor" href="#22-离散随机变量及其分布律"></a> 2.2 离散随机变量及其分布律</h2><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 的所有可能取值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>…</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_k(k = 1, 2 \ldots)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mclose">)</span></span></span></span><br>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><msub><mi>x</mi><mi>k</mi></msub><mo stretchy="false">}</mo><mo>=</mo><msub><mi>P</mi><mi>k</mi></msub><mtext> </mtext><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>…</mo></mrow><annotation encoding="application/x-tex">P\{X = x_k\} = P_k \ , k = 1, 2 \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8888799999999999em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:-.13889em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span></p><p>由概率性质可知：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>k</mi></msub><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P_k \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.83333em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:-.13889em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msub><mi>P</mi><mi>k</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{k = 1}^\infty P_k = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-.29971000000000003em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29971000000000003em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:-.13889em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></p></li></ol><p>上述性质称为分布律，也可用表格表示</p><h3 id="221-0-1-分布"><a class="markdownIt-Anchor" href="#221-0-1-分布"></a> 2.2.1 0 - 1 分布</h3><p>在<strong>一次试验中</strong><br>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 只可能取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0, 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span></span></span></span> 两个值（事件 A 出现或不出现），那么</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>x</mi><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo><mo>=</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mn>1</mn><mo>−</mo><mi>k</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P\{x = k\} = p^k(1 - p)^{1 - k}, k = 0, 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span></span></span></span></span></p><h3 id="222-伯努利试验二项分布"><a class="markdownIt-Anchor" href="#222-伯努利试验二项分布"></a> 2.2.2 伯努利试验（二项分布）</h3><p>设有一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span>，只有两个结果，现将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span></span></span></span> 进行 n 次独立的<strong>重复试验</strong>，称为 n 重伯努利试验。</p><p>伯努利试验满足二项分布：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup><mtext> </mtext><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>…</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">P\{X = k\} = C_n^k p^k (1 - p)^{n - k} \ , k = 0,1,2 \ldots n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8991079999999998em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span></span></span></span></span></p><p>简化为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(n, p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></p><h4 id="2221-例题"><a class="markdownIt-Anchor" href="#2221-例题"></a> 2.2.2.1 例题</h4><ol><li><p>仪器中有 5 块同类固体组件相互独立工作，每一块经 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span></span> 小时后损坏的概率为 p， 问： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.13889em">T</span></span></span></span> 小时后，其中有 3 块损坏的概率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span></p><blockquote><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">r, v, X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span>——损坏块数，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>∼</mo><mi>B</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X \sim B(s, p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span>，则：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mn>3</mn><mo stretchy="false">}</mo><mo>=</mo><msubsup><mi>C</mi><mn>5</mn><mn>3</mn></msubsup><msup><mi>p</mi><mn>3</mn></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">p \{X = 3\} = C_5^3 p^3 (1 - p)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">3</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-2.4518920000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24810799999999997em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li></ol><h3 id="223-泊松分布"><a class="markdownIt-Anchor" href="#223-泊松分布"></a> 2.2.3 泊松分布</h3><p>利用泊松定理，则有：</p><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lambda \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">n</span></span></span></span> 是任意正整数，设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>p</mi><mo>=</mo><mi>λ</mi></mrow><annotation encoding="application/x-tex">np = \lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault">λ</span></span></span></span>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 很小)，则<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>k</mi><mo>∈</mo><msup><mi>Z</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">\forall k \in Z^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.73354em;vertical-align:-.0391em"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.771331em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.771331em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>,则有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\lim_{n \rightarrow \infty} C_n^k p^k (1 - p)^{n - k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5991079999999998em;vertical-align:-.7em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.69444em"><span style="top:-2.1em;margin-left:0"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em"><span class="pstrut" style="height:2.7em"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.7em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8991079999999998em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>知：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>…</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac><mo stretchy="false">(</mo><mfrac><mi>λ</mi><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mi>λ</mi><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><msup><mi>λ</mi><mi>k</mi></msup><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>…</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><msup><mi>n</mi><mi>k</mi></msup></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mi>λ</mi><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mi>λ</mi><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} C_n^kp^k(1-p)^{n-k} &amp;= \dfrac{n(n-1)\ldots(n-k+1)}{k!}(\dfrac{\lambda}{n})^k(1-\dfrac{\lambda}{n})^{n-k} \\ \\ &amp;= \dfrac{\lambda^k}{k!}\dfrac{n(n-1)\ldots(n-k+1)}{n^k}(1-\dfrac{\lambda}{n})^{n}(1-\dfrac{\lambda}{n})^{-k} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.425108000000001em;vertical-align:-2.962554000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.462554em"><span style="top:-5.561661999999999em"><span class="pstrut" style="height:3.526108em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8991079999999998em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.7356619999999996em"><span class="pstrut" style="height:3.526108em"></span><span class="mord"></span></span><span style="top:-1.5495539999999992em"><span class="pstrut" style="height:3.526108em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.962554000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.462554em"><span style="top:-5.561661999999999em"><span class="pstrut" style="height:3.526108em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.549554em"><span class="pstrut" style="height:3.526108em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.526108em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7751079999999999em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.962554em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>定义：称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">r,v, X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span>，若</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo><mo>=</mo><mfrac><msup><mi>λ</mi><mi>k</mi></msup><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi><mo>…</mo></mrow><annotation encoding="application/x-tex">P\{X = k\}= \frac{\lambda^k}{k!} e^{-\lambda}, k = 0, 1, 2, \ldots , n \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.212108em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.526108em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">λ</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span></span></p><p>记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Π</mi><mo stretchy="false">(</mo><mi>λ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi(\lambda)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">Π</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mclose">)</span></span></span></span></p><h4 id="2231-例题"><a class="markdownIt-Anchor" href="#2231-例题"></a> 2.2.3.1 例题</h4><ol><li><p>例：在保险公司 2500 名同一年龄同社会阶层人参保，据统计在此类人中，每年每人死亡率为 0.002，每人参保在 1 月 1 日交 1200 元保费，而死亡时家属可以从保险公司领取 20 万保险金。求：(不计利息及管理费)</p><ol><li>保险公司亏本的概率</li><li>保险公司获利不少于 100 万的概率</li></ol><blockquote><p>死亡人数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>X</mi><mo>∼</mo><mi>B</mi><mo stretchy="false">(</mo><mn>2500</mn><mo separator="true">,</mo><mn>0.002</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r, v, X \sim B(2500, 0.002)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></p></blockquote><blockquote><p>亏本：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>200000</mn><mi>X</mi><mo>&gt;</mo><mn>3000000</mn><mo>→</mo><mi>X</mi><mo>&gt;</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">200000 X &gt; 3000000 \to X &gt; 15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">5</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>∴</mo><mi>p</mi><mo stretchy="false">{</mo><mi>X</mi><mo>&gt;</mo><mn>15</mn><mo stretchy="false">}</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>16</mn></mrow><mn>2500</mn></munderover><msubsup><mi>C</mi><mn>2500</mn><mi>k</mi></msubsup><mo>⋅</mo><mn>0.00</mn><msup><mn>2</mn><mi>k</mi></msup><mo>⋅</mo><mn>0.99</mn><msup><mn>8</mn><mrow><mn>2500</mn><mo>−</mo><mi>k</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≈</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≤</mo><mn>15</mn><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≈</mo><mn>1</mn><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mn>15</mn></munderover><mfrac><msup><mn>5</mn><mi>k</mi></msup><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mn>5</mn></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≈</mo><mn>1</mn><mo>−</mo><mn>0.998</mn><mo>…</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0.000069</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \therefore p\{X &gt; 15\} &amp;= \sum_{k=16}^{2500} C_{2500}^k \cdot 0.002^k \cdot 0.998^{2500 - k} \\ \\ &amp; \approx 1 - p\{X \le 15\} \\ \\ &amp; \approx 1 - \sum_{k=0}^{15}\dfrac{5^k}{k!}e^{-5} \\ \\ &amp; \approx 1 - 0.998\ldots \\ \\ &amp; = 0.000069 \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:17.306452em;vertical-align:-8.403226em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.903226em"><span style="top:-10.903226em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">p</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mord">5</span><span class="mclose">}</span></span></span><span style="top:-8.461113000000001em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span><span style="top:-6.961113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span><span style="top:-5.461113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span><span style="top:-2.999999999999999em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span><span style="top:-.557887em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span><span style="top:.942113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span><span style="top:2.442113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span><span style="top:3.942113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.403226em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.903226em"><span style="top:-10.903226em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.801113em"><span style="top:-1.8478869999999998em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8991079999999998em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">9</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-6.961113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">p</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mord">5</span><span class="mclose">}</span></span></span><span style="top:-2.999999999999999em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.801113em"><span style="top:-1.8478869999999998em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.526108em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">!</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.864108em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><span style="top:.942113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">9</span><span class="mord">8</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span><span style="top:3.942113em"><span class="pstrut" style="height:3.801113em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">6</span><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.403226em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>二进制传输信号，信道无记忆，误码率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.2</mn></mrow><annotation encoding="application/x-tex">0.2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span></span></span></span>，为了抗干扰，重复发送消息：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mn>01101</mn></mrow><annotation encoding="application/x-tex">S = 01101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，假设信道对每个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0, 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span></span></span></span>的干扰相互独立，问：</p><ol><li>重复 5 次 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span>, 能成功发送一次的概率。</li><li>为确保成功的概率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.99</mn></mrow><annotation encoding="application/x-tex">0.99</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">9</span></span></span></span>, 问至少应该重复发送多少次。</li></ol><blockquote><p>无记忆：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>p</mi><mo stretchy="false">{</mo><msub><mi>β</mi><mn>1</mn></msub><mo>…</mo><msub><mi>β</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>R</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>v</mi><mi>e</mi><mo stretchy="false">)</mo><mo>∣</mo><msub><mi>α</mi><mn>1</mn></msub><msub><mi>α</mi><mn>2</mn></msub><mo>…</mo><msub><mi>α</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>S</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>p</mi><mo stretchy="false">{</mo><msub><mi>β</mi><mn>1</mn></msub><mo>∣</mo><msub><mi>α</mi><mn>1</mn></msub><mo stretchy="false">}</mo><mo>⋅</mo><mi>p</mi><mo stretchy="false">{</mo><msub><mi>β</mi><mn>2</mn></msub><mo>∣</mo><msub><mi>α</mi><mn>2</mn></msub><mo stretchy="false">}</mo><mo>…</mo><mi>p</mi><mo stretchy="false">{</mo><msub><mi>β</mi><mi>m</mi></msub><mo>∣</mo><msub><mi>α</mi><mi>m</mi></msub><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; p\{\beta_1 \ldots \beta_m(Receive)\mid \alpha_1 \alpha_2 \ldots \alpha_m(Send)\} \\ \\ &amp; = p\{\beta_1 \mid \alpha_1\} \cdot p\{\beta_2 \mid \alpha_2\} \ldots p\{\beta_m \mid \alpha_m\} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em"><span style="top:-4.5em"><span class="pstrut" style="height:2.84em"></span><span class="mord"></span></span><span style="top:-3em"><span class="pstrut" style="height:2.84em"></span><span class="mord"></span></span><span style="top:-1.4999999999999991em"><span class="pstrut" style="height:2.84em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em"><span style="top:-4.66em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">p</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05278em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05278em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.0037em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.0037em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.0037em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mclose">}</span></span></span><span style="top:-1.6599999999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">p</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05278em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.0037em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault">p</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.05278em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:-.0037em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">p</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:.05278em">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.05278em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.0037em">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:-.0037em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0000000000000004em"><span></span></span></span></span></span></span></span></span></span></span></span></p><ol><li>引入一个合理的随机变量：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">r, v, X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span>(次数)，则，正确接收的次数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>X</mi><mo>∼</mo><mi>B</mi><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r, v, X \sim B(5, p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span> （<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span> 为每次发 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">S</span></span></span></span> 能正确收到的概率）</li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>p</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>R</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>v</mi><mi>e</mi><mtext> </mtext><mi>S</mi><mi mathvariant="normal">∣</mi><mi>S</mi><mi>e</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>S</mi><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mrow><mn>0</mn><mi mathvariant="normal">∣</mi><mn>0</mn></mrow><mi>P</mi><mrow><mn>1</mn><mi mathvariant="normal">∣</mi><mn>1</mn></mrow><mo>⋯</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mn>0.2</mn><msup><mo stretchy="false">)</mo><mn>5</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0.</mn><msup><mn>8</mn><mn>5</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0.328</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} p &amp;= P\{Receive \ S | Send \ S\} \\ \\ &amp;= P{0|0}P{1|1} \cdots \\ \\ &amp;= (1- 0.2)^5 \\ \\ &amp;= 0.8^5 \\ \\ &amp;=0.328 \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.548216000000002em;vertical-align:-6.524108000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.024108000000001em"><span style="top:-9.184108000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">p</span></span></span><span style="top:-7.684108em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-6.184108em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-4.684108em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-3.16em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-1.6599999999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-.13589199999999924em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:1.3641080000000008em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:2.8641080000000008em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.524108000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.024108000000001em"><span style="top:-9.184108000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.00773em">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mclose">}</span></span></span><span style="top:-6.184108em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord"><span class="mord">0</span><span class="mord">∣</span><span class="mord">0</span></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mord"><span class="mord">1</span><span class="mord">∣</span><span class="mord">1</span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">⋯</span></span></span><span style="top:-3.16em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span><span style="top:-.13589199999999924em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span><span style="top:2.8641080000000008em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord">2</span><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.524108000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><blockquote><ol start="2"><li></li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>S</mi><mi>u</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo stretchy="false">}</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≥</mo><mn>1</mn><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mn>0</mn><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><msubsup><mi>C</mi><mn>5</mn><mn>0</mn></msubsup><mn>0.32</mn><msup><mn>8</mn><mn>0</mn></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mn>0.328</mn><msup><mo stretchy="false">)</mo><mn>5</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0.863</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P\{Success\} &amp;= P\{X \ge 1\} \\ \\ &amp;= 1 - P\{X = 0\} \\ \\ &amp;= 1 - C_5^0 0.328^0 (1 - 0.328)^5 \\ \\ &amp;= 0.863 \\ \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.524108000000002em;vertical-align:-5.012054000000002em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.512054000000001em"><span style="top:-7.672054000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.05764em">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">c</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mclose">}</span></span></span><span style="top:-6.172054em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-4.672053999999999em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-3.1720539999999993em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-1.6479459999999992em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:-.14794599999999836em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span><span style="top:1.3520540000000016em"><span class="pstrut" style="height:3em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.012054000000002em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.512054000000001em"><span style="top:-7.672054000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mclose">}</span></span></span><span style="top:-4.672054em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mclose">}</span></span></span><span style="top:-1.6479460000000001em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord">2</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord">2</span><span class="mord">8</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8641079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span><span style="top:1.3520540000000008em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">8</span><span class="mord">6</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.012054000000001em"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><blockquote><ol start="3"><li></li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≥</mo><mn>1</mn><mo stretchy="false">}</mo><mo>=</mo><mn>0.99</mn><mo>=</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>0.672</mn><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo separator="true">,</mo><mi>n</mi><mo>=</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">P\{X \ge 1\} = 0.99 = 1 - (0.672)^n, n = 12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">9</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mord">7</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7143919999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mord">2</span></span></span></span></span></p></blockquote></li><li><p>电话交换机，每分钟呼叫次数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 服从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Π</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi(4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">Π</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span></span></span></span>，求：</p><ol><li>每分钟恰有 8 次呼叫的概率</li><li>每分钟不大于 10 次的概率</li></ol><blockquote><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>X</mi><mo>∼</mo><mi mathvariant="normal">Π</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r, v, X \sim \Pi(4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8777699999999999em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">Π</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo><mo>=</mo><mfrac><msup><mi>λ</mi><mi>k</mi></msup><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>…</mo></mrow><annotation encoding="application/x-tex">P\{X = k\} = \frac{\lambda^k}{k!} e^{-\lambda}, k = 0,1,2 \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.3879199999999998em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0429199999999998em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.9270285714285713em"><span style="top:-2.931em;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8491079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">λ</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8388800000000001em;vertical-align:-.19444em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span></span></span></span></li></ol></blockquote></li></ol><h3 id="224-超几何分布产品检验模型"><a class="markdownIt-Anchor" href="#224-超几何分布产品检验模型"></a> 2.2.4 超几何分布——产品检验模型</h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo stretchy="false">(</mo><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>D</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><msubsup><mi>C</mi><mi>M</mi><mi>k</mi></msubsup><msubsup><mi>C</mi><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msubsup></mrow><msubsup><mi>C</mi><mi>N</mi><mi>n</mi></msubsup></mfrac><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>l</mi><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; P\{X(Number \ of \ Defective) = k\} \\ \\ &amp; = \frac{C_M^k C_{N - M}^{n - k}}{C_N^n}, k = 0,1,2, \ldots, l \\ \\ &amp; l = \min(M, n) \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.910632000000001em;vertical-align:-4.205316000000001em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.705316000000001em"><span style="top:-7.496417000000001em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"></span></span><span style="top:-5.996417em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"></span></span><span style="top:-3.7053159999999994em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"></span></span><span style="top:-1.5857849999999991em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"></span></span><span style="top:-.08578499999999956em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.205316000000001em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.705316000000001em"><span style="top:-7.496417000000001em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.02778em">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:.03588em">v</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mclose">}</span></span></span><span style="top:-3.7053159999999994em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6311010000000001em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.6461920000000001em"><span style="top:-2.4064690000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span><span style="top:-3.0448000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29353099999999993em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7418620000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-2.424669em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">M</span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.275331em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8892389999999999em"><span style="top:-2.406469em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.10903em">M</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.351862em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9795309999999999em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span></span></span><span style="top:-.08578500000000044em"><span class="pstrut" style="height:3.631101em"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:.01968em">l</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:.10903em">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.205316em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>当</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>lim</mi><mo>⁡</mo><mrow><mi>N</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow><mfrac><mrow><msubsup><mi>C</mi><mi>M</mi><mi>k</mi></msubsup><msubsup><mi>C</mi><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msubsup></mrow><msubsup><mi>C</mi><mi>N</mi><mi>n</mi></msubsup></mfrac><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\lim{N \to \infty} \frac{C_M^k C_{N - M}^{n - k}}{C_N^n} = C_n^k p ^k (1 - p)^{n - k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.610632em;vertical-align:-.9795309999999999em"></span><span class="mop">lim</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">∞</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6311010000000001em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.6461920000000001em"><span style="top:-2.4064690000000004em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span></span></span><span style="top:-3.0448000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.29353099999999993em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.7418620000000002em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.849108em"><span style="top:-2.424669em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">M</span></span></span><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.275331em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8892389999999999em"><span style="top:-2.406469em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.10903em">N</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.10903em">M</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.351862em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9795309999999999em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.07153em">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8991079999999998em"><span style="top:-2.4530000000000003em;margin-left:-.07153em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.247em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-.25em"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8991079999999999em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>M</mi><mi>N</mi></mfrac><mo>→</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">\frac{M}{N} \to p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">N</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.10903em">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">→</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault">p</span></span></span></span></span></p><h2 id="23-随机变量的分布函数"><a class="markdownIt-Anchor" href="#23-随机变量的分布函数"></a> 2.3 随机变量的分布函数</h2><h3 id="231-定义"><a class="markdownIt-Anchor" href="#231-定义"></a> 2.3.1 定义</h3><p>设随机变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">X \in R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.00773em">R</span></span></span></span>, 则称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">F(x) = P\{X \le x\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">x</span><span class="mclose">}</span></span></span></span> 为随机变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 的分布函数。</p><h3 id="232-性质"><a class="markdownIt-Anchor" href="#232-性质"></a> 2.3.2 性质</h3><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为不减函数</p><blockquote><p>即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>&gt;</mo><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_2 \gt x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.6891em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.58056em;vertical-align:-.15em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span>，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≥</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x_2) \ge F(x_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><mi>X</mi><mo>&lt;</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">}</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\because F(x_2) - F(x_1) = P\{x_1 \lt X \lt x_2\} \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69224em;vertical-align:0"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span></p></blockquote></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \le F(x) \le 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.78041em;vertical-align:-.13597em"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span> (非负有界性)<br>且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(-\infty) = 0 = \lim_{x \to -\infty} F(x) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">∞</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.25833100000000003em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.208331em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>=</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">F(\infty) = 1 = \lim_{x \to \infty} F(x) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord">∞</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 是右连续的</p><blockquote><p>即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x + 0) = F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></p></blockquote></li><li><p>可导性</p></li></ol><h3 id="233-利用-fx-计算概率"><a class="markdownIt-Anchor" href="#233-利用-fx-计算概率"></a> 2.3.3 利用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 计算概率</h3><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><mi>X</mi><mo>≤</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">}</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P\{x_1 \lt X \le x_2\} = F(x_2) - F(x_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8193em;vertical-align:-.13597em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>&lt;</mo><mi>x</mi><mo stretchy="false">}</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P\{X \lt x\} = 1 - F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">x</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mi>x</mi><mo stretchy="false">}</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P\{X = x\} = F(x) - F(x - 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">x</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><mi>X</mi><mo>&lt;</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">}</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mn>0</mn><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P\{x_1 \lt X \lt x_2\} = F(x_2 - 0) - F(x_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ol><h3 id="234-例题"><a class="markdownIt-Anchor" href="#234-例题"></a> 2.3.4 例题</h3><p>设随机变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 的分布律为</p><table><thead><tr><th>X</th><th>-1</th><th>2</th><th>3</th><th>s</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">p_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">1/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span></td></tr></tbody></table><p>求：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span></span></span></span> 的分布函数</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">F(x) = P\{X \le x\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">x</span><span class="mclose">}</span></span></span></span><br>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&lt;</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x \lt -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.5782em;vertical-align:-.0391em"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn><mo>≤</mo><mi>x</mi><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">-1 \le x \lt 2, \ F(x) = P\{X = -1\} = \frac{1}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.78041em;vertical-align:-.13597em"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.5782em;vertical-align:-.0391em"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>X</mi><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">}</mo><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo><mo>∪</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mn>2</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">2 \le X \lt 3,\ F(x) = P\{X \le x\} = P\{X = -1 \} \cup P\{X = 2\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.78041em;vertical-align:-.13597em"></span><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72243em;vertical-align:-.0391em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">x</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mclose">}</span></span></span></span></p></blockquote><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&lt;</mo><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>4</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn><mo>≤</mo><mi>x</mi><mo>&lt;</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>3</mn><mn>4</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mo>≤</mo><mi>x</mi><mo>&lt;</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≤</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\therefore F(x) = \begin{cases} 0 &amp; x \lt -1 \\[2ex] \frac{1}{4} &amp; -1 \le x \lt 2 \\[2ex] \frac{3}{4} &amp; 2 \le x \lt 3 \\[2ex] 1 &amp; x \le 3 \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.69224em;vertical-align:0"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:8.400039999999999em;vertical-align:-3.9500200000000003em"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4500199999999985em"><span style="top:-.09998999999999958em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-.09998999999999958em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-.3999899999999994em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-.6999899999999992em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-.999989999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.299989999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5999899999999991em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8999899999999992em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999992em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500099999999995em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.300009999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.600009999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.900009999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.200009999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50001em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.8000099999999986em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.100009999999999em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.400009999999998em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.7000199999999985em"><span class="pstrut" style="height:3.15em"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9500200000000003em"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.423em"><span style="top:-6.423em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.121em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.819em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:.48300000000000043em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9230000000000005em"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.423em"><span style="top:-6.423em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-4.121em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">2</span></span></span><span style="top:-1.819em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">3</span></span></span><span style="top:.48300000000000043em"><span class="pstrut" style="height:3.008em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9230000000000005em"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></blockquote><blockquote><p>即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><msub><mi>x</mi><mi>k</mi></msub><mo>≤</mo><mi>x</mi></mrow></msub><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><msub><mi>x</mi><mi>k</mi></msub><mo stretchy="false">}</mo><mo>=</mo><msub><mo>∑</mo><mrow><msub><mi>x</mi><mi>k</mi></msub><mo>≤</mo><mi>x</mi></mrow></msub><msub><mi>p</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">F(x) = \sum_{x_k \le x}P\{X = x_k\} = \sum_{x_k \le x}p_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.15557em;vertical-align:-.40557em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.14546899999999996em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3448em"><span style="top:-2.3487714285714287em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15122857142857138em"><span></span></span></span></span></span></span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.40557em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.15557em;vertical-align:-.40557em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.14546899999999996em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.3448em"><span style="top:-2.3487714285714287em;margin-left:0;margin-right:.07142857142857144em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15122857142857138em"><span></span></span></span></span></span></span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.40557em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.33610799999999996em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.03148em">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≤</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">{</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mo>&lt;</mo><mi>X</mi><mo>≤</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">{</mo><mn>2</mn><mo>≤</mo><mi>X</mi><mo>≤</mo><mn>3</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>&lt;</mo><mn>2</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">P\{X \le \frac{1}{2} \}, P\{\frac{3}{2} \lt X \le \frac{1}{2}\}, P\{2 \le X \le 3\}, P\{X \lt 2\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8193em;vertical-align:-.13597em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.8193em;vertical-align:-.13597em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">3</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mclose">}</span></span></span></span> 的概率。</p><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≤</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">}</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P\{X \le \frac{1}{2}\} = F(\frac{1}{2}) = \frac{1}{4} \\ \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-.90372em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4037200000000003em"><span style="top:-3.4037200000000003em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.90372em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">{</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mo>&lt;</mo><mi>X</mi><mo>≤</mo><mfrac><mn>5</mn><mn>2</mn></mfrac><mo stretchy="false">}</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mfrac><mn>5</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo>−</mo><mfrac><mn>1</mn><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P\{\frac{3}{2} \lt X \le \frac{5}{2}\} &amp;= F(\frac{5}{2}) - F(\frac{3}{2}) \\ &amp;= \frac{3}{4} - \frac{1}{4} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.61488em;vertical-align:-2.05744em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.55744em"><span style="top:-4.55744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.05744em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.55744em"><span style="top:-4.55744em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.05744em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">{</mo><mn>2</mn><mo>≤</mo><mi>X</mi><mo>≤</mo><mn>3</mn><mo stretchy="false">}</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mn>2</mn><mo stretchy="false">}</mo><mo>+</mo><mi>P</mi><mo stretchy="false">{</mo><mn>2</mn><mo>&lt;</mo><mi>X</mi><mo>≤</mo><mn>3</mn><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>+</mo><mi>F</mi><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><mn>3</mn><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>3</mn><mn>4</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} P\{2 \le X \le 3\} &amp;= P\{X = 2\} + P\{2 \lt X \le 3\} \\ &amp;= \frac{1}{2} + F(3) - F(2) \\ &amp;= \frac{1}{2} + 1 - \frac{3}{4} \\ &amp;= \frac{3}{4} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.422320000000001em;vertical-align:-3.9611600000000005em"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4611600000000005em"><span style="top:-6.9426000000000005em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">3</span><span class="mclose">}</span></span></span><span style="top:-4.96116em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-2.653719999999999em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span><span style="top:-.3462799999999996em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9611600000000005em"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4611600000000005em"><span style="top:-6.9426000000000005em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">2</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord">2</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord">3</span><span class="mclose">}</span></span></span><span style="top:-4.96116em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord mathdefault" style="margin-right:.13889em">F</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-2.653719999999999em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-.3462799999999996em"><span class="pstrut" style="height:3.32144em"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9611600000000005em"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>&lt;</mo><mn>2</mn><mo stretchy="false">}</mo><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>≤</mo><mn>2</mn><mo stretchy="false">}</mo><mo>−</mo><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mn>2</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">P\{X \lt 2\} = \frac{1}{4} = P\{X \le 2\} - P\{X = 2\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mclose">}</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.13889em">P</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:.07847em">X</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">2</span><span class="mclose">}</span></span></span></span></span></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率的历史</title>
      <link href="//Reviews/Probability/%E6%A6%82%E7%8E%87%E7%9A%84%E5%8E%86%E5%8F%B2/"/>
      <url>//Reviews/Probability/%E6%A6%82%E7%8E%87%E7%9A%84%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-起源"><a class="markdownIt-Anchor" href="#1-起源"></a> 1. 起源</h2><h3 id="11-远古时期"><a class="markdownIt-Anchor" href="#11-远古时期"></a> 1.1 远古时期</h3><p>概率和概率论起源于游戏之中。</p><a id="more"></a><p>在远古时期，就有古人用猪或者羊的距骨来玩投掷距骨的游戏。<br>由于距骨能投掷出四面，其很可能就是骰子的前身。<br>古埃及发掘出的陶器甚至还显示古埃及人就已经在玩一个叫做 “Hounds and Jackals” 的游戏，这与现在的印度游戏“蛇梯棋”（一个用骰子来决定步数 的棋类游戏）十分相像。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p>但是直到中世纪甚至文化复兴时期，虽然当时有投注赔率和保险业保险费用的计算需要，但是仍然没有产生相应的方法论来计算赔率或者保险费用。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h3 id="12-概率论的创立"><a class="markdownIt-Anchor" href="#12-概率论的创立"></a> 1.2 概率论的创立</h3><p>真正的数学意义上的概率论的创立是由卡当诺(Jerome Cardan)、帕斯卡(Blaise Pascal)、费马(Pierre de Fermat) 完成的。</p><p>卡当诺的 <em>Games of Chance</em> 一书写于 1564 年（但直到 1663 年才发表），他在书中描述了他对于丢骰子等赌博游戏的研究，其中他证明了利用期望结果和非期望结果的<strong>比值</strong>来定义赔率的有效性，这意味着<strong>一个事件的概率是该事件的发生次数和总可能结果的比值</strong>这一命题得到证明<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。此书被认为是第一部概率论著作，对现代概率论的创立有着重要作用。</p><p>真正的<strong>数学意义上的概率论</strong>的创立源于<strong>帕斯卡</strong>受某位热衷于赌博的朋友的影响，同<strong>费马</strong>通信讨论了这一问题。<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>其具体问题是：基于赢得赌局的概率，两个提前结束游戏的玩家如何在给定现在赌局的情形下公平的分赌注。这一讨论中提到了<strong>期望</strong>这一重要的概念。</p><h3 id="13-概率论的诞生"><a class="markdownIt-Anchor" href="#13-概率论的诞生"></a> 1.3 概率论的诞生</h3><p>此后，在帕斯卡的影响下，惠更斯于 1657 年发表了 <em>De ratiociniis in ludo aleae</em> （英文译作 “On Reasoning in Games of Chance”，中文一般译作《论赌博中的计算》），此书中结合了费马和帕斯卡的观点，在“点数分配”问题的研究中，提出了<strong>期望</strong>这一概念和其相关的理论。</p><p>《论赌博中的计算》一书的发表，标志着现代概率论的正式诞生。此书也被认为是现代概率论的第一本书。</p><h2 id="2-18-世纪时期"><a class="markdownIt-Anchor" href="#2-18-世纪时期"></a> 2. 18 世纪时期</h2><p>在 18 世纪时期，人们开始使用数学工具进行概率的计算，概率和概率论开始渐渐成为数学的一个重要分支，概率开始拥有了良好的数学基础。<br>通过数学工具的运用，一些较为复杂的概率模型得以得到计算。</p><p>18 世纪时期的著作中，1713 年发表的雅各布·伯努利(Jakob I. Bernoulli)的《猜度术》(<em>Ars Conjectandi</em>) 是 18 世纪概率论发展的里程碑。<br>书中不仅完善和拓展了惠更斯的期望值理论和公式，提出了伯努利实验和概率的古典概型，而且提出了伯努利数<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>和伯努利定理，这是大数定律<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>的最早形式。</p><blockquote><p>惠更斯所提出的期望值公式为<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p></blockquote><blockquote><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mfrac><mrow><msub><mi>p</mi><mn>0</mn></msub><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>p</mi><mn>1</mn></msub><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>p</mi><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub></mrow><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>+</mo><msub><mi>p</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>p</mi><mi>n</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">E = \frac{p_0a_0 + p_1a_1 + \cdots + p_na_n}{p_1 + p_2 + \cdots + p_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.05764em">E</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.1407700000000003em;vertical-align:-.8804400000000001em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.30110799999999993em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.8804400000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></blockquote><blockquote><p>伯努利通过假设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.31166399999999994em"><span style="top:-2.5500000000000003em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em"><span></span></span></span></span></span></span></span></span></span> 是互不相容的事件的概率，因此这就意味上式的分母为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">1</span></span></span></span>，从而使得惠更斯的公式得到简化。</p></blockquote><h2 id="3-19-世纪时期"><a class="markdownIt-Anchor" href="#3-19-世纪时期"></a> 3. 19 世纪时期</h2><p>时间来到 19 世纪，19 世纪的天文学发展使得统计学和概率学说的应用越发广泛，此时，概率论的研究方法也越来越多的应用到了统计学上。<br>同时，19 世纪的几个天才数学家也促进了概率论的长足发展。</p><h3 id="31-高斯"><a class="markdownIt-Anchor" href="#31-高斯"></a> 3.1 高斯</h3><p>其中之一便是高斯(Gauss)，高斯在数学方面的天赋是独特的，被称为“数学界的狐狸”。他于 1801 年使用基于正态误差分布的最小二乘法成功计算出了谷神星小行星的轨道（该行星于 1801 年 12 月 31 日夜晚被再次发现），并于 1809 年经过完善了相关数学理论后，发表了这一计算方法。在这年发表的文章中，高斯通过论证</p><p><strong>误差分布导出的极大似然估计 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.36687em;vertical-align:0"></span><span class="mrel">=</span></span></span></span> 算术平均值</strong></p><p>并证明了唯一满足这一性质的概率密度函数为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt><mi>σ</mi></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">f(x) = \frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{x^2}{2\sigma^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-.93em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em"><span style="top:-2.2027799999999997em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.90722em"><span class="svg-align" style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord" style="padding-left:.833em"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:.03588em">π</span></span></span><span style="top:-2.86722em"><span class="pstrut" style="height:3em"></span><span class="hide-tail" style="min-width:.853em;height:1.08em"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.13278em"><span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:.03588em">σ</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.93em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.24644em"><span style="top:-3.4534200000000004em;margin-right:.05em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1328857142857145em"><span style="top:-2.5061857142857145em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.9384399999999999em"><span style="top:-2.93844em;margin-right:.1em"><span class="pstrut" style="height:2.64444em"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em"><span class="pstrut" style="height:3em"></span><span class="frac-line mtight" style="border-bottom-width:.049em"></span></span><span style="top:-3.384em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em"><span style="top:-3.04844em;margin-right:.1em"><span class="pstrut" style="height:2.64444em"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.49381428571428565em"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>这就是正态分布的概率密度函数。</p><p>但是高斯的数学证明部分并不完善，有种循环论证的味道：因为算术平均是优良的，所以误差符合正态分布；反过来，又基于正态分布来推导出最小二乘法和算术平均来说明其优良性。<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p><h3 id="32-拉普拉斯"><a class="markdownIt-Anchor" href="#32-拉普拉斯"></a> 3.2 拉普拉斯</h3><p>此时便轮到拉普拉斯出场了，拉普拉斯也是著名的数学家，他发现的<strong>拉普拉斯变换</strong>和<strong>拉普拉斯方程</strong>在现今的图像处理等领域得到了广泛的运用。</p><p>拉普拉斯在看到高斯发表的文章后，通过结合中心极限定理，提出了元误差解释，证明了正态分布的正确性。并在《概率的分析理论》(Théorie analytique des probabilités) 一书中结合了类似<strong>矩母函数</strong>、<strong>最小二乘法</strong>、<strong>归纳概率</strong>、<strong>假设检验</strong>等许多基本的统计学和概率论的理论。</p><p>同时，拉普拉斯也发现了形式为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>m</mi><mn>2</mn></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mi>m</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi></mrow></msup></mrow><annotation encoding="application/x-tex">f(x) = \frac{m}{2}e^{-m|x|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.938em"><span style="top:-3.113em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">m</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>的概率密度分布函数，并在之后被命名为<strong>拉普拉斯分布</strong></p><h3 id="33-19-世纪末"><a class="markdownIt-Anchor" href="#33-19-世纪末"></a> 3.3 19 世纪末</h3><p>到 19 世纪末为止，概率论与统计学的结合愈发紧密，在统计力学领域，波尔茨曼(Ludwig Eduard Boltzmann)和吉布斯(Josiah Willard Gibbs)利用概率论的方法，成功地解释了气体的性质，例如气体是随机运动的粒子。</p><p>有趣的是，概率学的历史作为一项独立的分支，在这个时期也建立了起来。<br>其标志便是托尔亨特(Isaac Todhunter)于 1865 年发表了其著名的著作 <em>History of the Mathematical Theory of Probability from the Time of Pascal to that of Lagrange</em></p><h2 id="4-20-世纪时期"><a class="markdownIt-Anchor" href="#4-20-世纪时期"></a> 4. 20 世纪时期</h2><p>20 世纪时期，概率论和概率学说开始迅猛发展，公理体系建立起来，应用更为广泛，同时与其他科学领域的交叉也更为深入。</p><h3 id="41-概率与统计"><a class="markdownIt-Anchor" href="#41-概率与统计"></a> 4.1 概率与统计</h3><p>到了 20 世纪之后，由于统计学对<strong>假设检验</strong>的重视，概率论和统计学变得越发不可分割。现今，假设检验的统计方法已经广泛地应用到生物学，物理学和药物的临床试验等科学研究中。<br>假设检验需要检测样本概率的显著性水平，从而判断是否接受统计假设。</p><h3 id="42-概率与物理学"><a class="markdownIt-Anchor" href="#42-概率与物理学"></a> 4.2 概率与物理学</h3><p>随着 20 世纪物理学进入微观领域的研究，概率论的随机过程领域的研究也有所进展。例如为了描述布朗运动（液体中的悬浮颗粒的运动），马可罗夫过程被提出，随后应用范围不断拓宽，现今马可罗夫过程已经应用于统计、生物学和计算机互联网中。</p><h3 id="43-概率与金融"><a class="markdownIt-Anchor" href="#43-概率与金融"></a> 4.3 概率与金融</h3><p>同时，由于 20 世纪前期经济的发展和马可罗夫过程的提出，为描述股票的随机波动提供了复杂的概率模型，从而也促进了金融数学的发展，并由此产生了布莱克-舒尔模型(BS Model)、期权定价等一系列金融工具<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup></p><h3 id="44-概率的解释"><a class="markdownIt-Anchor" href="#44-概率的解释"></a> 4.4 概率的解释</h3><p>20 世纪同时也见证了关于“概率的解释”的争端，在 20 世纪中期，概率被倾向于解释为 <strong>大量重复试验的频率的趋近值</strong>。</p><p>而在 20 世纪末期，贝叶斯概率的观点得到复兴，贝叶斯概率学派的观点倾向于将概率定义为<strong>概率是某人对一个命题的信任程度</strong></p><p>两者的主要区别在于，频率学派主要以<strong>事件</strong>作为建模主体，而贝叶斯学派以<strong>观察者的知识</strong>作为概率的建模主体。观察者首先为事件赋予一个概率，并通过观察结果来校正概率。</p><blockquote><p>例如扔 100 次硬币，20 次正面，80 次反面。频率学派认为扔第 101 次的概率为 0.5，而贝叶斯学派认为概率应为 0.8</p></blockquote><h3 id="45-概率公理"><a class="markdownIt-Anchor" href="#45-概率公理"></a> 4.5 概率公理</h3><p>1933 年，安德雷·柯尔莫哥洛夫(Andrey Nikolaevich Kolmogorov) 提出了著名的概率公理，这解决了在具有<strong>无限的可能结果时</strong>的概率的数学处理问题。</p><h3 id="46-概率与计算机科学"><a class="markdownIt-Anchor" href="#46-概率与计算机科学"></a> 4.6 概率与计算机科学</h3><p>在 20 年代中后期，由于电子计算机的发明和核武器研制的需要，冯·诺伊曼，斯塔尼斯拉夫·乌拉姆和尼古拉斯·梅特罗波利斯提出了基于概率统计的蒙特卡洛方法。<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup><br>其中心观点是利用随机数通过计算机模拟计算得到随机过程。</p><blockquote><p>在解决实际问题的时候应用蒙特卡洛方法主要有两部分工作：<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup></p></blockquote><blockquote><ol><li>用蒙特卡洛方法模拟某一过程时，需要产生各种概率分布的随机变量。</li></ol></blockquote><blockquote><ol start="2"><li>用统计方法把模型的数字特征估计出来，从而得到实际问题的数值解。</li></ol></blockquote><h2 id="5-21-世纪后"><a class="markdownIt-Anchor" href="#5-21-世纪后"></a> 5. 21 世纪后</h2><p>在 21 世纪后，概率和概率论随着机器学习和神经网络等计算机技术的发展，应用范围越加宽广。</p><p>2006 年之后，雷米·库洛姆（Remi Coulom）提出了基于蒙特卡洛方法的蒙特卡洛搜索树算法。<br>随后，这一算法被广泛应用到计算机围棋领域。</p><p>2008 年，MoGo 在九路围棋中达到段位水平，2012 年 1 月，Zen 程序在19路围棋上以 3:1 击败二段棋手约翰·特朗普(John Tromp)，2016 年 3 月 使用蒙特卡洛算法和深度学习的 AlphaGo 程序在五番棋比赛中以 4:1 击败韩国九段棋手李世乭，Goranking 跃居世界第二。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>F. N. David (1962), <span class="exturl" data-url="aHR0cHM6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP2lkPUIyR0NqZ0VBQ0FBSiZhbXA7ZHE9aXNibjo5NzgwODUyNjQxNzEyJmFtcDtobD1lbiZhbXA7c2E9WCZhbXA7dmVkPTBhaFVLRXdpVDBmTzl4OXpNQWhWVzJHTUtIYTloQ09RUTZBRUlIVEFB" title="https://books.google.com/books?id=B2GCjgEACAAJ&amp;dq=isbn:9780852641712&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwiT0fO9x9zMAhVW2GMKHa9hCOQQ6AEIHTAA">Games, Gods and Gambling<i class="fa fa-external-link"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Franklin, <em>Science of Conjecture</em>, ch. 11. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>P. Chance magazine (2012) <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS91cmw/c2E9dCZhbXA7cmN0PWomYW1wO3E9JmFtcDtlc3JjPXMmYW1wO3NvdXJjZT13ZWImYW1wO2NkPTEmYW1wO2NhZD1yamEmYW1wO3VhY3Q9OCZhbXA7dmVkPTBhaFVLRXdpWG11Zm5rdDNNQWhWSDVHTUtIWnVoQ29NUUZnZ2RNQUEmYW1wO3VybD1odHRwJTNBJTJGJTJGd3d3LmNvbHVtYmlhLmVkdSUyRn5wZzIxMTMlMkZpbmRleF9maWxlcyUyRkdvcnJvb2NodXJuLVNvbWUlMjUyMExhd3MucGRmJmFtcDt1c2c9QUZRakNORlBSS3puaEVpUFAtRVpMTWNVVU5CNGxaRTViZyZhbXA7c2lnMj1Qb2p0VUdaNzdVeDFudGRBcmp3U2xB" title="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiXmufnkt3MAhVH5GMKHZuhCoMQFggdMAA&amp;url=http%3A%2F%2Fwww.columbia.edu%2F~pg2113%2Findex_files%2FGorroochurn-Some%2520Laws.pdf&amp;usg=AFQjCNFPRKznhEiPP-EZLMcUUNB4lZE5bg&amp;sig2=PojtUGZ77Ux1ntdArjwSlA">Some laws and problems in classical probability and how Cardano anticipated them Gorrochum<i class="fa fa-external-link"></i></span> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>O’Connor, J. J.; Robertson, E. F… “The MacTutor History of Mathematics archive: Pierre de Fermat” <span class="exturl" data-url="aHR0cDovL3d3dy1ncm91cHMuZGNzLnN0LWFuZC5hYy51ay9+aGlzdG9yeS9CaW9ncmFwaGllcy9GZXJtYXQuaHRtbA==" title="http://www-groups.dcs.st-and.ac.uk/~history/Biographies/Fermat.html">http://www-groups.dcs.st-and.ac.uk/~history/Biographies/Fermat.html<i class="fa fa-external-link"></i></span> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>伯努利数最先由伯努利研究，棣莫弗以他的名字来命名，其计算公式为: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>m</mi></msubsup><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow><mi>j</mi></mfrac><mo fence="true">)</mo></mrow><msub><mi>B</mi><mi>j</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_{j = 0}^{m}{m + 1 \choose j}B_j = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3762159999999999em;vertical-align:-.481108em"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-.0000050000000000050004em">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.804292em"><span style="top:-2.40029em;margin-left:0;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.43581800000000004em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.895108em"><span style="top:-2.3550000000000004em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span style="top:-3.144em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.481108em"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0"><span class="delimsizing size1">)</span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:.05017em">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em"><span style="top:-2.5500000000000003em;margin-left:-.05017em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.286108em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">0</span></span></span></span> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p>大数定律描述相当多次的重复实验的结果，其结果趋向于期望值 <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXJzX0NvbmplY3RhbmRp" title="https://en.wikipedia.org/wiki/Ars_Conjectandi">https://en.wikipedia.org/wiki/Ars_Conjectandi<i class="fa fa-external-link"></i></span> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li><li id="fn8" class="footnote-item"><p>靳志辉(2012 年 11 月 8 日) <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS91cmw/c2E9dCZhbXA7cmN0PWomYW1wO3E9JmFtcDtlc3JjPXMmYW1wO3NvdXJjZT13ZWImYW1wO2NkPTImYW1wO3ZlZD0wYWhVS0V3amJpYnFWOGR6TUFoVUcyV01LSGYwdUFSOFFGZ2drTUFFJmFtcDt1cmw9aHR0cCUzQSUyRiUyRnd3dy5tZWQubWNnaWxsLmNhJTJGZXBpZGVtaW9sb2d5JTJGaGFubGV5JTJGYmlvczYwMSUyRk1lYW4tUXVhbnRpbGUlMkZpbnRyby1ub3JtYWwtZGlzdHJpYnV0aW9uLTIucGRmJmFtcDt1c2c9QUZRakNOSDZRVGhwaE5OTkt6RGxaSWpNaWlCMl9Tb1A5ZyZhbXA7c2lnMj12UXdxa0hUQjc4UjJoNVVsdnJ5UE1BJmFtcDtidm09YnYuMTIyMTI5Nzc0LGQuY0dj" title="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0ahUKEwjbibqV8dzMAhUG2WMKHf0uAR8QFggkMAE&amp;url=http%3A%2F%2Fwww.med.mcgill.ca%2Fepidemiology%2Fhanley%2Fbios601%2FMean-Quantile%2Fintro-normal-distribution-2.pdf&amp;usg=AFQjCNH6QThphNNNKzDlZIjMiiB2_SoP9g&amp;sig2=vQwqkHTB78R2h5UlvryPMA&amp;bvm=bv.122129774,d.cGc">正态分布的前世今生<i class="fa fa-external-link"></i></span> <a href="#fnref8" class="footnote-backref">↩︎</a></p></li><li id="fn9" class="footnote-item"><p>Bernstein, Against the Gods, ch. 18. <a href="#fnref9" class="footnote-backref">↩︎</a></p></li><li id="fn10" class="footnote-item"><p>Metropolis, Nicholas; Stanislaw Ulam (1949) <span class="exturl" data-url="aHR0cDovL2hvbWUuZ3d1LmVkdS9+c3Ryb3VkL2NsYXNzaWNzL01ldHJvcG9saXNVbGFtNDkucGRm" title="http://home.gwu.edu/~stroud/classics/MetropolisUlam49.pdf">The Monte Carlo method<i class="fa fa-external-link"></i></span> <a href="#fnref10" class="footnote-backref">↩︎</a></p></li><li id="fn11" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JTkyJTk5JUU1JTlDJUIwJUU1JThEJUExJUU3JUJFJTg1JUU2JTk2JUI5JUU2JUIzJTk1" title="https://zh.wikipedia.org/wiki/%E8%92%99%E5%9C%B0%E5%8D%A1%E7%BE%85%E6%96%B9%E6%B3%95">蒙特卡洛方法<i class="fa fa-external-link"></i></span> <a href="#fnref11" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
